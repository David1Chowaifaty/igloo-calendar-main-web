/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { TCarouselSlides } from "./components/ui/ir-carousel/carousel";
import { IDateModifiers } from "./components/ir-date-range/ir-date-range.types";
import { Locale } from "date-fns";
import { IExposedProperty, RoomType } from "./models/property";
import { IExposedProperty as IExposedProperty1 } from "./components.d";
import { TIcons } from "./components/ui/ir-icons/icons";
import { ICurrency, IExposedLanguages } from "./models/common";
import { Placement } from "@popperjs/core";
import { TAuthNavigation } from "./components/ir-auth/auth.types";
export { TCarouselSlides } from "./components/ui/ir-carousel/carousel";
export { IDateModifiers } from "./components/ir-date-range/ir-date-range.types";
export { Locale } from "date-fns";
export { IExposedProperty, RoomType } from "./models/property";
export { IExposedProperty as IExposedProperty1 } from "./components.d";
export { TIcons } from "./components/ui/ir-icons/icons";
export { ICurrency, IExposedLanguages } from "./models/common";
export { Placement } from "@popperjs/core";
export { TAuthNavigation } from "./components/ir-auth/auth.types";
export namespace Components {
    interface IrAdultChildCounter {
        "adultCount": number;
        "childrenCount": number;
        "maxAdultCount": number;
        "maxChildrenCount": number;
        "minAdultCount": number;
        "minChildrenCount": number;
    }
    interface IrAlertDialog {
        "closeModal": () => Promise<void>;
        "openModal": () => Promise<void>;
    }
    interface IrAuth {
    }
    interface IrAvailibilityHeader {
    }
    interface IrBookingCode {
    }
    interface IrButton {
        "buttonClassName": string;
        "buttonId": string;
        "buttonStyles": Partial<CSSStyleDeclaration>;
        "disabled": boolean;
        "haveLeftIcon": boolean;
        "isLoading": boolean;
        "label": string;
        "name": string;
        "size": 'sm' | 'md' | 'lg';
        "type": 'button' | 'submit' | 'reset' | 'menu';
        "variants": 'default' | 'outline' | 'secondary' | 'destructive' | 'ghost' | 'link' | 'icon' | 'ghost-primary' | 'outline-primary';
    }
    interface IrCarousel {
        "slides": TCarouselSlides[];
    }
    interface IrCheckbox {
        "checkboxId": string;
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "name": string;
    }
    interface IrDatePopup {
        "dates": { start: Date | null; end: Date | null };
    }
    interface IrDateRange {
        "dateModifiers": IDateModifiers;
        "fromDate": Date | null;
        "locale": Locale;
        "maxDate": Date;
        "maxSpanDays": number;
        "minDate": Date;
        "showPrice": boolean;
        "toDate": Date | null;
    }
    interface IrDialog {
        "closeModal": () => Promise<void>;
        "openModal": () => Promise<void>;
    }
    interface IrDrawer {
        "contained": boolean;
        "hide": () => Promise<void>;
        "label": string;
        "noHeader": boolean;
        "open": boolean;
        "placement": 'top' | 'right' | 'bottom' | 'left';
        "show": () => Promise<void>;
    }
    interface IrDropdown {
        "dropdownTitle": string;
        "itemNames": IItems[];
        "rtl": boolean;
        "search": boolean;
    }
    interface IrFacilities {
        "properties": IExposedProperty;
    }
    interface IrFooter {
        "exposedProperty": IExposedProperty;
    }
    interface IrGallery {
        "images": string[];
        "totalImages": number;
    }
    interface IrGoogleMaps {
    }
    interface IrIcons {
        "name": TIcons;
        "svgClassName": string;
    }
    interface IrInput {
        "autocomplete": string;
        "autofocus": boolean;
        "class": string;
        "disabled": boolean;
        "error": boolean;
        "inputId": string;
        "inputStyles": Partial<CSSStyleDeclaration>;
        "inputid": string;
        "leftIcon": boolean;
        "max": string | number;
        "maxlength": number;
        "min": string | number;
        "multiple": boolean;
        "name": string;
        "pattern": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "size": number;
        "step": string | number;
        "type": | 'button'
    | 'checkbox'
    | 'color'
    | 'date'
    | 'datetime-local'
    | 'email'
    | 'file'
    | 'hidden'
    | 'image'
    | 'month'
    | 'number'
    | 'password'
    | 'radio'
    | 'range'
    | 'reset'
    | 'search'
    | 'submit'
    | 'tel'
    | 'text'
    | 'time'
    | 'url'
    | 'week';
        "value": string;
    }
    interface IrInterceptor {
        "handledEndpoints": string[];
    }
    interface IrLanguagePicker {
        "currencies": ICurrency[];
        "languages": IExposedLanguages[];
    }
    interface IrModal {
        "closeModal": () => Promise<void>;
        "openModal": () => Promise<void>;
    }
    interface IrNav {
        "currencies": ICurrency[];
        "exposed_property": IExposedProperty;
        "languages": IExposedLanguages[];
        "logo": string;
        "website": string;
    }
    interface IrPopover {
        "active": boolean;
        "placement": Placement;
        "stopListeningForOutsideClicks": boolean;
        "toggleVisibility": () => Promise<void>;
        "trigger_label": string;
    }
    interface IrPropertyGallery {
        "exposed_property": IExposedProperty;
        "property_state": 'carousel' | 'gallery';
        "roomType": RoomType;
    }
    interface IrSelect {
        "data": { id: string | number; value: string }[];
        "label": string;
        "select_id": string;
        "value": string | number;
        "variant": 'double-line' | 'default';
    }
    interface IrSheet {
        "closeSheet": () => Promise<void>;
        "hideCloseButton": boolean;
        "open": boolean;
        "openSheet": () => Promise<void>;
    }
    interface IrSignin {
    }
    interface IrSignup {
    }
    interface IrSwitch {
        "checked": boolean;
        "disabled": boolean;
        "switchId": string;
    }
    interface IrTestcmp {
        "baseUrl": string;
        "propertyId": number;
        "token": string;
    }
    interface IrTextarea {
        "autocomplete": string;
        "autofocus": boolean;
        "class": string;
        "disabled": boolean;
        "error": boolean;
        "inputId": string;
        "inputid": string;
        "leftIcon": boolean;
        "max": string | number;
        "maxlength": number;
        "min": string | number;
        "multiple": boolean;
        "name": string;
        "pattern": string;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "size": number;
        "step": string | number;
        "value": string;
    }
    interface IrTooltip {
        "customSlot": boolean;
        "message": string;
        "withHtml": boolean;
    }
    interface MyComponent {
    }
}
export interface IrAdultChildCounterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAdultChildCounterElement;
}
export interface IrAuthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrAuthElement;
}
export interface IrBookingCodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrBookingCodeElement;
}
export interface IrButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrButtonElement;
}
export interface IrCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCarouselElement;
}
export interface IrCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrCheckboxElement;
}
export interface IrDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDateRangeElement;
}
export interface IrDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDialogElement;
}
export interface IrDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDrawerElement;
}
export interface IrDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrDropdownElement;
}
export interface IrGalleryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrGalleryElement;
}
export interface IrInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrInputElement;
}
export interface IrLanguagePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrLanguagePickerElement;
}
export interface IrPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrPopoverElement;
}
export interface IrSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSelectElement;
}
export interface IrSheetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSheetElement;
}
export interface IrSigninCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSigninElement;
}
export interface IrSignupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSignupElement;
}
export interface IrSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrSwitchElement;
}
export interface IrTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIrTextareaElement;
}
declare global {
    interface HTMLIrAdultChildCounterElementEventMap {
        "addAdultsAndChildren": { adult_nbr: number; child_nbr: number };
    }
    interface HTMLIrAdultChildCounterElement extends Components.IrAdultChildCounter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAdultChildCounterElementEventMap>(type: K, listener: (this: HTMLIrAdultChildCounterElement, ev: IrAdultChildCounterCustomEvent<HTMLIrAdultChildCounterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAdultChildCounterElementEventMap>(type: K, listener: (this: HTMLIrAdultChildCounterElement, ev: IrAdultChildCounterCustomEvent<HTMLIrAdultChildCounterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAdultChildCounterElement: {
        prototype: HTMLIrAdultChildCounterElement;
        new (): HTMLIrAdultChildCounterElement;
    };
    interface HTMLIrAlertDialogElement extends Components.IrAlertDialog, HTMLStencilElement {
    }
    var HTMLIrAlertDialogElement: {
        prototype: HTMLIrAlertDialogElement;
        new (): HTMLIrAlertDialogElement;
    };
    interface HTMLIrAuthElementEventMap {
        "closeDialog": null;
    }
    interface HTMLIrAuthElement extends Components.IrAuth, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrAuthElementEventMap>(type: K, listener: (this: HTMLIrAuthElement, ev: IrAuthCustomEvent<HTMLIrAuthElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrAuthElementEventMap>(type: K, listener: (this: HTMLIrAuthElement, ev: IrAuthCustomEvent<HTMLIrAuthElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrAuthElement: {
        prototype: HTMLIrAuthElement;
        new (): HTMLIrAuthElement;
    };
    interface HTMLIrAvailibilityHeaderElement extends Components.IrAvailibilityHeader, HTMLStencilElement {
    }
    var HTMLIrAvailibilityHeaderElement: {
        prototype: HTMLIrAvailibilityHeaderElement;
        new (): HTMLIrAvailibilityHeaderElement;
    };
    interface HTMLIrBookingCodeElementEventMap {
        "closeDialog": null;
    }
    interface HTMLIrBookingCodeElement extends Components.IrBookingCode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrBookingCodeElementEventMap>(type: K, listener: (this: HTMLIrBookingCodeElement, ev: IrBookingCodeCustomEvent<HTMLIrBookingCodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrBookingCodeElementEventMap>(type: K, listener: (this: HTMLIrBookingCodeElement, ev: IrBookingCodeCustomEvent<HTMLIrBookingCodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrBookingCodeElement: {
        prototype: HTMLIrBookingCodeElement;
        new (): HTMLIrBookingCodeElement;
    };
    interface HTMLIrButtonElementEventMap {
        "buttonClick": MouseEvent;
    }
    interface HTMLIrButtonElement extends Components.IrButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrButtonElementEventMap>(type: K, listener: (this: HTMLIrButtonElement, ev: IrButtonCustomEvent<HTMLIrButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrButtonElementEventMap>(type: K, listener: (this: HTMLIrButtonElement, ev: IrButtonCustomEvent<HTMLIrButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrButtonElement: {
        prototype: HTMLIrButtonElement;
        new (): HTMLIrButtonElement;
    };
    interface HTMLIrCarouselElementEventMap {
        "carouselImageClicked": null;
    }
    interface HTMLIrCarouselElement extends Components.IrCarousel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCarouselElementEventMap>(type: K, listener: (this: HTMLIrCarouselElement, ev: IrCarouselCustomEvent<HTMLIrCarouselElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCarouselElementEventMap>(type: K, listener: (this: HTMLIrCarouselElement, ev: IrCarouselCustomEvent<HTMLIrCarouselElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCarouselElement: {
        prototype: HTMLIrCarouselElement;
        new (): HTMLIrCarouselElement;
    };
    interface HTMLIrCheckboxElementEventMap {
        "checkChange": boolean;
    }
    interface HTMLIrCheckboxElement extends Components.IrCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrCheckboxElementEventMap>(type: K, listener: (this: HTMLIrCheckboxElement, ev: IrCheckboxCustomEvent<HTMLIrCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrCheckboxElementEventMap>(type: K, listener: (this: HTMLIrCheckboxElement, ev: IrCheckboxCustomEvent<HTMLIrCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrCheckboxElement: {
        prototype: HTMLIrCheckboxElement;
        new (): HTMLIrCheckboxElement;
    };
    interface HTMLIrDatePopupElement extends Components.IrDatePopup, HTMLStencilElement {
    }
    var HTMLIrDatePopupElement: {
        prototype: HTMLIrDatePopupElement;
        new (): HTMLIrDatePopupElement;
    };
    interface HTMLIrDateRangeElementEventMap {
        "dateChange": { start: Date | null; end: Date | null };
    }
    interface HTMLIrDateRangeElement extends Components.IrDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDateRangeElementEventMap>(type: K, listener: (this: HTMLIrDateRangeElement, ev: IrDateRangeCustomEvent<HTMLIrDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDateRangeElementEventMap>(type: K, listener: (this: HTMLIrDateRangeElement, ev: IrDateRangeCustomEvent<HTMLIrDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDateRangeElement: {
        prototype: HTMLIrDateRangeElement;
        new (): HTMLIrDateRangeElement;
    };
    interface HTMLIrDialogElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrDialogElement extends Components.IrDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDialogElementEventMap>(type: K, listener: (this: HTMLIrDialogElement, ev: IrDialogCustomEvent<HTMLIrDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDialogElementEventMap>(type: K, listener: (this: HTMLIrDialogElement, ev: IrDialogCustomEvent<HTMLIrDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDialogElement: {
        prototype: HTMLIrDialogElement;
        new (): HTMLIrDialogElement;
    };
    interface HTMLIrDrawerElementEventMap {
        "six-drawer-show": null;
        "six-drawer-after-show": null;
        "six-drawer-hide": null;
        "six-drawer-after-hide": null;
        "six-drawer-initial-focus": null;
        "six-drawer-overlay-dismiss": null;
    }
    interface HTMLIrDrawerElement extends Components.IrDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDrawerElementEventMap>(type: K, listener: (this: HTMLIrDrawerElement, ev: IrDrawerCustomEvent<HTMLIrDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDrawerElementEventMap>(type: K, listener: (this: HTMLIrDrawerElement, ev: IrDrawerCustomEvent<HTMLIrDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDrawerElement: {
        prototype: HTMLIrDrawerElement;
        new (): HTMLIrDrawerElement;
    };
    interface HTMLIrDropdownElementEventMap {
        "itemSelect": string;
    }
    interface HTMLIrDropdownElement extends Components.IrDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrDropdownElementEventMap>(type: K, listener: (this: HTMLIrDropdownElement, ev: IrDropdownCustomEvent<HTMLIrDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrDropdownElementEventMap>(type: K, listener: (this: HTMLIrDropdownElement, ev: IrDropdownCustomEvent<HTMLIrDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrDropdownElement: {
        prototype: HTMLIrDropdownElement;
        new (): HTMLIrDropdownElement;
    };
    interface HTMLIrFacilitiesElement extends Components.IrFacilities, HTMLStencilElement {
    }
    var HTMLIrFacilitiesElement: {
        prototype: HTMLIrFacilitiesElement;
        new (): HTMLIrFacilitiesElement;
    };
    interface HTMLIrFooterElement extends Components.IrFooter, HTMLStencilElement {
    }
    var HTMLIrFooterElement: {
        prototype: HTMLIrFooterElement;
        new (): HTMLIrFooterElement;
    };
    interface HTMLIrGalleryElementEventMap {
        "openGallery": null;
    }
    interface HTMLIrGalleryElement extends Components.IrGallery, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrGalleryElementEventMap>(type: K, listener: (this: HTMLIrGalleryElement, ev: IrGalleryCustomEvent<HTMLIrGalleryElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrGalleryElementEventMap>(type: K, listener: (this: HTMLIrGalleryElement, ev: IrGalleryCustomEvent<HTMLIrGalleryElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrGalleryElement: {
        prototype: HTMLIrGalleryElement;
        new (): HTMLIrGalleryElement;
    };
    interface HTMLIrGoogleMapsElement extends Components.IrGoogleMaps, HTMLStencilElement {
    }
    var HTMLIrGoogleMapsElement: {
        prototype: HTMLIrGoogleMapsElement;
        new (): HTMLIrGoogleMapsElement;
    };
    interface HTMLIrIconsElement extends Components.IrIcons, HTMLStencilElement {
    }
    var HTMLIrIconsElement: {
        prototype: HTMLIrIconsElement;
        new (): HTMLIrIconsElement;
    };
    interface HTMLIrInputElementEventMap {
        "textChanged": string;
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
    }
    interface HTMLIrInputElement extends Components.IrInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrInputElementEventMap>(type: K, listener: (this: HTMLIrInputElement, ev: IrInputCustomEvent<HTMLIrInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrInputElementEventMap>(type: K, listener: (this: HTMLIrInputElement, ev: IrInputCustomEvent<HTMLIrInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrInputElement: {
        prototype: HTMLIrInputElement;
        new (): HTMLIrInputElement;
    };
    interface HTMLIrInterceptorElement extends Components.IrInterceptor, HTMLStencilElement {
    }
    var HTMLIrInterceptorElement: {
        prototype: HTMLIrInterceptorElement;
        new (): HTMLIrInterceptorElement;
    };
    interface HTMLIrLanguagePickerElementEventMap {
        "closeDialog": null;
    }
    interface HTMLIrLanguagePickerElement extends Components.IrLanguagePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrLanguagePickerElementEventMap>(type: K, listener: (this: HTMLIrLanguagePickerElement, ev: IrLanguagePickerCustomEvent<HTMLIrLanguagePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrLanguagePickerElementEventMap>(type: K, listener: (this: HTMLIrLanguagePickerElement, ev: IrLanguagePickerCustomEvent<HTMLIrLanguagePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrLanguagePickerElement: {
        prototype: HTMLIrLanguagePickerElement;
        new (): HTMLIrLanguagePickerElement;
    };
    interface HTMLIrModalElement extends Components.IrModal, HTMLStencilElement {
    }
    var HTMLIrModalElement: {
        prototype: HTMLIrModalElement;
        new (): HTMLIrModalElement;
    };
    interface HTMLIrNavElement extends Components.IrNav, HTMLStencilElement {
    }
    var HTMLIrNavElement: {
        prototype: HTMLIrNavElement;
        new (): HTMLIrNavElement;
    };
    interface HTMLIrPopoverElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrPopoverElement extends Components.IrPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrPopoverElementEventMap>(type: K, listener: (this: HTMLIrPopoverElement, ev: IrPopoverCustomEvent<HTMLIrPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrPopoverElementEventMap>(type: K, listener: (this: HTMLIrPopoverElement, ev: IrPopoverCustomEvent<HTMLIrPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrPopoverElement: {
        prototype: HTMLIrPopoverElement;
        new (): HTMLIrPopoverElement;
    };
    interface HTMLIrPropertyGalleryElement extends Components.IrPropertyGallery, HTMLStencilElement {
    }
    var HTMLIrPropertyGalleryElement: {
        prototype: HTMLIrPropertyGalleryElement;
        new (): HTMLIrPropertyGalleryElement;
    };
    interface HTMLIrSelectElementEventMap {
        "valueChange": string | number;
    }
    interface HTMLIrSelectElement extends Components.IrSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSelectElementEventMap>(type: K, listener: (this: HTMLIrSelectElement, ev: IrSelectCustomEvent<HTMLIrSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSelectElementEventMap>(type: K, listener: (this: HTMLIrSelectElement, ev: IrSelectCustomEvent<HTMLIrSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSelectElement: {
        prototype: HTMLIrSelectElement;
        new (): HTMLIrSelectElement;
    };
    interface HTMLIrSheetElementEventMap {
        "openChange": boolean;
    }
    interface HTMLIrSheetElement extends Components.IrSheet, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSheetElementEventMap>(type: K, listener: (this: HTMLIrSheetElement, ev: IrSheetCustomEvent<HTMLIrSheetElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSheetElementEventMap>(type: K, listener: (this: HTMLIrSheetElement, ev: IrSheetCustomEvent<HTMLIrSheetElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSheetElement: {
        prototype: HTMLIrSheetElement;
        new (): HTMLIrSheetElement;
    };
    interface HTMLIrSigninElementEventMap {
        "navigate": TAuthNavigation;
    }
    interface HTMLIrSigninElement extends Components.IrSignin, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSigninElementEventMap>(type: K, listener: (this: HTMLIrSigninElement, ev: IrSigninCustomEvent<HTMLIrSigninElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSigninElementEventMap>(type: K, listener: (this: HTMLIrSigninElement, ev: IrSigninCustomEvent<HTMLIrSigninElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSigninElement: {
        prototype: HTMLIrSigninElement;
        new (): HTMLIrSigninElement;
    };
    interface HTMLIrSignupElementEventMap {
        "navigate": TAuthNavigation;
    }
    interface HTMLIrSignupElement extends Components.IrSignup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSignupElementEventMap>(type: K, listener: (this: HTMLIrSignupElement, ev: IrSignupCustomEvent<HTMLIrSignupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSignupElementEventMap>(type: K, listener: (this: HTMLIrSignupElement, ev: IrSignupCustomEvent<HTMLIrSignupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSignupElement: {
        prototype: HTMLIrSignupElement;
        new (): HTMLIrSignupElement;
    };
    interface HTMLIrSwitchElementEventMap {
        "checkChange": boolean;
    }
    interface HTMLIrSwitchElement extends Components.IrSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrSwitchElementEventMap>(type: K, listener: (this: HTMLIrSwitchElement, ev: IrSwitchCustomEvent<HTMLIrSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrSwitchElementEventMap>(type: K, listener: (this: HTMLIrSwitchElement, ev: IrSwitchCustomEvent<HTMLIrSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrSwitchElement: {
        prototype: HTMLIrSwitchElement;
        new (): HTMLIrSwitchElement;
    };
    interface HTMLIrTestcmpElement extends Components.IrTestcmp, HTMLStencilElement {
    }
    var HTMLIrTestcmpElement: {
        prototype: HTMLIrTestcmpElement;
        new (): HTMLIrTestcmpElement;
    };
    interface HTMLIrTextareaElementEventMap {
        "textChanged": string;
        "inputFocus": FocusEvent;
        "inputBlur": FocusEvent;
    }
    interface HTMLIrTextareaElement extends Components.IrTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLIrTextareaElementEventMap>(type: K, listener: (this: HTMLIrTextareaElement, ev: IrTextareaCustomEvent<HTMLIrTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLIrTextareaElementEventMap>(type: K, listener: (this: HTMLIrTextareaElement, ev: IrTextareaCustomEvent<HTMLIrTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLIrTextareaElement: {
        prototype: HTMLIrTextareaElement;
        new (): HTMLIrTextareaElement;
    };
    interface HTMLIrTooltipElement extends Components.IrTooltip, HTMLStencilElement {
    }
    var HTMLIrTooltipElement: {
        prototype: HTMLIrTooltipElement;
        new (): HTMLIrTooltipElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "ir-adult-child-counter": HTMLIrAdultChildCounterElement;
        "ir-alert-dialog": HTMLIrAlertDialogElement;
        "ir-auth": HTMLIrAuthElement;
        "ir-availibility-header": HTMLIrAvailibilityHeaderElement;
        "ir-booking-code": HTMLIrBookingCodeElement;
        "ir-button": HTMLIrButtonElement;
        "ir-carousel": HTMLIrCarouselElement;
        "ir-checkbox": HTMLIrCheckboxElement;
        "ir-date-popup": HTMLIrDatePopupElement;
        "ir-date-range": HTMLIrDateRangeElement;
        "ir-dialog": HTMLIrDialogElement;
        "ir-drawer": HTMLIrDrawerElement;
        "ir-dropdown": HTMLIrDropdownElement;
        "ir-facilities": HTMLIrFacilitiesElement;
        "ir-footer": HTMLIrFooterElement;
        "ir-gallery": HTMLIrGalleryElement;
        "ir-google-maps": HTMLIrGoogleMapsElement;
        "ir-icons": HTMLIrIconsElement;
        "ir-input": HTMLIrInputElement;
        "ir-interceptor": HTMLIrInterceptorElement;
        "ir-language-picker": HTMLIrLanguagePickerElement;
        "ir-modal": HTMLIrModalElement;
        "ir-nav": HTMLIrNavElement;
        "ir-popover": HTMLIrPopoverElement;
        "ir-property-gallery": HTMLIrPropertyGalleryElement;
        "ir-select": HTMLIrSelectElement;
        "ir-sheet": HTMLIrSheetElement;
        "ir-signin": HTMLIrSigninElement;
        "ir-signup": HTMLIrSignupElement;
        "ir-switch": HTMLIrSwitchElement;
        "ir-testcmp": HTMLIrTestcmpElement;
        "ir-textarea": HTMLIrTextareaElement;
        "ir-tooltip": HTMLIrTooltipElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface IrAdultChildCounter {
        "adultCount"?: number;
        "childrenCount"?: number;
        "maxAdultCount"?: number;
        "maxChildrenCount"?: number;
        "minAdultCount"?: number;
        "minChildrenCount"?: number;
        "onAddAdultsAndChildren"?: (event: IrAdultChildCounterCustomEvent<{ adult_nbr: number; child_nbr: number }>) => void;
    }
    interface IrAlertDialog {
    }
    interface IrAuth {
        "onCloseDialog"?: (event: IrAuthCustomEvent<null>) => void;
    }
    interface IrAvailibilityHeader {
    }
    interface IrBookingCode {
        "onCloseDialog"?: (event: IrBookingCodeCustomEvent<null>) => void;
    }
    interface IrButton {
        "buttonClassName"?: string;
        "buttonId"?: string;
        "buttonStyles"?: Partial<CSSStyleDeclaration>;
        "disabled"?: boolean;
        "haveLeftIcon"?: boolean;
        "isLoading"?: boolean;
        "label"?: string;
        "name"?: string;
        "onButtonClick"?: (event: IrButtonCustomEvent<MouseEvent>) => void;
        "size"?: 'sm' | 'md' | 'lg';
        "type"?: 'button' | 'submit' | 'reset' | 'menu';
        "variants"?: 'default' | 'outline' | 'secondary' | 'destructive' | 'ghost' | 'link' | 'icon' | 'ghost-primary' | 'outline-primary';
    }
    interface IrCarousel {
        "onCarouselImageClicked"?: (event: IrCarouselCustomEvent<null>) => void;
        "slides"?: TCarouselSlides[];
    }
    interface IrCheckbox {
        "checkboxId"?: string;
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "name"?: string;
        "onCheckChange"?: (event: IrCheckboxCustomEvent<boolean>) => void;
    }
    interface IrDatePopup {
        "dates"?: { start: Date | null; end: Date | null };
    }
    interface IrDateRange {
        "dateModifiers"?: IDateModifiers;
        "fromDate"?: Date | null;
        "locale"?: Locale;
        "maxDate"?: Date;
        "maxSpanDays"?: number;
        "minDate"?: Date;
        "onDateChange"?: (event: IrDateRangeCustomEvent<{ start: Date | null; end: Date | null }>) => void;
        "showPrice"?: boolean;
        "toDate"?: Date | null;
    }
    interface IrDialog {
        "onOpenChange"?: (event: IrDialogCustomEvent<boolean>) => void;
    }
    interface IrDrawer {
        "contained"?: boolean;
        "label"?: string;
        "noHeader"?: boolean;
        /**
          * Emitted after the drawer closes and all transitions are complete.
         */
        "onSix-drawer-after-hide"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted after the drawer opens and all transitions are complete.
         */
        "onSix-drawer-after-show"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted when the drawer closes. Calling `event.preventDefault()` will prevent it from being closed.
         */
        "onSix-drawer-hide"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted when the drawer opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and allow you to set it on a different element in the drawer, such as an input or button.
         */
        "onSix-drawer-initial-focus"?: (event: IrDrawerCustomEvent<null>) => void;
        /**
          * Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the drawer from closing.
         */
        "onSix-drawer-overlay-dismiss"?: (event: IrDrawerCustomEvent<null>) => void;
        "onSix-drawer-show"?: (event: IrDrawerCustomEvent<null>) => void;
        "open"?: boolean;
        "placement"?: 'top' | 'right' | 'bottom' | 'left';
    }
    interface IrDropdown {
        "dropdownTitle"?: string;
        "itemNames"?: IItems[];
        "onItemSelect"?: (event: IrDropdownCustomEvent<string>) => void;
        "rtl"?: boolean;
        "search"?: boolean;
    }
    interface IrFacilities {
        "properties"?: IExposedProperty;
    }
    interface IrFooter {
        "exposedProperty"?: IExposedProperty;
    }
    interface IrGallery {
        "images"?: string[];
        "onOpenGallery"?: (event: IrGalleryCustomEvent<null>) => void;
        "totalImages"?: number;
    }
    interface IrGoogleMaps {
    }
    interface IrIcons {
        "name"?: TIcons;
        "svgClassName"?: string;
    }
    interface IrInput {
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "class"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "inputId"?: string;
        "inputStyles"?: Partial<CSSStyleDeclaration>;
        "inputid"?: string;
        "leftIcon"?: boolean;
        "max"?: string | number;
        "maxlength"?: number;
        "min"?: string | number;
        "multiple"?: boolean;
        "name"?: string;
        "onInputBlur"?: (event: IrInputCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: IrInputCustomEvent<FocusEvent>) => void;
        "onTextChanged"?: (event: IrInputCustomEvent<string>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "size"?: number;
        "step"?: string | number;
        "type"?: | 'button'
    | 'checkbox'
    | 'color'
    | 'date'
    | 'datetime-local'
    | 'email'
    | 'file'
    | 'hidden'
    | 'image'
    | 'month'
    | 'number'
    | 'password'
    | 'radio'
    | 'range'
    | 'reset'
    | 'search'
    | 'submit'
    | 'tel'
    | 'text'
    | 'time'
    | 'url'
    | 'week';
        "value"?: string;
    }
    interface IrInterceptor {
        "handledEndpoints"?: string[];
    }
    interface IrLanguagePicker {
        "currencies"?: ICurrency[];
        "languages"?: IExposedLanguages[];
        "onCloseDialog"?: (event: IrLanguagePickerCustomEvent<null>) => void;
    }
    interface IrModal {
    }
    interface IrNav {
        "currencies"?: ICurrency[];
        "exposed_property"?: IExposedProperty;
        "languages"?: IExposedLanguages[];
        "logo"?: string;
        "website"?: string;
    }
    interface IrPopover {
        "active"?: boolean;
        "onOpenChange"?: (event: IrPopoverCustomEvent<boolean>) => void;
        "placement"?: Placement;
        "stopListeningForOutsideClicks"?: boolean;
        "trigger_label"?: string;
    }
    interface IrPropertyGallery {
        "exposed_property"?: IExposedProperty;
        "property_state"?: 'carousel' | 'gallery';
        "roomType"?: RoomType;
    }
    interface IrSelect {
        "data"?: { id: string | number; value: string }[];
        "label"?: string;
        "onValueChange"?: (event: IrSelectCustomEvent<string | number>) => void;
        "select_id"?: string;
        "value"?: string | number;
        "variant"?: 'double-line' | 'default';
    }
    interface IrSheet {
        "hideCloseButton"?: boolean;
        "onOpenChange"?: (event: IrSheetCustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface IrSignin {
        "onNavigate"?: (event: IrSigninCustomEvent<TAuthNavigation>) => void;
    }
    interface IrSignup {
        "onNavigate"?: (event: IrSignupCustomEvent<TAuthNavigation>) => void;
    }
    interface IrSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "onCheckChange"?: (event: IrSwitchCustomEvent<boolean>) => void;
        "switchId"?: string;
    }
    interface IrTestcmp {
        "baseUrl"?: string;
        "propertyId"?: number;
        "token"?: string;
    }
    interface IrTextarea {
        "autocomplete"?: string;
        "autofocus"?: boolean;
        "class"?: string;
        "disabled"?: boolean;
        "error"?: boolean;
        "inputId"?: string;
        "inputid"?: string;
        "leftIcon"?: boolean;
        "max"?: string | number;
        "maxlength"?: number;
        "min"?: string | number;
        "multiple"?: boolean;
        "name"?: string;
        "onInputBlur"?: (event: IrTextareaCustomEvent<FocusEvent>) => void;
        "onInputFocus"?: (event: IrTextareaCustomEvent<FocusEvent>) => void;
        "onTextChanged"?: (event: IrTextareaCustomEvent<string>) => void;
        "pattern"?: string;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "size"?: number;
        "step"?: string | number;
        "value"?: string;
    }
    interface IrTooltip {
        "customSlot"?: boolean;
        "message"?: string;
        "withHtml"?: boolean;
    }
    interface MyComponent {
    }
    interface IntrinsicElements {
        "ir-adult-child-counter": IrAdultChildCounter;
        "ir-alert-dialog": IrAlertDialog;
        "ir-auth": IrAuth;
        "ir-availibility-header": IrAvailibilityHeader;
        "ir-booking-code": IrBookingCode;
        "ir-button": IrButton;
        "ir-carousel": IrCarousel;
        "ir-checkbox": IrCheckbox;
        "ir-date-popup": IrDatePopup;
        "ir-date-range": IrDateRange;
        "ir-dialog": IrDialog;
        "ir-drawer": IrDrawer;
        "ir-dropdown": IrDropdown;
        "ir-facilities": IrFacilities;
        "ir-footer": IrFooter;
        "ir-gallery": IrGallery;
        "ir-google-maps": IrGoogleMaps;
        "ir-icons": IrIcons;
        "ir-input": IrInput;
        "ir-interceptor": IrInterceptor;
        "ir-language-picker": IrLanguagePicker;
        "ir-modal": IrModal;
        "ir-nav": IrNav;
        "ir-popover": IrPopover;
        "ir-property-gallery": IrPropertyGallery;
        "ir-select": IrSelect;
        "ir-sheet": IrSheet;
        "ir-signin": IrSignin;
        "ir-signup": IrSignup;
        "ir-switch": IrSwitch;
        "ir-testcmp": IrTestcmp;
        "ir-textarea": IrTextarea;
        "ir-tooltip": IrTooltip;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ir-adult-child-counter": LocalJSX.IrAdultChildCounter & JSXBase.HTMLAttributes<HTMLIrAdultChildCounterElement>;
            "ir-alert-dialog": LocalJSX.IrAlertDialog & JSXBase.HTMLAttributes<HTMLIrAlertDialogElement>;
            "ir-auth": LocalJSX.IrAuth & JSXBase.HTMLAttributes<HTMLIrAuthElement>;
            "ir-availibility-header": LocalJSX.IrAvailibilityHeader & JSXBase.HTMLAttributes<HTMLIrAvailibilityHeaderElement>;
            "ir-booking-code": LocalJSX.IrBookingCode & JSXBase.HTMLAttributes<HTMLIrBookingCodeElement>;
            "ir-button": LocalJSX.IrButton & JSXBase.HTMLAttributes<HTMLIrButtonElement>;
            "ir-carousel": LocalJSX.IrCarousel & JSXBase.HTMLAttributes<HTMLIrCarouselElement>;
            "ir-checkbox": LocalJSX.IrCheckbox & JSXBase.HTMLAttributes<HTMLIrCheckboxElement>;
            "ir-date-popup": LocalJSX.IrDatePopup & JSXBase.HTMLAttributes<HTMLIrDatePopupElement>;
            "ir-date-range": LocalJSX.IrDateRange & JSXBase.HTMLAttributes<HTMLIrDateRangeElement>;
            "ir-dialog": LocalJSX.IrDialog & JSXBase.HTMLAttributes<HTMLIrDialogElement>;
            "ir-drawer": LocalJSX.IrDrawer & JSXBase.HTMLAttributes<HTMLIrDrawerElement>;
            "ir-dropdown": LocalJSX.IrDropdown & JSXBase.HTMLAttributes<HTMLIrDropdownElement>;
            "ir-facilities": LocalJSX.IrFacilities & JSXBase.HTMLAttributes<HTMLIrFacilitiesElement>;
            "ir-footer": LocalJSX.IrFooter & JSXBase.HTMLAttributes<HTMLIrFooterElement>;
            "ir-gallery": LocalJSX.IrGallery & JSXBase.HTMLAttributes<HTMLIrGalleryElement>;
            "ir-google-maps": LocalJSX.IrGoogleMaps & JSXBase.HTMLAttributes<HTMLIrGoogleMapsElement>;
            "ir-icons": LocalJSX.IrIcons & JSXBase.HTMLAttributes<HTMLIrIconsElement>;
            "ir-input": LocalJSX.IrInput & JSXBase.HTMLAttributes<HTMLIrInputElement>;
            "ir-interceptor": LocalJSX.IrInterceptor & JSXBase.HTMLAttributes<HTMLIrInterceptorElement>;
            "ir-language-picker": LocalJSX.IrLanguagePicker & JSXBase.HTMLAttributes<HTMLIrLanguagePickerElement>;
            "ir-modal": LocalJSX.IrModal & JSXBase.HTMLAttributes<HTMLIrModalElement>;
            "ir-nav": LocalJSX.IrNav & JSXBase.HTMLAttributes<HTMLIrNavElement>;
            "ir-popover": LocalJSX.IrPopover & JSXBase.HTMLAttributes<HTMLIrPopoverElement>;
            "ir-property-gallery": LocalJSX.IrPropertyGallery & JSXBase.HTMLAttributes<HTMLIrPropertyGalleryElement>;
            "ir-select": LocalJSX.IrSelect & JSXBase.HTMLAttributes<HTMLIrSelectElement>;
            "ir-sheet": LocalJSX.IrSheet & JSXBase.HTMLAttributes<HTMLIrSheetElement>;
            "ir-signin": LocalJSX.IrSignin & JSXBase.HTMLAttributes<HTMLIrSigninElement>;
            "ir-signup": LocalJSX.IrSignup & JSXBase.HTMLAttributes<HTMLIrSignupElement>;
            "ir-switch": LocalJSX.IrSwitch & JSXBase.HTMLAttributes<HTMLIrSwitchElement>;
            "ir-testcmp": LocalJSX.IrTestcmp & JSXBase.HTMLAttributes<HTMLIrTestcmpElement>;
            "ir-textarea": LocalJSX.IrTextarea & JSXBase.HTMLAttributes<HTMLIrTextareaElement>;
            "ir-tooltip": LocalJSX.IrTooltip & JSXBase.HTMLAttributes<HTMLIrTooltipElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
