{"file":"ir-textarea.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,aAAa,GAAG,g9HAAg9H,CAAC;AACv+H,yBAAe,aAAa;;MCOf,UAAU;;;;;;uBACKA,KAAE,EAAE;wBACe,KAAK;;;;;;;;;;;;;;;;;;qBAkBzB,KAAK;;IAK9B,MAAM;QACJ,QACEC,uEACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,GAAG,EAAE,EAChC,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EACrC,MAAM,EAAE,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EACnC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,GAClE,EACZ;KACH;;;;;;","names":["v4","h"],"sources":["src/components/ui/ir-textarea/ir-textarea.css?tag=ir-textarea&encapsulation=shadow","src/components/ui/ir-textarea/ir-textarea.tsx"],"sourcesContent":["textarea {\r\n  border-radius: 8px;\r\n  border: 1px solid var(--gray-300, #d0d5dd);\r\n  transition: all 0.3s ease-in-out;\r\n  border: 0;\r\n  border-radius: var(--radius, 8px);\r\n  padding: 10px 14px;\r\n  margin: 0;\r\n  width: 100%;\r\n  font-size: 16px;\r\n}\r\ntextarea:focus {\r\n  border-color: var(--brand-300, #84caff);\r\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1), 0 0 0 4px var(--brand-100, #d1e9ff);\r\n  outline: none;\r\n}\r\n.error {\r\n  border-color: var(--error-300, #fda29b);\r\n}\r\ntextarea:disabled {\r\n  background: var(--gray-50, #f9fafb);\r\n  color: var(--gray-300, #d0d5dd);\r\n  pointer-events: none;\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\n\r\n@Component({\r\n  tag: 'ir-textarea',\r\n  styleUrl: 'ir-textarea.css',\r\n  shadow: true,\r\n})\r\nexport class IrTextarea {\r\n  @Prop() inputId: string = v4();\r\n  @Prop({ reflect: true }) leftIcon: boolean = false;\r\n  @Prop() value: string;\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) placeholder: string;\r\n  @Prop({ reflect: true }) inputid: string;\r\n  @Prop({ reflect: true }) class: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) readonly: boolean;\r\n  @Prop({ reflect: true }) maxlength: number;\r\n  @Prop({ reflect: true }) min: string | number;\r\n  @Prop({ reflect: true }) max: string | number;\r\n  @Prop({ reflect: true }) step: string | number;\r\n  @Prop({ reflect: true }) pattern: string;\r\n  @Prop({ reflect: true }) autocomplete: string;\r\n  @Prop({ reflect: true }) autofocus: boolean;\r\n  @Prop({ reflect: true }) size: number;\r\n  @Prop({ reflect: true }) multiple: boolean;\r\n  @Prop() error: boolean = false;\r\n\r\n  @Event({ bubbles: true, composed: true }) textChanged: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) inputFocus: EventEmitter<FocusEvent>;\r\n  @Event({ bubbles: true, composed: true }) inputBlur: EventEmitter<FocusEvent>;\r\n  render() {\r\n    return (\r\n      <textarea\r\n        name={this.name}\r\n        autoFocus={this.autofocus}\r\n        disabled={this.disabled}\r\n        value={this.value}\r\n        class={this.error ? 'error' : ''}\r\n        id={this.inputId}\r\n        onFocus={e => this.inputFocus.emit(e)}\r\n        onBlur={e => this.inputBlur.emit(e)}\r\n        onInput={e => this.textChanged.emit((e.target as HTMLTextAreaElement).value)}\r\n      ></textarea>\r\n    );\r\n  }\r\n}\r\n"],"version":3}