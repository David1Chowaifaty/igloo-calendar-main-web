{"file":"checkout.validator-bc75c2f3.js","mappings":"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","names":["z"],"sources":["src/validators/checkout.validator.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// const cardNumberPatterns = {\r\n//   VISA: /^4[0-9]{12}(?:[0-9]{3})?$/,\r\n//   Mastercard: /^5[1-5][0-9]{14}$/,\r\n//   AMEX: /^3[47][0-9]{13}$/,\r\n// };\r\n\r\n// const cvcPatterns = {\r\n//   VISA: /^[0-9]{3}$/,\r\n//   Mastercard: /^[0-9]{3}$/,\r\n//   AMEX: /^[0-9]{4}$/,\r\n// };\r\n\r\n// const validateExpiryDate = (expiry: string) => {\r\n//   const [month, year] = expiry.split('/').map(Number);\r\n//   if (!month || !year || month < 1 || month > 12) {\r\n//     return false;\r\n//   }\r\n//   const currentYear = new Date().getFullYear() % 100;\r\n//   const currentMonth = new Date().getMonth() + 1;\r\n//   if (year < currentYear || (year === currentYear && month < currentMonth)) {\r\n//     return false;\r\n//   }\r\n//   return true;\r\n// };\r\nfunction validateCreditCardNumber(number) {\r\n  // Remove all non-digit characters\r\n  number = number.replace(/\\D/g, '');\r\n\r\n  let sum = 0;\r\n  let shouldDouble = false;\r\n\r\n  // Traverse the number from right to left\r\n  for (let i = number.length - 1; i >= 0; i--) {\r\n    let digit = parseInt(number.charAt(i), 10);\r\n\r\n    if (shouldDouble) {\r\n      // Double the digit\r\n      digit *= 2;\r\n\r\n      // If the result is a two-digit number, add the digits together\r\n      if (digit > 9) {\r\n        digit -= 9;\r\n      }\r\n    }\r\n\r\n    sum += digit;\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n\r\n  // If the sum is divisible by 10, the number is valid\r\n  return sum % 10 === 0;\r\n}\r\nexport const ZCreditCardSchemaWithCvc = z.object({\r\n  cardNumber: z.string().refine(arg => validateCreditCardNumber(arg), {\r\n    message: 'Invalid credit card number',\r\n  }),\r\n  cvc: z.string().regex(/^\\d{3,4}$/, 'CVV must be 3 or 4 digits'),\r\n  cardHolderName: z.string().min(1, 'Holder name is required'),\r\n  expiryDate: z.string().regex(/^(0[1-9]|1[0-2])\\/\\d{2}$/, 'Expiry date must be in MM/YY format'),\r\n});\r\nexport const ZCreditCardSchemaWithoutCvc = z.object({\r\n  cardNumber: z.string().regex(/^\\d{15,16}$/, 'Card number must be 15 or 16 digits'),\r\n  cardHolderName: z.string().min(1, 'Holder name is required'),\r\n  expiryDate: z.string().regex(/^(0[1-9]|1[0-2])\\/\\d{2}$/, 'Expiry date must be in MM/YY format'),\r\n});\r\n// export const ZCreditCardSchema = z\r\n//   .object({\r\n//     cardNumber: z.string().refine(\r\n//       val => {\r\n//         return cardNumberPatterns.VISA.test(val) || cardNumberPatterns.Mastercard.test(val) || cardNumberPatterns.AMEX.test(val);\r\n//       },\r\n//       {\r\n//         message: 'Invalid card number',\r\n//       },\r\n//     ),\r\n//     cvc: z.string().min(3),\r\n//     expiryDate: z.string().refine(validateExpiryDate, {\r\n//       message: 'Invalid expiry date',\r\n//     }),\r\n//     cardHolderName: z.string().min(1, {\r\n//       message: 'Cardholder name cannot be empty',\r\n//     }),\r\n//   })\r\n//   .superRefine((data, ctx) => {\r\n//     const cardType = Object.keys(cardNumberPatterns).find(type => cardNumberPatterns[type as keyof typeof cardNumberPatterns].test(data.cardNumber));\r\n\r\n//     if (cardType && !cvcPatterns[cardType as keyof typeof cvcPatterns].test(data.cvc)) {\r\n//       ctx.addIssue({\r\n//         code: 'custom',\r\n//         path: ['cvc'],\r\n//         message: \"'Invalid CVC\",\r\n//       });\r\n//     }\r\n//   });\r\n\r\nconst ICardProcessingWithoutCVC = z.object({\r\n  code: z.literal('004'),\r\n  cardNumber: z.string(),\r\n  cardHolderName: z.string(),\r\n  expiry_month: z.string(),\r\n  expiry_year: z.string(),\r\n});\r\n\r\nconst ICardProcessingWithCVC = z.object({\r\n  code: z.literal('001'),\r\n  cardNumber: z.string(),\r\n  cardHolderName: z.string(),\r\n  expiry_month: z.string(),\r\n  expiry_year: z.string(),\r\n  cvc: z.string(),\r\n});\r\n\r\nexport const ICardProcessing = z.union([ICardProcessingWithoutCVC, ICardProcessingWithCVC]);\r\n"],"version":3}