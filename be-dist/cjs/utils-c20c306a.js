'use strict';

const index = require('./index-380c61af.js');

const appendToMap = (map, propName, value) => {
    const items = map.get(propName);
    if (!items) {
        map.set(propName, [value]);
    }
    else if (!items.includes(value)) {
        items.push(value);
    }
};
const debounce = (fn, ms) => {
    let timeoutId;
    return (...args) => {
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(() => {
            timeoutId = 0;
            fn(...args);
        }, ms);
    };
};

/**
 * Check if a possible element isConnected.
 * The property might not be there, so we check for it.
 *
 * We want it to return true if isConnected is not a property,
 * otherwise we would remove these elements and would not update.
 *
 * Better leak in Edge than to be useless.
 */
const isConnected = (maybeElement) => !('isConnected' in maybeElement) || maybeElement.isConnected;
const cleanupElements = debounce((map) => {
    for (let key of map.keys()) {
        map.set(key, map.get(key).filter(isConnected));
    }
}, 2000);
const stencilSubscription = () => {
    if (typeof index.getRenderingRef !== 'function') {
        // If we are not in a stencil project, we do nothing.
        // This function is not really exported by @stencil/core.
        return {};
    }
    const elmsToUpdate = new Map();
    return {
        dispose: () => elmsToUpdate.clear(),
        get: (propName) => {
            const elm = index.getRenderingRef();
            if (elm) {
                appendToMap(elmsToUpdate, propName, elm);
            }
        },
        set: (propName) => {
            const elements = elmsToUpdate.get(propName);
            if (elements) {
                elmsToUpdate.set(propName, elements.filter(index.forceUpdate));
            }
            cleanupElements(elmsToUpdate);
        },
        reset: () => {
            elmsToUpdate.forEach((elms) => elms.forEach(index.forceUpdate));
            cleanupElements(elmsToUpdate);
        },
    };
};

const unwrap = (val) => (typeof val === 'function' ? val() : val);
const createObservableMap = (defaultState, shouldUpdate = (a, b) => a !== b) => {
    const unwrappedState = unwrap(defaultState);
    let states = new Map(Object.entries(unwrappedState !== null && unwrappedState !== void 0 ? unwrappedState : {}));
    const handlers = {
        dispose: [],
        get: [],
        set: [],
        reset: [],
    };
    const reset = () => {
        var _a;
        // When resetting the state, the default state may be a function - unwrap it to invoke it.
        // otherwise, the state won't be properly reset
        states = new Map(Object.entries((_a = unwrap(defaultState)) !== null && _a !== void 0 ? _a : {}));
        handlers.reset.forEach((cb) => cb());
    };
    const dispose = () => {
        // Call first dispose as resetting the state would
        // cause less updates ;)
        handlers.dispose.forEach((cb) => cb());
        reset();
    };
    const get = (propName) => {
        handlers.get.forEach((cb) => cb(propName));
        return states.get(propName);
    };
    const set = (propName, value) => {
        const oldValue = states.get(propName);
        if (shouldUpdate(value, oldValue, propName)) {
            states.set(propName, value);
            handlers.set.forEach((cb) => cb(propName, value, oldValue));
        }
    };
    const state = (typeof Proxy === 'undefined'
        ? {}
        : new Proxy(unwrappedState, {
            get(_, propName) {
                return get(propName);
            },
            ownKeys(_) {
                return Array.from(states.keys());
            },
            getOwnPropertyDescriptor() {
                return {
                    enumerable: true,
                    configurable: true,
                };
            },
            has(_, propName) {
                return states.has(propName);
            },
            set(_, propName, value) {
                set(propName, value);
                return true;
            },
        }));
    const on = (eventName, callback) => {
        handlers[eventName].push(callback);
        return () => {
            removeFromArray(handlers[eventName], callback);
        };
    };
    const onChange = (propName, cb) => {
        const unSet = on('set', (key, newValue) => {
            if (key === propName) {
                cb(newValue);
            }
        });
        // We need to unwrap the defaultState because it might be a function.
        // Otherwise we might not be sending the right reset value.
        const unReset = on('reset', () => cb(unwrap(defaultState)[propName]));
        return () => {
            unSet();
            unReset();
        };
    };
    const use = (...subscriptions) => {
        const unsubs = subscriptions.reduce((unsubs, subscription) => {
            if (subscription.set) {
                unsubs.push(on('set', subscription.set));
            }
            if (subscription.get) {
                unsubs.push(on('get', subscription.get));
            }
            if (subscription.reset) {
                unsubs.push(on('reset', subscription.reset));
            }
            if (subscription.dispose) {
                unsubs.push(on('dispose', subscription.dispose));
            }
            return unsubs;
        }, []);
        return () => unsubs.forEach((unsub) => unsub());
    };
    const forceUpdate = (key) => {
        const oldValue = states.get(key);
        handlers.set.forEach((cb) => cb(key, oldValue, oldValue));
    };
    return {
        state,
        get,
        set,
        on,
        onChange,
        use,
        dispose,
        reset,
        forceUpdate,
    };
};
const removeFromArray = (array, item) => {
    const index = array.indexOf(item);
    if (index >= 0) {
        array[index] = array[array.length - 1];
        array.length--;
    }
};

const createStore = (defaultState, shouldUpdate) => {
    const map = createObservableMap(defaultState, shouldUpdate);
    map.use(stencilSubscription());
    return map;
};

const initialState$2 = {
    entries: null,
    direction: 'ltr',
};
const { state: localizedWords, onChange: onCalendarDatesChange } = createStore(initialState$2);

var locale = {};

var af = {};

var formatDistance$2F = {};

formatDistance$2F.formatDistance = void 0;

const formatDistanceLocale$1j = {
  lessThanXSeconds: {
    one: "minder as 'n sekonde",
    other: "minder as {{count}} sekondes",
  },

  xSeconds: {
    one: "1 sekonde",
    other: "{{count}} sekondes",
  },

  halfAMinute: "'n halwe minuut",

  lessThanXMinutes: {
    one: "minder as 'n minuut",
    other: "minder as {{count}} minute",
  },

  xMinutes: {
    one: "'n minuut",
    other: "{{count}} minute",
  },

  aboutXHours: {
    one: "ongeveer 1 uur",
    other: "ongeveer {{count}} ure",
  },

  xHours: {
    one: "1 uur",
    other: "{{count}} ure",
  },

  xDays: {
    one: "1 dag",
    other: "{{count}} dae",
  },

  aboutXWeeks: {
    one: "ongeveer 1 week",
    other: "ongeveer {{count}} weke",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weke",
  },

  aboutXMonths: {
    one: "ongeveer 1 maand",
    other: "ongeveer {{count}} maande",
  },

  xMonths: {
    one: "1 maand",
    other: "{{count}} maande",
  },

  aboutXYears: {
    one: "ongeveer 1 jaar",
    other: "ongeveer {{count}} jaar",
  },

  xYears: {
    one: "1 jaar",
    other: "{{count}} jaar",
  },

  overXYears: {
    one: "meer as 1 jaar",
    other: "meer as {{count}} jaar",
  },

  almostXYears: {
    one: "byna 1 jaar",
    other: "byna {{count}} jaar",
  },
};

const formatDistance$2E = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$1j[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "oor " + result;
    } else {
      return result + " gelede";
    }
  }

  return result;
};
formatDistance$2F.formatDistance = formatDistance$2E;

var formatLong$1s = {};

var buildFormatLongFn$1 = {};

buildFormatLongFn$1.buildFormatLongFn = buildFormatLongFn;

function buildFormatLongFn(args) {
  return (options = {}) => {
    // TODO: Remove String()
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

formatLong$1s.formatLong = void 0;
var _index$5Q = buildFormatLongFn$1;

const dateFormats$1s = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "yyyy/MM/dd",
};

const timeFormats$1s = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1s = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1s.formatLong = {
  date: (0, _index$5Q.buildFormatLongFn)({
    formats: dateFormats$1s,
    defaultWidth: "full",
  }),

  time: (0, _index$5Q.buildFormatLongFn)({
    formats: timeFormats$1s,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5Q.buildFormatLongFn)({
    formats: dateTimeFormats$1s,
    defaultWidth: "full",
  }),
});

var formatRelative$2F = {};

formatRelative$2F.formatRelative = void 0;

const formatRelativeLocale$1k = {
  lastWeek: "'verlede' eeee 'om' p",
  yesterday: "'gister om' p",
  today: "'vandag om' p",
  tomorrow: "'mÃ´re om' p",
  nextWeek: "eeee 'om' p",
  other: "P",
};

const formatRelative$2E = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$1k[token];
formatRelative$2F.formatRelative = formatRelative$2E;

var localize$1k = {};

var buildLocalizeFn$1 = {};

buildLocalizeFn$1.buildLocalizeFn = buildLocalizeFn; /* eslint-disable no-unused-vars */

/**
 * The localize function argument callback which allows to convert raw value to
 * the actual type.
 *
 * @param value - The value to convert
 *
 * @returns The converted value
 */

/**
 * The map of localized values for each width.
 */

/**
 * The index type of the locale unit value. It types conversion of units of
 * values that don't start at 0 (i.e. quarters).
 */

/**
 * Converts the unit value to the tuple of values.
 */

/**
 * The tuple of localized era values. The first element represents BC,
 * the second element represents AD.
 */

/**
 * The tuple of localized quarter values. The first element represents Q1.
 */

/**
 * The tuple of localized day values. The first element represents Sunday.
 */

/**
 * The tuple of localized month values. The first element represents January.
 */

function buildLocalizeFn(args) {
  return (value, options) => {
    const context = options?.context ? String(options.context) : "standalone";

    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = options?.width ? String(options.width) : defaultWidth;

      valuesArray =
        args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = options?.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;

    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
    return valuesArray[index];
  };
}

localize$1k.localize = void 0;
var _index$5P = buildLocalizeFn$1;

const eraValues$1k = {
  narrow: ["vC", "nC"],
  abbreviated: ["vC", "nC"],
  wide: ["voor Christus", "na Christus"],
};

const quarterValues$1k = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1ste kwartaal", "2de kwartaal", "3de kwartaal", "4de kwartaal"],
};

const monthValues$1k = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mrt",
    "Apr",
    "Mei",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Okt",
    "Nov",
    "Des",
  ],

  wide: [
    "Januarie",
    "Februarie",
    "Maart",
    "April",
    "Mei",
    "Junie",
    "Julie",
    "Augustus",
    "September",
    "Oktober",
    "November",
    "Desember",
  ],
};

const dayValues$1k = {
  narrow: ["S", "M", "D", "W", "D", "V", "S"],
  short: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
  abbreviated: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"],
  wide: [
    "Sondag",
    "Maandag",
    "Dinsdag",
    "Woensdag",
    "Donderdag",
    "Vrydag",
    "Saterdag",
  ],
};

const dayPeriodValues$1k = {
  narrow: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "middaguur",
    morning: "oggend",
    afternoon: "middag",
    evening: "laat middag",
    night: "aand",
  },
  abbreviated: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "middaguur",
    morning: "oggend",
    afternoon: "middag",
    evening: "laat middag",
    night: "aand",
  },
  wide: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "middaguur",
    morning: "oggend",
    afternoon: "middag",
    evening: "laat middag",
    night: "aand",
  },
};
const formattingDayPeriodValues$14 = {
  narrow: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "uur die middag",
    morning: "uur die oggend",
    afternoon: "uur die middag",
    evening: "uur die aand",
    night: "uur die aand",
  },
  abbreviated: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "uur die middag",
    morning: "uur die oggend",
    afternoon: "uur die middag",
    evening: "uur die aand",
    night: "uur die aand",
  },
  wide: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "uur die middag",
    morning: "uur die oggend",
    afternoon: "uur die middag",
    evening: "uur die aand",
    night: "uur die aand",
  },
};

const ordinalNumber$1k = (dirtyNumber) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 < 20) {
    switch (rem100) {
      case 1:
      case 8:
        return number + "ste";
      default:
        return number + "de";
    }
  }
  return number + "ste";
};

(localize$1k.localize = {
  ordinalNumber: ordinalNumber$1k,

  era: (0, _index$5P.buildLocalizeFn)({
    values: eraValues$1k,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5P.buildLocalizeFn)({
    values: quarterValues$1k,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5P.buildLocalizeFn)({
    values: monthValues$1k,
    defaultWidth: "wide",
  }),

  day: (0, _index$5P.buildLocalizeFn)({
    values: dayValues$1k,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5P.buildLocalizeFn)({
    values: dayPeriodValues$1k,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$14,
    defaultFormattingWidth: "wide",
  }),
});

var match$1j = {};

var buildMatchFn$1 = {};

buildMatchFn$1.buildMatchFn = buildMatchFn;

function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;

    const matchPattern =
      (width && args.matchPatterns[width]) ||
      args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];

    const parsePatterns =
      (width && args.parsePatterns[width]) ||
      args.parsePatterns[args.defaultParseWidth];

    const key = Array.isArray(parsePatterns)
      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))
      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        findKey(parsePatterns, (pattern) => pattern.test(matchedString));

    let value;

    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback
      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        options.valueCallback(value)
      : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}

function findKey(object, predicate) {
  for (const key in object) {
    if (
      Object.prototype.hasOwnProperty.call(object, key) &&
      predicate(object[key])
    ) {
      return key;
    }
  }
  return undefined;
}

function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}

var buildMatchPatternFn$1 = {};

buildMatchPatternFn$1.buildMatchPatternFn = buildMatchPatternFn;

function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];

    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback
      ? args.valueCallback(parseResult[0])
      : parseResult[0];

    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
    value = options.valueCallback ? options.valueCallback(value) : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}

match$1j.match = void 0;

var _index$5O = buildMatchFn$1;
var _index2$2T = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1j = /^(\d+)(ste|de)?/i;
const parseOrdinalNumberPattern$1j = /\d+/i;

const matchEraPatterns$1j = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?C\.?)/,
  wide: /^((voor|na) Christus)/,
};
const parseEraPatterns$1j = {
  any: [/^v/, /^n/],
};

const matchQuarterPatterns$1j = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](st|d)e kwartaal/i,
};
const parseQuarterPatterns$1j = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1j = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
  wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i,
};
const parseMonthPatterns$1j = {
  narrow: [
    /^J/i,
    /^F/i,
    /^M/i,
    /^A/i,
    /^M/i,
    /^J/i,
    /^J/i,
    /^A/i,
    /^S/i,
    /^O/i,
    /^N/i,
    /^D/i,
  ],

  any: [
    /^Jan/i,
    /^Feb/i,
    /^Mrt/i,
    /^Apr/i,
    /^Mei/i,
    /^Jun/i,
    /^Jul/i,
    /^Aug/i,
    /^Sep/i,
    /^Okt/i,
    /^Nov/i,
    /^Dec/i,
  ],
};

const matchDayPatterns$1j = {
  narrow: /^[smdwv]/i,
  short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
  abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
  wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i,
};
const parseDayPatterns$1j = {
  narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
  any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i],
};

const matchDayPeriodPatterns$1j = {
  any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i,
};
const parseDayPeriodPatterns$1j = {
  any: {
    am: /^vm/i,
    pm: /^nm/i,
    midnight: /^middernag/i,
    noon: /^middaguur/i,
    morning: /oggend/i,
    afternoon: /middag/i,
    evening: /laat middag/i,
    night: /aand/i,
  },
};

(match$1j.match = {
  ordinalNumber: (0, _index2$2T.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1j,
    parsePattern: parseOrdinalNumberPattern$1j,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$5O.buildMatchFn)({
    matchPatterns: matchEraPatterns$1j,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1j,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5O.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1j,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1j,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5O.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1j,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1j,
    defaultParseWidth: "any",
  }),

  day: (0, _index$5O.buildMatchFn)({
    matchPatterns: matchDayPatterns$1j,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1j,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5O.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1j,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1j,
    defaultParseWidth: "any",
  }),
});

af.af = void 0;
var _index$5N = formatDistance$2F;
var _index2$2S = formatLong$1s;
var _index3$1v = formatRelative$2F;
var _index4$1u = localize$1k;
var _index5$1u = match$1j;

/**
 * @category Locales
 * @summary Afrikaans locale.
 * @language Afrikaans
 * @iso-639-2 afr
 * @author Marnus Weststrate [@marnusw](https://github.com/marnusw)
 */
(af.af = {
  code: "af",
  formatDistance: _index$5N.formatDistance,
  formatLong: _index2$2S.formatLong,
  formatRelative: _index3$1v.formatRelative,
  localize: _index4$1u.localize,
  match: _index5$1u.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var ar = {};

var formatDistance$2D = {};

formatDistance$2D.formatDistance = void 0;

const formatDistanceLocale$1i = {
  lessThanXSeconds: {
    one: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø«ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø«Ø§ÙÙØ©",
  },

  xSeconds: {
    one: "Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø«Ø§ÙÙØªØ§Ù",
    threeToTen: "{{count}} Ø«ÙØ§ÙÙ",
    other: "{{count}} Ø«Ø§ÙÙØ©",
  },

  halfAMinute: "ÙØµÙ Ø¯ÙÙÙØ©",

  lessThanXMinutes: {
    one: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙØ§Ø¦Ù",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙÙÙØ©",
  },

  xMinutes: {
    one: "Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø¯ÙÙÙØªØ§Ù",
    threeToTen: "{{count}} Ø¯ÙØ§Ø¦Ù",
    other: "{{count}} Ø¯ÙÙÙØ©",
  },

  aboutXHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø© ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø³Ø§Ø¹ØªÙÙ ØªÙØ±ÙØ¨Ø§",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø³Ø§Ø¹Ø© ØªÙØ±ÙØ¨Ø§Ù",
  },

  xHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©",
    two: "Ø³Ø§Ø¹ØªØ§Ù",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª",
    other: "{{count}} Ø³Ø§Ø¹Ø©",
  },

  xDays: {
    one: "ÙÙÙ ÙØ§Ø­Ø¯",
    two: "ÙÙÙØ§Ù",
    threeToTen: "{{count}} Ø£ÙØ§Ù",
    other: "{{count}} ÙÙÙ",
  },

  aboutXWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ ØªÙØ±ÙØ¨Ø§",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹Ø§ ØªÙØ±ÙØ¨Ø§",
  },

  xWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯",
    two: "Ø£Ø³Ø¨ÙØ¹Ø§Ù",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹Ø§",
  },

  aboutXMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø´ÙØ±ÙÙ ØªÙØ±ÙØ¨Ø§",
    threeToTen: "{{count}} Ø£Ø´ÙØ± ØªÙØ±ÙØ¨Ø§",
    other: "{{count}} Ø´ÙØ±Ø§ ØªÙØ±ÙØ¨Ø§Ù",
  },

  xMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯",
    two: "Ø´ÙØ±Ø§Ù",
    threeToTen: "{{count}} Ø£Ø´ÙØ±",
    other: "{{count}} Ø´ÙØ±Ø§",
  },

  aboutXYears: {
    one: "Ø³ÙØ© ÙØ§Ø­Ø¯Ø© ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø³ÙØªÙÙ ØªÙØ±ÙØ¨Ø§",
    threeToTen: "{{count}} Ø³ÙÙØ§Øª ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø³ÙØ© ØªÙØ±ÙØ¨Ø§Ù",
  },

  xYears: {
    one: "Ø³ÙØ© ÙØ§Ø­Ø¯",
    two: "Ø³ÙØªØ§Ù",
    threeToTen: "{{count}} Ø³ÙÙØ§Øª",
    other: "{{count}} Ø³ÙØ©",
  },

  overXYears: {
    one: "Ø£ÙØ«Ø± ÙÙ Ø³ÙØ©",
    two: "Ø£ÙØ«Ø± ÙÙ Ø³ÙØªÙÙ",
    threeToTen: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø³ÙÙØ§Øª",
    other: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø³ÙØ©",
  },

  almostXYears: {
    one: "ÙØ§ ÙÙØ§Ø±Ø¨ Ø³ÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "ÙØ§ ÙÙØ§Ø±Ø¨ Ø³ÙØªÙÙ",
    threeToTen: "ÙØ§ ÙÙØ§Ø±Ø¨ {{count}} Ø³ÙÙØ§Øª",
    other: "ÙØ§ ÙÙØ§Ø±Ø¨ {{count}} Ø³ÙØ©",
  },
};

const formatDistance$2C = (token, count, options) => {
  const usageGroup = formatDistanceLocale$1i[token];
  let result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ø®ÙØ§Ù " + result;
    } else {
      return "ÙÙØ° " + result;
    }
  }

  return result;
};
formatDistance$2D.formatDistance = formatDistance$2C;

var formatLong$1r = {};

formatLong$1r.formatLong = void 0;
var _index$5M = buildFormatLongFn$1;

const dateFormats$1r = {
  full: "EEEEØ do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy",
};

const timeFormats$1r = {
  full: "HH:mm:ss",
  long: "HH:mm:ss",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1r = {
  full: "{{date}} 'Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' {{time}}",
  long: "{{date}} 'Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1r.formatLong = {
  date: (0, _index$5M.buildFormatLongFn)({
    formats: dateFormats$1r,
    defaultWidth: "full",
  }),

  time: (0, _index$5M.buildFormatLongFn)({
    formats: timeFormats$1r,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5M.buildFormatLongFn)({
    formats: dateTimeFormats$1r,
    defaultWidth: "full",
  }),
});

var formatRelative$2D = {};

formatRelative$2D.formatRelative = void 0;

const formatRelativeLocale$1j = {
  lastWeek: "eeee 'Ø§ÙÙØ§Ø¶Ù Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' p",
  yesterday: "'Ø§ÙØ£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' p",
  today: "'Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' p",
  tomorrow: "'ØºØ¯Ø§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' p",
  nextWeek: "eeee 'Ø§ÙÙØ§Ø¯Ù Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©' p",
  other: "P",
};

const formatRelative$2C = (token) => formatRelativeLocale$1j[token];
formatRelative$2D.formatRelative = formatRelative$2C;

var localize$1j = {};

localize$1j.localize = void 0;
var _index$5L = buildLocalizeFn$1;

const eraValues$1j = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù.", "Ø¨.Ù."],
  wide: ["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯"],
};

const quarterValues$1j = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø±1", "Ø±2", "Ø±3", "Ø±4"],
  wide: ["Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹"],
};

const monthValues$1j = {
  narrow: ["Ù", "Ù", "Ù", "Ø£", "Ù", "Ù", "Ù", "Ø£", "Ø³", "Ø£", "Ù", "Ø¯"],
  abbreviated: [
    "ÙÙØ§ÙØ±",
    "ÙØ¨Ø±Ø§ÙØ±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§ÙÙ",
    "ÙÙÙÙÙ",
    "ÙÙÙÙÙ",
    "Ø£ØºØ³Ø·Ø³",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],

  wide: [
    "ÙÙØ§ÙØ±",
    "ÙØ¨Ø±Ø§ÙØ±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§ÙÙ",
    "ÙÙÙÙÙ",
    "ÙÙÙÙÙ",
    "Ø£ØºØ³Ø·Ø³",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],
};

const dayValues$1j = {
  narrow: ["Ø­", "Ù", "Ø«", "Ø±", "Ø®", "Ø¬", "Ø³"],
  short: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  abbreviated: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],

  wide: [
    "Ø§ÙØ£Ø­Ø¯",
    "Ø§ÙØ§Ø«ÙÙÙ",
    "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡",
    "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡",
    "Ø§ÙØ®ÙÙØ³",
    "Ø§ÙØ¬ÙØ¹Ø©",
    "Ø§ÙØ³Ø¨Øª",
  ],
};

const dayPeriodValues$1j = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    morning: "Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙØ¸ÙØ±",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "Ø§ÙÙØ³Ø§Ø¡",
    night: "Ø§ÙÙÙÙ",
    midnight: "ÙÙØªØµÙ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    morning: "Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙØ¸ÙØ±",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "Ø§ÙÙØ³Ø§Ø¡",
    night: "Ø§ÙÙÙÙ",
    midnight: "ÙÙØªØµÙ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    morning: "Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙØ¸ÙØ±",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "Ø§ÙÙØ³Ø§Ø¡",
    night: "Ø§ÙÙÙÙ",
    midnight: "ÙÙØªØµÙ Ø§ÙÙÙÙ",
  },
};

const formattingDayPeriodValues$13 = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙØ¸ÙØ±",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
    midnight: "ÙÙØªØµÙ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙØ¸ÙØ±",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
    midnight: "ÙÙØªØµÙ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙØ¸ÙØ±",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
    midnight: "ÙÙØªØµÙ Ø§ÙÙÙÙ",
  },
};

const ordinalNumber$1j = (num) => String(num);

(localize$1j.localize = {
  ordinalNumber: ordinalNumber$1j,

  era: (0, _index$5L.buildLocalizeFn)({
    values: eraValues$1j,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5L.buildLocalizeFn)({
    values: quarterValues$1j,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5L.buildLocalizeFn)({
    values: monthValues$1j,
    defaultWidth: "wide",
  }),

  day: (0, _index$5L.buildLocalizeFn)({
    values: dayValues$1j,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5L.buildLocalizeFn)({
    values: dayPeriodValues$1j,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$13,
    defaultFormattingWidth: "wide",
  }),
});

var match$1i = {};

match$1i.match = void 0;
var _index$5K = buildMatchPatternFn$1;
var _index2$2R = buildMatchFn$1;

const matchOrdinalNumberPattern$1i = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$1i = /\d+/i;

const matchEraPatterns$1i = {
  narrow: /[ÙØ¨]/,
  abbreviated: /[ÙØ¨]\.Ù\./,
  wide: /(ÙØ¨Ù|Ø¨Ø¹Ø¯) Ø§ÙÙÙÙØ§Ø¯/,
};
const parseEraPatterns$1i = {
  any: [/ÙØ¨Ù/, /Ø¨Ø¹Ø¯/],
};

const matchQuarterPatterns$1i = {
  narrow: /^[1234]/i,
  abbreviated: /Ø±[1234]/,
  wide: /Ø§ÙØ±Ø¨Ø¹ (Ø§ÙØ£ÙÙ|Ø§ÙØ«Ø§ÙÙ|Ø§ÙØ«Ø§ÙØ«|Ø§ÙØ±Ø§Ø¨Ø¹)/,
};
const parseQuarterPatterns$1i = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1i = {
  narrow: /^[Ø£ÙÙÙØ³ÙØ¯]/,
  abbreviated:
    /^(ÙÙØ§ÙØ±|ÙØ¨Ø±Ø§ÙØ±|ÙØ§Ø±Ø³|Ø£Ø¨Ø±ÙÙ|ÙØ§ÙÙ|ÙÙÙÙÙ|ÙÙÙÙÙ|Ø£ØºØ³Ø·Ø³|Ø³Ø¨ØªÙØ¨Ø±|Ø£ÙØªÙØ¨Ø±|ÙÙÙÙØ¨Ø±|Ø¯ÙØ³ÙØ¨Ø±)/,
  wide: /^(ÙÙØ§ÙØ±|ÙØ¨Ø±Ø§ÙØ±|ÙØ§Ø±Ø³|Ø£Ø¨Ø±ÙÙ|ÙØ§ÙÙ|ÙÙÙÙÙ|ÙÙÙÙÙ|Ø£ØºØ³Ø·Ø³|Ø³Ø¨ØªÙØ¨Ø±|Ø£ÙØªÙØ¨Ø±|ÙÙÙÙØ¨Ø±|Ø¯ÙØ³ÙØ¨Ø±)/,
};
const parseMonthPatterns$1i = {
  narrow: [
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ø³/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^ÙÙØ§ÙØ±/i,
    /^ÙØ¨Ø±Ø§ÙØ±/i,
    /^ÙØ§Ø±Ø³/i,
    /^Ø£Ø¨Ø±ÙÙ/i,
    /^ÙØ§ÙÙ/i,
    /^ÙÙÙÙÙ/i,
    /^ÙÙÙÙÙ/i,
    /^Ø£ØºØ³Ø·Ø³/i,
    /^Ø³Ø¨ØªÙØ¨Ø±/i,
    /^Ø£ÙØªÙØ¨Ø±/i,
    /^ÙÙÙÙØ¨Ø±/i,
    /^Ø¯ÙØ³ÙØ¨Ø±/i,
  ],
};

const matchDayPatterns$1i = {
  narrow: /^[Ø­ÙØ«Ø±Ø®Ø¬Ø³]/i,
  short: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  abbreviated: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  wide: /^(Ø§ÙØ£Ø­Ø¯|Ø§ÙØ§Ø«ÙÙÙ|Ø§ÙØ«ÙØ§Ø«Ø§Ø¡|Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡|Ø§ÙØ®ÙÙØ³|Ø§ÙØ¬ÙØ¹Ø©|Ø§ÙØ³Ø¨Øª)/i,
};
const parseDayPatterns$1i = {
  narrow: [/^Ø­/i, /^Ù/i, /^Ø«/i, /^Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
  wide: [
    /^Ø§ÙØ£Ø­Ø¯/i,
    /^Ø§ÙØ§Ø«ÙÙÙ/i,
    /^Ø§ÙØ«ÙØ§Ø«Ø§Ø¡/i,
    /^Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡/i,
    /^Ø§ÙØ®ÙÙØ³/i,
    /^Ø§ÙØ¬ÙØ¹Ø©/i,
    /^Ø§ÙØ³Ø¨Øª/i,
  ],

  any: [/^Ø£Ø­/i, /^Ø§Ø«/i, /^Ø«/i, /^Ø£Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
};

const matchDayPeriodPatterns$1i = {
  narrow: /^(Øµ|Ù|ÙÙØªØµÙ Ø§ÙÙÙÙ|Ø§ÙØ¸ÙØ±|Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±|ÙÙ Ø§ÙØµØ¨Ø§Ø­|ÙÙ Ø§ÙÙØ³Ø§Ø¡|ÙÙ Ø§ÙÙÙÙ)/,
  any: /^(Øµ|Ù|ÙÙØªØµÙ Ø§ÙÙÙÙ|Ø§ÙØ¸ÙØ±|Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±|ÙÙ Ø§ÙØµØ¨Ø§Ø­|ÙÙ Ø§ÙÙØ³Ø§Ø¡|ÙÙ Ø§ÙÙÙÙ)/,
};
const parseDayPeriodPatterns$1i = {
  any: {
    am: /^Øµ/,
    pm: /^Ù/,
    midnight: /ÙÙØªØµÙ Ø§ÙÙÙÙ/,
    noon: /Ø§ÙØ¸ÙØ±/,
    afternoon: /Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±/,
    morning: /ÙÙ Ø§ÙØµØ¨Ø§Ø­/,
    evening: /ÙÙ Ø§ÙÙØ³Ø§Ø¡/,
    night: /ÙÙ Ø§ÙÙÙÙ/,
  },
};

(match$1i.match = {
  ordinalNumber: (0, _index$5K.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1i,
    parsePattern: parseOrdinalNumberPattern$1i,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index2$2R.buildMatchFn)({
    matchPatterns: matchEraPatterns$1i,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1i,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$2R.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1i,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1i,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index2$2R.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1i,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1i,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$2R.buildMatchFn)({
    matchPatterns: matchDayPatterns$1i,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1i,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$2R.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1i,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1i,
    defaultParseWidth: "any",
  }),
});

ar.ar = void 0;
var _index$5J = formatDistance$2D;
var _index2$2Q = formatLong$1r;
var _index3$1u = formatRelative$2D;
var _index4$1t = localize$1j;
var _index5$1t = match$1i;

/**
 * @category Locales
 * @summary Arabic locale (Modern Standard Arabic - Al-fussha).
 * @language Modern Standard Arabic
 * @iso-639-2 ara
 * @author Abdallah Hassan [@AbdallahAHO](https://github.com/AbdallahAHO)
 * @author Koussay Haj Kacem [@essana3](https://github.com/essana3)
 */
(ar.ar = {
  code: "ar",
  formatDistance: _index$5J.formatDistance,
  formatLong: _index2$2Q.formatLong,
  formatRelative: _index3$1u.formatRelative,
  localize: _index4$1t.localize,
  match: _index5$1t.match,
  options: {
    weekStartsOn: 6 /* Saturday */,
    firstWeekContainsDate: 1,
  },
});

var arDZ = {};

var formatDistance$2B = {};

formatDistance$2B.formatDistance = void 0;

const formatDistanceLocale$1h = {
  lessThanXSeconds: {
    one: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø£ÙÙ ÙÙ Ø«Ø§ÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø«ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø«Ø§ÙÙØ©",
  },

  xSeconds: {
    one: "Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø«Ø§ÙØªÙÙ",
    threeToTen: "{{count}} Ø«ÙØ§ÙÙ",
    other: "{{count}} Ø«Ø§ÙÙØ©",
  },

  halfAMinute: "ÙØµÙ Ø¯ÙÙÙØ©",

  lessThanXMinutes: {
    one: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙØ§Ø¦Ù",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙÙÙØ©",
  },

  xMinutes: {
    one: "Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø¯ÙÙÙØªÙÙ",
    threeToTen: "{{count}} Ø¯ÙØ§Ø¦Ù",
    other: "{{count}} Ø¯ÙÙÙØ©",
  },

  aboutXHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø© ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø³Ø§Ø¹ØªÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø³Ø§Ø¹Ø© ØªÙØ±ÙØ¨Ø§Ù",
  },

  xHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©",
    two: "Ø³Ø§Ø¹ØªÙÙ",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª",
    other: "{{count}} Ø³Ø§Ø¹Ø©",
  },

  xDays: {
    one: "ÙÙÙ ÙØ§Ø­Ø¯",
    two: "ÙÙÙÙÙ",
    threeToTen: "{{count}} Ø£ÙØ§Ù",
    other: "{{count}} ÙÙÙ",
  },

  aboutXWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§Ù",
  },

  xWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹",
  },

  aboutXMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø´ÙØ±ÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø´ÙØ± ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø´ÙØ± ØªÙØ±ÙØ¨Ø§Ù",
  },

  xMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯",
    two: "Ø´ÙØ±ÙÙ",
    threeToTen: "{{count}} Ø£Ø´ÙØ±",
    other: "{{count}} Ø´ÙØ±",
  },

  aboutXYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨Ø§Ù",
  },

  xYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯",
    two: "Ø¹Ø§ÙÙÙ",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù",
    other: "{{count}} Ø¹Ø§Ù",
  },

  overXYears: {
    one: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§Ù",
    two: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§ÙÙÙ",
    threeToTen: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø£Ø¹ÙØ§Ù",
    other: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø¹Ø§Ù",
  },

  almostXYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨Ø§Ù",
  },
};

const formatDistance$2A = (token, count, options) => {
  options = options || {};

  const usageGroup = formatDistanceLocale$1h[token];
  let result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }

  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÙÙ Ø®ÙØ§Ù " + result;
    } else {
      return "ÙÙØ° " + result;
    }
  }

  return result;
};
formatDistance$2B.formatDistance = formatDistance$2A;

var formatLong$1q = {};

formatLong$1q.formatLong = void 0;
var _index$5I = buildFormatLongFn$1;

const dateFormats$1q = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$1q = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1q = {
  full: "{{date}} 'Ø¹ÙØ¯' {{time}}",
  long: "{{date}} 'Ø¹ÙØ¯' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1q.formatLong = {
  date: (0, _index$5I.buildFormatLongFn)({
    formats: dateFormats$1q,
    defaultWidth: "full",
  }),

  time: (0, _index$5I.buildFormatLongFn)({
    formats: timeFormats$1q,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5I.buildFormatLongFn)({
    formats: dateTimeFormats$1q,
    defaultWidth: "full",
  }),
});

var formatRelative$2B = {};

formatRelative$2B.formatRelative = void 0;

const formatRelativeLocale$1i = {
  lastWeek: "'Ø£Ø®Ø±' eeee 'Ø¹ÙØ¯' p",
  yesterday: "'Ø£ÙØ³ Ø¹ÙØ¯' p",
  today: "'Ø§ÙÙÙÙ Ø¹ÙØ¯' p",
  tomorrow: "'ØºØ¯Ø§Ù Ø¹ÙØ¯' p",
  nextWeek: "eeee 'Ø¹ÙØ¯' p",
  other: "P",
};

const formatRelative$2A = (token, _date, _baseDate, _options) => {
  return formatRelativeLocale$1i[token];
};
formatRelative$2B.formatRelative = formatRelative$2A;

var localize$1i = {};

localize$1i.localize = void 0;
var _index$5H = buildLocalizeFn$1;

const eraValues$1i = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù.", "Ø¨.Ù."],
  wide: ["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯"],
};

const quarterValues$1i = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø±1", "Ø±2", "Ø±3", "Ø±4"],
  wide: ["Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹"],
};

const monthValues$1i = {
  narrow: ["Ø¬", "Ù", "Ù", "Ø£", "Ù", "Ø¬", "Ø¬", "Ø£", "Ø³", "Ø£", "Ù", "Ø¯"],
  abbreviated: [
    "Ø¬Ø§ÙÙ",
    "ÙÙÙÙ",
    "ÙØ§Ø±Ø³",
    "Ø£ÙØ±ÙÙ",
    "ÙØ§ÙÙ",
    "Ø¬ÙØ§ÙÙ",
    "Ø¬ÙÙÙ",
    "Ø£ÙØª",
    "Ø³Ø¨ØªÙ",
    "Ø£ÙØªÙ",
    "ÙÙÙÙ",
    "Ø¯ÙØ³Ù",
  ],

  wide: [
    "Ø¬Ø§ÙÙÙ",
    "ÙÙÙØ±Ù",
    "ÙØ§Ø±Ø³",
    "Ø£ÙØ±ÙÙ",
    "ÙØ§Ù",
    "Ø¬ÙØ§Ù",
    "Ø¬ÙÙÙÙØ©",
    "Ø£ÙØª",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],
};

const dayValues$1i = {
  narrow: ["Ø­", "Ù", "Ø«", "Ø±", "Ø®", "Ø¬", "Ø³"],
  short: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  abbreviated: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙ", "Ø«ÙØ§", "Ø£Ø±Ø¨Ù", "Ø®ÙÙÙ", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  wide: [
    "Ø§ÙØ£Ø­Ø¯",
    "Ø§ÙØ§Ø«ÙÙÙ",
    "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡",
    "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡",
    "Ø§ÙØ®ÙÙØ³",
    "Ø§ÙØ¬ÙØ¹Ø©",
    "Ø§ÙØ³Ø¨Øª",
  ],
};

const dayPeriodValues$1i = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
};
const formattingDayPeriodValues$12 = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
};

const ordinalNumber$1i = (dirtyNumber) => {
  return String(dirtyNumber);
};

(localize$1i.localize = {
  ordinalNumber: ordinalNumber$1i,

  era: (0, _index$5H.buildLocalizeFn)({
    values: eraValues$1i,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5H.buildLocalizeFn)({
    values: quarterValues$1i,
    defaultWidth: "wide",
    argumentCallback: (quarter) => Number(quarter) - 1,
  }),

  month: (0, _index$5H.buildLocalizeFn)({
    values: monthValues$1i,
    defaultWidth: "wide",
  }),

  day: (0, _index$5H.buildLocalizeFn)({
    values: dayValues$1i,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5H.buildLocalizeFn)({
    values: dayPeriodValues$1i,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$12,
    defaultFormattingWidth: "wide",
  }),
});

var match$1h = {};

match$1h.match = void 0;
var _index$5G = buildMatchPatternFn$1;
var _index2$2P = buildMatchFn$1;

const matchOrdinalNumberPattern$1h = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$1h = /\d+/i;

const matchEraPatterns$1h = {
  narrow: /^(Ù|Ø¨)/i,
  abbreviated: /^(Ù\.?\s?Ù\.?|Ù\.?\s?Ù\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯)/i,
};
const parseEraPatterns$1h = {
  any: [/^ÙØ¨Ù/i, /^Ø¨Ø¹Ø¯/i],
};

const matchQuarterPatterns$1h = {
  narrow: /^[1234]/i,
  abbreviated: /^Ø±[1234]/i,
  wide: /^Ø§ÙØ±Ø¨Ø¹ [1234]/i,
};
const parseQuarterPatterns$1h = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1h = {
  narrow: /^[Ø¬ÙÙØ£Ø³ÙØ¯]/i,
  abbreviated: /^(Ø¬Ø§Ù|ÙÙÙ|ÙØ§Ø±|Ø£ÙØ±|ÙØ§Ù|Ø¬ÙØ§|Ø¬ÙÙ|Ø£ÙØª|Ø³Ø¨Øª|Ø£ÙØª|ÙÙÙ|Ø¯ÙØ³)/i,
  wide: /^(Ø¬Ø§ÙÙÙ|ÙÙÙØ±Ù|ÙØ§Ø±Ø³|Ø£ÙØ±ÙÙ|ÙØ§Ù|Ø¬ÙØ§Ù|Ø¬ÙÙÙÙØ©|Ø£ÙØª|Ø³Ø¨ØªÙØ¨Ø±|Ø£ÙØªÙØ¨Ø±|ÙÙÙÙØ¨Ø±|Ø¯ÙØ³ÙØ¨Ø±)/i,
};

const parseMonthPatterns$1h = {
  narrow: [
    /^Ø¬/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¬/i,
    /^Ø¬/i,
    /^Ø£/i,
    /^Ø³/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^Ø¬Ø§Ù/i,
    /^ÙÙÙ/i,
    /^ÙØ§Ø±/i,
    /^Ø£ÙØ±/i,
    /^ÙØ§Ù/i,
    /^Ø¬ÙØ§/i,
    /^Ø¬ÙÙ/i,
    /^Ø£ÙØª/i,
    /^Ø³Ø¨Øª/i,
    /^Ø£ÙØª/i,
    /^ÙÙÙ/i,
    /^Ø¯ÙØ³/i,
  ],
};

const matchDayPatterns$1h = {
  narrow: /^[Ø­ÙØ«Ø±Ø®Ø¬Ø³]/i,
  short: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  abbreviated: /^(Ø£Ø­Ø¯|Ø§Ø«Ù|Ø«ÙØ§|Ø£Ø±Ø¨|Ø®ÙÙ|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  wide: /^(Ø§ÙØ£Ø­Ø¯|Ø§ÙØ§Ø«ÙÙÙ|Ø§ÙØ«ÙØ§Ø«Ø§Ø¡|Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡|Ø§ÙØ®ÙÙØ³|Ø§ÙØ¬ÙØ¹Ø©|Ø§ÙØ³Ø¨Øª)/i,
};
const parseDayPatterns$1h = {
  narrow: [/^Ø­/i, /^Ù/i, /^Ø«/i, /^Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
  wide: [
    /^Ø§ÙØ£Ø­Ø¯/i,
    /^Ø§ÙØ§Ø«ÙÙÙ/i,
    /^Ø§ÙØ«ÙØ§Ø«Ø§Ø¡/i,
    /^Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡/i,
    /^Ø§ÙØ®ÙÙØ³/i,
    /^Ø§ÙØ¬ÙØ¹Ø©/i,
    /^Ø§ÙØ³Ø¨Øª/i,
  ],

  any: [/^Ø£Ø­/i, /^Ø§Ø«/i, /^Ø«/i, /^Ø£Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
};

const matchDayPeriodPatterns$1h = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns$1h = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

(match$1h.match = {
  ordinalNumber: (0, _index$5G.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1h,
    parsePattern: parseOrdinalNumberPattern$1h,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index2$2P.buildMatchFn)({
    matchPatterns: matchEraPatterns$1h,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1h,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$2P.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1h,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1h,
    defaultParseWidth: "any",
    valueCallback: (index) => Number(index) + 1,
  }),

  month: (0, _index2$2P.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1h,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1h,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$2P.buildMatchFn)({
    matchPatterns: matchDayPatterns$1h,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1h,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$2P.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1h,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1h,
    defaultParseWidth: "any",
  }),
});

arDZ.arDZ = void 0;
var _index$5F = formatDistance$2B;
var _index2$2O = formatLong$1q;
var _index3$1t = formatRelative$2B;
var _index4$1s = localize$1i;
var _index5$1s = match$1h;

/**
 * @category Locales
 * @summary Arabic locale (Algerian Arabic).
 * @language Algerian Arabic
 * @iso-639-2 ara
 * @author Badreddine Boumaza [@badre429](https://github.com/badre429)
 * @author Ahmed ElShahat [@elshahat](https://github.com/elshahat)
 */
(arDZ.arDZ = {
  code: "ar-DZ",
  formatDistance: _index$5F.formatDistance,
  formatLong: _index2$2O.formatLong,
  formatRelative: _index3$1t.formatRelative,
  localize: _index4$1s.localize,
  match: _index5$1s.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var arEG = {};

var formatDistance$2z = {};

formatDistance$2z.formatDistance = void 0;

const formatDistanceLocale$1g = {
  lessThanXSeconds: {
    one: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø«ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø«Ø§ÙÙØ©",
  },

  xSeconds: {
    one: "Ø«Ø§ÙÙØ©",
    two: "Ø«Ø§ÙÙØªÙÙ",
    threeToTen: "{{count}} Ø«ÙØ§ÙÙ",
    other: "{{count}} Ø«Ø§ÙÙØ©",
  },

  halfAMinute: "ÙØµ Ø¯ÙÙÙØ©",

  lessThanXMinutes: {
    one: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙÙÙØ©",
  },

  xMinutes: {
    one: "Ø¯ÙÙÙØ©",
    two: "Ø¯ÙÙÙØªÙÙ",
    threeToTen: "{{count}} Ø¯ÙØ§ÙÙ",
    other: "{{count}} Ø¯ÙÙÙØ©",
  },

  aboutXHours: {
    one: "Ø­ÙØ§ÙÙ Ø³Ø§Ø¹Ø©",
    two: "Ø­ÙØ§ÙÙ Ø³Ø§Ø¹ØªÙÙ",
    threeToTen: "Ø­ÙØ§ÙÙ {{count}} Ø³Ø§Ø¹Ø§Øª",
    other: "Ø­ÙØ§ÙÙ {{count}} Ø³Ø§Ø¹Ø©",
  },

  xHours: {
    one: "Ø³Ø§Ø¹Ø©",
    two: "Ø³Ø§Ø¹ØªÙÙ",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª",
    other: "{{count}} Ø³Ø§Ø¹Ø©",
  },

  xDays: {
    one: "ÙÙÙ",
    two: "ÙÙÙÙÙ",
    threeToTen: "{{count}} Ø£ÙØ§Ù",
    other: "{{count}} ÙÙÙ",
  },

  aboutXWeeks: {
    one: "Ø­ÙØ§ÙÙ Ø£Ø³Ø¨ÙØ¹",
    two: "Ø­ÙØ§ÙÙ Ø£Ø³Ø¨ÙØ¹ÙÙ",
    threeToTen: "Ø­ÙØ§ÙÙ {{count}} Ø£Ø³Ø§Ø¨ÙØ¹",
    other: "Ø­ÙØ§ÙÙ {{count}} Ø£Ø³Ø¨ÙØ¹",
  },

  xWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹",
  },

  aboutXMonths: {
    one: "Ø­ÙØ§ÙÙ Ø´ÙØ±",
    two: "Ø­ÙØ§ÙÙ Ø´ÙØ±ÙÙ",
    threeToTen: "Ø­ÙØ§ÙÙ {{count}} Ø£Ø´ÙØ±",
    other: "Ø­ÙØ§ÙÙ {{count}} Ø´ÙØ±",
  },

  xMonths: {
    one: "Ø´ÙØ±",
    two: "Ø´ÙØ±ÙÙ",
    threeToTen: "{{count}} Ø£Ø´ÙØ±",
    other: "{{count}} Ø´ÙØ±",
  },

  aboutXYears: {
    one: "Ø­ÙØ§ÙÙ Ø³ÙØ©",
    two: "Ø­ÙØ§ÙÙ Ø³ÙØªÙÙ",
    threeToTen: "Ø­ÙØ§ÙÙ {{count}} Ø³ÙÙÙ",
    other: "Ø­ÙØ§ÙÙ {{count}} Ø³ÙØ©",
  },

  xYears: {
    one: "Ø¹Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù",
    other: "{{count}} Ø¹Ø§Ù",
  },

  overXYears: {
    one: "Ø£ÙØ«Ø± ÙÙ Ø³ÙØ©",
    two: "Ø£ÙØ«Ø± ÙÙ Ø³ÙØªÙÙ",
    threeToTen: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø³ÙÙÙ",
    other: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø³ÙØ©",
  },

  almostXYears: {
    one: "Ø¹Ø§Ù ØªÙØ±ÙØ¨ÙØ§",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨ÙØ§",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨ÙØ§",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨ÙØ§",
  },
};

const formatDistance$2y = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$1g[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return `ÙÙ Ø®ÙØ§Ù ${result}`;
    } else {
      return `ÙÙØ° ${result}`;
    }
  }

  return result;
};
formatDistance$2z.formatDistance = formatDistance$2y;

var formatLong$1p = {};

formatLong$1p.formatLong = void 0;
var _index$5E = buildFormatLongFn$1;

const dateFormats$1p = {
  full: "EEEEØ do MMMM y",
  long: "do MMMM y",
  medium: "dd/MMM/y",
  short: "d/MM/y",
};

const timeFormats$1p = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1p = {
  full: "{{date}} 'Ø§ÙØ³Ø§Ø¹Ø©' {{time}}",
  long: "{{date}} 'Ø§ÙØ³Ø§Ø¹Ø©' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1p.formatLong = {
  date: (0, _index$5E.buildFormatLongFn)({
    formats: dateFormats$1p,
    defaultWidth: "full",
  }),

  time: (0, _index$5E.buildFormatLongFn)({
    formats: timeFormats$1p,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5E.buildFormatLongFn)({
    formats: dateTimeFormats$1p,
    defaultWidth: "full",
  }),
});

var formatRelative$2z = {};

formatRelative$2z.formatRelative = void 0;

const formatRelativeLocale$1h = {
  lastWeek: "eeee 'Ø§ÙÙÙ Ø¬Ø§Ù Ø§ÙØ³Ø§Ø¹Ø©' p",
  yesterday: "'Ø¥ÙØ¨Ø§Ø±Ø­ Ø§ÙØ³Ø§Ø¹Ø©' p",
  today: "'Ø§ÙÙÙØ§Ø±Ø¯Ø© Ø§ÙØ³Ø§Ø¹Ø©' p",
  tomorrow: "'Ø¨ÙØ±Ø© Ø§ÙØ³Ø§Ø¹Ø©' p",
  nextWeek: "eeee 'Ø§ÙØ³Ø§Ø¹Ø©' p",
  other: "P",
};

const formatRelative$2y = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$1h[token];
formatRelative$2z.formatRelative = formatRelative$2y;

var localize$1h = {};

localize$1h.localize = void 0;
var _index$5D = buildLocalizeFn$1;

const eraValues$1h = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù", "Ø¨.Ù"],
  wide: ["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯"],
};

const quarterValues$1h = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø±1", "Ø±2", "Ø±3", "Ø±4"],
  wide: ["Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹"],
};

const monthValues$1h = {
  narrow: ["Ù", "Ù", "Ù", "Ø£", "Ù", "Ù", "Ù", "Ø£", "Ø³", "Ø£", "Ù", "Ø¯"],
  abbreviated: [
    "ÙÙØ§",
    "ÙØ¨Ø±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§ÙÙ",
    "ÙÙÙÙ",
    "ÙÙÙÙ",
    "Ø£ØºØ³Ù",
    "Ø³Ø¨ØªÙ",
    "Ø£ÙØªÙ",
    "ÙÙÙÙ",
    "Ø¯ÙØ³Ù",
  ],

  wide: [
    "ÙÙØ§ÙØ±",
    "ÙØ¨Ø±Ø§ÙØ±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§ÙÙ",
    "ÙÙÙÙÙ",
    "ÙÙÙÙÙ",
    "Ø£ØºØ³Ø·Ø³",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],
};

const dayValues$1h = {
  narrow: ["Ø­", "Ù", "Ø«", "Ø±", "Ø®", "Ø¬", "Ø³"],
  short: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  abbreviated: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],

  wide: [
    "Ø§ÙØ£Ø­Ø¯",
    "Ø§ÙØ§Ø«ÙÙÙ",
    "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡",
    "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡",
    "Ø§ÙØ®ÙÙØ³",
    "Ø§ÙØ¬ÙØ¹Ø©",
    "Ø§ÙØ³Ø¨Øª",
  ],
};

const dayPeriodValues$1h = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ù",
    night: "ÙÙÙØ§Ù",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±Ø§Ù",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ù",
    night: "ÙÙÙØ§Ù",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±Ø§Ù",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ù",
    night: "ÙÙÙØ§Ù",
  },
};

const formattingDayPeriodValues$11 = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±Ø§Ù",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø¸ÙØ±Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
};

const ordinalNumber$1h = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$1h.localize = {
  ordinalNumber: ordinalNumber$1h,

  era: (0, _index$5D.buildLocalizeFn)({
    values: eraValues$1h,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5D.buildLocalizeFn)({
    values: quarterValues$1h,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5D.buildLocalizeFn)({
    values: monthValues$1h,
    defaultWidth: "wide",
  }),

  day: (0, _index$5D.buildLocalizeFn)({
    values: dayValues$1h,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5D.buildLocalizeFn)({
    values: dayPeriodValues$1h,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$11,
    defaultFormattingWidth: "wide",
  }),
});

var match$1g = {};

match$1g.match = void 0;

var _index$5C = buildMatchFn$1;
var _index2$2N = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1g = /^(\d+)/;
const parseOrdinalNumberPattern$1g = /\d+/i;

const matchEraPatterns$1g = {
  narrow: /^(Ù|Ø¨)/g,
  abbreviated: /^(Ù.Ù|Ø¨.Ù)/g,
  wide: /^(ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯)/g,
};
const parseEraPatterns$1g = {
  any: [/^Ù/g, /^Ø¨/g],
};
const matchQuarterPatterns$1g = {
  narrow: /^[1234]/,
  abbreviated: /^Ø±[1234]/,
  wide: /^Ø§ÙØ±Ø¨Ø¹ (Ø§ÙØ£ÙÙ|Ø§ÙØ«Ø§ÙÙ|Ø§ÙØ«Ø§ÙØ«|Ø§ÙØ±Ø§Ø¨Ø¹)/,
};
const parseQuarterPatterns$1g = {
  wide: [/Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ/, /Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ/, /Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«/, /Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹/],

  any: [/1/, /2/, /3/, /4/],
};

const matchMonthPatterns$1g = {
  narrow: /^(Ù|Ù|Ù|Ø£|Ø³|Ù|Ø¯)/,
  abbreviated: /^(ÙÙØ§|ÙØ¨Ø±|ÙØ§Ø±Ø³|Ø£Ø¨Ø±ÙÙ|ÙØ§ÙÙ|ÙÙÙÙ|ÙÙÙÙ|Ø£ØºØ³Ù|Ø³Ø¨ØªÙ|Ø£ÙØªÙ|ÙÙÙÙ|Ø¯ÙØ³Ù)/,
  wide: /^(ÙÙØ§ÙØ±|ÙØ¨Ø±Ø§ÙØ±|ÙØ§Ø±Ø³|Ø£Ø¨Ø±ÙÙ|ÙØ§ÙÙ|ÙÙÙÙÙ|ÙÙÙÙÙ|Ø£ØºØ³Ø·Ø³|Ø³Ø¨ØªÙØ¨Ø±|Ø£ÙØªÙØ¨Ø±|ÙÙÙÙØ¨Ø±|Ø¯ÙØ³ÙØ¨Ø±)/,
};
const parseMonthPatterns$1g = {
  narrow: [
    /^Ù/,
    /^Ù/,
    /^Ù/,
    /^Ø£/,
    /^Ù/,
    /^Ù/,
    /^Ù/,
    /^Ø£/,
    /^Ø³/,
    /^Ø£/,
    /^Ù/,
    /^Ø¯/,
  ],

  any: [
    /^ÙÙØ§/,
    /^ÙØ¨Ø±/,
    /^ÙØ§Ø±Ø³/,
    /^Ø£Ø¨Ø±ÙÙ/,
    /^ÙØ§ÙÙ/,
    /^ÙÙÙ/,
    /^ÙÙÙ/,
    /^Ø£ØºØ³/,
    /^Ø³Ø¨Øª/,
    /^Ø£ÙØª/,
    /^ÙÙÙ/,
    /^Ø¯ÙØ³/,
  ],
};

const matchDayPatterns$1g = {
  narrow: /^(Ø­|Ù|Ø«|Ø±|Ø®|Ø¬|Ø³)/,
  short: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/,
  abbreviated: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/,
  wide: /^(Ø§ÙØ£Ø­Ø¯|Ø§ÙØ§Ø«ÙÙÙ|Ø§ÙØ«ÙØ§Ø«Ø§Ø¡|Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡|Ø§ÙØ®ÙÙØ³|Ø§ÙØ¬ÙØ¹Ø©|Ø§ÙØ³Ø¨Øª)/,
};
const parseDayPatterns$1g = {
  narrow: [/^Ø­/, /^Ù/, /^Ø«/, /^Ø±/, /^Ø®/, /^Ø¬/, /^Ø³/],
  any: [/Ø£Ø­Ø¯/, /Ø§Ø«ÙÙÙ/, /Ø«ÙØ§Ø«Ø§Ø¡/, /Ø£Ø±Ø¨Ø¹Ø§Ø¡/, /Ø®ÙÙØ³/, /Ø¬ÙØ¹Ø©/, /Ø³Ø¨Øª/],
};

const matchDayPeriodPatterns$1g = {
  narrow: /^(Øµ|Ù|Ù|Ø¸|ÙÙ Ø§ÙØµØ¨Ø§Ø­|Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±|ÙÙ Ø§ÙÙØ³Ø§Ø¡|ÙÙ Ø§ÙÙÙÙ)/,
  abbreviated: /^(Øµ|Ù|ÙØµÙ Ø§ÙÙÙÙ|Ø¸ÙØ±Ø§Ù|ÙÙ Ø§ÙØµØ¨Ø§Ø­|Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±|ÙÙ Ø§ÙÙØ³Ø§Ø¡|ÙÙ Ø§ÙÙÙÙ)/,
  wide: /^(Øµ|Ù|ÙØµÙ Ø§ÙÙÙÙ|ÙÙ Ø§ÙØµØ¨Ø§Ø­|Ø¸ÙØ±Ø§Ù|Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±|ÙÙ Ø§ÙÙØ³Ø§Ø¡|ÙÙ Ø§ÙÙÙÙ)/,
  any: /^(Øµ|Ù|ØµØ¨Ø§Ø­|Ø¸ÙØ±|ÙØ³Ø§Ø¡|ÙÙÙ)/,
};
const parseDayPeriodPatterns$1g = {
  any: {
    am: /^Øµ/,
    pm: /^Ù/,
    midnight: /^Ù/,
    noon: /^Ø¸/,
    morning: /^Øµ/,
    afternoon: /^Ø¨Ø¹Ø¯/,
    evening: /^Ù/,
    night: /^Ù/,
  },
};

(match$1g.match = {
  ordinalNumber: (0, _index2$2N.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1g,
    parsePattern: parseOrdinalNumberPattern$1g,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index$5C.buildMatchFn)({
    matchPatterns: matchEraPatterns$1g,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1g,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5C.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1g,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1g,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5C.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1g,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1g,
    defaultParseWidth: "any",
  }),

  day: (0, _index$5C.buildMatchFn)({
    matchPatterns: matchDayPatterns$1g,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1g,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5C.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1g,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1g,
    defaultParseWidth: "any",
  }),
});

arEG.arEG = void 0;
var _index$5B = formatDistance$2z;
var _index2$2M = formatLong$1p;
var _index3$1s = formatRelative$2z;
var _index4$1r = localize$1h;
var _index5$1r = match$1g;

/**
 * @category Locales
 * @summary Arabic locale (Egypt).
 * @language Arabic
 * @iso-639-2 ara
 * @author AbdAllah AbdElFattah [@AbdAllahAbdElFattah13](https://github.com/AbdAllahAbdElFattah13)
 */
(arEG.arEG = {
  code: "ar-EG",
  formatDistance: _index$5B.formatDistance,
  formatLong: _index2$2M.formatLong,
  formatRelative: _index3$1s.formatRelative,
  localize: _index4$1r.localize,
  match: _index5$1r.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var arMA = {};

var formatDistance$2x = {};

formatDistance$2x.formatDistance = void 0;

const formatDistanceLocale$1f = {
  lessThanXSeconds: {
    one: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø£ÙÙ ÙÙ Ø«Ø§ÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø«ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø«Ø§ÙÙØ©",
  },

  xSeconds: {
    one: "Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø«Ø§ÙØªÙÙ",
    threeToTen: "{{count}} Ø«ÙØ§ÙÙ",
    other: "{{count}} Ø«Ø§ÙÙØ©",
  },

  halfAMinute: "ÙØµÙ Ø¯ÙÙÙØ©",

  lessThanXMinutes: {
    one: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙØ§Ø¦Ù",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙÙÙØ©",
  },

  xMinutes: {
    one: "Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø¯ÙÙÙØªÙÙ",
    threeToTen: "{{count}} Ø¯ÙØ§Ø¦Ù",
    other: "{{count}} Ø¯ÙÙÙØ©",
  },

  aboutXHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø© ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø³Ø§Ø¹ØªÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø³Ø§Ø¹Ø© ØªÙØ±ÙØ¨Ø§Ù",
  },

  xHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©",
    two: "Ø³Ø§Ø¹ØªÙÙ",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª",
    other: "{{count}} Ø³Ø§Ø¹Ø©",
  },

  xDays: {
    one: "ÙÙÙ ÙØ§Ø­Ø¯",
    two: "ÙÙÙÙÙ",
    threeToTen: "{{count}} Ø£ÙØ§Ù",
    other: "{{count}} ÙÙÙ",
  },

  aboutXWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§Ù",
  },

  xWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹",
  },

  aboutXMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø´ÙØ±ÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø´ÙØ± ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø´ÙØ± ØªÙØ±ÙØ¨Ø§Ù",
  },

  xMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯",
    two: "Ø´ÙØ±ÙÙ",
    threeToTen: "{{count}} Ø£Ø´ÙØ±",
    other: "{{count}} Ø´ÙØ±",
  },

  aboutXYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨Ø§Ù",
  },

  xYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯",
    two: "Ø¹Ø§ÙÙÙ",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù",
    other: "{{count}} Ø¹Ø§Ù",
  },

  overXYears: {
    one: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§Ù",
    two: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§ÙÙÙ",
    threeToTen: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø£Ø¹ÙØ§Ù",
    other: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø¹Ø§Ù",
  },

  almostXYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨Ø§Ù",
  },
};

const formatDistance$2w = (token, count, options) => {
  options = options || {};

  const usageGroup = formatDistanceLocale$1f[token];
  let result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }

  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÙÙ Ø®ÙØ§Ù " + result;
    } else {
      return "ÙÙØ° " + result;
    }
  }

  return result;
};
formatDistance$2x.formatDistance = formatDistance$2w;

var formatLong$1o = {};

formatLong$1o.formatLong = void 0;
var _index$5A = buildFormatLongFn$1;

const dateFormats$1o = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$1o = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1o = {
  full: "{{date}} 'Ø¹ÙØ¯' {{time}}",
  long: "{{date}} 'Ø¹ÙØ¯' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1o.formatLong = {
  date: (0, _index$5A.buildFormatLongFn)({
    formats: dateFormats$1o,
    defaultWidth: "full",
  }),

  time: (0, _index$5A.buildFormatLongFn)({
    formats: timeFormats$1o,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5A.buildFormatLongFn)({
    formats: dateTimeFormats$1o,
    defaultWidth: "full",
  }),
});

var formatRelative$2x = {};

formatRelative$2x.formatRelative = void 0;

const formatRelativeLocale$1g = {
  lastWeek: "'Ø£Ø®Ø±' eeee 'Ø¹ÙØ¯' p",
  yesterday: "'Ø£ÙØ³ Ø¹ÙØ¯' p",
  today: "'Ø§ÙÙÙÙ Ø¹ÙØ¯' p",
  tomorrow: "'ØºØ¯Ø§Ù Ø¹ÙØ¯' p",
  nextWeek: "eeee 'Ø¹ÙØ¯' p",
  other: "P",
};

const formatRelative$2w = (token, _date, _baseDate, _options) => {
  return formatRelativeLocale$1g[token];
};
formatRelative$2x.formatRelative = formatRelative$2w;

var localize$1g = {};

localize$1g.localize = void 0;
var _index$5z = buildLocalizeFn$1;

const eraValues$1g = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù.", "Ø¨.Ù."],
  wide: ["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯"],
};

const quarterValues$1g = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø±1", "Ø±2", "Ø±3", "Ø±4"],
  wide: ["Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹"],
};

const monthValues$1g = {
  narrow: ["Ù", "Ù", "Ù", "Ø£", "Ù", "Ù", "Ù", "Øº", "Ø´", "Ø£", "Ù", "Ø¯"],
  abbreviated: [
    "ÙÙØ§",
    "ÙØ¨Ø±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§Ù",
    "ÙÙÙÙ",
    "ÙÙÙÙ",
    "ØºØ´Øª",
    "Ø´ØªÙÙ",
    "Ø£ÙØªÙ",
    "ÙÙÙÙ",
    "Ø¯Ø¬ÙÙ",
  ],

  wide: [
    "ÙÙØ§ÙØ±",
    "ÙØ¨Ø±Ø§ÙØ±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§Ù",
    "ÙÙÙÙÙ",
    "ÙÙÙÙÙØ²",
    "ØºØ´Øª",
    "Ø´ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙØ¨Ø±",
    "Ø¯Ø¬ÙØ¨Ø±",
  ],
};

const dayValues$1g = {
  narrow: ["Ø­", "Ù", "Ø«", "Ø±", "Ø®", "Ø¬", "Ø³"],
  short: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  abbreviated: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙ", "Ø«ÙØ§", "Ø£Ø±Ø¨Ù", "Ø®ÙÙÙ", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  wide: [
    "Ø§ÙØ£Ø­Ø¯",
    "Ø§ÙØ¥Ø«ÙÙÙ",
    "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡",
    "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡",
    "Ø§ÙØ®ÙÙØ³",
    "Ø§ÙØ¬ÙØ¹Ø©",
    "Ø§ÙØ³Ø¨Øª",
  ],
};

const dayPeriodValues$1g = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
};
const formattingDayPeriodValues$10 = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
};

const ordinalNumber$1g = (dirtyNumber) => {
  return String(dirtyNumber);
};

(localize$1g.localize = {
  ordinalNumber: ordinalNumber$1g,

  era: (0, _index$5z.buildLocalizeFn)({
    values: eraValues$1g,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5z.buildLocalizeFn)({
    values: quarterValues$1g,
    defaultWidth: "wide",
    argumentCallback: (quarter) => Number(quarter) - 1,
  }),

  month: (0, _index$5z.buildLocalizeFn)({
    values: monthValues$1g,
    defaultWidth: "wide",
  }),

  day: (0, _index$5z.buildLocalizeFn)({
    values: dayValues$1g,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5z.buildLocalizeFn)({
    values: dayPeriodValues$1g,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$10,
    defaultFormattingWidth: "wide",
  }),
});

var match$1f = {};

match$1f.match = void 0;
var _index$5y = buildMatchPatternFn$1;
var _index2$2L = buildMatchFn$1;

const matchOrdinalNumberPattern$1f = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$1f = /\d+/i;

const matchEraPatterns$1f = {
  narrow: /^(Ù|Ø¨)/i,
  abbreviated: /^(Ù\.?\s?Ù\.?|Ù\.?\s?Ù\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯)/i,
};
const parseEraPatterns$1f = {
  any: [/^ÙØ¨Ù/i, /^Ø¨Ø¹Ø¯/i],
};

const matchQuarterPatterns$1f = {
  narrow: /^[1234]/i,
  abbreviated: /^Ø±[1234]/i,
  wide: /^Ø§ÙØ±Ø¨Ø¹ [1234]/i,
};
const parseQuarterPatterns$1f = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1f = {
  narrow: /^[ÙÙÙØ£ÙØ³ÙØ¯]/i,
  abbreviated: /^(ÙÙ|Ù|ÙØ§Ø±|Ø£Ø¨|ÙØ§Ù|ÙÙÙ|ÙÙÙ|ØºØ´|Ø´Øª|Ø£Ù|Ù|Ø¯)/i,
  wide: /^(ÙÙ|Ù|ÙØ§Ø±|Ø£Ø¨|ÙØ§Ù|ÙÙÙ|ÙÙÙ|ØºØ´|Ø´Øª|Ø£Ù|Ù|Ø¯)/i,
};
const parseMonthPatterns$1f = {
  narrow: [
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Øº/i,
    /^Ø´/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^ÙÙ/i,
    /^ÙØ¨/i,
    /^ÙØ§Ø±/i,
    /^Ø£Ø¨/i,
    /^ÙØ§Ù/i,
    /^ÙÙÙ/i,
    /^ÙÙÙ/i,
    /^ØºØ´Øª/i,
    /^Ø´/i,
    /^Ø£Ù/i,
    /^Ù/i,
    /^Ø¯/i,
  ],
};

const matchDayPatterns$1f = {
  narrow: /^[Ø­ÙØ«Ø±Ø®Ø¬Ø³]/i,
  short: /^(Ø£Ø­Ø¯|Ø¥Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  abbreviated: /^(Ø£Ø­Ø¯|Ø¥Ø«Ù|Ø«ÙØ§|Ø£Ø±Ø¨|Ø®ÙÙ|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  wide: /^(Ø§ÙØ£Ø­Ø¯|Ø§ÙØ¥Ø«ÙÙÙ|Ø§ÙØ«ÙØ§Ø«Ø§Ø¡|Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡|Ø§ÙØ®ÙÙØ³|Ø§ÙØ¬ÙØ¹Ø©|Ø§ÙØ³Ø¨Øª)/i,
};
const parseDayPatterns$1f = {
  narrow: [/^Ø­/i, /^Ù/i, /^Ø«/i, /^Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
  wide: [
    /^Ø§ÙØ£Ø­Ø¯/i,
    /^Ø§ÙØ¥Ø«ÙÙÙ/i,
    /^Ø§ÙØ«ÙØ§Ø«Ø§Ø¡/i,
    /^Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡/i,
    /^Ø§ÙØ®ÙÙØ³/i,
    /^Ø§ÙØ¬ÙØ¹Ø©/i,
    /^Ø§ÙØ³Ø¨Øª/i,
  ],

  any: [/^Ø£Ø­/i, /^Ø¥Ø«/i, /^Ø«/i, /^Ø£Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
};

const matchDayPeriodPatterns$1f = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns$1f = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

(match$1f.match = {
  ordinalNumber: (0, _index$5y.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1f,
    parsePattern: parseOrdinalNumberPattern$1f,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index2$2L.buildMatchFn)({
    matchPatterns: matchEraPatterns$1f,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1f,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$2L.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1f,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1f,
    defaultParseWidth: "any",
    valueCallback: (index) => Number(index) + 1,
  }),

  month: (0, _index2$2L.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1f,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1f,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$2L.buildMatchFn)({
    matchPatterns: matchDayPatterns$1f,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1f,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$2L.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1f,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1f,
    defaultParseWidth: "any",
  }),
});

arMA.arMA = void 0;
var _index$5x = formatDistance$2x;
var _index2$2K = formatLong$1o;
var _index3$1r = formatRelative$2x;
var _index4$1q = localize$1g;
var _index5$1q = match$1f;

/**
 * @category Locales
 * @summary Arabic locale (Moroccan Arabic).
 * @language Moroccan Arabic
 * @iso-639-2 ara
 * @author Achraf Rrami [@rramiachraf](https://github.com/rramiachraf)
 */
(arMA.arMA = {
  code: "ar-MA",
  formatDistance: _index$5x.formatDistance,
  formatLong: _index2$2K.formatLong,
  formatRelative: _index3$1r.formatRelative,
  localize: _index4$1q.localize,
  match: _index5$1q.match,
  options: {
    // Monday is 1
    weekStartsOn: 1,
    firstWeekContainsDate: 1,
  },
});

var arSA = {};

var formatDistance$2v = {};

formatDistance$2v.formatDistance = void 0;

const formatDistanceLocale$1e = {
  lessThanXSeconds: {
    one: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø£ÙÙ ÙÙ Ø«Ø§ÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø«ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø«Ø§ÙÙØ©",
  },

  xSeconds: {
    one: "Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø«Ø§ÙØªÙÙ",
    threeToTen: "{{count}} Ø«ÙØ§ÙÙ",
    other: "{{count}} Ø«Ø§ÙÙØ©",
  },

  halfAMinute: "ÙØµÙ Ø¯ÙÙÙØ©",

  lessThanXMinutes: {
    one: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙØ§Ø¦Ù",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙÙÙØ©",
  },

  xMinutes: {
    one: "Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©",
    two: "Ø¯ÙÙÙØªÙÙ",
    threeToTen: "{{count}} Ø¯ÙØ§Ø¦Ù",
    other: "{{count}} Ø¯ÙÙÙØ©",
  },

  aboutXHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø© ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø³Ø§Ø¹ØªÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø³Ø§Ø¹Ø© ØªÙØ±ÙØ¨Ø§Ù",
  },

  xHours: {
    one: "Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©",
    two: "Ø³Ø§Ø¹ØªÙÙ",
    threeToTen: "{{count}} Ø³Ø§Ø¹Ø§Øª",
    other: "{{count}} Ø³Ø§Ø¹Ø©",
  },

  xDays: {
    one: "ÙÙÙ ÙØ§Ø­Ø¯",
    two: "ÙÙÙÙÙ",
    threeToTen: "{{count}} Ø£ÙØ§Ù",
    other: "{{count}} ÙÙÙ",
  },

  aboutXWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹ ØªÙØ±ÙØ¨Ø§Ù",
  },

  xWeeks: {
    one: "Ø£Ø³Ø¨ÙØ¹ ÙØ§Ø­Ø¯",
    two: "Ø£Ø³Ø¨ÙØ¹ÙÙ",
    threeToTen: "{{count}} Ø£Ø³Ø§Ø¨ÙØ¹",
    other: "{{count}} Ø£Ø³Ø¨ÙØ¹",
  },

  aboutXMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø´ÙØ±ÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø´ÙØ± ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø´ÙØ± ØªÙØ±ÙØ¨Ø§Ù",
  },

  xMonths: {
    one: "Ø´ÙØ± ÙØ§Ø­Ø¯",
    two: "Ø´ÙØ±ÙÙ",
    threeToTen: "{{count}} Ø£Ø´ÙØ±",
    other: "{{count}} Ø´ÙØ±",
  },

  aboutXYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨Ø§Ù",
  },

  xYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯",
    two: "Ø¹Ø§ÙÙÙ",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù",
    other: "{{count}} Ø¹Ø§Ù",
  },

  overXYears: {
    one: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§Ù",
    two: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§ÙÙÙ",
    threeToTen: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø£Ø¹ÙØ§Ù",
    other: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø¹Ø§Ù",
  },

  almostXYears: {
    one: "Ø¹Ø§Ù ÙØ§Ø­Ø¯ ØªÙØ±ÙØ¨Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨Ø§Ù",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨Ø§Ù",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨Ø§Ù",
  },
};

const formatDistance$2u = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$1e[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÙÙ Ø®ÙØ§Ù " + result;
    } else {
      return "ÙÙØ° " + result;
    }
  }

  return result;
};
formatDistance$2v.formatDistance = formatDistance$2u;

var formatLong$1n = {};

formatLong$1n.formatLong = void 0;
var _index$5w = buildFormatLongFn$1;

const dateFormats$1n = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$1n = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1n = {
  full: "{{date}} 'Ø¹ÙØ¯' {{time}}",
  long: "{{date}} 'Ø¹ÙØ¯' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1n.formatLong = {
  date: (0, _index$5w.buildFormatLongFn)({
    formats: dateFormats$1n,
    defaultWidth: "full",
  }),

  time: (0, _index$5w.buildFormatLongFn)({
    formats: timeFormats$1n,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5w.buildFormatLongFn)({
    formats: dateTimeFormats$1n,
    defaultWidth: "full",
  }),
});

var formatRelative$2v = {};

formatRelative$2v.formatRelative = void 0;

const formatRelativeLocale$1f = {
  lastWeek: "'Ø£Ø®Ø±' eeee 'Ø¹ÙØ¯' p",
  yesterday: "'Ø£ÙØ³ Ø¹ÙØ¯' p",
  today: "'Ø§ÙÙÙÙ Ø¹ÙØ¯' p",
  tomorrow: "'ØºØ¯Ø§Ù Ø¹ÙØ¯' p",
  nextWeek: "eeee 'Ø¹ÙØ¯' p",
  other: "P",
};

const formatRelative$2u = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$1f[token];
formatRelative$2v.formatRelative = formatRelative$2u;

var localize$1f = {};

localize$1f.localize = void 0;
var _index$5v = buildLocalizeFn$1;

const eraValues$1f = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù.", "Ø¨.Ù."],
  wide: ["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯"],
};

const quarterValues$1f = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø±1", "Ø±2", "Ø±3", "Ø±4"],
  wide: ["Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹"],
};

const monthValues$1f = {
  narrow: ["Ù", "Ù", "Ù", "Ø£", "Ù", "Ù", "Ù", "Ø£", "Ø³", "Ø£", "Ù", "Ø¯"],
  abbreviated: [
    "ÙÙØ§",
    "ÙØ¨Ø±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§ÙÙ",
    "ÙÙÙÙ",
    "ÙÙÙÙ",
    "Ø£ØºØ³Ù",
    "Ø³Ø¨ØªÙ",
    "Ø£ÙØªÙ",
    "ÙÙÙÙ",
    "Ø¯ÙØ³Ù",
  ],

  wide: [
    "ÙÙØ§ÙØ±",
    "ÙØ¨Ø±Ø§ÙØ±",
    "ÙØ§Ø±Ø³",
    "Ø£Ø¨Ø±ÙÙ",
    "ÙØ§ÙÙ",
    "ÙÙÙÙÙ",
    "ÙÙÙÙÙ",
    "Ø£ØºØ³Ø·Ø³",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],
};

const dayValues$1f = {
  narrow: ["Ø­", "Ù", "Ø«", "Ø±", "Ø®", "Ø¬", "Ø³"],
  short: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  abbreviated: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙ", "Ø«ÙØ§", "Ø£Ø±Ø¨Ù", "Ø®ÙÙÙ", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  wide: [
    "Ø§ÙØ£Ø­Ø¯",
    "Ø§ÙØ§Ø«ÙÙÙ",
    "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡",
    "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡",
    "Ø§ÙØ®ÙÙØ³",
    "Ø§ÙØ¬ÙØ¹Ø©",
    "Ø§ÙØ³Ø¨Øª",
  ],
};

const dayPeriodValues$1f = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙØ³Ø§Ø¡Ø§Ù",
    night: "ÙÙÙØ§Ù",
  },
};
const formattingDayPeriodValues$$ = {
  narrow: {
    am: "Øµ",
    pm: "Ù",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ù",
    midnight: "ÙØµÙ Ø§ÙÙÙÙ",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø§Ø­Ø§Ù",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙØ¸ÙÙØ±",
    evening: "ÙÙ Ø§ÙÙØ³Ø§Ø¡",
    night: "ÙÙ Ø§ÙÙÙÙ",
  },
};

const ordinalNumber$1f = (dirtyNumber) => {
  return String(dirtyNumber);
};

(localize$1f.localize = {
  ordinalNumber: ordinalNumber$1f,

  era: (0, _index$5v.buildLocalizeFn)({
    values: eraValues$1f,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5v.buildLocalizeFn)({
    values: quarterValues$1f,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5v.buildLocalizeFn)({
    values: monthValues$1f,
    defaultWidth: "wide",
  }),

  day: (0, _index$5v.buildLocalizeFn)({
    values: dayValues$1f,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5v.buildLocalizeFn)({
    values: dayPeriodValues$1f,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$$,
    defaultFormattingWidth: "wide",
  }),
});

var match$1e = {};

match$1e.match = void 0;

var _index$5u = buildMatchFn$1;
var _index2$2J = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1e = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$1e = /\d+/i;

const matchEraPatterns$1e = {
  narrow: /^(Ù|Ø¨)/i,
  abbreviated: /^(Ù\.?\s?Ù\.?|Ù\.?\s?Ù\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯|Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯)/i,
};
const parseEraPatterns$1e = {
  any: [/^ÙØ¨Ù/i, /^Ø¨Ø¹Ø¯/i],
};

const matchQuarterPatterns$1e = {
  narrow: /^[1234]/i,
  abbreviated: /^Ø±[1234]/i,
  wide: /^Ø§ÙØ±Ø¨Ø¹ [1234]/i,
};
const parseQuarterPatterns$1e = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1e = {
  narrow: /^[ÙÙÙØ£ÙØ³ÙØ¯]/i,
  abbreviated: /^(ÙÙ|Ù|ÙØ§Ø±|Ø£Ø¨|ÙØ§Ù|ÙÙÙ|ÙÙÙ|Ø£Øº|Ø³|Ø£Ù|Ù|Ø¯)/i,
  wide: /^(ÙÙ|Ù|ÙØ§Ø±|Ø£Ø¨|ÙØ§Ù|ÙÙÙ|ÙÙÙ|Ø£Øº|Ø³|Ø£Ù|Ù|Ø¯)/i,
};
const parseMonthPatterns$1e = {
  narrow: [
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ø³/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^ÙÙ/i,
    /^Ù/i,
    /^ÙØ§Ø±/i,
    /^Ø£Ø¨/i,
    /^ÙØ§Ù/i,
    /^ÙÙÙ/i,
    /^ÙÙÙ/i,
    /^Ø£Øº/i,
    /^Ø³/i,
    /^Ø£Ù/i,
    /^Ù/i,
    /^Ø¯/i,
  ],
};

const matchDayPatterns$1e = {
  narrow: /^[Ø­ÙØ«Ø±Ø®Ø¬Ø³]/i,
  short: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  abbreviated: /^(Ø£Ø­Ø¯|Ø§Ø«Ù|Ø«ÙØ§|Ø£Ø±Ø¨|Ø®ÙÙ|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  wide: /^(Ø§ÙØ£Ø­Ø¯|Ø§ÙØ§Ø«ÙÙÙ|Ø§ÙØ«ÙØ§Ø«Ø§Ø¡|Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡|Ø§ÙØ®ÙÙØ³|Ø§ÙØ¬ÙØ¹Ø©|Ø§ÙØ³Ø¨Øª)/i,
};
const parseDayPatterns$1e = {
  narrow: [/^Ø­/i, /^Ù/i, /^Ø«/i, /^Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
  wide: [
    /^Ø§ÙØ£Ø­Ø¯/i,
    /^Ø§ÙØ§Ø«ÙÙÙ/i,
    /^Ø§ÙØ«ÙØ§Ø«Ø§Ø¡/i,
    /^Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡/i,
    /^Ø§ÙØ®ÙÙØ³/i,
    /^Ø§ÙØ¬ÙØ¹Ø©/i,
    /^Ø§ÙØ³Ø¨Øª/i,
  ],

  any: [/^Ø£Ø­/i, /^Ø§Ø«/i, /^Ø«/i, /^Ø£Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
};

const matchDayPeriodPatterns$1e = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns$1e = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

(match$1e.match = {
  ordinalNumber: (0, _index2$2J.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1e,
    parsePattern: parseOrdinalNumberPattern$1e,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$5u.buildMatchFn)({
    matchPatterns: matchEraPatterns$1e,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1e,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5u.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1e,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1e,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5u.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1e,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1e,
    defaultParseWidth: "any",
  }),

  day: (0, _index$5u.buildMatchFn)({
    matchPatterns: matchDayPatterns$1e,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1e,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5u.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1e,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1e,
    defaultParseWidth: "any",
  }),
});

arSA.arSA = void 0;
var _index$5t = formatDistance$2v;
var _index2$2I = formatLong$1n;
var _index3$1q = formatRelative$2v;
var _index4$1p = localize$1f;
var _index5$1p = match$1e;

/**
 * @category Locales
 * @summary Arabic locale (Sauid Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Dhaifallah Alwadani [@dalwadani](https://github.com/dalwadani)
 */
(arSA.arSA = {
  code: "ar-SA",
  formatDistance: _index$5t.formatDistance,
  formatLong: _index2$2I.formatLong,
  formatRelative: _index3$1q.formatRelative,
  localize: _index4$1p.localize,
  match: _index5$1p.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var arTN = {};

var formatDistance$2t = {};

formatDistance$2t.formatDistance = void 0;

const formatDistanceLocale$1d = {
  lessThanXSeconds: {
    one: "Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø²ÙØ² Ø«ÙØ§ÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø«ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø«Ø§ÙÙØ©",
  },

  xSeconds: {
    one: "Ø«Ø§ÙÙØ©",
    two: "Ø²ÙØ² Ø«ÙØ§ÙÙ",
    threeToTen: "{{count}} Ø«ÙØ§ÙÙ",
    other: "{{count}} Ø«Ø§ÙÙØ©",
  },

  halfAMinute: "ÙØµ Ø¯ÙÙÙØ©",

  lessThanXMinutes: {
    one: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©",
    two: "Ø£ÙÙ ÙÙ Ø¯ÙÙÙØªÙÙ",
    threeToTen: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙØ§ÙÙ",
    other: "Ø£ÙÙ ÙÙ {{count}} Ø¯ÙÙÙØ©",
  },

  xMinutes: {
    one: "Ø¯ÙÙÙØ©",
    two: "Ø¯ÙÙÙØªÙÙ",
    threeToTen: "{{count}} Ø¯ÙØ§ÙÙ",
    other: "{{count}} Ø¯ÙÙÙØ©",
  },

  aboutXHours: {
    one: "Ø³Ø§Ø¹Ø© ØªÙØ±ÙØ¨",
    two: "Ø³Ø§Ø¹ØªÙÙ ØªÙØ±ÙØ¨",
    threeToTen: "{{count}} Ø³ÙØ§ÙØ¹ ØªÙØ±ÙØ¨",
    other: "{{count}} Ø³Ø§Ø¹Ø© ØªÙØ±ÙØ¨",
  },

  xHours: {
    one: "Ø³Ø§Ø¹Ø©",
    two: "Ø³Ø§Ø¹ØªÙÙ",
    threeToTen: "{{count}} Ø³ÙØ§ÙØ¹",
    other: "{{count}} Ø³Ø§Ø¹Ø©",
  },

  xDays: {
    one: "ÙÙØ§Ø±",
    two: "ÙÙØ§Ø±ÙÙ",
    threeToTen: "{{count}} Ø£ÙØ§Ù",
    other: "{{count}} ÙÙÙ",
  },

  aboutXWeeks: {
    one: "Ø¬ÙØ¹Ø© ØªÙØ±ÙØ¨",
    two: "Ø¬ÙØ¹ØªÙÙ ØªÙØ±ÙØ¨",
    threeToTen: "{{count}} Ø¬ÙØ§Ø¹ ØªÙØ±ÙØ¨",
    other: "{{count}} Ø¬ÙØ¹Ø© ØªÙØ±ÙØ¨",
  },

  xWeeks: {
    one: "Ø¬ÙØ¹Ø©",
    two: "Ø¬ÙØ¹ØªÙÙ",
    threeToTen: "{{count}} Ø¬ÙØ§Ø¹",
    other: "{{count}} Ø¬ÙØ¹Ø©",
  },

  aboutXMonths: {
    one: "Ø´ÙØ± ØªÙØ±ÙØ¨",
    two: "Ø´ÙØ±ÙÙ ØªÙØ±ÙØ¨",
    threeToTen: "{{count}} Ø£Ø´ÙØ±Ø© ØªÙØ±ÙØ¨",
    other: "{{count}} Ø´ÙØ± ØªÙØ±ÙØ¨",
  },

  xMonths: {
    one: "Ø´ÙØ±",
    two: "Ø´ÙØ±ÙÙ",
    threeToTen: "{{count}} Ø£Ø´ÙØ±Ø©",
    other: "{{count}} Ø´ÙØ±",
  },

  aboutXYears: {
    one: "Ø¹Ø§Ù ØªÙØ±ÙØ¨",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨",
  },

  xYears: {
    one: "Ø¹Ø§Ù",
    two: "Ø¹Ø§ÙÙÙ",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù",
    other: "{{count}} Ø¹Ø§Ù",
  },

  overXYears: {
    one: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§Ù",
    two: "Ø£ÙØ«Ø± ÙÙ Ø¹Ø§ÙÙÙ",
    threeToTen: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø£Ø¹ÙØ§Ù",
    other: "Ø£ÙØ«Ø± ÙÙ {{count}} Ø¹Ø§Ù",
  },

  almostXYears: {
    one: "Ø¹Ø§Ù ØªÙØ±ÙØ¨",
    two: "Ø¹Ø§ÙÙÙ ØªÙØ±ÙØ¨",
    threeToTen: "{{count}} Ø£Ø¹ÙØ§Ù ØªÙØ±ÙØ¨",
    other: "{{count}} Ø¹Ø§Ù ØªÙØ±ÙØ¨",
  },
};

const formatDistance$2s = (token, count, options) => {
  const usageGroup = formatDistanceLocale$1d[token];
  let result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÙÙ " + result;
    } else {
      return "Ø¹ÙØ¯Ù " + result;
    }
  }

  return result;
};
formatDistance$2t.formatDistance = formatDistance$2s;

var formatLong$1m = {};

formatLong$1m.formatLong = void 0;
var _index$5s = buildFormatLongFn$1;

const dateFormats$1m = {
  full: "EEEEØ do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy",
};

const timeFormats$1m = {
  full: "HH:mm:ss",
  long: "HH:mm:ss",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1m = {
  full: "{{date}} 'ÙØ¹' {{time}}",
  long: "{{date}} 'ÙØ¹' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1m.formatLong = {
  date: (0, _index$5s.buildFormatLongFn)({
    formats: dateFormats$1m,
    defaultWidth: "full",
  }),

  time: (0, _index$5s.buildFormatLongFn)({
    formats: timeFormats$1m,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5s.buildFormatLongFn)({
    formats: dateTimeFormats$1m,
    defaultWidth: "full",
  }),
});

var formatRelative$2t = {};

formatRelative$2t.formatRelative = void 0;

const formatRelativeLocale$1e = {
  lastWeek: "eeee 'Ø¥ÙÙ ÙØ§Øª ÙØ¹' p",
  yesterday: "'Ø§ÙØ¨Ø§Ø±Ø­ ÙØ¹' p",
  today: "'Ø§ÙÙÙÙ ÙØ¹' p",
  tomorrow: "'ØºØ¯ÙØ© ÙØ¹' p",
  nextWeek: "eeee 'Ø§ÙØ¬ÙØ¹Ø© Ø§ÙØ¬Ø§ÙØ© ÙØ¹' p 'ÙÙØ§Ø±'",
  other: "P",
};

const formatRelative$2s = (token) => formatRelativeLocale$1e[token];
formatRelative$2t.formatRelative = formatRelative$2s;

var localize$1e = {};

localize$1e.localize = void 0;
var _index$5r = buildLocalizeFn$1;

const eraValues$1e = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù.", "Ø¨.Ù."],
  wide: ["ÙØ¨Ù Ø§ÙÙÙÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§ÙÙÙÙØ§Ø¯"],
};

const quarterValues$1e = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø±1", "Ø±2", "Ø±3", "Ø±4"],
  wide: ["Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ£ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙÙ", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ«Ø§ÙØ«", "Ø§ÙØ±Ø¨Ø¹ Ø§ÙØ±Ø§Ø¨Ø¹"],
};

const monthValues$1e = {
  narrow: ["Ø¯", "Ù", "Ø£", "Ø³", "Ø£", "Ø¬", "Ø¬", "Ù", "Ø£", "Ù", "Ù", "Ø¬"],
  abbreviated: [
    "Ø¬Ø§ÙÙÙ",
    "ÙÙÙØ±Ù",
    "ÙØ§Ø±Ø³",
    "Ø£ÙØ±ÙÙ",
    "ÙØ§Ù",
    "Ø¬ÙØ§Ù",
    "Ø¬ÙÙÙÙØ©",
    "Ø£ÙØª",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],

  wide: [
    "Ø¬Ø§ÙÙÙ",
    "ÙÙÙØ±Ù",
    "ÙØ§Ø±Ø³",
    "Ø£ÙØ±ÙÙ",
    "ÙØ§Ù",
    "Ø¬ÙØ§Ù",
    "Ø¬ÙÙÙÙØ©",
    "Ø£ÙØª",
    "Ø³Ø¨ØªÙØ¨Ø±",
    "Ø£ÙØªÙØ¨Ø±",
    "ÙÙÙÙØ¨Ø±",
    "Ø¯ÙØ³ÙØ¨Ø±",
  ],
};

const dayValues$1e = {
  narrow: ["Ø­", "Ù", "Ø«", "Ø±", "Ø®", "Ø¬", "Ø³"],
  short: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],
  abbreviated: ["Ø£Ø­Ø¯", "Ø§Ø«ÙÙÙ", "Ø«ÙØ§Ø«Ø§Ø¡", "Ø£Ø±Ø¨Ø¹Ø§Ø¡", "Ø®ÙÙØ³", "Ø¬ÙØ¹Ø©", "Ø³Ø¨Øª"],

  wide: [
    "Ø§ÙØ£Ø­Ø¯",
    "Ø§ÙØ§Ø«ÙÙÙ",
    "Ø§ÙØ«ÙØ§Ø«Ø§Ø¡",
    "Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡",
    "Ø§ÙØ®ÙÙØ³",
    "Ø§ÙØ¬ÙØ¹Ø©",
    "Ø§ÙØ³Ø¨Øª",
  ],
};

const dayPeriodValues$1e = {
  narrow: {
    am: "Øµ",
    pm: "Ø¹",
    morning: "Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙÙØ§ÙÙØ©",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©",
    evening: "Ø§ÙØ¹Ø´ÙØ©",
    night: "Ø§ÙÙÙÙ",
    midnight: "ÙØµ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ø¹",
    morning: "Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙÙØ§ÙÙØ©",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©",
    evening: "Ø§ÙØ¹Ø´ÙØ©",
    night: "Ø§ÙÙÙÙ",
    midnight: "ÙØµ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ø¹",
    morning: "Ø§ÙØµØ¨Ø§Ø­",
    noon: "Ø§ÙÙØ§ÙÙØ©",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©",
    evening: "Ø§ÙØ¹Ø´ÙØ©",
    night: "Ø§ÙÙÙÙ",
    midnight: "ÙØµ Ø§ÙÙÙÙ",
  },
};

const formattingDayPeriodValues$_ = {
  narrow: {
    am: "Øµ",
    pm: "Ø¹",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "ÙÙ Ø§ÙÙØ§ÙÙØ©",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©",
    evening: "ÙÙ Ø§ÙØ¹Ø´ÙØ©",
    night: "ÙÙ Ø§ÙÙÙÙ",
    midnight: "ÙØµ Ø§ÙÙÙÙ",
  },
  abbreviated: {
    am: "Øµ",
    pm: "Ø¹",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "ÙÙ Ø§ÙÙØ§ÙÙØ©",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©",
    evening: "ÙÙ Ø§ÙØ¹Ø´ÙØ©",
    night: "ÙÙ Ø§ÙÙÙÙ",
    midnight: "ÙØµ Ø§ÙÙÙÙ",
  },
  wide: {
    am: "Øµ",
    pm: "Ø¹",
    morning: "ÙÙ Ø§ÙØµØ¨Ø§Ø­",
    noon: "ÙÙ Ø§ÙÙØ§ÙÙØ©",
    afternoon: "Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©",
    evening: "ÙÙ Ø§ÙØ¹Ø´ÙØ©",
    night: "ÙÙ Ø§ÙÙÙÙ",
    midnight: "ÙØµ Ø§ÙÙÙÙ",
  },
};

const ordinalNumber$1e = (num) => String(num);

(localize$1e.localize = {
  ordinalNumber: ordinalNumber$1e,

  era: (0, _index$5r.buildLocalizeFn)({
    values: eraValues$1e,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5r.buildLocalizeFn)({
    values: quarterValues$1e,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5r.buildLocalizeFn)({
    values: monthValues$1e,
    defaultWidth: "wide",
  }),

  day: (0, _index$5r.buildLocalizeFn)({
    values: dayValues$1e,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5r.buildLocalizeFn)({
    values: dayPeriodValues$1e,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$_,
    defaultFormattingWidth: "wide",
  }),
});

var match$1d = {};

match$1d.match = void 0;
var _index$5q = buildMatchPatternFn$1;
var _index2$2H = buildMatchFn$1;

const matchOrdinalNumberPattern$1d = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$1d = /\d+/i;

const matchEraPatterns$1d = {
  narrow: /[ÙØ¨]/,
  abbreviated: /[ÙØ¨]\.Ù\./,
  wide: /(ÙØ¨Ù|Ø¨Ø¹Ø¯) Ø§ÙÙÙÙØ§Ø¯/,
};
const parseEraPatterns$1d = {
  any: [/ÙØ¨Ù/, /Ø¨Ø¹Ø¯/],
};

const matchQuarterPatterns$1d = {
  narrow: /^[1234]/i,
  abbreviated: /Ø±[1234]/,
  wide: /Ø§ÙØ±Ø¨Ø¹ (Ø§ÙØ£ÙÙ|Ø§ÙØ«Ø§ÙÙ|Ø§ÙØ«Ø§ÙØ«|Ø§ÙØ±Ø§Ø¨Ø¹)/,
};
const parseQuarterPatterns$1d = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1d = {
  narrow: /^[Ø¬ÙÙØ£Ø³ÙØ¯]/,
  abbreviated:
    /^(Ø¬Ø§ÙÙÙ|ÙÙÙØ±Ù|ÙØ§Ø±Ø³|Ø£ÙØ±ÙÙ|ÙØ§Ù|Ø¬ÙØ§Ù|Ø¬ÙÙÙÙØ©|Ø£ÙØª|Ø³Ø¨ØªÙØ¨Ø±|Ø£ÙØªÙØ¨Ø±|ÙÙÙÙØ¨Ø±|Ø¯ÙØ³ÙØ¨Ø±)/,
  wide: /^(Ø¬Ø§ÙÙÙ|ÙÙÙØ±Ù|ÙØ§Ø±Ø³|Ø£ÙØ±ÙÙ|ÙØ§Ù|Ø¬ÙØ§Ù|Ø¬ÙÙÙÙØ©|Ø£ÙØª|Ø³Ø¨ØªÙØ¨Ø±|Ø£ÙØªÙØ¨Ø±|ÙÙÙÙØ¨Ø±|Ø¯ÙØ³ÙØ¨Ø±)/,
};
const parseMonthPatterns$1d = {
  narrow: [
    /^Ø¬/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¬/i,
    /^Ø¬/i,
    /^Ø£/i,
    /^Ø³/i,
    /^Ø£/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^Ø¬Ø§ÙÙÙ/i,
    /^ÙÙÙØ±Ù/i,
    /^ÙØ§Ø±Ø³/i,
    /^Ø£ÙØ±ÙÙ/i,
    /^ÙØ§Ù/i,
    /^Ø¬ÙØ§Ù/i,
    /^Ø¬ÙÙÙÙØ©/i,
    /^Ø£ÙØª/i,
    /^Ø³Ø¨ØªÙØ¨Ø±/i,
    /^Ø£ÙØªÙØ¨Ø±/i,
    /^ÙÙÙÙØ¨Ø±/i,
    /^Ø¯ÙØ³ÙØ¨Ø±/i,
  ],
};

const matchDayPatterns$1d = {
  narrow: /^[Ø­ÙØ«Ø±Ø®Ø¬Ø³]/i,
  short: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  abbreviated: /^(Ø£Ø­Ø¯|Ø§Ø«ÙÙÙ|Ø«ÙØ§Ø«Ø§Ø¡|Ø£Ø±Ø¨Ø¹Ø§Ø¡|Ø®ÙÙØ³|Ø¬ÙØ¹Ø©|Ø³Ø¨Øª)/i,
  wide: /^(Ø§ÙØ£Ø­Ø¯|Ø§ÙØ§Ø«ÙÙÙ|Ø§ÙØ«ÙØ§Ø«Ø§Ø¡|Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡|Ø§ÙØ®ÙÙØ³|Ø§ÙØ¬ÙØ¹Ø©|Ø§ÙØ³Ø¨Øª)/i,
};
const parseDayPatterns$1d = {
  narrow: [/^Ø­/i, /^Ù/i, /^Ø«/i, /^Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
  wide: [
    /^Ø§ÙØ£Ø­Ø¯/i,
    /^Ø§ÙØ§Ø«ÙÙÙ/i,
    /^Ø§ÙØ«ÙØ§Ø«Ø§Ø¡/i,
    /^Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡/i,
    /^Ø§ÙØ®ÙÙØ³/i,
    /^Ø§ÙØ¬ÙØ¹Ø©/i,
    /^Ø§ÙØ³Ø¨Øª/i,
  ],

  any: [/^Ø£Ø­/i, /^Ø§Ø«/i, /^Ø«/i, /^Ø£Ø±/i, /^Ø®/i, /^Ø¬/i, /^Ø³/i],
};

const matchDayPeriodPatterns$1d = {
  narrow: /^(Øµ|Ø¹|Ù Ù|Ù|(ÙÙ|ÙØ¹) (ØµØ¨Ø§Ø­|ÙØ§ÙÙØ©|Ø¹Ø´ÙØ©|ÙÙÙ))/,
  any: /^([ØµØ¹]|ÙØµ Ø§ÙÙÙÙ|ÙØ§ÙÙØ©|(ÙÙ|ÙØ¹) (ØµØ¨Ø§Ø­|ÙØ§ÙÙØ©|Ø¹Ø´ÙØ©|ÙÙÙ))/,
};
const parseDayPeriodPatterns$1d = {
  any: {
    am: /^Øµ/,
    pm: /^Ø¹/,
    midnight: /ÙØµ Ø§ÙÙÙÙ/,
    noon: /ÙØ§ÙÙØ©/,
    afternoon: /Ø¨Ø¹Ø¯ Ø§ÙÙØ§ÙÙØ©/,
    morning: /ØµØ¨Ø§Ø­/,
    evening: /Ø¹Ø´ÙØ©/,
    night: /ÙÙÙ/,
  },
};

(match$1d.match = {
  ordinalNumber: (0, _index$5q.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1d,
    parsePattern: parseOrdinalNumberPattern$1d,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index2$2H.buildMatchFn)({
    matchPatterns: matchEraPatterns$1d,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1d,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$2H.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1d,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1d,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index2$2H.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1d,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1d,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$2H.buildMatchFn)({
    matchPatterns: matchDayPatterns$1d,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1d,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$2H.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1d,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1d,
    defaultParseWidth: "any",
  }),
});

arTN.arTN = void 0;
var _index$5p = formatDistance$2t;
var _index2$2G = formatLong$1m;
var _index3$1p = formatRelative$2t;
var _index4$1o = localize$1e;
var _index5$1o = match$1d;

/**
 * @category Locales
 * @summary Arabic locale (Tunisian Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Koussay Haj Kacem [@essana3](https://github.com/essana3)
 */
(arTN.arTN = {
  code: "ar-TN",
  formatDistance: _index$5p.formatDistance,
  formatLong: _index2$2G.formatLong,
  formatRelative: _index3$1p.formatRelative,
  localize: _index4$1o.localize,
  match: _index5$1o.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var az = {};

var formatDistance$2r = {};

formatDistance$2r.formatDistance = void 0;

const formatDistanceLocale$1c = {
  lessThanXSeconds: {
    one: "bir saniyÉdÉn az",
    other: "{{count}} bir saniyÉdÉn az",
  },

  xSeconds: {
    one: "1 saniyÉ",
    other: "{{count}} saniyÉ",
  },

  halfAMinute: "yarÄ±m dÉqiqÉ",

  lessThanXMinutes: {
    one: "bir dÉqiqÉdÉn az",
    other: "{{count}} bir dÉqiqÉdÉn az",
  },

  xMinutes: {
    one: "bir dÉqiqÉ",
    other: "{{count}} dÉqiqÉ",
  },

  aboutXHours: {
    one: "tÉxminÉn 1 saat",
    other: "tÉxminÉn {{count}} saat",
  },

  xHours: {
    one: "1 saat",
    other: "{{count}} saat",
  },

  xDays: {
    one: "1 gÃ¼n",
    other: "{{count}} gÃ¼n",
  },

  aboutXWeeks: {
    one: "tÉxminÉn 1 hÉftÉ",
    other: "tÉxminÉn {{count}} hÉftÉ",
  },

  xWeeks: {
    one: "1 hÉftÉ",
    other: "{{count}} hÉftÉ",
  },

  aboutXMonths: {
    one: "tÉxminÉn 1 ay",
    other: "tÉxminÉn {{count}} ay",
  },

  xMonths: {
    one: "1 ay",
    other: "{{count}} ay",
  },

  aboutXYears: {
    one: "tÉxminÉn 1 il",
    other: "tÉxminÉn {{count}} il",
  },

  xYears: {
    one: "1 il",
    other: "{{count}} il",
  },

  overXYears: {
    one: "1 ildÉn Ã§ox",
    other: "{{count}} ildÉn Ã§ox",
  },

  almostXYears: {
    one: "demÉk olar ki 1 il",
    other: "demÉk olar ki {{count}} il",
  },
};

const formatDistance$2q = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$1c[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " sonra";
    } else {
      return result + " ÉvvÉl";
    }
  }

  return result;
};
formatDistance$2r.formatDistance = formatDistance$2q;

var formatLong$1l = {};

formatLong$1l.formatLong = void 0;
var _index$5o = buildFormatLongFn$1;

const dateFormats$1l = {
  full: "EEEE, do MMMM y 'il'",
  long: "do MMMM y 'il'",
  medium: "d MMM y 'il'",
  short: "dd.MM.yyyy",
};

const timeFormats$1l = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$1l = {
  full: "{{date}} {{time}} - 'dÉ'",
  long: "{{date}} {{time}} - 'dÉ'",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1l.formatLong = {
  date: (0, _index$5o.buildFormatLongFn)({
    formats: dateFormats$1l,
    defaultWidth: "full",
  }),

  time: (0, _index$5o.buildFormatLongFn)({
    formats: timeFormats$1l,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5o.buildFormatLongFn)({
    formats: dateTimeFormats$1l,
    defaultWidth: "full",
  }),
});

var formatRelative$2r = {};

formatRelative$2r.formatRelative = void 0;

const formatRelativeLocale$1d = {
  lastWeek: "'sonuncu' eeee p -'dÉ'",
  yesterday: "'dÃ¼nÉn' p -'dÉ'",
  today: "'bugÃ¼n' p -'dÉ'",
  tomorrow: "'sabah' p -'dÉ'",
  nextWeek: "eeee p -'dÉ'",
  other: "P",
};

const formatRelative$2q = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$1d[token];
formatRelative$2r.formatRelative = formatRelative$2q;

var localize$1d = {};

localize$1d.localize = void 0;
var _index$5n = buildLocalizeFn$1;

const eraValues$1d = {
  narrow: ["e.É", "b.e"],
  abbreviated: ["e.É", "b.e"],
  wide: ["eramÄ±zdan ÉvvÉl", "bizim era"],
};

const quarterValues$1d = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1ci kvartal", "2ci kvartal", "3cÃ¼ kvartal", "4cÃ¼ kvartal"],
};
const monthValues$1d = {
  narrow: ["Y", "F", "M", "A", "M", "Ä°", "Ä°", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Yan",
    "Fev",
    "Mar",
    "Apr",
    "May",
    "Ä°yun",
    "Ä°yul",
    "Avq",
    "Sen",
    "Okt",
    "Noy",
    "Dek",
  ],

  wide: [
    "Yanvar",
    "Fevral",
    "Mart",
    "Aprel",
    "May",
    "Ä°yun",
    "Ä°yul",
    "Avqust",
    "Sentyabr",
    "Oktyabr",
    "Noyabr",
    "Dekabr",
  ],
};

const dayValues$1d = {
  narrow: ["B.", "B.e", "Ã.a", "Ã.", "C.a", "C.", "Å."],
  short: ["B.", "B.e", "Ã.a", "Ã.", "C.a", "C.", "Å."],
  abbreviated: ["Baz", "Baz.e", "ÃÉr.a", "ÃÉr", "CÃ¼m.a", "CÃ¼m", "ÅÉ"],
  wide: [
    "Bazar",
    "Bazar ertÉsi",
    "ÃÉrÅÉnbÉ axÅamÄ±",
    "ÃÉrÅÉnbÉ",
    "CÃ¼mÉ axÅamÄ±",
    "CÃ¼mÉ",
    "ÅÉnbÉ",
  ],
};

const dayPeriodValues$1d = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "gecÉyarÄ±",
    noon: "gÃ¼n",
    morning: "sÉhÉr",
    afternoon: "gÃ¼ndÃ¼z",
    evening: "axÅam",
    night: "gecÉ",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gecÉyarÄ±",
    noon: "gÃ¼n",
    morning: "sÉhÉr",
    afternoon: "gÃ¼ndÃ¼z",
    evening: "axÅam",
    night: "gecÉ",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gecÉyarÄ±",
    noon: "gÃ¼n",
    morning: "sÉhÉr",
    afternoon: "gÃ¼ndÃ¼z",
    evening: "axÅam",
    night: "gecÉ",
  },
};

const formattingDayPeriodValues$Z = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "gecÉyarÄ±",
    noon: "gÃ¼n",
    morning: "sÉhÉr",
    afternoon: "gÃ¼ndÃ¼z",
    evening: "axÅam",
    night: "gecÉ",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gecÉyarÄ±",
    noon: "gÃ¼n",
    morning: "sÉhÉr",
    afternoon: "gÃ¼ndÃ¼z",
    evening: "axÅam",
    night: "gecÉ",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gecÉyarÄ±",
    noon: "gÃ¼n",
    morning: "sÉhÉr",
    afternoon: "gÃ¼ndÃ¼z",
    evening: "axÅam",
    night: "gecÉ",
  },
};

const suffixes$1 = {
  1: "-inci",
  5: "-inci",
  8: "-inci",
  70: "-inci",
  80: "-inci",
  2: "-nci",
  7: "-nci",
  20: "-nci",
  50: "-nci",
  3: "-Ã¼ncÃ¼",
  4: "-Ã¼ncÃ¼",
  100: "-Ã¼ncÃ¼",
  6: "-ncÄ±",
  9: "-uncu",
  10: "-uncu",
  30: "-uncu",
  60: "-Ä±ncÄ±",
  90: "-Ä±ncÄ±",
};

const getSuffix = (number) => {
  if (number === 0) {
    // special case for zero
    return number + "-Ä±ncÄ±";
  }

  const a = number % 10;
  const b = (number % 100) - a;
  const c = number >= 100 ? 100 : null;

  if (suffixes$1[a]) {
    return suffixes$1[a];
  } else if (suffixes$1[b]) {
    return suffixes$1[b];
  } else if (c !== null) {
    return suffixes$1[c];
  }
  return "";
};

const ordinalNumber$1d = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const suffix = getSuffix(number);

  return number + suffix;
};

(localize$1d.localize = {
  ordinalNumber: ordinalNumber$1d,

  era: (0, _index$5n.buildLocalizeFn)({
    values: eraValues$1d,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5n.buildLocalizeFn)({
    values: quarterValues$1d,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5n.buildLocalizeFn)({
    values: monthValues$1d,
    defaultWidth: "wide",
  }),

  day: (0, _index$5n.buildLocalizeFn)({
    values: dayValues$1d,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5n.buildLocalizeFn)({
    values: dayPeriodValues$1d,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$Z,
    defaultFormattingWidth: "wide",
  }),
});

var match$1c = {};

match$1c.match = void 0;

var _index$5m = buildMatchFn$1;
var _index2$2F = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1c = /^(\d+)(-?(ci|inci|nci|uncu|Ã¼ncÃ¼|ncÄ±))?/i;
const parseOrdinalNumberPattern$1c = /\d+/i;

const matchEraPatterns$1c = {
  narrow: /^(b|a)$/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
  wide: /^(bizim eradan ÉvvÉl|bizim era)$/i,
};
const parseEraPatterns$1c = {
  any: [/^b$/i, /^(a|c)$/i],
};

const matchQuarterPatterns$1c = {
  narrow: /^[1234]$/i,
  abbreviated: /^K[1234]$/i,
  wide: /^[1234](ci)? kvartal$/i,
};
const parseQuarterPatterns$1c = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1c = {
  narrow: /^[(?-i)yfmaisond]$/i,
  abbreviated: /^(Yan|Fev|Mar|Apr|May|Ä°yun|Ä°yul|Avq|Sen|Okt|Noy|Dek)$/i,
  wide: /^(Yanvar|Fevral|Mart|Aprel|May|Ä°yun|Ä°yul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i,
};
const parseMonthPatterns$1c = {
  narrow: [
    /^[(?-i)y]$/i,
    /^[(?-i)f]$/i,
    /^[(?-i)m]$/i,
    /^[(?-i)a]$/i,
    /^[(?-i)m]$/i,
    /^[(?-i)i]$/i,
    /^[(?-i)i]$/i,
    /^[(?-i)a]$/i,
    /^[(?-i)s]$/i,
    /^[(?-i)o]$/i,
    /^[(?-i)n]$/i,
    /^[(?-i)d]$/i,
  ],

  abbreviated: [
    /^Yan$/i,
    /^Fev$/i,
    /^Mar$/i,
    /^Apr$/i,
    /^May$/i,
    /^Ä°yun$/i,
    /^Ä°yul$/i,
    /^Avg$/i,
    /^Sen$/i,
    /^Okt$/i,
    /^Noy$/i,
    /^Dek$/i,
  ],

  wide: [
    /^Yanvar$/i,
    /^Fevral$/i,
    /^Mart$/i,
    /^Aprel$/i,
    /^May$/i,
    /^Ä°yun$/i,
    /^Ä°yul$/i,
    /^Avgust$/i,
    /^Sentyabr$/i,
    /^Oktyabr$/i,
    /^Noyabr$/i,
    /^Dekabr$/i,
  ],
};

const matchDayPatterns$1c = {
  narrow: /^(B\.|B\.e|Ã\.a|Ã\.|C\.a|C\.|Å\.)$/i,
  short: /^(B\.|B\.e|Ã\.a|Ã\.|C\.a|C\.|Å\.)$/i,
  abbreviated: /^(Baz\.e|ÃÉr|ÃÉr\.a|CÃ¼m|CÃ¼m\.a|ÅÉ)$/i,
  wide: /^(Bazar|Bazar ertÉsi|ÃÉrÅÉnbÉ axÅamÄ±|ÃÉrÅÉnbÉ|CÃ¼mÉ axÅamÄ±|CÃ¼mÉ|ÅÉnbÉ)$/i,
};
const parseDayPatterns$1c = {
  narrow: [
    /^B\.$/i,
    /^B\.e$/i,
    /^Ã\.a$/i,
    /^Ã\.$/i,
    /^C\.a$/i,
    /^C\.$/i,
    /^Å\.$/i,
  ],

  abbreviated: [
    /^Baz$/i,
    /^Baz\.e$/i,
    /^ÃÉr\.a$/i,
    /^ÃÉr$/i,
    /^CÃ¼m\.a$/i,
    /^CÃ¼m$/i,
    /^ÅÉ$/i,
  ],

  wide: [
    /^Bazar$/i,
    /^Bazar ertÉsi$/i,
    /^ÃÉrÅÉnbÉ axÅamÄ±$/i,
    /^ÃÉrÅÉnbÉ$/i,
    /^CÃ¼mÉ axÅamÄ±$/i,
    /^CÃ¼mÉ$/i,
    /^ÅÉnbÉ$/i,
  ],

  any: [
    /^B\.$/i,
    /^B\.e$/i,
    /^Ã\.a$/i,
    /^Ã\.$/i,
    /^C\.a$/i,
    /^C\.$/i,
    /^Å\.$/i,
  ],
};

const matchDayPeriodPatterns$1c = {
  narrow: /^(a|p|gecÉyarÄ±|gÃ¼n|sÉhÉr|gÃ¼ndÃ¼z|axÅam|gecÉ)$/i,
  any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecÉyarÄ±|gÃ¼n|sÉhÉr|gÃ¼ndÃ¼z|axÅam|gecÉ)$/i,
};
const parseDayPeriodPatterns$1c = {
  any: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /^gecÉyarÄ±$/i,
    noon: /^gÃ¼n$/i,
    morning: /sÉhÉr$/i,
    afternoon: /gÃ¼ndÃ¼z$/i,
    evening: /axÅam$/i,
    night: /gecÉ$/i,
  },
};

(match$1c.match = {
  ordinalNumber: (0, _index2$2F.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1c,
    parsePattern: parseOrdinalNumberPattern$1c,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$5m.buildMatchFn)({
    matchPatterns: matchEraPatterns$1c,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1c,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5m.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1c,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1c,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5m.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1c,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1c,
    defaultParseWidth: "narrow",
  }),

  day: (0, _index$5m.buildMatchFn)({
    matchPatterns: matchDayPatterns$1c,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1c,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5m.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1c,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1c,
    defaultParseWidth: "any",
  }),
});

az.az = void 0;
var _index$5l = formatDistance$2r;
var _index2$2E = formatLong$1l;
var _index3$1o = formatRelative$2r;
var _index4$1n = localize$1d;
var _index5$1n = match$1c;

/**
 * @category Locales
 * @summary Azerbaijani locale.
 * @language Azerbaijani
 * @iso-639-2 aze
 */

(az.az = {
  code: "az",
  formatDistance: _index$5l.formatDistance,
  formatLong: _index2$2E.formatLong,
  formatRelative: _index3$1o.formatRelative,
  localize: _index4$1n.localize,
  match: _index5$1n.match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1,
  },
});

var be = {};

var formatDistance$2p = {};

formatDistance$2p.formatDistance = void 0;

function declension$6(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }

  const rem10 = count % 10;
  const rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}

function buildLocalizeTokenFn$4(scheme) {
  return (count, options) => {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension$6(scheme.future, count);
        } else {
          return "Ð¿ÑÐ°Ð· " + declension$6(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$6(scheme.past, count);
        } else {
          return declension$6(scheme.regular, count) + " ÑÐ°Ð¼Ñ";
        }
      }
    } else {
      return declension$6(scheme.regular, count);
    }
  };
}

const halfAMinute$1 = (_, options) => {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ð¿ÑÐ°Ð· Ð¿Ð°ÑÑÐ²ÑÐ»ÑÐ½Ñ";
    } else {
      return "Ð¿Ð°ÑÑÐ²ÑÐ»ÑÐ½Ñ ÑÐ°Ð¼Ñ";
    }
  }

  return "Ð¿Ð°ÑÑÐ²ÑÐ»ÑÐ½Ñ";
};

const formatDistanceLocale$1b = {
  lessThanXSeconds: buildLocalizeTokenFn$4({
    regular: {
      one: "Ð¼ÐµÐ½Ñ Ð·Ð° ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´",
    },
    future: {
      one: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  xSeconds: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ð°",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´",
    },
    past: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ ÑÐ°Ð¼Ñ",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ ÑÐ°Ð¼Ñ",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ ÑÐ°Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  halfAMinute: halfAMinute$1,

  lessThanXMinutes: buildLocalizeTokenFn$4({
    regular: {
      one: "Ð¼ÐµÐ½Ñ Ð·Ð° ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
    future: {
      one: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
  }),

  xMinutes: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ð°",
      singularGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
    past: {
      singularNominative: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      singularGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      pluralGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½ ÑÐ°Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
  }),

  aboutXHours: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
  }),

  xHours: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ð°",
      singularGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      pluralGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
    past: {
      singularNominative: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      singularGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      pluralGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½ ÑÐ°Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      singularGenitive: "Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      pluralGenitive: "Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
  }),

  xDays: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} Ð´Ð·ÐµÐ½Ñ",
      singularGenitive: "{{count}} Ð´Ð½Ñ",
      pluralGenitive: "{{count}} Ð´Ð·ÑÐ½",
    },
  }),

  aboutXWeeks: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} ÑÑÐ´Ð½Ñ",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} ÑÑÐ´Ð½ÑÑ",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} ÑÑÐ´Ð½ÑÑ",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} ÑÑÐ´Ð·ÐµÐ½Ñ",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} ÑÑÐ´Ð½Ñ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} ÑÑÐ´Ð½ÑÑ",
    },
  }),

  xWeeks: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} ÑÑÐ´Ð·ÐµÐ½Ñ",
      singularGenitive: "{{count}} ÑÑÐ´Ð½Ñ",
      pluralGenitive: "{{count}} ÑÑÐ´Ð½ÑÑ",
    },
  }),

  aboutXMonths: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} Ð¼ÐµÑÑÑÐ°",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð¼ÐµÑÑÑÐ°Ñ",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð¼ÐµÑÑÑÐ°Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð¼ÐµÑÑÑ",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð¼ÐµÑÑÑÑ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð¼ÐµÑÑÑÐ°Ñ",
    },
  }),

  xMonths: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} Ð¼ÐµÑÑÑ",
      singularGenitive: "{{count}} Ð¼ÐµÑÑÑÑ",
      pluralGenitive: "{{count}} Ð¼ÐµÑÑÑÐ°Ñ",
    },
  }),

  aboutXYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð¾Ð´Ð°",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð¾Ñ",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),

  xYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "{{count}} Ð³Ð¾Ð´",
      singularGenitive: "{{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "{{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),

  overXYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "Ð±Ð¾Ð»ÑÑ Ð·Ð° {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð±Ð¾Ð»ÑÑ Ð·Ð° {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð±Ð¾Ð»ÑÑ Ð·Ð° {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
    future: {
      singularNominative: "Ð±Ð¾Ð»ÑÑ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð±Ð¾Ð»ÑÑ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð±Ð¾Ð»ÑÑ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),

  almostXYears: buildLocalizeTokenFn$4({
    regular: {
      singularNominative: "Ð°Ð¼Ð°Ð»Ñ {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð°Ð¼Ð°Ð»Ñ {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð°Ð¼Ð°Ð»Ñ {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
    future: {
      singularNominative: "Ð°Ð¼Ð°Ð»Ñ Ð¿ÑÐ°Ð· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð°Ð¼Ð°Ð»Ñ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð°Ð¼Ð°Ð»Ñ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),
};

const formatDistance$2o = (token, count, options) => {
  options = options || {};
  return formatDistanceLocale$1b[token](count, options);
};
formatDistance$2p.formatDistance = formatDistance$2o;

var formatLong$1k = {};

formatLong$1k.formatLong = void 0;
var _index$5k = buildFormatLongFn$1;

const dateFormats$1k = {
  full: "EEEE, d MMMM y 'Ð³.'",
  long: "d MMMM y 'Ð³.'",
  medium: "d MMM y 'Ð³.'",
  short: "dd.MM.y",
};

const timeFormats$1k = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$1k = {
  any: "{{date}}, {{time}}",
};

(formatLong$1k.formatLong = {
  date: (0, _index$5k.buildFormatLongFn)({
    formats: dateFormats$1k,
    defaultWidth: "full",
  }),

  time: (0, _index$5k.buildFormatLongFn)({
    formats: timeFormats$1k,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5k.buildFormatLongFn)({
    formats: dateTimeFormats$1k,
    defaultWidth: "any",
  }),
});

var formatRelative$2p = {};

var isSameWeek$1 = {};

var startOfWeek$1 = {};

var toDate$1 = {};

toDate$1.toDate = toDate;

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param argument - The value to convert
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument) {
  const argStr = Object.prototype.toString.call(argument);

  // Clone the date
  if (
    argument instanceof Date ||
    (typeof argument === "object" && argStr === "[object Date]")
  ) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new argument.constructor(+argument);
  } else if (
    typeof argument === "number" ||
    argStr === "[object Number]" ||
    typeof argument === "string" ||
    argStr === "[object String]"
  ) {
    // TODO: Can we get rid of as?
    return new Date(argument);
  } else {
    // TODO: Can we get rid of as?
    return new Date(NaN);
  }
}

var defaultOptions$1 = {};

defaultOptions$1.getDefaultOptions = getDefaultOptions;
defaultOptions$1.setDefaultOptions = setDefaultOptions;

let defaultOptions = {};

function getDefaultOptions() {
  return defaultOptions;
}

function setDefaultOptions(newOptions) {
  defaultOptions = newOptions;
}

startOfWeek$1.startOfWeek = startOfWeek;
var _index$5j = toDate$1;

var _index2$2D = defaultOptions$1;

/**
 * The {@link startOfWeek} function options.
 */

/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */
function startOfWeek(date, options) {
  const defaultOptions = (0, _index2$2D.getDefaultOptions)();
  const weekStartsOn =
    options?.weekStartsOn ??
    options?.locale?.options?.weekStartsOn ??
    defaultOptions.weekStartsOn ??
    defaultOptions.locale?.options?.weekStartsOn ??
    0;

  const _date = (0, _index$5j.toDate)(date);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

isSameWeek$1.isSameWeek = isSameWeek;
var _index$5i = startOfWeek$1;

/**
 * The {@link isSameWeek} function options.
 */

/**
 * @name isSameWeek
 * @category Week Helpers
 * @summary Are the given dates in the same week (and month and year)?
 *
 * @description
 * Are the given dates in the same week (and month and year)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 * @param options - An object with options
 *
 * @returns The dates are in the same week (and month and year)
 *
 * @example
 * // Are 31 August 2014 and 4 September 2014 in the same week?
 * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))
 * //=> true
 *
 * @example
 * // If week starts with Monday,
 * // are 31 August 2014 and 4 September 2014 in the same week?
 * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {
 *   weekStartsOn: 1
 * })
 * //=> false
 *
 * @example
 * // Are 1 January 2014 and 1 January 2015 in the same week?
 * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))
 * //=> false
 */
function isSameWeek(dateLeft, dateRight, options) {
  const dateLeftStartOfWeek = (0, _index$5i.startOfWeek)(dateLeft, options);
  const dateRightStartOfWeek = (0, _index$5i.startOfWeek)(dateRight, options);

  return +dateLeftStartOfWeek === +dateRightStartOfWeek;
}

formatRelative$2p.formatRelative = void 0;
var _index$5h = isSameWeek$1;
var _index2$2C = toDate$1;

const accusativeWeekdays$7 = [
  "Ð½ÑÐ´Ð·ÐµÐ»Ñ",
  "Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº",
  "Ð°ÑÑÐ¾ÑÐ°Ðº",
  "ÑÐµÑÐ°Ð´Ñ",
  "ÑÐ°ÑÐ²ÐµÑ",
  "Ð¿ÑÑÐ½ÑÑÑ",
  "ÑÑÐ±Ð¾ÑÑ",
];

function lastWeek$8(day) {
  const weekday = accusativeWeekdays$7[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'Ñ Ð¼ÑÐ½ÑÐ»ÑÑ " + weekday + " Ð°' p";
    case 1:
    case 2:
    case 4:
      return "'Ñ Ð¼ÑÐ½ÑÐ»Ñ " + weekday + " Ð°' p";
  }
}

function thisWeek$8(day) {
  const weekday = accusativeWeekdays$7[day];

  return "'Ñ " + weekday + " Ð°' p";
}

function nextWeek$8(day) {
  const weekday = accusativeWeekdays$7[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'Ñ Ð½Ð°ÑÑÑÐ¿Ð½ÑÑ " + weekday + " Ð°' p";
    case 1:
    case 2:
    case 4:
      return "'Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ñ " + weekday + " Ð°' p";
  }
}

const lastWeekFormat$2 = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$2C.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$5h.isSameWeek)(date, baseDate, options)) {
    return thisWeek$8(day);
  } else {
    return lastWeek$8(day);
  }
};

const nextWeekFormat$2 = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$2C.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$5h.isSameWeek)(date, baseDate, options)) {
    return thisWeek$8(day);
  } else {
    return nextWeek$8(day);
  }
};

const formatRelativeLocale$1c = {
  lastWeek: lastWeekFormat$2,
  yesterday: "'ÑÑÐ¾ÑÐ° Ð°' p",
  today: "'ÑÑÐ½Ð½Ñ Ð°' p",
  tomorrow: "'Ð·Ð°ÑÑÑÐ° Ð°' p",
  nextWeek: nextWeekFormat$2,
  other: "P",
};

const formatRelative$2o = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$1c[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$2p.formatRelative = formatRelative$2o;

var localize$1c = {};

localize$1c.localize = void 0;

var _index$5g = buildLocalizeFn$1;

const eraValues$1c = {
  narrow: ["Ð´Ð° Ð½.Ñ.", "Ð½.Ñ."],
  abbreviated: ["Ð´Ð° Ð½. Ñ.", "Ð½. Ñ."],
  wide: ["Ð´Ð° Ð½Ð°ÑÐ°Ð¹ ÑÑÑ", "Ð½Ð°ÑÐ°Ð¹ ÑÑÑ"],
};

const quarterValues$1c = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-Ñ ÐºÐ².", "2-Ñ ÐºÐ².", "3-Ñ ÐºÐ².", "4-Ñ ÐºÐ²."],
  wide: ["1-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»", "2-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»", "3-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»", "4-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»"],
};

const monthValues$1c = {
  narrow: ["Ð¡", "Ð", "Ð¡", "Ð", "Ð", "Ð§", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡"],
  abbreviated: [
    "ÑÑÑÐ´Ð·.",
    "Ð»ÑÑ.",
    "ÑÐ°Ðº.",
    "ÐºÑÐ°Ñ.",
    "Ð¼Ð°Ð¹",
    "ÑÑÑÐ².",
    "Ð»ÑÐ¿.",
    "Ð¶Ð½.",
    "Ð²ÐµÑ.",
    "ÐºÐ°ÑÑÑ.",
    "Ð»ÑÑÑ.",
    "ÑÐ½ÐµÐ¶.",
  ],

  wide: [
    "ÑÑÑÐ´Ð·ÐµÐ½Ñ",
    "Ð»ÑÑÑ",
    "ÑÐ°ÐºÐ°Ð²ÑÐº",
    "ÐºÑÐ°ÑÐ°Ð²ÑÐº",
    "Ð¼Ð°Ð¹",
    "ÑÑÑÐ²ÐµÐ½Ñ",
    "Ð»ÑÐ¿ÐµÐ½Ñ",
    "Ð¶Ð½ÑÐ²ÐµÐ½Ñ",
    "Ð²ÐµÑÐ°ÑÐµÐ½Ñ",
    "ÐºÐ°ÑÑÑÑÑÐ½ÑÐº",
    "Ð»ÑÑÑÐ°Ð¿Ð°Ð´",
    "ÑÐ½ÐµÐ¶Ð°Ð½Ñ",
  ],
};
const formattingMonthValues$i = {
  narrow: ["Ð¡", "Ð", "Ð¡", "Ð", "Ð", "Ð§", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡"],
  abbreviated: [
    "ÑÑÑÐ´Ð·.",
    "Ð»ÑÑ.",
    "ÑÐ°Ðº.",
    "ÐºÑÐ°Ñ.",
    "Ð¼Ð°Ñ",
    "ÑÑÑÐ².",
    "Ð»ÑÐ¿.",
    "Ð¶Ð½.",
    "Ð²ÐµÑ.",
    "ÐºÐ°ÑÑÑ.",
    "Ð»ÑÑÑ.",
    "ÑÐ½ÐµÐ¶.",
  ],

  wide: [
    "ÑÑÑÐ´Ð·ÐµÐ½Ñ",
    "Ð»ÑÑÐ°Ð³Ð°",
    "ÑÐ°ÐºÐ°Ð²ÑÐºÐ°",
    "ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°",
    "Ð¼Ð°Ñ",
    "ÑÑÑÐ²ÐµÐ½Ñ",
    "Ð»ÑÐ¿ÐµÐ½Ñ",
    "Ð¶Ð½ÑÑÐ½Ñ",
    "Ð²ÐµÑÐ°ÑÐ½Ñ",
    "ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°",
    "Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°",
    "ÑÐ½ÐµÐ¶Ð½Ñ",
  ],
};

const dayValues$1c = {
  narrow: ["Ð", "Ð", "Ð", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð½Ð´", "Ð¿Ð½", "Ð°Ñ", "ÑÑ", "ÑÑ", "Ð¿Ñ", "ÑÐ±"],
  abbreviated: ["Ð½ÑÐ´Ð·", "Ð¿Ð°Ð½", "Ð°ÑÑ", "ÑÐµÑ", "ÑÐ°Ñ", "Ð¿ÑÑ", "ÑÑÐ±"],
  wide: [
    "Ð½ÑÐ´Ð·ÐµÐ»Ñ",
    "Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº",
    "Ð°ÑÑÐ¾ÑÐ°Ðº",
    "ÑÐµÑÐ°Ð´Ð°",
    "ÑÐ°ÑÐ²ÐµÑ",
    "Ð¿ÑÑÐ½ÑÑÐ°",
    "ÑÑÐ±Ð¾ÑÐ°",
  ],
};

const dayPeriodValues$1c = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð·ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾Ñ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð·ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾Ñ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½Ð°Ñ",
    noon: "Ð¿Ð¾ÑÐ´Ð·ÐµÐ½Ñ",
    morning: "ÑÐ°Ð½ÑÑÐ°",
    afternoon: "Ð´Ð·ÐµÐ½Ñ",
    evening: "Ð²ÐµÑÐ°Ñ",
    night: "Ð½Ð¾Ñ",
  },
};
const formattingDayPeriodValues$Y = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½Ð°Ñ",
    noon: "Ð¿Ð¾ÑÐ´Ð·ÐµÐ½Ñ",
    morning: "ÑÐ°Ð½ÑÑÑ",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑÐ°ÑÐ°",
    night: "Ð½Ð¾ÑÑ",
  },
};

const ordinalNumber$1c = (dirtyNumber, options) => {
  const unit = String(options?.unit);
  const number = Number(dirtyNumber);
  let suffix;

  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 Ð²ÐµÑÐ°ÑÐ½Ñ)
   *  Incorrect: `do MMMM` (4-Ð³Ð° Ð²ÐµÑÐ°ÑÐ½Ñ)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do Ð´Ð·ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ°`)
   *  library will produce:            `5-Ð³Ð° Ð´Ð·ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ°`
   *  but correct spelling should be:  `5-Ñ Ð´Ð·ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ°`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */
  if (unit === "date") {
    suffix = "-Ð³Ð°";
  } else if (unit === "hour" || unit === "minute" || unit === "second") {
    suffix = "-Ñ";
  } else {
    suffix =
      (number % 10 === 2 || number % 10 === 3) &&
      number % 100 !== 12 &&
      number % 100 !== 13
        ? "-Ñ"
        : "-Ñ";
  }

  return number + suffix;
};

(localize$1c.localize = {
  ordinalNumber: ordinalNumber$1c,

  era: (0, _index$5g.buildLocalizeFn)({
    values: eraValues$1c,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5g.buildLocalizeFn)({
    values: quarterValues$1c,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5g.buildLocalizeFn)({
    values: monthValues$1c,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$i,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$5g.buildLocalizeFn)({
    values: dayValues$1c,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5g.buildLocalizeFn)({
    values: dayPeriodValues$1c,
    defaultWidth: "any",
    formattingValues: formattingDayPeriodValues$Y,
    defaultFormattingWidth: "wide",
  }),
});

var match$1b = {};

match$1b.match = void 0;

var _index$5f = buildMatchFn$1;
var _index2$2B = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1b =
  /^(\d+)(-?(Ðµ|Ñ|Ð³Ð°|Ñ|Ñ|Ð°Ðµ|Ð°Ñ|ÑÑ|ÑÑ|Ð³Ñ|ÑÑ|ÑÑ|Ð¼Ñ))?/i;
const parseOrdinalNumberPattern$1b = /\d+/i;

const matchEraPatterns$1b = {
  narrow: /^((Ð´Ð° )?Ð½\.?\s?Ñ\.?)/i,
  abbreviated: /^((Ð´Ð° )?Ð½\.?\s?Ñ\.?)/i,
  wide: /^(Ð´Ð° Ð½Ð°ÑÐ°Ð¹ ÑÑÑ|Ð½Ð°ÑÐ°Ð¹ ÑÑÑ|Ð½Ð°ÑÐ° ÑÑÐ°)/i,
};
const parseEraPatterns$1b = {
  any: [/^Ð´/i, /^Ð½/i],
};

const matchQuarterPatterns$1b = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ÑÑ]?)? ÐºÐ².?/i,
  wide: /^[1234](-?[ÑÑ]?)? ÐºÐ²Ð°ÑÑÐ°Ð»/i,
};
const parseQuarterPatterns$1b = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1b = {
  narrow: /^[ÑÐ»ÐºÐ¼ÑÐ¶Ð²]/i,
  abbreviated:
    /^(ÑÑÑÐ´Ð·|Ð»ÑÑ|ÑÐ°Ðº|ÐºÑÐ°Ñ|Ð¼Ð°[Ð¹Ñ]|ÑÑÑÐ²|Ð»ÑÐ¿|Ð¶Ð½|Ð²ÐµÑ|ÐºÐ°ÑÑÑ|Ð»ÑÑÑ|ÑÐ½ÐµÐ¶)\.?/i,
  wide: /^(ÑÑÑÐ´Ð·ÐµÐ½[ÑÑ]|Ð»ÑÑ(Ñ|Ð°Ð³Ð°)|ÑÐ°ÐºÐ°Ð²ÑÐºÐ°?|ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°?|Ð¼Ð°[Ð¹Ñ]|ÑÑÑÐ²ÐµÐ½[ÑÑ]|Ð»ÑÐ¿ÐµÐ½[ÑÑ]|Ð¶Ð½Ñ(Ð²ÐµÐ½Ñ|ÑÐ½Ñ)|Ð²ÐµÑÐ°Ñ(ÐµÐ½Ñ|Ð½Ñ)|ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°?|Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°?|ÑÐ½ÐµÐ¶(Ð°Ð½Ñ|Ð½Ñ))/i,
};
const parseMonthPatterns$1b = {
  narrow: [
    /^Ñ/i,
    /^Ð»/i,
    /^Ñ/i,
    /^Ðº/i,
    /^Ð¼/i,
    /^Ñ/i,
    /^Ð»/i,
    /^Ð¶/i,
    /^Ð²/i,
    /^Ðº/i,
    /^Ð»/i,
    /^Ñ/i,
  ],

  any: [
    /^ÑÑ/i,
    /^Ð»Ñ/i,
    /^ÑÐ°/i,
    /^ÐºÑ/i,
    /^Ð¼Ð°/i,
    /^Ñ/i,
    /^Ð»ÑÐ¿/i,
    /^Ð¶/i,
    /^Ð²/i,
    /^ÐºÐ°/i,
    /^Ð»ÑÑ/i,
    /^ÑÐ½/i,
  ],
};

const matchDayPatterns$1b = {
  narrow: /^[Ð½Ð¿Ð°ÑÑ]/i,
  short: /^(Ð½Ð´|Ð½Ñ|Ð¿Ð½|Ð¿Ð°|Ð°Ñ|Ð°Ñ|ÑÑ|ÑÐµ|ÑÑ|ÑÐ°|Ð¿Ñ|Ð¿Ñ|ÑÐ±|ÑÑ)\.?/i,
  abbreviated: /^(Ð½ÑÐ´Ð·?|Ð½Ð´Ð·|Ð¿Ð½Ð´|Ð¿Ð°Ð½|Ð°ÑÑ|ÑÑÐ´|ÑÐµÑ|ÑÑÐ²|ÑÐ°Ñ|Ð¿ÑÐ½|Ð¿ÑÑ|ÑÑÐ±).?/i,
  wide: /^(Ð½ÑÐ´Ð·ÐµÐ»[ÑÑ]|Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»(Ð°Ðº|ÐºÐ°)|Ð°ÑÑÐ¾Ñ(Ð°Ðº|ÐºÐ°)|ÑÐµÑÐ°Ð´[Ð°Ñ]|ÑÐ°ÑÐ²(ÐµÑ|ÑÑÐ³Ð°)|Ð¿ÑÑÐ½ÑÑ[Ð°Ñ]|ÑÑÐ±Ð¾Ñ[Ð°Ñ])/i,
};
const parseDayPatterns$1b = {
  narrow: [/^Ð½/i, /^Ð¿/i, /^Ð°/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i],
  any: [/^Ð½/i, /^Ð¿[Ð°Ð½]/i, /^Ð°/i, /^Ñ[ÐµÑ]/i, /^Ñ/i, /^Ð¿[ÑÑ]/i, /^Ñ[ÑÐ±]/i],
};

const matchDayPeriodPatterns$1b = {
  narrow: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾ÑÐ½\.?|Ð¿Ð¾ÑÐ´\.?|ÑÐ°Ð½\.?|Ð´Ð·ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½Ð¾ÑÑ?)/i,
  abbreviated: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾ÑÐ½\.?|Ð¿Ð¾ÑÐ´\.?|ÑÐ°Ð½\.?|Ð´Ð·ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½Ð¾ÑÑ?)/i,
  wide: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾ÑÐ½Ð°Ñ|Ð¿Ð¾ÑÐ´Ð·ÐµÐ½Ñ|ÑÐ°Ð½ÑÑ[Ð°Ñ]|Ð´Ð·ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°?|Ð½Ð¾ÑÑ?)/i,
};
const parseDayPeriodPatterns$1b = {
  any: {
    am: /^Ð´Ð¿/i,
    pm: /^Ð¿Ð¿/i,
    midnight: /^Ð¿Ð¾ÑÐ½/i,
    noon: /^Ð¿Ð¾ÑÐ´/i,
    morning: /^Ñ/i,
    afternoon: /^Ð´[Ð·Ð½]/i,
    evening: /^Ð²/i,
    night: /^Ð½/i,
  },
};

(match$1b.match = {
  ordinalNumber: (0, _index2$2B.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1b,
    parsePattern: parseOrdinalNumberPattern$1b,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$5f.buildMatchFn)({
    matchPatterns: matchEraPatterns$1b,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1b,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5f.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1b,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1b,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5f.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1b,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1b,
    defaultParseWidth: "any",
  }),

  day: (0, _index$5f.buildMatchFn)({
    matchPatterns: matchDayPatterns$1b,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1b,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5f.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1b,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$1b,
    defaultParseWidth: "any",
  }),
});

be.be = void 0;
var _index$5e = formatDistance$2p;
var _index2$2A = formatLong$1k;
var _index3$1n = formatRelative$2p;
var _index4$1m = localize$1c;
var _index5$1m = match$1b;

/**
 * @category Locales
 * @summary Belarusian locale.
 * @language Belarusian
 * @iso-639-2 bel
 * @author Kiryl Anokhin [@alyrik](https://github.com/alyrik)
 * @author Martin Wind [@arvigeus](https://github.com/mawi12345)
 */
(be.be = {
  code: "be",
  formatDistance: _index$5e.formatDistance,
  formatLong: _index2$2A.formatLong,
  formatRelative: _index3$1n.formatRelative,
  localize: _index4$1m.localize,
  match: _index5$1m.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var beTarask = {};

var formatDistance$2n = {};

formatDistance$2n.formatDistance = void 0;

function declension$5(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }

  const rem10 = count % 10;
  const rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}

function buildLocalizeTokenFn$3(scheme) {
  return (count, options) => {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension$5(scheme.future, count);
        } else {
          return "Ð¿ÑÐ°Ð· " + declension$5(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$5(scheme.past, count);
        } else {
          return declension$5(scheme.regular, count) + " ÑÐ°Ð¼Ñ";
        }
      }
    } else {
      return declension$5(scheme.regular, count);
    }
  };
}

const halfAMinute = (_, options) => {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ð¿ÑÐ°Ð· Ð¿Ð°ÑÑÐ²ÑÐ»ÑÐ½Ñ";
    } else {
      return "Ð¿Ð°ÑÑÐ²ÑÐ»ÑÐ½Ñ ÑÐ°Ð¼Ñ";
    }
  }

  return "Ð¿Ð°ÑÑÐ²ÑÐ»ÑÐ½Ñ";
};

const formatDistanceLocale$1a = {
  lessThanXSeconds: buildLocalizeTokenFn$3({
    regular: {
      one: "Ð¼ÐµÐ½Ñ Ð·Ð° ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´",
    },
    future: {
      one: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  xSeconds: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ð°",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´",
    },
    past: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ ÑÐ°Ð¼Ñ",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ ÑÐ°Ð¼Ñ",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ ÑÐ°Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  halfAMinute: halfAMinute,

  lessThanXMinutes: buildLocalizeTokenFn$3({
    regular: {
      one: "Ð¼ÐµÐ½Ñ Ð·Ð° ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ Ð·Ð° {{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
    future: {
      one: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularNominative: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "Ð¼ÐµÐ½Ñ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
  }),

  xMinutes: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ð°",
      singularGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
    past: {
      singularNominative: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      singularGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      pluralGenitive: "{{count}} ÑÐ²ÑÐ»ÑÐ½ ÑÐ°Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      singularGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½Ñ",
      pluralGenitive: "Ð¿ÑÐ°Ð· {{count}} ÑÐ²ÑÐ»ÑÐ½",
    },
  }),

  aboutXHours: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
  }),

  xHours: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ð°",
      singularGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      pluralGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
    past: {
      singularNominative: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      singularGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ ÑÐ°Ð¼Ñ",
      pluralGenitive: "{{count}} Ð³Ð°Ð´Ð·ÑÐ½ ÑÐ°Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      singularGenitive: "Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½Ñ",
      pluralGenitive: "Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð·ÑÐ½",
    },
  }),

  xDays: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} Ð´Ð·ÐµÐ½Ñ",
      singularGenitive: "{{count}} Ð´Ð½Ñ",
      pluralGenitive: "{{count}} Ð´Ð·ÑÐ½",
    },
  }),

  aboutXWeeks: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} ÑÑÐ´Ð½Ñ",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} ÑÑÐ´Ð½ÑÑ",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} ÑÑÐ´Ð½ÑÑ",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} ÑÑÐ´Ð·ÐµÐ½Ñ",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} ÑÑÐ´Ð½Ñ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} ÑÑÐ´Ð½ÑÑ",
    },
  }),

  xWeeks: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} ÑÑÐ´Ð·ÐµÐ½Ñ",
      singularGenitive: "{{count}} ÑÑÐ´Ð½Ñ",
      pluralGenitive: "{{count}} ÑÑÐ´Ð½ÑÑ",
    },
  }),

  aboutXMonths: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} Ð¼ÐµÑÑÑÐ°",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð¼ÐµÑÑÑÐ°Ñ",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð¼ÐµÑÑÑÐ°Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð¼ÐµÑÑÑ",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð¼ÐµÑÑÑÑ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð¼ÐµÑÑÑÐ°Ñ",
    },
  }),

  xMonths: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} Ð¼ÐµÑÑÑ",
      singularGenitive: "{{count}} Ð¼ÐµÑÑÑÑ",
      pluralGenitive: "{{count}} Ð¼ÐµÑÑÑÐ°Ñ",
    },
  }),

  aboutXYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð¾Ð´Ð°",
      singularGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð¾Ñ",
      pluralGenitive: "ÐºÐ°Ð»Ñ {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð¿ÑÑÐ±Ð»ÑÐ·Ð½Ð° Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),

  xYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "{{count}} Ð³Ð¾Ð´",
      singularGenitive: "{{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "{{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),

  overXYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "Ð±Ð¾Ð»ÑÑ Ð·Ð° {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð±Ð¾Ð»ÑÑ Ð·Ð° {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð±Ð¾Ð»ÑÑ Ð·Ð° {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
    future: {
      singularNominative: "Ð±Ð¾Ð»ÑÑ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð±Ð¾Ð»ÑÑ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð±Ð¾Ð»ÑÑ, ÑÑÐ¼ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),

  almostXYears: buildLocalizeTokenFn$3({
    regular: {
      singularNominative: "Ð°Ð¼Ð°Ð»Ñ {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð°Ð¼Ð°Ð»Ñ {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð°Ð¼Ð°Ð»Ñ {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
    future: {
      singularNominative: "Ð°Ð¼Ð°Ð»Ñ Ð¿ÑÐ°Ð· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð°Ð¼Ð°Ð»Ñ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ñ",
      pluralGenitive: "Ð°Ð¼Ð°Ð»Ñ Ð¿ÑÐ°Ð· {{count}} Ð³Ð°Ð´Ð¾Ñ",
    },
  }),
};

const formatDistance$2m = (token, count, options) => {
  options = options || {};
  return formatDistanceLocale$1a[token](count, options);
};
formatDistance$2n.formatDistance = formatDistance$2m;

var formatLong$1j = {};

formatLong$1j.formatLong = void 0;
var _index$5d = buildFormatLongFn$1;

const dateFormats$1j = {
  full: "EEEE, d MMMM y 'Ð³.'",
  long: "d MMMM y 'Ð³.'",
  medium: "d MMM y 'Ð³.'",
  short: "dd.MM.y",
};

const timeFormats$1j = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$1j = {
  any: "{{date}}, {{time}}",
};

(formatLong$1j.formatLong = {
  date: (0, _index$5d.buildFormatLongFn)({
    formats: dateFormats$1j,
    defaultWidth: "full",
  }),

  time: (0, _index$5d.buildFormatLongFn)({
    formats: timeFormats$1j,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$5d.buildFormatLongFn)({
    formats: dateTimeFormats$1j,
    defaultWidth: "any",
  }),
});

var formatRelative$2n = {};

formatRelative$2n.formatRelative = void 0;
var _index$5c = isSameWeek$1;
var _index2$2z = toDate$1;

const accusativeWeekdays$6 = [
  "Ð½ÑÐ´Ð·ÐµÐ»Ñ",
  "Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº",
  "Ð°ÑÑÐ¾ÑÐ°Ðº",
  "ÑÐµÑÐ°Ð´Ñ",
  "ÑÐ°ÑÑÐ²ÐµÑ",
  "Ð¿ÑÑÐ½ÑÑÑ",
  "ÑÑÐ±Ð¾ÑÑ",
];

function lastWeek$7(day) {
  const weekday = accusativeWeekdays$6[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'Ñ Ð¼ÑÐ½ÑÐ»ÑÑ " + weekday + " Ð°' p";
    case 1:
    case 2:
    case 4:
      return "'Ñ Ð¼ÑÐ½ÑÐ»Ñ " + weekday + " Ð°' p";
  }
}

function thisWeek$7(day) {
  const weekday = accusativeWeekdays$6[day];

  return "'Ñ " + weekday + " Ð°' p";
}

function nextWeek$7(day) {
  const weekday = accusativeWeekdays$6[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'Ñ Ð½Ð°ÑÑÑÐ¿Ð½ÑÑ " + weekday + " Ð°' p";
    case 1:
    case 2:
    case 4:
      return "'Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ñ " + weekday + " Ð°' p";
  }
}

const lastWeekFormat$1 = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$2z.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$5c.isSameWeek)(date, baseDate, options)) {
    return thisWeek$7(day);
  } else {
    return lastWeek$7(day);
  }
};

const nextWeekFormat$1 = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$2z.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$5c.isSameWeek)(date, baseDate, options)) {
    return thisWeek$7(day);
  } else {
    return nextWeek$7(day);
  }
};

const formatRelativeLocale$1b = {
  lastWeek: lastWeekFormat$1,
  yesterday: "'ÑÑÐ¾ÑÐ° Ð°' p",
  today: "'ÑÑÐ½ÑÐ½Ñ Ð°' p",
  tomorrow: "'Ð·Ð°ÑÑÑÐ° Ð°' p",
  nextWeek: nextWeekFormat$1,
  other: "P",
};

const formatRelative$2m = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$1b[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$2n.formatRelative = formatRelative$2m;

var localize$1b = {};

localize$1b.localize = void 0;

var _index$5b = buildLocalizeFn$1;

const eraValues$1b = {
  narrow: ["Ð´Ð° Ð½.Ñ.", "Ð½.Ñ."],
  abbreviated: ["Ð´Ð° Ð½. Ñ.", "Ð½. Ñ."],
  wide: ["Ð´Ð° Ð½Ð°ÑÐ°Ð¹ ÑÑÑ", "Ð½Ð°ÑÐ°Ð¹ ÑÑÑ"],
};

const quarterValues$1b = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-Ñ ÐºÐ².", "2-Ñ ÐºÐ².", "3-Ñ ÐºÐ².", "4-Ñ ÐºÐ²."],
  wide: ["1-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»", "2-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»", "3-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»", "4-Ñ ÐºÐ²Ð°ÑÑÐ°Ð»"],
};

const monthValues$1b = {
  narrow: ["Ð¡", "Ð", "Ð¡", "Ð", "Ð¢", "Ð§", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡"],
  abbreviated: [
    "ÑÑÑÐ´Ð·.",
    "Ð»ÑÑ.",
    "ÑÐ°Ðº.",
    "ÐºÑÐ°Ñ.",
    "ÑÑÐ°Ð².",
    "ÑÑÑÐ².",
    "Ð»ÑÐ¿.",
    "Ð¶Ð½.",
    "Ð²ÐµÑ.",
    "ÐºÐ°ÑÑÑ.",
    "Ð»ÑÑÑ.",
    "ÑÑÐ½ÐµÐ¶.",
  ],

  wide: [
    "ÑÑÑÐ´Ð·ÐµÐ½Ñ",
    "Ð»ÑÑÑ",
    "ÑÐ°ÐºÐ°Ð²ÑÐº",
    "ÐºÑÐ°ÑÐ°Ð²ÑÐº",
    "ÑÑÐ°Ð²ÐµÐ½Ñ",
    "ÑÑÑÐ²ÐµÐ½Ñ",
    "Ð»ÑÐ¿ÐµÐ½Ñ",
    "Ð¶Ð½ÑÐ²ÐµÐ½Ñ",
    "Ð²ÐµÑÐ°ÑÐµÐ½Ñ",
    "ÐºÐ°ÑÑÑÑÑÐ½ÑÐº",
    "Ð»ÑÑÑÐ°Ð¿Ð°Ð´",
    "ÑÑÐ½ÐµÐ¶Ð°Ð½Ñ",
  ],
};
const formattingMonthValues$h = {
  narrow: ["Ð¡", "Ð", "Ð¡", "Ð", "Ð¢", "Ð§", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡"],
  abbreviated: [
    "ÑÑÑÐ´Ð·.",
    "Ð»ÑÑ.",
    "ÑÐ°Ðº.",
    "ÐºÑÐ°Ñ.",
    "ÑÑÐ°Ð².",
    "ÑÑÑÐ².",
    "Ð»ÑÐ¿.",
    "Ð¶Ð½.",
    "Ð²ÐµÑ.",
    "ÐºÐ°ÑÑÑ.",
    "Ð»ÑÑÑ.",
    "ÑÑÐ½ÐµÐ¶.",
  ],

  wide: [
    "ÑÑÑÐ´Ð·ÐµÐ½Ñ",
    "Ð»ÑÑÐ°Ð³Ð°",
    "ÑÐ°ÐºÐ°Ð²ÑÐºÐ°",
    "ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°",
    "ÑÑÐ°ÑÐ½Ñ",
    "ÑÑÑÐ²ÐµÐ½Ñ",
    "Ð»ÑÐ¿ÐµÐ½Ñ",
    "Ð¶Ð½ÑÑÐ½Ñ",
    "Ð²ÐµÑÐ°ÑÐ½Ñ",
    "ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°",
    "Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°",
    "ÑÑÐ½ÐµÐ¶Ð½Ñ",
  ],
};

const dayValues$1b = {
  narrow: ["Ð", "Ð", "Ð", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð½Ð´", "Ð¿Ð½", "Ð°Ñ", "ÑÑ", "ÑÑ", "Ð¿Ñ", "ÑÐ±"],
  abbreviated: ["Ð½ÑÐ´Ð·", "Ð¿Ð°Ð½", "Ð°ÑÑ", "ÑÐµÑ", "ÑÐ°ÑÑ", "Ð¿ÑÑ", "ÑÑÐ±"],
  wide: [
    "Ð½ÑÐ´Ð·ÐµÐ»Ñ",
    "Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº",
    "Ð°ÑÑÐ¾ÑÐ°Ðº",
    "ÑÐµÑÐ°Ð´Ð°",
    "ÑÐ°ÑÑÐ²ÐµÑ",
    "Ð¿ÑÑÐ½ÑÑÐ°",
    "ÑÑÐ±Ð¾ÑÐ°",
  ],
};

const dayPeriodValues$1b = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð·ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾Ñ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð·ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾Ñ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½Ð°Ñ",
    noon: "Ð¿Ð¾ÑÐ´Ð·ÐµÐ½Ñ",
    morning: "ÑÐ°Ð½ÑÑÐ°",
    afternoon: "Ð´Ð·ÐµÐ½Ñ",
    evening: "Ð²ÐµÑÐ°Ñ",
    night: "Ð½Ð¾Ñ",
  },
};
const formattingDayPeriodValues$X = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½.",
    noon: "Ð¿Ð¾ÑÐ´.",
    morning: "ÑÐ°Ð½.",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾ÑÐ½Ð°Ñ",
    noon: "Ð¿Ð¾ÑÐ´Ð·ÐµÐ½Ñ",
    morning: "ÑÐ°Ð½ÑÑÑ",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑÐ°ÑÐ°",
    night: "Ð½Ð¾ÑÑ",
  },
};

const ordinalNumber$1b = (dirtyNumber, options) => {
  const unit = String(options?.unit);
  const number = Number(dirtyNumber);
  let suffix;

  /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 Ð²ÐµÑÐ°ÑÐ½Ñ)
   *  Incorrect: `do MMMM` (4-Ð³Ð° Ð²ÐµÑÐ°ÑÐ½Ñ)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do Ð´Ð·ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ°`)
   *  library will produce:            `5-Ð³Ð° Ð´Ð·ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ°`
   *  but correct spelling should be:  `5-Ñ Ð´Ð·ÐµÐ½Ñ Ð¼ÐµÑÑÑÐ°`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */
  if (unit === "date") {
    suffix = "-Ð³Ð°";
  } else if (unit === "hour" || unit === "minute" || unit === "second") {
    suffix = "-Ñ";
  } else {
    suffix =
      (number % 10 === 2 || number % 10 === 3) &&
      number % 100 !== 12 &&
      number % 100 !== 13
        ? "-Ñ"
        : "-Ñ";
  }

  return number + suffix;
};

(localize$1b.localize = {
  ordinalNumber: ordinalNumber$1b,

  era: (0, _index$5b.buildLocalizeFn)({
    values: eraValues$1b,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$5b.buildLocalizeFn)({
    values: quarterValues$1b,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$5b.buildLocalizeFn)({
    values: monthValues$1b,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$h,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$5b.buildLocalizeFn)({
    values: dayValues$1b,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$5b.buildLocalizeFn)({
    values: dayPeriodValues$1b,
    defaultWidth: "any",
    formattingValues: formattingDayPeriodValues$X,
    defaultFormattingWidth: "wide",
  }),
});

var match$1a = {};

match$1a.match = void 0;

var _index$5a = buildMatchFn$1;
var _index2$2y = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1a =
  /^(\d+)(-?(Ðµ|Ñ|Ð³Ð°|Ñ|Ñ|Ð°Ðµ|Ð°Ñ|ÑÑ|ÑÑ|Ð³Ñ|ÑÑ|ÑÑ|Ð¼Ñ))?/i;
const parseOrdinalNumberPattern$1a = /\d+/i;

const matchEraPatterns$1a = {
  narrow: /^((Ð´Ð° )?Ð½\.?\s?Ñ\.?)/i,
  abbreviated: /^((Ð´Ð° )?Ð½\.?\s?Ñ\.?)/i,
  wide: /^(Ð´Ð° Ð½Ð°ÑÐ°Ð¹ ÑÑÑ|Ð½Ð°ÑÐ°Ð¹ ÑÑÑ|Ð½Ð°ÑÐ° ÑÑÐ°)/i,
};
const parseEraPatterns$1a = {
  any: [/^Ð´/i, /^Ð½/i],
};

const matchQuarterPatterns$1a = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ÑÑ]?)? ÐºÐ².?/i,
  wide: /^[1234](-?[ÑÑ]?)? ÐºÐ²Ð°ÑÑÐ°Ð»/i,
};
const parseQuarterPatterns$1a = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$1a = {
  narrow: /^[ÑÐ»ÐºÐ¼ÑÐ¶Ð²]/i,
  abbreviated:
    /^(ÑÑÑÐ´Ð·|Ð»ÑÑ|ÑÐ°Ðº|ÐºÑÐ°Ñ|ÑÑ(Ð°Ð²)?|ÑÑÑÐ²|Ð»ÑÐ¿|Ð¶Ð½|Ð²ÐµÑ|ÐºÐ°ÑÑÑ|Ð»ÑÑÑ|ÑÑÐ½ÐµÐ¶)\.?/i,
  wide: /^(ÑÑÑÐ´Ð·ÐµÐ½[ÑÑ]|Ð»ÑÑ(Ñ|Ð°Ð³Ð°)|ÑÐ°ÐºÐ°Ð²ÑÐºÐ°?|ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°?|ÑÑÐ°(Ð²ÐµÐ½Ñ|ÑÐ½Ñ)|ÑÑÑÐ²ÐµÐ½[ÑÑ]|Ð»ÑÐ¿ÐµÐ½[ÑÑ]|Ð¶Ð½Ñ(Ð²ÐµÐ½Ñ|ÑÐ½Ñ)|Ð²ÐµÑÐ°Ñ(ÐµÐ½Ñ|Ð½Ñ)|ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°?|Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°?|ÑÑÐ½ÐµÐ¶(Ð°Ð½Ñ|Ð½Ñ))/i,
};
const parseMonthPatterns$1a = {
  narrow: [
    /^Ñ/i,
    /^Ð»/i,
    /^Ñ/i,
    /^Ðº/i,
    /^Ñ/i,
    /^Ñ/i,
    /^Ð»/i,
    /^Ð¶/i,
    /^Ð²/i,
    /^Ðº/i,
    /^Ð»/i,
    /^Ñ/i,
  ],

  any: [
    /^ÑÑ/i,
    /^Ð»Ñ/i,
    /^ÑÐ°/i,
    /^ÐºÑ/i,
    /^ÑÑ/i,
    /^Ñ/i,
    /^Ð»ÑÐ¿/i,
    /^Ð¶/i,
    /^Ð²/i,
    /^ÐºÐ°/i,
    /^Ð»ÑÑ/i,
    /^ÑÐ½/i,
  ],
};

const matchDayPatterns$1a = {
  narrow: /^[Ð½Ð¿Ð°ÑÑ]/i,
  short: /^(Ð½Ð´|Ð½Ñ|Ð¿Ð½|Ð¿Ð°|Ð°Ñ|Ð°Ñ|ÑÑ|ÑÐµ|ÑÑ|ÑÐ°|Ð¿Ñ|Ð¿Ñ|ÑÐ±|ÑÑ)\.?/i,
  abbreviated: /^(Ð½ÑÐ´Ð·?|Ð½Ð´Ð·|Ð¿Ð½Ð´|Ð¿Ð°Ð½|Ð°ÑÑ|ÑÑÐ´|ÑÐµÑ|ÑÑÑÐ²|ÑÐ°ÑÑ|Ð¿ÑÐ½|Ð¿ÑÑ|ÑÑÐ±).?/i,
  wide: /^(Ð½ÑÐ´Ð·ÐµÐ»[ÑÑ]|Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»(Ð°Ðº|ÐºÐ°)|Ð°ÑÑÐ¾Ñ(Ð°Ðº|ÐºÐ°)|ÑÐµÑÐ°Ð´[Ð°Ñ]|ÑÐ°ÑÑÐ²(ÐµÑ|ÑÑÐ³Ð°)|Ð¿ÑÑÐ½ÑÑ[Ð°Ñ]|ÑÑÐ±Ð¾Ñ[Ð°Ñ])/i,
};
const parseDayPatterns$1a = {
  narrow: [/^Ð½/i, /^Ð¿/i, /^Ð°/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i],
  any: [/^Ð½/i, /^Ð¿[Ð°Ð½]/i, /^Ð°/i, /^Ñ[ÐµÑ]/i, /^Ñ/i, /^Ð¿[ÑÑ]/i, /^Ñ[ÑÐ±]/i],
};

const matchDayPeriodPatterns$1a = {
  narrow: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾ÑÐ½\.?|Ð¿Ð¾ÑÐ´\.?|ÑÐ°Ð½\.?|Ð´Ð·ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½Ð¾ÑÑ?)/i,
  abbreviated: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾ÑÐ½\.?|Ð¿Ð¾ÑÐ´\.?|ÑÐ°Ð½\.?|Ð´Ð·ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½Ð¾ÑÑ?)/i,
  wide: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾ÑÐ½Ð°Ñ|Ð¿Ð¾ÑÐ´Ð·ÐµÐ½Ñ|ÑÐ°Ð½ÑÑ[Ð°Ñ]|Ð´Ð·ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°?|Ð½Ð¾ÑÑ?)/i,
};
const parseDayPeriodPatterns$1a = {
  any: {
    am: /^Ð´Ð¿/i,
    pm: /^Ð¿Ð¿/i,
    midnight: /^Ð¿Ð¾ÑÐ½/i,
    noon: /^Ð¿Ð¾ÑÐ´/i,
    morning: /^Ñ/i,
    afternoon: /^Ð´[Ð·Ð½]/i,
    evening: /^Ð²/i,
    night: /^Ð½/i,
  },
};

(match$1a.match = {
  ordinalNumber: (0, _index2$2y.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1a,
    parsePattern: parseOrdinalNumberPattern$1a,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$5a.buildMatchFn)({
    matchPatterns: matchEraPatterns$1a,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1a,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5a.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1a,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1a,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5a.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1a,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1a,
    defaultParseWidth: "any",
  }),

  day: (0, _index$5a.buildMatchFn)({
    matchPatterns: matchDayPatterns$1a,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1a,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5a.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1a,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$1a,
    defaultParseWidth: "any",
  }),
});

beTarask.beTarask = void 0;
var _index$59 = formatDistance$2n;
var _index2$2x = formatLong$1j;
var _index3$1m = formatRelative$2n;
var _index4$1l = localize$1b;
var _index5$1l = match$1a;

/**
 * @category Locales
 * @summary Belarusian Classic locale.
 * @language Belarusian Classic
 * @iso-639-2 bel
 * @author Ryhor Nopears [@nopears](https://github.com/nopears)
 */
(beTarask.beTarask = {
  code: "be-tarask",
  formatDistance: _index$59.formatDistance,
  formatLong: _index2$2x.formatLong,
  formatRelative: _index3$1m.formatRelative,
  localize: _index4$1l.localize,
  match: _index5$1l.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var bg = {};

var formatDistance$2l = {};

formatDistance$2l.formatDistance = void 0;

const formatDistanceLocale$19 = {
  lessThanXSeconds: {
    one: "Ð¿Ð¾-Ð¼Ð°Ð»ÐºÐ¾ Ð¾Ñ ÑÐµÐºÑÐ½Ð´Ð°",
    other: "Ð¿Ð¾-Ð¼Ð°Ð»ÐºÐ¾ Ð¾Ñ {{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
  },

  xSeconds: {
    one: "1 ÑÐµÐºÑÐ½Ð´Ð°",
    other: "{{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
  },

  halfAMinute: "Ð¿Ð¾Ð»Ð¾Ð²Ð¸Ð½ Ð¼Ð¸Ð½ÑÑÐ°",

  lessThanXMinutes: {
    one: "Ð¿Ð¾-Ð¼Ð°Ð»ÐºÐ¾ Ð¾Ñ Ð¼Ð¸Ð½ÑÑÐ°",
    other: "Ð¿Ð¾-Ð¼Ð°Ð»ÐºÐ¾ Ð¾Ñ {{count}} Ð¼Ð¸Ð½ÑÑÐ¸",
  },

  xMinutes: {
    one: "1 Ð¼Ð¸Ð½ÑÑÐ°",
    other: "{{count}} Ð¼Ð¸Ð½ÑÑÐ¸",
  },

  aboutXHours: {
    one: "Ð¾ÐºÐ¾Ð»Ð¾ ÑÐ°Ñ",
    other: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} ÑÐ°ÑÐ°",
  },

  xHours: {
    one: "1 ÑÐ°Ñ",
    other: "{{count}} ÑÐ°ÑÐ°",
  },

  xDays: {
    one: "1 Ð´ÐµÐ½",
    other: "{{count}} Ð´Ð½Ð¸",
  },

  aboutXWeeks: {
    one: "Ð¾ÐºÐ¾Ð»Ð¾ ÑÐµÐ´Ð¼Ð¸ÑÐ°",
    other: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} ÑÐµÐ´Ð¼Ð¸ÑÐ¸",
  },

  xWeeks: {
    one: "1 ÑÐµÐ´Ð¼Ð¸ÑÐ°",
    other: "{{count}} ÑÐµÐ´Ð¼Ð¸ÑÐ¸",
  },

  aboutXMonths: {
    one: "Ð¾ÐºÐ¾Ð»Ð¾ Ð¼ÐµÑÐµÑ",
    other: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð¼ÐµÑÐµÑÐ°",
  },

  xMonths: {
    one: "1 Ð¼ÐµÑÐµÑ",
    other: "{{count}} Ð¼ÐµÑÐµÑÐ°",
  },

  aboutXYears: {
    one: "Ð¾ÐºÐ¾Ð»Ð¾ Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },

  xYears: {
    one: "1 Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "{{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },

  overXYears: {
    one: "Ð½Ð°Ð´ Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "Ð½Ð°Ð´ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },

  almostXYears: {
    one: "Ð¿Ð¾ÑÑÐ¸ Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "Ð¿Ð¾ÑÑÐ¸ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },
};

const formatDistance$2k = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$19[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÑÐ»ÐµÐ´ " + result;
    } else {
      return "Ð¿ÑÐµÐ´Ð¸ " + result;
    }
  }

  return result;
};
formatDistance$2l.formatDistance = formatDistance$2k;

var formatLong$1i = {};

formatLong$1i.formatLong = void 0;
var _index$58 = buildFormatLongFn$1;

const dateFormats$1i = {
  full: "EEEE, dd MMMM yyyy",
  long: "dd MMMM yyyy",
  medium: "dd MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$1i = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$1i = {
  any: "{{date}} {{time}}",
};

(formatLong$1i.formatLong = {
  date: (0, _index$58.buildFormatLongFn)({
    formats: dateFormats$1i,
    defaultWidth: "full",
  }),

  time: (0, _index$58.buildFormatLongFn)({
    formats: timeFormats$1i,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$58.buildFormatLongFn)({
    formats: dateTimeFormats$1i,
    defaultWidth: "any",
  }),
});

var formatRelative$2l = {};

formatRelative$2l.formatRelative = void 0;
var _index$57 = isSameWeek$1;
var _index2$2w = toDate$1;

// Adapted from the `ru` translation

const weekdays$3 = [
  "Ð½ÐµÐ´ÐµÐ»Ñ",
  "Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº",
  "Ð²ÑÐ¾ÑÐ½Ð¸Ðº",
  "ÑÑÑÐ´Ð°",
  "ÑÐµÑÐ²ÑÑÑÑÐº",
  "Ð¿ÐµÑÑÐº",
  "ÑÑÐ±Ð¾ÑÐ°",
];

function lastWeek$6(day) {
  const weekday = weekdays$3[day];

  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'Ð¼Ð¸Ð½Ð°Ð»Ð°ÑÐ° " + weekday + " Ð²' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'Ð¼Ð¸Ð½Ð°Ð»Ð¸Ñ " + weekday + " Ð²' p";
  }
}

function thisWeek$6(day) {
  const weekday = weekdays$3[day];

  if (day === 2 /* Tue */) {
    return "'Ð²ÑÐ² " + weekday + " Ð²' p";
  } else {
    return "'Ð² " + weekday + " Ð²' p";
  }
}

function nextWeek$6(day) {
  const weekday = weekdays$3[day];

  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'ÑÐ»ÐµÐ´Ð²Ð°ÑÐ°ÑÐ° " + weekday + " Ð²' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'ÑÐ»ÐµÐ´Ð²Ð°ÑÐ¸Ñ " + weekday + " Ð²' p";
  }
}

const lastWeekFormatToken = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$2w.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$57.isSameWeek)(date, baseDate, options)) {
    return thisWeek$6(day);
  } else {
    return lastWeek$6(day);
  }
};

const nextWeekFormatToken = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$2w.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$57.isSameWeek)(date, baseDate, options)) {
    return thisWeek$6(day);
  } else {
    return nextWeek$6(day);
  }
};

const formatRelativeLocale$1a = {
  lastWeek: lastWeekFormatToken,
  yesterday: "'Ð²ÑÐµÑÐ° Ð²' p",
  today: "'Ð´Ð½ÐµÑ Ð²' p",
  tomorrow: "'ÑÑÑÐµ Ð²' p",
  nextWeek: nextWeekFormatToken,
  other: "P",
};

const formatRelative$2k = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$1a[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$2l.formatRelative = formatRelative$2k;

var localize$1a = {};

localize$1a.localize = void 0;
var _index$56 = buildLocalizeFn$1;

const eraValues$1a = {
  narrow: ["Ð¿Ñ.Ð½.Ðµ.", "Ð½.Ðµ."],
  abbreviated: ["Ð¿ÑÐµÐ´Ð¸ Ð½. Ðµ.", "Ð½. Ðµ."],
  wide: ["Ð¿ÑÐµÐ´Ð¸ Ð½Ð¾Ð²Ð°ÑÐ° ÐµÑÐ°", "Ð½Ð¾Ð²Ð°ÑÐ° ÐµÑÐ°"],
};

const quarterValues$1a = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-Ð²Ð¾ ÑÑÐ¸Ð¼ÐµÑ.", "2-ÑÐ¾ ÑÑÐ¸Ð¼ÐµÑ.", "3-ÑÐ¾ ÑÑÐ¸Ð¼ÐµÑ.", "4-ÑÐ¾ ÑÑÐ¸Ð¼ÐµÑ."],

  wide: [
    "1-Ð²Ð¾ ÑÑÐ¸Ð¼ÐµÑÐµÑÐ¸Ðµ",
    "2-ÑÐ¾ ÑÑÐ¸Ð¼ÐµÑÐµÑÐ¸Ðµ",
    "3-ÑÐ¾ ÑÑÐ¸Ð¼ÐµÑÐµÑÐ¸Ðµ",
    "4-ÑÐ¾ ÑÑÐ¸Ð¼ÐµÑÐµÑÐ¸Ðµ",
  ],
};

const monthValues$1a = {
  abbreviated: [
    "ÑÐ½Ñ",
    "ÑÐµÐ²",
    "Ð¼Ð°Ñ",
    "Ð°Ð¿Ñ",
    "Ð¼Ð°Ð¹",
    "ÑÐ½Ð¸",
    "ÑÐ»Ð¸",
    "Ð°Ð²Ð³",
    "ÑÐµÐ¿",
    "Ð¾ÐºÑ",
    "Ð½Ð¾Ðµ",
    "Ð´ÐµÐº",
  ],

  wide: [
    "ÑÐ½ÑÐ°ÑÐ¸",
    "ÑÐµÐ²ÑÑÐ°ÑÐ¸",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿ÑÐ¸Ð»",
    "Ð¼Ð°Ð¹",
    "ÑÐ½Ð¸",
    "ÑÐ»Ð¸",
    "Ð°Ð²Ð³ÑÑÑ",
    "ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸",
    "Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸",
    "Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸",
    "Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸",
  ],
};

const dayValues$1a = {
  narrow: ["Ð", "Ð", "Ð", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð½Ð´", "Ð¿Ð½", "Ð²Ñ", "ÑÑ", "ÑÑ", "Ð¿Ñ", "ÑÐ±"],
  abbreviated: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "Ð²ÑÐ¾", "ÑÑÑ", "ÑÐµÑ", "Ð¿ÐµÑ", "ÑÑÐ±"],
  wide: [
    "Ð½ÐµÐ´ÐµÐ»Ñ",
    "Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº",
    "Ð²ÑÐ¾ÑÐ½Ð¸Ðº",
    "ÑÑÑÐ´Ð°",
    "ÑÐµÑÐ²ÑÑÑÑÐº",
    "Ð¿ÐµÑÑÐº",
    "ÑÑÐ±Ð¾ÑÐ°",
  ],
};

const dayPeriodValues$1a = {
  wide: {
    am: "Ð¿ÑÐµÐ´Ð¸ Ð¾Ð±ÑÐ´",
    pm: "ÑÐ»ÐµÐ´ Ð¾Ð±ÑÐ´",
    midnight: "Ð² Ð¿Ð¾Ð»ÑÐ½Ð¾Ñ",
    noon: "Ð½Ð° Ð¾Ð±ÑÐ´",
    morning: "ÑÑÑÑÐ¸Ð½ÑÐ°",
    afternoon: "ÑÐ»ÐµÐ´Ð¾Ð±ÐµÐ´",
    evening: "Ð²ÐµÑÐµÑÑÐ°",
    night: "Ð¿ÑÐµÐ· Ð½Ð¾ÑÑÐ°",
  },
};

function isFeminine(unit) {
  return (
    unit === "year" || unit === "week" || unit === "minute" || unit === "second"
  );
}

function isNeuter(unit) {
  return unit === "quarter";
}

function numberWithSuffix(number, unit, masculine, feminine, neuter) {
  const suffix = isNeuter(unit)
    ? neuter
    : isFeminine(unit)
      ? feminine
      : masculine;
  return number + "-" + suffix;
}

const ordinalNumber$1a = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = options?.unit;

  if (number === 0) {
    return numberWithSuffix(0, unit, "ÐµÐ²", "ÐµÐ²Ð°", "ÐµÐ²Ð¾");
  } else if (number % 1000 === 0) {
    return numberWithSuffix(number, unit, "ÐµÐ½", "Ð½Ð°", "Ð½Ð¾");
  } else if (number % 100 === 0) {
    return numberWithSuffix(number, unit, "ÑÐµÐ½", "ÑÐ½Ð°", "ÑÐ½Ð¾");
  }

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return numberWithSuffix(number, unit, "Ð²Ð¸", "Ð²Ð°", "Ð²Ð¾");
      case 2:
        return numberWithSuffix(number, unit, "ÑÐ¸", "ÑÐ°", "ÑÐ¾");
      case 7:
      case 8:
        return numberWithSuffix(number, unit, "Ð¼Ð¸", "Ð¼Ð°", "Ð¼Ð¾");
    }
  }

  return numberWithSuffix(number, unit, "ÑÐ¸", "ÑÐ°", "ÑÐ¾");
};

(localize$1a.localize = {
  ordinalNumber: ordinalNumber$1a,

  era: (0, _index$56.buildLocalizeFn)({
    values: eraValues$1a,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$56.buildLocalizeFn)({
    values: quarterValues$1a,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$56.buildLocalizeFn)({
    values: monthValues$1a,
    defaultWidth: "wide",
  }),

  day: (0, _index$56.buildLocalizeFn)({
    values: dayValues$1a,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$56.buildLocalizeFn)({
    values: dayPeriodValues$1a,
    defaultWidth: "wide",
  }),
});

var match$19 = {};

match$19.match = void 0;

var _index$55 = buildMatchFn$1;
var _index2$2v = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$19 =
  /^(\d+)(-?[Ð²ÑÐ¼Ñ][Ð°Ð¸]|-?Ñ?(ÐµÐ½|Ð½Ð°)|-?(ÐµÐ²|ÐµÐ²Ð°))?/i;
const parseOrdinalNumberPattern$19 = /\d+/i;

const matchEraPatterns$19 = {
  narrow: /^((Ð¿Ñ)?Ð½\.?\s?Ðµ\.?)/i,
  abbreviated: /^((Ð¿Ñ)?Ð½\.?\s?Ðµ\.?)/i,
  wide: /^(Ð¿ÑÐµÐ´Ð¸ Ð½Ð¾Ð²Ð°ÑÐ° ÐµÑÐ°|Ð½Ð¾Ð²Ð°ÑÐ° ÐµÑÐ°|Ð½Ð¾Ð²Ð° ÐµÑÐ°)/i,
};
const parseEraPatterns$19 = {
  any: [/^Ð¿/i, /^Ð½/i],
};

const matchQuarterPatterns$19 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[Ð²ÑÑ]?o?)? ÑÑÐ¸Ð¼ÐµÑ.?/i,
  wide: /^[1234](-?[Ð²ÑÑ]?Ð¾?)? ÑÑÐ¸Ð¼ÐµÑÐµÑÐ¸Ðµ/i,
};
const parseQuarterPatterns$19 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchDayPatterns$19 = {
  narrow: /^[Ð½Ð¿Ð²ÑÑ]/i,
  short: /^(Ð½Ð´|Ð¿Ð½|Ð²Ñ|ÑÑ|ÑÑ|Ð¿Ñ|ÑÐ±)/i,
  abbreviated: /^(Ð½ÐµÐ´|Ð¿Ð¾Ð½|Ð²ÑÐ¾|ÑÑÑ|ÑÐµÑ|Ð¿ÐµÑ|ÑÑÐ±)/i,
  wide: /^(Ð½ÐµÐ´ÐµÐ»Ñ|Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº|Ð²ÑÐ¾ÑÐ½Ð¸Ðº|ÑÑÑÐ´Ð°|ÑÐµÑÐ²ÑÑÑÑÐº|Ð¿ÐµÑÑÐº|ÑÑÐ±Ð¾ÑÐ°)/i,
};

const parseDayPatterns$19 = {
  narrow: [/^Ð½/i, /^Ð¿/i, /^Ð²/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i],
  any: [/^Ð½[ÐµÐ´]/i, /^Ð¿[Ð¾Ð½]/i, /^Ð²Ñ/i, /^ÑÑ/i, /^Ñ[ÐµÑ]/i, /^Ð¿[ÐµÑ]/i, /^Ñ[ÑÐ±]/i],
};

const matchMonthPatterns$19 = {
  abbreviated: /^(ÑÐ½Ñ|ÑÐµÐ²|Ð¼Ð°Ñ|Ð°Ð¿Ñ|Ð¼Ð°Ð¹|ÑÐ½Ð¸|ÑÐ»Ð¸|Ð°Ð²Ð³|ÑÐµÐ¿|Ð¾ÐºÑ|Ð½Ð¾Ðµ|Ð´ÐµÐº)/i,
  wide: /^(ÑÐ½ÑÐ°ÑÐ¸|ÑÐµÐ²ÑÑÐ°ÑÐ¸|Ð¼Ð°ÑÑ|Ð°Ð¿ÑÐ¸Ð»|Ð¼Ð°Ð¹|ÑÐ½Ð¸|ÑÐ»Ð¸|Ð°Ð²Ð³ÑÑÑ|ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸|Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸|Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸|Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸)/i,
};

const parseMonthPatterns$19 = {
  any: [
    /^Ñ/i,
    /^Ñ/i,
    /^Ð¼Ð°Ñ/i,
    /^Ð°Ð¿/i,
    /^Ð¼Ð°Ð¹/i,
    /^ÑÐ½/i,
    /^ÑÐ»/i,
    /^Ð°Ð²/i,
    /^ÑÐµ/i,
    /^Ð¾ÐºÑ/i,
    /^Ð½Ð¾/i,
    /^Ð´Ðµ/i,
  ],
};

const matchDayPeriodPatterns$19 = {
  any: /^(Ð¿ÑÐµÐ´Ð¸ Ð¾|ÑÐ»ÐµÐ´ Ð¾|Ð² Ð¿Ð¾|Ð½Ð° Ð¾|Ð¿ÑÐµÐ·|Ð²ÐµÑ|ÑÑÑ|ÑÐ»ÐµÐ´Ð¾)/i,
};
const parseDayPeriodPatterns$19 = {
  any: {
    am: /^Ð¿ÑÐµÐ´Ð¸ Ð¾/i,
    pm: /^ÑÐ»ÐµÐ´ Ð¾/i,
    midnight: /^Ð² Ð¿Ð¾Ð»/i,
    noon: /^Ð½Ð° Ð¾Ð±/i,
    morning: /^ÑÑÑ/i,
    afternoon: /^ÑÐ»ÐµÐ´Ð¾/i,
    evening: /^Ð²ÐµÑ/i,
    night: /^Ð¿ÑÐµÐ· Ð½/i,
  },
};

(match$19.match = {
  ordinalNumber: (0, _index2$2v.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$19,
    parsePattern: parseOrdinalNumberPattern$19,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$55.buildMatchFn)({
    matchPatterns: matchEraPatterns$19,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$19,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$55.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$19,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$19,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$55.buildMatchFn)({
    matchPatterns: matchMonthPatterns$19,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$19,
    defaultParseWidth: "any",
  }),

  day: (0, _index$55.buildMatchFn)({
    matchPatterns: matchDayPatterns$19,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$19,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$55.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$19,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$19,
    defaultParseWidth: "any",
  }),
});

bg.bg = void 0;
var _index$54 = formatDistance$2l;
var _index2$2u = formatLong$1i;
var _index3$1l = formatRelative$2l;
var _index4$1k = localize$1a;
var _index5$1k = match$19;

/**
 * @category Locales
 * @summary Bulgarian locale.
 * @language Bulgarian
 * @iso-639-2 bul
 * @author Nikolay Stoynov [@arvigeus](https://github.com/arvigeus)
 * @author Tsvetan Ovedenski [@fintara](https://github.com/fintara)
 */
(bg.bg = {
  code: "bg",
  formatDistance: _index$54.formatDistance,
  formatLong: _index2$2u.formatLong,
  formatRelative: _index3$1l.formatRelative,
  localize: _index4$1k.localize,
  match: _index5$1k.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var bn = {};

var formatDistance$2j = {};

var localize$19 = {};

localize$19.localize = void 0;
localize$19.numberToLocale = numberToLocale$1;
var _index$53 = buildLocalizeFn$1;

const numberValues$1 = {
  locale: {
    1: "à§§",
    2: "à§¨",
    3: "à§©",
    4: "à§ª",
    5: "à§«",
    6: "à§¬",
    7: "à§­",
    8: "à§®",
    9: "à§¯",
    0: "à§¦",
  },
  number: {
    "à§§": "1",
    "à§¨": "2",
    "à§©": "3",
    "à§ª": "4",
    "à§«": "5",
    "à§¬": "6",
    "à§­": "7",
    "à§®": "8",
    "à§¯": "9",
    "à§¦": "0",
  },
};

const eraValues$19 = {
  narrow: ["à¦à§à¦°à¦¿à¦à¦ªà§à¦", "à¦à§à¦°à¦¿à¦"],
  abbreviated: ["à¦à§à¦°à¦¿à¦à¦ªà§à¦°à§à¦¬", "à¦à§à¦°à¦¿à¦"],
  wide: ["à¦à§à¦°à¦¿à¦¸à§à¦à¦ªà§à¦°à§à¦¬", "à¦à§à¦°à¦¿à¦¸à§à¦à¦¾à¦¬à§à¦¦"],
};

const quarterValues$19 = {
  narrow: ["à§§", "à§¨", "à§©", "à§ª"],
  abbreviated: ["à§§à¦¤à§à¦°à§", "à§¨à¦¤à§à¦°à§", "à§©à¦¤à§à¦°à§", "à§ªà¦¤à§à¦°à§"],
  wide: ["à§§à¦® à¦¤à§à¦°à§à¦®à¦¾à¦¸à¦¿à¦", "à§¨à§ à¦¤à§à¦°à§à¦®à¦¾à¦¸à¦¿à¦", "à§©à§ à¦¤à§à¦°à§à¦®à¦¾à¦¸à¦¿à¦", "à§ªà¦°à§à¦¥ à¦¤à§à¦°à§à¦®à¦¾à¦¸à¦¿à¦"],
};

const monthValues$19 = {
  narrow: [
    "à¦à¦¾à¦¨à§",
    "à¦«à§à¦¬à§à¦°à§",
    "à¦®à¦¾à¦°à§à¦",
    "à¦à¦ªà§à¦°à¦¿à¦²",
    "à¦®à§",
    "à¦à§à¦¨",
    "à¦à§à¦²à¦¾à¦",
    "à¦à¦à¦¸à§à¦",
    "à¦¸à§à¦ªà§à¦",
    "à¦à¦à§à¦à§",
    "à¦¨à¦­à§",
    "à¦¡à¦¿à¦¸à§",
  ],

  abbreviated: [
    "à¦à¦¾à¦¨à§",
    "à¦«à§à¦¬à§à¦°à§",
    "à¦®à¦¾à¦°à§à¦",
    "à¦à¦ªà§à¦°à¦¿à¦²",
    "à¦®à§",
    "à¦à§à¦¨",
    "à¦à§à¦²à¦¾à¦",
    "à¦à¦à¦¸à§à¦",
    "à¦¸à§à¦ªà§à¦",
    "à¦à¦à§à¦à§",
    "à¦¨à¦­à§",
    "à¦¡à¦¿à¦¸à§",
  ],

  wide: [
    "à¦à¦¾à¦¨à§à§à¦¾à¦°à¦¿",
    "à¦«à§à¦¬à§à¦°à§à§à¦¾à¦°à¦¿",
    "à¦®à¦¾à¦°à§à¦",
    "à¦à¦ªà§à¦°à¦¿à¦²",
    "à¦®à§",
    "à¦à§à¦¨",
    "à¦à§à¦²à¦¾à¦",
    "à¦à¦à¦¸à§à¦",
    "à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°",
    "à¦à¦à§à¦à§à¦¬à¦°",
    "à¦¨à¦­à§à¦®à§à¦¬à¦°",
    "à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°",
  ],
};

const dayValues$19 = {
  narrow: ["à¦°", "à¦¸à§", "à¦®", "à¦¬à§", "à¦¬à§", "à¦¶à§", "à¦¶"],
  short: ["à¦°à¦¬à¦¿", "à¦¸à§à¦®", "à¦®à¦à§à¦à¦²", "à¦¬à§à¦§", "à¦¬à§à¦¹", "à¦¶à§à¦à§à¦°", "à¦¶à¦¨à¦¿"],
  abbreviated: ["à¦°à¦¬à¦¿", "à¦¸à§à¦®", "à¦®à¦à§à¦à¦²", "à¦¬à§à¦§", "à¦¬à§à¦¹", "à¦¶à§à¦à§à¦°", "à¦¶à¦¨à¦¿"],
  wide: [
    "à¦°à¦¬à¦¿à¦¬à¦¾à¦°",
    "à¦¸à§à¦®à¦¬à¦¾à¦°",
    "à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°",
    "à¦¬à§à¦§à¦¬à¦¾à¦°",
    "à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦° ",
    "à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°",
    "à¦¶à¦¨à¦¿à¦¬à¦¾à¦°",
  ],
};

const dayPeriodValues$19 = {
  narrow: {
    am: "à¦ªà§",
    pm: "à¦à¦ª",
    midnight: "à¦®à¦§à§à¦¯à¦°à¦¾à¦¤",
    noon: "à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨",
    morning: "à¦¸à¦à¦¾à¦²",
    afternoon: "à¦¬à¦¿à¦à¦¾à¦²",
    evening: "à¦¸à¦¨à§à¦§à§à¦¯à¦¾",
    night: "à¦°à¦¾à¦¤",
  },
  abbreviated: {
    am: "à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦¨",
    pm: "à¦à¦ªà¦°à¦¾à¦¹à§à¦¨",
    midnight: "à¦®à¦§à§à¦¯à¦°à¦¾à¦¤",
    noon: "à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨",
    morning: "à¦¸à¦à¦¾à¦²",
    afternoon: "à¦¬à¦¿à¦à¦¾à¦²",
    evening: "à¦¸à¦¨à§à¦§à§à¦¯à¦¾",
    night: "à¦°à¦¾à¦¤",
  },
  wide: {
    am: "à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦¨",
    pm: "à¦à¦ªà¦°à¦¾à¦¹à§à¦¨",
    midnight: "à¦®à¦§à§à¦¯à¦°à¦¾à¦¤",
    noon: "à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨",
    morning: "à¦¸à¦à¦¾à¦²",
    afternoon: "à¦¬à¦¿à¦à¦¾à¦²",
    evening: "à¦¸à¦¨à§à¦§à§à¦¯à¦¾",
    night: "à¦°à¦¾à¦¤",
  },
};

const formattingDayPeriodValues$W = {
  narrow: {
    am: "à¦ªà§",
    pm: "à¦à¦ª",
    midnight: "à¦®à¦§à§à¦¯à¦°à¦¾à¦¤",
    noon: "à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨",
    morning: "à¦¸à¦à¦¾à¦²",
    afternoon: "à¦¬à¦¿à¦à¦¾à¦²",
    evening: "à¦¸à¦¨à§à¦§à§à¦¯à¦¾",
    night: "à¦°à¦¾à¦¤",
  },
  abbreviated: {
    am: "à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦¨",
    pm: "à¦à¦ªà¦°à¦¾à¦¹à§à¦¨",
    midnight: "à¦®à¦§à§à¦¯à¦°à¦¾à¦¤",
    noon: "à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨",
    morning: "à¦¸à¦à¦¾à¦²",
    afternoon: "à¦¬à¦¿à¦à¦¾à¦²",
    evening: "à¦¸à¦¨à§à¦§à§à¦¯à¦¾",
    night: "à¦°à¦¾à¦¤",
  },
  wide: {
    am: "à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦¨",
    pm: "à¦à¦ªà¦°à¦¾à¦¹à§à¦¨",
    midnight: "à¦®à¦§à§à¦¯à¦°à¦¾à¦¤",
    noon: "à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨",
    morning: "à¦¸à¦à¦¾à¦²",
    afternoon: "à¦¬à¦¿à¦à¦¾à¦²",
    evening: "à¦¸à¦¨à§à¦§à§à¦¯à¦¾",
    night: "à¦°à¦¾à¦¤",
  },
};

function dateOrdinalNumber(number, localeNumber) {
  if (number > 18 && number <= 31) {
    return localeNumber + "à¦¶à§";
  } else {
    switch (number) {
      case 1:
        return localeNumber + "à¦²à¦¾";
      case 2:
      case 3:
        return localeNumber + "à¦°à¦¾";
      case 4:
        return localeNumber + "à¦ à¦¾";
      default:
        return localeNumber + "à¦";
    }
  }
}

const ordinalNumber$19 = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const localeNumber = numberToLocale$1(number);
  const unit = options?.unit;

  if (unit === "date") {
    return dateOrdinalNumber(number, localeNumber);
  }
  if (number > 10 || number === 0) return localeNumber + "à¦¤à¦®";

  const rem10 = number % 10;
  switch (rem10) {
    case 2:
    case 3:
      return localeNumber + "à§";
    case 4:
      return localeNumber + "à¦°à§à¦¥";
    case 6:
      return localeNumber + "à¦·à§à¦ ";
    default:
      return localeNumber + "à¦®";
  }
};

// function localeToNumber(locale: string): number {
//   const enNumber = locale.toString().replace(/[à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§¦]/g, function (match) {
//     return numberValues.number[match as keyof typeof numberValues.number]
//   })
//   return Number(enNumber)
// }

function numberToLocale$1(enNumber) {
  return enNumber.toString().replace(/\d/g, function (match) {
    return numberValues$1.locale[match];
  });
}

(localize$19.localize = {
  ordinalNumber: ordinalNumber$19,

  era: (0, _index$53.buildLocalizeFn)({
    values: eraValues$19,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$53.buildLocalizeFn)({
    values: quarterValues$19,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$53.buildLocalizeFn)({
    values: monthValues$19,
    defaultWidth: "wide",
  }),

  day: (0, _index$53.buildLocalizeFn)({
    values: dayValues$19,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$53.buildLocalizeFn)({
    values: dayPeriodValues$19,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$W,
    defaultFormattingWidth: "wide",
  }),
});

formatDistance$2j.formatDistance = void 0;
var _index$52 = localize$19;

const formatDistanceLocale$18 = {
  lessThanXSeconds: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦¸à§à¦à§à¦¨à§à¦¡",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦¸à§à¦à§à¦¨à§à¦¡",
  },

  xSeconds: {
    one: "à§§ à¦¸à§à¦à§à¦¨à§à¦¡",
    other: "{{count}} à¦¸à§à¦à§à¦¨à§à¦¡",
  },

  halfAMinute: "à¦à¦§ à¦®à¦¿à¦¨à¦¿à¦",

  lessThanXMinutes: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦®à¦¿à¦¨à¦¿à¦",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦®à¦¿à¦¨à¦¿à¦",
  },

  xMinutes: {
    one: "à§§ à¦®à¦¿à¦¨à¦¿à¦",
    other: "{{count}} à¦®à¦¿à¦¨à¦¿à¦",
  },

  aboutXHours: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦à¦¨à§à¦à¦¾",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦à¦¨à§à¦à¦¾",
  },

  xHours: {
    one: "à§§ à¦à¦¨à§à¦à¦¾",
    other: "{{count}} à¦à¦¨à§à¦à¦¾",
  },

  xDays: {
    one: "à§§ à¦¦à¦¿à¦¨",
    other: "{{count}} à¦¦à¦¿à¦¨",
  },

  aboutXWeeks: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦¸à¦ªà§à¦¤à¦¾à¦¹",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦¸à¦ªà§à¦¤à¦¾à¦¹",
  },

  xWeeks: {
    one: "à§§ à¦¸à¦ªà§à¦¤à¦¾à¦¹",
    other: "{{count}} à¦¸à¦ªà§à¦¤à¦¾à¦¹",
  },

  aboutXMonths: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦®à¦¾à¦¸",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦®à¦¾à¦¸",
  },

  xMonths: {
    one: "à§§ à¦®à¦¾à¦¸",
    other: "{{count}} à¦®à¦¾à¦¸",
  },

  aboutXYears: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦¬à¦à¦°",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦¬à¦à¦°",
  },

  xYears: {
    one: "à§§ à¦¬à¦à¦°",
    other: "{{count}} à¦¬à¦à¦°",
  },

  overXYears: {
    one: "à§§ à¦¬à¦à¦°à§à¦° à¦¬à§à¦¶à¦¿",
    other: "{{count}} à¦¬à¦à¦°à§à¦° à¦¬à§à¦¶à¦¿",
  },

  almostXYears: {
    one: "à¦ªà§à¦°à¦¾à§ à§§ à¦¬à¦à¦°",
    other: "à¦ªà§à¦°à¦¾à§ {{count}} à¦¬à¦à¦°",
  },
};

const formatDistance$2i = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$18[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace(
      "{{count}}",
      (0, _index$52.numberToLocale)(count),
    );
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " à¦à¦° à¦®à¦§à§à¦¯à§";
    } else {
      return result + " à¦à¦à§";
    }
  }

  return result;
};
formatDistance$2j.formatDistance = formatDistance$2i;

var formatLong$1h = {};

formatLong$1h.formatLong = void 0;
var _index$51 = buildFormatLongFn$1;

const dateFormats$1h = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$1h = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1h = {
  full: "{{date}} {{time}} 'à¦¸à¦®à§'",
  long: "{{date}} {{time}} 'à¦¸à¦®à§'",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1h.formatLong = {
  date: (0, _index$51.buildFormatLongFn)({
    formats: dateFormats$1h,
    defaultWidth: "full",
  }),

  time: (0, _index$51.buildFormatLongFn)({
    formats: timeFormats$1h,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$51.buildFormatLongFn)({
    formats: dateTimeFormats$1h,
    defaultWidth: "full",
  }),
});

var formatRelative$2j = {};

formatRelative$2j.formatRelative = void 0;

const formatRelativeLocale$19 = {
  lastWeek: "'à¦à¦¤' eeee 'à¦¸à¦®à§' p",
  yesterday: "'à¦à¦¤à¦à¦¾à¦²' 'à¦¸à¦®à§' p",
  today: "'à¦à¦' 'à¦¸à¦®à§' p",
  tomorrow: "'à¦à¦à¦¾à¦®à§à¦à¦¾à¦²' 'à¦¸à¦®à§' p",
  nextWeek: "eeee 'à¦¸à¦®à§' p",
  other: "P",
};

const formatRelative$2i = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$19[token];
formatRelative$2j.formatRelative = formatRelative$2i;

var match$18 = {};

match$18.match = void 0;

var _index$50 = buildMatchFn$1;
var _index2$2t = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$18 = /^(\d+)(à¦®|à§|à¦°à§à¦¥|à¦·à§à¦ |à¦¶à§|à¦|à¦¤à¦®)?/i;
const parseOrdinalNumberPattern$18 = /\d+/i;

const matchEraPatterns$18 = {
  narrow: /^(à¦à§à¦°à¦¿à¦à¦ªà§à¦|à¦à§à¦°à¦¿à¦)/i,
  abbreviated: /^(à¦à§à¦°à¦¿à¦à¦ªà§à¦°à§à¦¬|à¦à§à¦°à¦¿à¦)/i,
  wide: /^(à¦à§à¦°à¦¿à¦¸à§à¦à¦ªà§à¦°à§à¦¬|à¦à§à¦°à¦¿à¦¸à§à¦à¦¾à¦¬à§à¦¦)/i,
};
const parseEraPatterns$18 = {
  narrow: [/^à¦à§à¦°à¦¿à¦à¦ªà§à¦/i, /^à¦à§à¦°à¦¿à¦/i],
  abbreviated: [/^à¦à§à¦°à¦¿à¦à¦ªà§à¦°à§à¦¬/i, /^à¦à§à¦°à¦¿à¦/i],
  wide: [/^à¦à§à¦°à¦¿à¦¸à§à¦à¦ªà§à¦°à§à¦¬/i, /^à¦à§à¦°à¦¿à¦¸à§à¦à¦¾à¦¬à§à¦¦/i],
};

const matchQuarterPatterns$18 = {
  narrow: /^[à§§à§¨à§©à§ª]/i,
  abbreviated: /^[à§§à§¨à§©à§ª]à¦¤à§à¦°à§/i,
  wide: /^[à§§à§¨à§©à§ª](à¦®|à§|à¦°à§à¦¥)? à¦¤à§à¦°à§à¦®à¦¾à¦¸à¦¿à¦/i,
};
const parseQuarterPatterns$18 = {
  any: [/à§§/i, /à§¨/i, /à§©/i, /à§ª/i],
};

const matchMonthPatterns$18 = {
  narrow:
    /^(à¦à¦¾à¦¨à§|à¦«à§à¦¬à§à¦°à§|à¦®à¦¾à¦°à§à¦|à¦à¦ªà§à¦°à¦¿à¦²|à¦®à§|à¦à§à¦¨|à¦à§à¦²à¦¾à¦|à¦à¦à¦¸à§à¦|à¦¸à§à¦ªà§à¦|à¦à¦à§à¦à§|à¦¨à¦­à§|à¦¡à¦¿à¦¸à§)/i,
  abbreviated:
    /^(à¦à¦¾à¦¨à§|à¦«à§à¦¬à§à¦°à§|à¦®à¦¾à¦°à§à¦|à¦à¦ªà§à¦°à¦¿à¦²|à¦®à§|à¦à§à¦¨|à¦à§à¦²à¦¾à¦|à¦à¦à¦¸à§à¦|à¦¸à§à¦ªà§à¦|à¦à¦à§à¦à§|à¦¨à¦­à§|à¦¡à¦¿à¦¸à§)/i,
  wide: /^(à¦à¦¾à¦¨à§à§à¦¾à¦°à¦¿|à¦«à§à¦¬à§à¦°à§à§à¦¾à¦°à¦¿|à¦®à¦¾à¦°à§à¦|à¦à¦ªà§à¦°à¦¿à¦²|à¦®à§|à¦à§à¦¨|à¦à§à¦²à¦¾à¦|à¦à¦à¦¸à§à¦|à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°|à¦à¦à§à¦à§à¦¬à¦°|à¦¨à¦­à§à¦®à§à¦¬à¦°|à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°)/i,
};
const parseMonthPatterns$18 = {
  any: [
    /^à¦à¦¾à¦¨à§/i,
    /^à¦«à§à¦¬à§à¦°à§/i,
    /^à¦®à¦¾à¦°à§à¦/i,
    /^à¦à¦ªà§à¦°à¦¿à¦²/i,
    /^à¦®à§/i,
    /^à¦à§à¦¨/i,
    /^à¦à§à¦²à¦¾à¦/i,
    /^à¦à¦à¦¸à§à¦/i,
    /^à¦¸à§à¦ªà§à¦/i,
    /^à¦à¦à§à¦à§/i,
    /^à¦¨à¦­à§/i,
    /^à¦¡à¦¿à¦¸à§/i,
  ],
};

const matchDayPatterns$18 = {
  narrow: /^(à¦°|à¦¸à§|à¦®|à¦¬à§|à¦¬à§|à¦¶à§|à¦¶)+/i,
  short: /^(à¦°à¦¬à¦¿|à¦¸à§à¦®|à¦®à¦à§à¦à¦²|à¦¬à§à¦§|à¦¬à§à¦¹|à¦¶à§à¦à§à¦°|à¦¶à¦¨à¦¿)+/i,
  abbreviated: /^(à¦°à¦¬à¦¿|à¦¸à§à¦®|à¦®à¦à§à¦à¦²|à¦¬à§à¦§|à¦¬à§à¦¹|à¦¶à§à¦à§à¦°|à¦¶à¦¨à¦¿)+/i,
  wide: /^(à¦°à¦¬à¦¿à¦¬à¦¾à¦°|à¦¸à§à¦®à¦¬à¦¾à¦°|à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°|à¦¬à§à¦§à¦¬à¦¾à¦°|à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦° |à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°|à¦¶à¦¨à¦¿à¦¬à¦¾à¦°)+/i,
};
const parseDayPatterns$18 = {
  narrow: [/^à¦°/i, /^à¦¸à§/i, /^à¦®/i, /^à¦¬à§/i, /^à¦¬à§/i, /^à¦¶à§/i, /^à¦¶/i],
  short: [/^à¦°à¦¬à¦¿/i, /^à¦¸à§à¦®/i, /^à¦®à¦à§à¦à¦²/i, /^à¦¬à§à¦§/i, /^à¦¬à§à¦¹/i, /^à¦¶à§à¦à§à¦°/i, /^à¦¶à¦¨à¦¿/i],

  abbreviated: [
    /^à¦°à¦¬à¦¿/i,
    /^à¦¸à§à¦®/i,
    /^à¦®à¦à§à¦à¦²/i,
    /^à¦¬à§à¦§/i,
    /^à¦¬à§à¦¹/i,
    /^à¦¶à§à¦à§à¦°/i,
    /^à¦¶à¦¨à¦¿/i,
  ],

  wide: [
    /^à¦°à¦¬à¦¿à¦¬à¦¾à¦°/i,
    /^à¦¸à§à¦®à¦¬à¦¾à¦°/i,
    /^à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°/i,
    /^à¦¬à§à¦§à¦¬à¦¾à¦°/i,
    /^à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦° /i,
    /^à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°/i,
    /^à¦¶à¦¨à¦¿à¦¬à¦¾à¦°/i,
  ],
};

const matchDayPeriodPatterns$18 = {
  narrow: /^(à¦ªà§|à¦à¦ª|à¦®à¦§à§à¦¯à¦°à¦¾à¦¤|à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨|à¦¸à¦à¦¾à¦²|à¦¬à¦¿à¦à¦¾à¦²|à¦¸à¦¨à§à¦§à§à¦¯à¦¾|à¦°à¦¾à¦¤)/i,
  abbreviated: /^(à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦¨|à¦à¦ªà¦°à¦¾à¦¹à§à¦¨|à¦®à¦§à§à¦¯à¦°à¦¾à¦¤|à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨|à¦¸à¦à¦¾à¦²|à¦¬à¦¿à¦à¦¾à¦²|à¦¸à¦¨à§à¦§à§à¦¯à¦¾|à¦°à¦¾à¦¤)/i,
  wide: /^(à¦ªà§à¦°à§à¦¬à¦¾à¦¹à§à¦¨|à¦à¦ªà¦°à¦¾à¦¹à§à¦¨|à¦®à¦§à§à¦¯à¦°à¦¾à¦¤|à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨|à¦¸à¦à¦¾à¦²|à¦¬à¦¿à¦à¦¾à¦²|à¦¸à¦¨à§à¦§à§à¦¯à¦¾|à¦°à¦¾à¦¤)/i,
};
const parseDayPeriodPatterns$18 = {
  any: {
    am: /^à¦ªà§/i,
    pm: /^à¦à¦ª/i,
    midnight: /^à¦®à¦§à§à¦¯à¦°à¦¾à¦¤/i,
    noon: /^à¦®à¦§à§à¦¯à¦¾à¦¹à§à¦¨/i,
    morning: /à¦¸à¦à¦¾à¦²/i,
    afternoon: /à¦¬à¦¿à¦à¦¾à¦²/i,
    evening: /à¦¸à¦¨à§à¦§à§à¦¯à¦¾/i,
    night: /à¦°à¦¾à¦¤/i,
  },
};

(match$18.match = {
  ordinalNumber: (0, _index2$2t.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$18,
    parsePattern: parseOrdinalNumberPattern$18,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$50.buildMatchFn)({
    matchPatterns: matchEraPatterns$18,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$18,
    defaultParseWidth: "wide",
  }),

  quarter: (0, _index$50.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$18,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$18,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$50.buildMatchFn)({
    matchPatterns: matchMonthPatterns$18,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$18,
    defaultParseWidth: "any",
  }),

  day: (0, _index$50.buildMatchFn)({
    matchPatterns: matchDayPatterns$18,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$18,
    defaultParseWidth: "wide",
  }),

  dayPeriod: (0, _index$50.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$18,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$18,
    defaultParseWidth: "any",
  }),
});

bn.bn = void 0;
var _index$4$ = formatDistance$2j;
var _index2$2s = formatLong$1h;
var _index3$1k = formatRelative$2j;
var _index4$1j = localize$19;
var _index5$1j = match$18;

/**
 * @category Locales
 * @summary Bengali locale.
 * @language Bengali
 * @iso-639-2 ben
 * @author Touhidur Rahman [@touhidrahman](https://github.com/touhidrahman)
 * @author Farhad Yasir [@nutboltu](https://github.com/nutboltu)
 */
(bn.bn = {
  code: "bn",
  formatDistance: _index$4$.formatDistance,
  formatLong: _index2$2s.formatLong,
  formatRelative: _index3$1k.formatRelative,
  localize: _index4$1j.localize,
  match: _index5$1j.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var bs = {};

var formatDistance$2h = {};

formatDistance$2h.formatDistance = void 0;

const formatDistanceLocale$17 = {
  lessThanXSeconds: {
    one: {
      standalone: "manje od 1 sekunde",
      withPrepositionAgo: "manje od 1 sekunde",
      withPrepositionIn: "manje od 1 sekundu",
    },
    dual: "manje od {{count}} sekunde",
    other: "manje od {{count}} sekundi",
  },

  xSeconds: {
    one: {
      standalone: "1 sekunda",
      withPrepositionAgo: "1 sekunde",
      withPrepositionIn: "1 sekundu",
    },
    dual: "{{count}} sekunde",
    other: "{{count}} sekundi",
  },

  halfAMinute: "pola minute",

  lessThanXMinutes: {
    one: {
      standalone: "manje od 1 minute",
      withPrepositionAgo: "manje od 1 minute",
      withPrepositionIn: "manje od 1 minutu",
    },
    dual: "manje od {{count}} minute",
    other: "manje od {{count}} minuta",
  },

  xMinutes: {
    one: {
      standalone: "1 minuta",
      withPrepositionAgo: "1 minute",
      withPrepositionIn: "1 minutu",
    },
    dual: "{{count}} minute",
    other: "{{count}} minuta",
  },

  aboutXHours: {
    one: {
      standalone: "oko 1 sat",
      withPrepositionAgo: "oko 1 sat",
      withPrepositionIn: "oko 1 sat",
    },
    dual: "oko {{count}} sata",
    other: "oko {{count}} sati",
  },

  xHours: {
    one: {
      standalone: "1 sat",
      withPrepositionAgo: "1 sat",
      withPrepositionIn: "1 sat",
    },
    dual: "{{count}} sata",
    other: "{{count}} sati",
  },

  xDays: {
    one: {
      standalone: "1 dan",
      withPrepositionAgo: "1 dan",
      withPrepositionIn: "1 dan",
    },
    dual: "{{count}} dana",
    other: "{{count}} dana",
  },

  aboutXWeeks: {
    one: {
      standalone: "oko 1 sedmicu",
      withPrepositionAgo: "oko 1 sedmicu",
      withPrepositionIn: "oko 1 sedmicu",
    },
    dual: "oko {{count}} sedmice",
    other: "oko {{count}} sedmice",
  },

  xWeeks: {
    one: {
      standalone: "1 sedmicu",
      withPrepositionAgo: "1 sedmicu",
      withPrepositionIn: "1 sedmicu",
    },
    dual: "{{count}} sedmice",
    other: "{{count}} sedmice",
  },

  aboutXMonths: {
    one: {
      standalone: "oko 1 mjesec",
      withPrepositionAgo: "oko 1 mjesec",
      withPrepositionIn: "oko 1 mjesec",
    },
    dual: "oko {{count}} mjeseca",
    other: "oko {{count}} mjeseci",
  },

  xMonths: {
    one: {
      standalone: "1 mjesec",
      withPrepositionAgo: "1 mjesec",
      withPrepositionIn: "1 mjesec",
    },
    dual: "{{count}} mjeseca",
    other: "{{count}} mjeseci",
  },

  aboutXYears: {
    one: {
      standalone: "oko 1 godinu",
      withPrepositionAgo: "oko 1 godinu",
      withPrepositionIn: "oko 1 godinu",
    },
    dual: "oko {{count}} godine",
    other: "oko {{count}} godina",
  },

  xYears: {
    one: {
      standalone: "1 godina",
      withPrepositionAgo: "1 godine",
      withPrepositionIn: "1 godinu",
    },
    dual: "{{count}} godine",
    other: "{{count}} godina",
  },

  overXYears: {
    one: {
      standalone: "preko 1 godinu",
      withPrepositionAgo: "preko 1 godinu",
      withPrepositionIn: "preko 1 godinu",
    },
    dual: "preko {{count}} godine",
    other: "preko {{count}} godina",
  },

  almostXYears: {
    one: {
      standalone: "gotovo 1 godinu",
      withPrepositionAgo: "gotovo 1 godinu",
      withPrepositionIn: "gotovo 1 godinu",
    },
    dual: "gotovo {{count}} godine",
    other: "gotovo {{count}} godina",
  },
};

const formatDistance$2g = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$17[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (
    count % 10 > 1 &&
    count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "za " + result;
    } else {
      return "prije " + result;
    }
  }

  return result;
};
formatDistance$2h.formatDistance = formatDistance$2g;

var formatLong$1g = {};

formatLong$1g.formatLong = void 0;
var _index$4_ = buildFormatLongFn$1;

const dateFormats$1g = {
  full: "EEEE, d. MMMM yyyy.",
  long: "d. MMMM yyyy.",
  medium: "d. MMM yy.",
  short: "dd. MM. yy.",
};

const timeFormats$1g = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1g = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$1g.formatLong = {
  date: (0, _index$4_.buildFormatLongFn)({
    formats: dateFormats$1g,
    defaultWidth: "full",
  }),

  time: (0, _index$4_.buildFormatLongFn)({
    formats: timeFormats$1g,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4_.buildFormatLongFn)({
    formats: dateTimeFormats$1g,
    defaultWidth: "full",
  }),
});

var formatRelative$2h = {};

formatRelative$2h.formatRelative = void 0;

const formatRelativeLocale$18 = {
  lastWeek: (date) => {
    switch (date.getDay()) {
      case 0:
        return "'proÅ¡le nedjelje u' p";
      case 3:
        return "'proÅ¡le srijede u' p";
      case 6:
        return "'proÅ¡le subote u' p";
      default:
        return "'proÅ¡li' EEEE 'u' p";
    }
  },
  yesterday: "'juÄe u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: (date) => {
    switch (date.getDay()) {
      case 0:
        return "'sljedeÄe nedjelje u' p";
      case 3:
        return "'sljedeÄu srijedu u' p";
      case 6:
        return "'sljedeÄu subotu u' p";
      default:
        return "'sljedeÄi' EEEE 'u' p";
    }
  },
  other: "P",
};

const formatRelative$2g = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$18[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$2h.formatRelative = formatRelative$2g;

var localize$18 = {};

localize$18.localize = void 0;
var _index$4Z = buildLocalizeFn$1;

const eraValues$18 = {
  narrow: ["pr.n.e.", "AD"],
  abbreviated: ["pr. Hr.", "po. Hr."],
  wide: ["Prije Hrista", "Poslije Hrista"],
};

const quarterValues$18 = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$18 = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "maj",
    "jun",
    "jul",
    "avg",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januar",
    "februar",
    "mart",
    "april",
    "maj",
    "juni",
    "juli",
    "avgust",
    "septembar",
    "oktobar",
    "novembar",
    "decembar",
  ],
};

const formattingMonthValues$g = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "maj",
    "jun",
    "jul",
    "avg",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januar",
    "februar",
    "mart",
    "april",
    "maj",
    "juni",
    "juli",
    "avgust",
    "septembar",
    "oktobar",
    "novembar",
    "decembar",
  ],
};

const dayValues$18 = {
  narrow: ["N", "P", "U", "S", "Ä", "P", "S"],
  short: ["ned", "pon", "uto", "sre", "Äet", "pet", "sub"],
  abbreviated: ["ned", "pon", "uto", "sre", "Äet", "pet", "sub"],
  wide: [
    "nedjelja",
    "ponedjeljak",
    "utorak",
    "srijeda",
    "Äetvrtak",
    "petak",
    "subota",
  ],
};

const dayPeriodValues$18 = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "poslije podne",
    evening: "uveÄe",
    night: "noÄu",
  },
};

const formattingDayPeriodValues$V = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "poslije podne",
    evening: "uveÄe",
    night: "noÄu",
  },
};

const ordinalNumber$18 = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return String(number) + ".";
};

(localize$18.localize = {
  ordinalNumber: ordinalNumber$18,

  era: (0, _index$4Z.buildLocalizeFn)({
    values: eraValues$18,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4Z.buildLocalizeFn)({
    values: quarterValues$18,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4Z.buildLocalizeFn)({
    values: monthValues$18,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$g,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$4Z.buildLocalizeFn)({
    values: dayValues$18,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4Z.buildLocalizeFn)({
    values: dayPeriodValues$18,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$V,
    defaultFormattingWidth: "wide",
  }),
});

var match$17 = {};

match$17.match = void 0;

var _index$4Y = buildMatchFn$1;
var _index2$2r = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$17 = /^(\d+)\./i;
const parseOrdinalNumberPattern$17 = /\d+/i;

const matchEraPatterns$17 = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i,
};
const parseEraPatterns$17 = {
  any: [/^pr/i, /^(po|nova)/i],
};

const matchQuarterPatterns$17 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i,
};
const parseQuarterPatterns$17 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$17 = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i,
};
const parseMonthPatterns$17 = {
  narrow: [
    /^1/i,
    /^2/i,
    /^3/i,
    /^4/i,
    /^5/i,
    /^6/i,
    /^7/i,
    /^8/i,
    /^9/i,
    /^10/i,
    /^11/i,
    /^12/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^avg/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$17 = {
  narrow: /^[npusÄc]/i,
  short: /^(ned|pon|uto|sre|(Äet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(Äet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(Äetvrtak|cetvrtak)|petak|subota)/i,
};
const parseDayPatterns$17 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$17 = {
  any: /^(am|pm|ponoc|ponoÄ|(po)?podne|uvece|uveÄe|noÄu|poslije podne|ujutru)/i,
};
const parseDayPeriodPatterns$17 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(uvece|uveÄe)/i,
    night: /(nocu|noÄu)/i,
  },
};

(match$17.match = {
  ordinalNumber: (0, _index2$2r.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$17,
    parsePattern: parseOrdinalNumberPattern$17,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4Y.buildMatchFn)({
    matchPatterns: matchEraPatterns$17,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$17,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4Y.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$17,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$17,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4Y.buildMatchFn)({
    matchPatterns: matchMonthPatterns$17,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$17,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4Y.buildMatchFn)({
    matchPatterns: matchDayPatterns$17,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$17,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4Y.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$17,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$17,
    defaultParseWidth: "any",
  }),
});

bs.bs = void 0;
var _index$4X = formatDistance$2h;
var _index2$2q = formatLong$1g;
var _index3$1j = formatRelative$2h;
var _index4$1i = localize$18;
var _index5$1i = match$17;

/**
 * @category Locales
 * @summary Bosnian locale.
 * @language Bosnian
 * @iso-639-2 bos
 * @author Branislav LaziÄ [@branislavlazic](https://github.com/branislavlazic)
 */
(bs.bs = {
  code: "bs",
  formatDistance: _index$4X.formatDistance,
  formatLong: _index2$2q.formatLong,
  formatRelative: _index3$1j.formatRelative,
  localize: _index4$1i.localize,
  match: _index5$1i.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var ca = {};

var formatDistance$2f = {};

formatDistance$2f.formatDistance = void 0;

/**
 * Davant de les xifres que es diuen amb vocal inicial, 1 i 11, s'apostrofen els articles el i la i la preposiciÃ³ de igual que si estiguessin escrits amb lletres.
 *    l'1 de juliol ('l'u')
 *    l'11 de novembre ('l'onze')
 *    l'11a clÃ usula del contracte ('l'onzena')
 *    la contractaciÃ³ d'11 jugadors ('d'onze')
 *    l'aval d'11.000 socis ('d'onze mil')
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=apostrofaci%25F3+davant+xifres&action=Principal&method=detall_completa&numPagina=1&idHit=11236&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=11236&titol=apostrofaci%F3%20davant%20de%20xifres%20%2F%20apostrofaci%F3%20davant%20de%201%20i%2011&numeroResultat=1&clickLink=detall&tipusCerca=cerca.normes
 */

const formatDistanceLocale$16 = {
  lessThanXSeconds: {
    one: "menys d'un segon",
    eleven: "menys d'onze segons",
    other: "menys de {{count}} segons",
  },

  xSeconds: {
    one: "1 segon",
    other: "{{count}} segons",
  },

  halfAMinute: "mig minut",

  lessThanXMinutes: {
    one: "menys d'un minut",
    eleven: "menys d'onze minuts",
    other: "menys de {{count}} minuts",
  },

  xMinutes: {
    one: "1 minut",
    other: "{{count}} minuts",
  },

  aboutXHours: {
    one: "aproximadament una hora",
    other: "aproximadament {{count}} hores",
  },

  xHours: {
    one: "1 hora",
    other: "{{count}} hores",
  },

  xDays: {
    one: "1 dia",
    other: "{{count}} dies",
  },

  aboutXWeeks: {
    one: "aproximadament una setmana",
    other: "aproximadament {{count}} setmanes",
  },

  xWeeks: {
    one: "1 setmana",
    other: "{{count}} setmanes",
  },

  aboutXMonths: {
    one: "aproximadament un mes",
    other: "aproximadament {{count}} mesos",
  },

  xMonths: {
    one: "1 mes",
    other: "{{count}} mesos",
  },

  aboutXYears: {
    one: "aproximadament un any",
    other: "aproximadament {{count}} anys",
  },

  xYears: {
    one: "1 any",
    other: "{{count}} anys",
  },

  overXYears: {
    one: "mÃ©s d'un any",
    eleven: "mÃ©s d'onze anys",
    other: "mÃ©s de {{count}} anys",
  },

  almostXYears: {
    one: "gairebÃ© un any",
    other: "gairebÃ© {{count}} anys",
  },
};

const formatDistance$2e = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$16[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 11 && tokenValue.eleven) {
    result = tokenValue.eleven;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "fa " + result;
    }
  }

  return result;
};
formatDistance$2f.formatDistance = formatDistance$2e;

var formatLong$1f = {};

formatLong$1f.formatLong = void 0;
var _index$4W = buildFormatLongFn$1;

const dateFormats$1f = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$1f = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1f = {
  full: "{{date}} 'a les' {{time}}",
  long: "{{date}} 'a les' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1f.formatLong = {
  date: (0, _index$4W.buildFormatLongFn)({
    formats: dateFormats$1f,
    defaultWidth: "full",
  }),

  time: (0, _index$4W.buildFormatLongFn)({
    formats: timeFormats$1f,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4W.buildFormatLongFn)({
    formats: dateTimeFormats$1f,
    defaultWidth: "full",
  }),
});

var formatRelative$2f = {};

formatRelative$2f.formatRelative = void 0;

const formatRelativeLocale$17 = {
  lastWeek: "'el' eeee 'passat a la' LT",
  yesterday: "'ahir a la' p",
  today: "'avui a la' p",
  tomorrow: "'demÃ  a la' p",
  nextWeek: "eeee 'a la' p",
  other: "P",
};

const formatRelativeLocalePlural$3 = {
  lastWeek: "'el' eeee 'passat a les' p",
  yesterday: "'ahir a les' p",
  today: "'avui a les' p",
  tomorrow: "'demÃ  a les' p",
  nextWeek: "eeee 'a les' p",
  other: "P",
};

const formatRelative$2e = (token, date, _baseDate, _options) => {
  if (date.getHours() !== 1) {
    return formatRelativeLocalePlural$3[token];
  }
  return formatRelativeLocale$17[token];
};
formatRelative$2f.formatRelative = formatRelative$2e;

var localize$17 = {};

localize$17.localize = void 0;
var _index$4V = buildLocalizeFn$1;

/**
 * General information
 * Reference: https://aplicacions.llengua.gencat.cat
 * Reference: https://www.uoc.edu/portal/ca/servei-linguistic/convencions/abreviacions/simbols/simbols-habituals.html
 */

/**
 * Abans de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abans+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6876&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6876&titol=abans%20de%20Crist%20(abreviatura)%20/%20abans%20de%20Crist%20(sigla)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 * Desprest de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=despr%E9s+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6879&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6879&titol=despr%E9s%20de%20Crist%20(sigla)%20/%20despr%E9s%20de%20Crist%20(abreviatura)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 */
const eraValues$17 = {
  narrow: ["aC", "dC"],
  abbreviated: ["a. de C.", "d. de C."],
  wide: ["abans de Crist", "desprÃ©s de Crist"],
};

const quarterValues$17 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1r trimestre", "2n trimestre", "3r trimestre", "4t trimestre"],
};

/**
 * Dins d'un text convÃ© fer servir la forma sencera dels mesos, ja que sempre Ã©s mÃ©s clar el mot sencer que l'abreviatura, encara que aquesta sigui forÃ§a coneguda.
 * Cal reservar, doncs, les abreviatures per a les llistes o classificacions, els grÃ fics, les taules o quadres estadÃ­stics, els textos publicitaris, etc.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviacions+mesos&action=Principal&method=detall_completa&numPagina=1&idHit=8402&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8402&titol=abreviatures%20dels%20mesos%20de%20l%27any&numeroResultat=5&clickLink=detall&tipusCerca=cerca.fitxes
 */
const monthValues$17 = {
  narrow: [
    "GN",
    "FB",
    "MÃ",
    "AB",
    "MG",
    "JN",
    "JL",
    "AG",
    "ST",
    "OC",
    "NV",
    "DS",
  ],

  /**
   * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formaciÃ³ d'abreviatures.
   * S'escriu la primera sÃ­lÂ·laba i les consonants de la sÃ­lÂ·laba segÃ¼ent anteriors a la primera vocal.
   * Els mesos de marÃ§, maig i juny no s'abreugen perquÃ¨ sÃ³n paraules d'una sola sÃ­lÂ·laba.
   */
  abbreviated: [
    "gen.",
    "febr.",
    "marÃ§",
    "abr.",
    "maig",
    "juny",
    "jul.",
    "ag.",
    "set.",
    "oct.",
    "nov.",
    "des.",
  ],

  wide: [
    "gener",
    "febrer",
    "marÃ§",
    "abril",
    "maig",
    "juny",
    "juliol",
    "agost",
    "setembre",
    "octubre",
    "novembre",
    "desembre",
  ],
};

/**
 * Les abreviatures dels dies de la setmana comencen totes amb la lletra d.
 * Tot seguit porten la consonant segÃ¼ent a la i, excepte en el cas de dimarts, dimecres i diumenge, en quÃ¨ aquesta consonant Ã©s la m i, per tant, hi podria haver confusiÃ³.
 * Per evitar-ho, s'ha substituÃ¯t la m per una t (en el cas de dimarts), una c (en el cas de dimecres) i una g (en el cas de diumenge), respectivament.
 *
 * Seguint la norma general d'Ãºs de les abreviatures, les dels dies de la setmana sempre porten punt final.
 * Igualment, van amb la primera lletra en majÃºscula quan la paraula sencera tambÃ© hi aniria.
 * En canvi, van amb la primera lletra en minÃºscula quan la inicial de la paraula sencera tambÃ© hi aniria.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviatures+dies&action=Principal&method=detall_completa&numPagina=1&idHit=8387&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8387&titol=abreviatures%20dels%20dies%20de%20la%20setmana&numeroResultat=1&clickLink=detall&tipusCerca=cerca.tot
 */
const dayValues$17 = {
  narrow: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
  short: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
  abbreviated: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
  wide: [
    "diumenge",
    "dilluns",
    "dimarts",
    "dimecres",
    "dijous",
    "divendres",
    "dissabte",
  ],
};

/**
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?action=Principal&method=detall&input_cercar=parts+del+dia&numPagina=1&database=FITXES_PUB&idFont=12801&idHit=12801&tipusFont=Fitxes+de+l%27Optimot&numeroResultat=1&databases_avansada=&categories_avansada=&clickLink=detall&titol=Nom+de+les+parts+del+dia&tematica=&tipusCerca=cerca.fitxes
 */
const dayPeriodValues$17 = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "mitjanit",
    noon: "migdia",
    morning: "matÃ­",
    afternoon: "tarda",
    evening: "vespre",
    night: "nit",
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "mitjanit",
    noon: "migdia",
    morning: "matÃ­",
    afternoon: "tarda",
    evening: "vespre",
    night: "nit",
  },
  wide: {
    am: "ante meridiem",
    pm: "post meridiem",
    midnight: "mitjanit",
    noon: "migdia",
    morning: "matÃ­",
    afternoon: "tarda",
    evening: "vespre",
    night: "nit",
  },
};

const formattingDayPeriodValues$U = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "de la mitjanit",
    noon: "del migdia",
    morning: "del matÃ­",
    afternoon: "de la tarda",
    evening: "del vespre",
    night: "de la nit",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "de la mitjanit",
    noon: "del migdia",
    morning: "del matÃ­",
    afternoon: "de la tarda",
    evening: "del vespre",
    night: "de la nit",
  },
  wide: {
    am: "ante meridiem",
    pm: "post meridiem",
    midnight: "de la mitjanit",
    noon: "del migdia",
    morning: "del matÃ­",
    afternoon: "de la tarda",
    evening: "del vespre",
    night: "de la nit",
  },
};

/**
 * Quan van en singular, els nombres ordinals es representen, en forma dâabreviatura, amb la xifra seguida de lâÃºltima lletra del mot desplegat.
 * Ãs optatiu posar punt desprÃ©s de la lletra.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/pdf/abrevia.pdf#page=18
 */
const ordinalNumber$17 = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "r";
      case 2:
        return number + "n";
      case 3:
        return number + "r";
      case 4:
        return number + "t";
    }
  }
  return number + "Ã¨";
};

(localize$17.localize = {
  ordinalNumber: ordinalNumber$17,

  era: (0, _index$4V.buildLocalizeFn)({
    values: eraValues$17,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4V.buildLocalizeFn)({
    values: quarterValues$17,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4V.buildLocalizeFn)({
    values: monthValues$17,
    defaultWidth: "wide",
  }),

  day: (0, _index$4V.buildLocalizeFn)({
    values: dayValues$17,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4V.buildLocalizeFn)({
    values: dayPeriodValues$17,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$U,
    defaultFormattingWidth: "wide",
  }),
});

var match$16 = {};

match$16.match = void 0;

var _index$4U = buildMatchFn$1;
var _index2$2p = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$16 = /^(\d+)(Ã¨|r|n|r|t)?/i;
const parseOrdinalNumberPattern$16 = /\d+/i;

const matchEraPatterns$16 = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a. de C.|d. de C.)/i,
  wide: /^(abans de Crist|despr[eÃ©]s de Crist)/i,
};
const parseEraPatterns$16 = {
  narrow: [/^aC/i, /^dC/i],
  abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
  wide: [/^(abans de Crist)/i, /^(despr[eÃ©]s de Crist)/i],
};

const matchQuarterPatterns$16 = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](Ã¨|r|n|r|t)? trimestre/i,
};
const parseQuarterPatterns$16 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$16 = {
  narrow: /^(GN|FB|MÃ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
  abbreviated:
    /^(gen.|febr.|marÃ§|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
  wide: /^(gener|febrer|marÃ§|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i,
};
const parseMonthPatterns$16 = {
  narrow: [
    /^GN/i,
    /^FB/i,
    /^MÃ/i,
    /^AB/i,
    /^MG/i,
    /^JN/i,
    /^JL/i,
    /^AG/i,
    /^ST/i,
    /^OC/i,
    /^NV/i,
    /^DS/i,
  ],

  abbreviated: [
    /^gen./i,
    /^febr./i,
    /^marÃ§/i,
    /^abr./i,
    /^maig/i,
    /^juny/i,
    /^jul./i,
    /^ag./i,
    /^set./i,
    /^oct./i,
    /^nov./i,
    /^des./i,
  ],

  wide: [
    /^gener/i,
    /^febrer/i,
    /^marÃ§/i,
    /^abril/i,
    /^maig/i,
    /^juny/i,
    /^juliol/i,
    /^agost/i,
    /^setembre/i,
    /^octubre/i,
    /^novembre/i,
    /^desembre/i,
  ],
};

const matchDayPatterns$16 = {
  narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i,
};
const parseDayPatterns$16 = {
  narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],

  abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],

  wide: [
    /^diumenge/i,
    /^dilluns/i,
    /^dimarts/i,
    /^dimecres/i,
    /^dijous/i,
    /^divendres/i,
    /^disssabte/i,
  ],
};

const matchDayPeriodPatterns$16 = {
  narrow: /^(a|p|mn|md|(del|de la) (matÃ­|tarda|vespre|nit))/i,
  abbreviated:
    /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (matÃ­|tarda|vespre|nit))/i,
  wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matÃ­|tarda|vespre|nit))/i,
};
const parseDayPeriodPatterns$16 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mitjanit/i,
    noon: /^migdia/i,
    morning: /matÃ­/i,
    afternoon: /tarda/i,
    evening: /vespre/i,
    night: /nit/i,
  },
};

(match$16.match = {
  ordinalNumber: (0, _index2$2p.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$16,
    parsePattern: parseOrdinalNumberPattern$16,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4U.buildMatchFn)({
    matchPatterns: matchEraPatterns$16,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$16,
    defaultParseWidth: "wide",
  }),

  quarter: (0, _index$4U.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$16,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$16,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4U.buildMatchFn)({
    matchPatterns: matchMonthPatterns$16,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$16,
    defaultParseWidth: "wide",
  }),

  day: (0, _index$4U.buildMatchFn)({
    matchPatterns: matchDayPatterns$16,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$16,
    defaultParseWidth: "wide",
  }),

  dayPeriod: (0, _index$4U.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$16,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$16,
    defaultParseWidth: "any",
  }),
});

ca.ca = void 0;
var _index$4T = formatDistance$2f;
var _index2$2o = formatLong$1f;
var _index3$1i = formatRelative$2f;
var _index4$1h = localize$17;
var _index5$1h = match$16;

/**
 * @category Locales
 * @summary Catalan locale.
 * @language Catalan
 * @iso-639-2 cat
 * @author Guillermo Grau [@guigrpa](https://github.com/guigrpa)
 * @author Alex Vizcaino [@avizcaino](https://github.com/avizcaino)
 */
(ca.ca = {
  code: "ca",
  formatDistance: _index$4T.formatDistance,
  formatLong: _index2$2o.formatLong,
  formatRelative: _index3$1i.formatRelative,
  localize: _index4$1h.localize,
  match: _index5$1h.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var ckb = {};

var formatDistance$2d = {};

formatDistance$2d.formatDistance = void 0;

const formatDistanceLocale$15 = {
  lessThanXSeconds: {
    one: "Ú©ÛÙØªØ± ÙÛ ÛÛÚ© ÚØ±Ú©Û",
    other: "Ú©ÛÙØªØ± ÙÛ {{count}} ÚØ±Ú©Û",
  },

  xSeconds: {
    one: "1 ÚØ±Ú©Û",
    other: "{{count}} ÚØ±Ú©Û",
  },

  halfAMinute: "ÙÛÙ Ú©Ø§ØªÚÙÛØ±",

  lessThanXMinutes: {
    one: "Ú©ÛÙØªØ± ÙÛ ÛÛÚ© Ø®ÙÙÛÚ©",
    other: "Ú©ÛÙØªØ± ÙÛ {{count}} Ø®ÙÙÛÚ©",
  },

  xMinutes: {
    one: "1 Ø®ÙÙÛÚ©",
    other: "{{count}} Ø®ÙÙÛÚ©",
  },

  aboutXHours: {
    one: "Ø¯ÛÙØ±ÙØ¨ÛØ±Û 1 Ú©Ø§ØªÚÙÛØ±",
    other: "Ø¯ÛÙØ±ÙØ¨ÛØ±Û {{count}} Ú©Ø§ØªÚÙÛØ±",
  },

  xHours: {
    one: "1 Ú©Ø§ØªÚÙÛØ±",
    other: "{{count}} Ú©Ø§ØªÚÙÛØ±",
  },

  xDays: {
    one: "1 ÚÛÚ",
    other: "{{count}} ÚÛÚ",
  },

  aboutXWeeks: {
    one: "Ø¯ÛÙØ±ÙØ¨ÛØ±Û 1 ÙÛÙØªÛ",
    other: "Ø¯ÙØ±ÙØ¨ÛØ±Û {{count}} ÙÛÙØªÛ",
  },

  xWeeks: {
    one: "1 ÙÛÙØªÛ",
    other: "{{count}} ÙÛÙØªÛ",
  },

  aboutXMonths: {
    one: "Ø¯Ø§ÙØ±ÙØ¨ÛØ±Û 1 ÙØ§ÙÚ¯",
    other: "Ø¯ÛÙØ±ÙØ¨ÛØ±Û {{count}} ÙØ§ÙÚ¯",
  },

  xMonths: {
    one: "1 ÙØ§ÙÚ¯",
    other: "{{count}} ÙØ§ÙÚ¯",
  },

  aboutXYears: {
    one: "Ø¯ÛÙØ±ÙØ¨ÛØ±Û  1 Ø³Ø§Úµ",
    other: "Ø¯ÛÙØ±ÙØ¨ÛØ±Û {{count}} Ø³Ø§Úµ",
  },

  xYears: {
    one: "1 Ø³Ø§Úµ",
    other: "{{count}} Ø³Ø§Úµ",
  },

  overXYears: {
    one: "Ø²ÛØ§ØªØ± ÙÛ Ø³Ø§ÚµÛÚ©",
    other: "Ø²ÛØ§ØªØ± ÙÛ {{count}} Ø³Ø§Úµ",
  },

  almostXYears: {
    one: "Ø¨ÛÙØ²ÛÚ©ÛÛÛ Ø³Ø§ÚµÛÚ©  ",
    other: "Ø¨ÛÙØ²ÛÚ©ÛÛÛ {{count}} Ø³Ø§Úµ",
  },
};

const formatDistance$2c = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$15[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÙÛ ÙØ§ÙÛÛ " + result + "Ø¯Ø§";
    } else {
      return result + "Ù¾ÛØ´ Ø¦ÛØ³ØªØ§";
    }
  }

  return result;
};
formatDistance$2d.formatDistance = formatDistance$2c;

var formatLong$1e = {};

formatLong$1e.formatLong = void 0;
var _index$4S = buildFormatLongFn$1;

const dateFormats$1e = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$1e = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1e = {
  full: "{{date}} 'Ú©Ø§ØªÚÙÛØ±' {{time}}",
  long: "{{date}} 'Ú©Ø§ØªÚÙÛØ±' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1e.formatLong = {
  date: (0, _index$4S.buildFormatLongFn)({
    formats: dateFormats$1e,
    defaultWidth: "full",
  }),

  time: (0, _index$4S.buildFormatLongFn)({
    formats: timeFormats$1e,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4S.buildFormatLongFn)({
    formats: dateTimeFormats$1e,
    defaultWidth: "full",
  }),
});

var formatRelative$2d = {};

formatRelative$2d.formatRelative = void 0;

const formatRelativeLocale$16 = {
  lastWeek: "'ÙÛÙØªÛÛ ÚØ§Ø¨Ø±Ø¯ÙÙ' eeee 'Ú©Ø§ØªÚÙÛØ±' p",
  yesterday: "'Ø¯ÙÛÙÛ Ú©Ø§ØªÚÙÛØ±' p",
  today: "'Ø¦ÛÙÚÛ Ú©Ø§ØªÚÙÛØ±' p",
  tomorrow: "'Ø¨ÛÛØ§ÙÛ Ú©Ø§ØªÚÙÛØ±' p",
  nextWeek: "eeee 'Ú©Ø§ØªÚÙÛØ±' p",
  other: "P",
};

const formatRelative$2c = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$16[token];
formatRelative$2d.formatRelative = formatRelative$2c;

var localize$16 = {};

localize$16.localize = void 0;

var _index$4R = buildLocalizeFn$1;

const eraValues$16 = {
  narrow: ["Ù¾", "Ø¯"],
  abbreviated: ["Ù¾-Ø²", "Ø¯-Ø²"],
  wide: ["Ù¾ÛØ´ Ø²Ø§ÛÙ", "Ø¯ÙØ§Û Ø²Ø§ÛÙ"],
};

const quarterValues$16 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ú1Ù", "Ú2Ù", "Ú3Ù", "Ú4Ù"],
  wide: ["ÚØ§Ø±ÛÚ¯Û ÛÛÚ©ÛÙ", "ÚØ§Ø±ÛÚ¯Û Ø¯ÙÙÛÙ", "ÚØ§Ø±ÛÚ¯Û Ø³ÛÛÛÙ", "ÚØ§Ø±ÛÚ¯Û ÚÙØ§Ø±ÛÙ"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$16 = {
  narrow: [
    "Ú©-Ø¯",
    "Ø´",
    "Ø¦Ø§",
    "Ù",
    "Ù",
    "Ø­",
    "Øª",
    "Ø¦Ø§",
    "Ø¦Û",
    "ØªØ´-Û",
    "ØªØ´-Ø¯",
    "Ú©-Û",
  ],

  abbreviated: [
    "Ú©Ø§Ù-Ø¯ÙÙ",
    "Ø´ÙØ¨",
    "Ø¦Ø§Ø¯",
    "ÙÛØ³",
    "ÙØ§ÛØ³",
    "Ø­ÙØ²",
    "ØªÛÙ",
    "Ø¦Ø§Ø¨",
    "Ø¦ÛÙ",
    "ØªØ´-ÛÛÚ©",
    "ØªØ´-Ø¯ÙÙ",
    "Ú©Ø§Ù-ÛÛÚ©",
  ],

  wide: [
    "Ú©Ø§ÙÙÙÙÛ Ø¯ÙÙÛÙ",
    "Ø´ÙØ¨Ø§Øª",
    "Ø¦Ø§Ø¯Ø§Ø±",
    "ÙÛØ³Ø§Ù",
    "ÙØ§ÛØ³",
    "Ø­ÙØ²ÛÛØ±Ø§Ù",
    "ØªÛÙÙÙØ²",
    "Ø¦Ø§Ø¨",
    "Ø¦ÛÛÙÙÙ",
    "ØªØ´Ø±ÛÙÛ ÛÛÚ©ÛÙ",
    "ØªØ´Ø±ÛÙÛ Ø¯ÙÙÛÙ",
    "Ú©Ø§ÙÙÙÙÛ ÛÛÚ©ÛÙ",
  ],
};

const dayValues$16 = {
  narrow: ["Û-Ø´", "Ø¯-Ø´", "Ø³-Ø´", "Ú-Ø´", "Ù¾-Ø´", "ÙÛ", "Ø´"],
  short: ["ÛÛ-Ø´Û", "Ø¯ÙÙ-Ø´Û", "Ø³Û-Ø´Û", "ÚÙ-Ø´Û", "Ù¾Û-Ø´Û", "ÙÛÛ", "Ø´Û"],
  abbreviated: [
    "ÛÛÚ©-Ø´ÛÙ",
    "Ø¯ÙÙ-Ø´ÛÙ",
    "Ø³Û-Ø´ÛÙ",
    "ÚÙØ§Ø±-Ø´ÛÙ",
    "Ù¾ÛÙØ¬-Ø´ÛÙ",
    "ÙÛÛÙÛ",
    "Ø´ÛÙÛ",
  ],

  wide: [
    "ÛÛÚ© Ø´ÛÙÛ",
    "Ø¯ÙÙ Ø´ÛÙÛ",
    "Ø³Û Ø´ÛÙÛ",
    "ÚÙØ§Ø± Ø´ÛÙÛ",
    "Ù¾ÛÙØ¬ Ø´ÛÙÛ",
    "ÙÛÛÙÛ",
    "Ø´ÛÙÛ",
  ],
};

const dayPeriodValues$16 = {
  narrow: {
    am: "Ù¾",
    pm: "Ø¯",
    midnight: "Ù-Ø´",
    noon: "Ù",
    morning: "Ø¨ÛÛØ§ÙÛ",
    afternoon: "Ø¯ÙØ§Û ÙÛÙÛÚÛ",
    evening: "Ø¦ÛÙØ§Ø±Û",
    night: "Ø´ÛÙ",
  },
  abbreviated: {
    am: "Ù¾-Ù",
    pm: "Ø¯-Ù",
    midnight: "ÙÛÙÛ Ø´ÛÙ",
    noon: "ÙÛÙÛÚÛ",
    morning: "Ø¨ÛÛØ§ÙÛ",
    afternoon: "Ø¯ÙØ§Û ÙÛÙÛÚÛ",
    evening: "Ø¦ÛÙØ§Ø±Û",
    night: "Ø´ÛÙ",
  },
  wide: {
    am: "Ù¾ÛØ´ ÙÛÙÛÚÛ",
    pm: "Ø¯ÙØ§Û ÙÛÙÛÚÛ",
    midnight: "ÙÛÙÛ Ø´ÛÙ",
    noon: "ÙÛÙÛÚÛ",
    morning: "Ø¨ÛÛØ§ÙÛ",
    afternoon: "Ø¯ÙØ§Û ÙÛÙÛÚÛ",
    evening: "Ø¦ÛÙØ§Ø±Û",
    night: "Ø´ÛÙ",
  },
};

const formattingDayPeriodValues$T = {
  narrow: {
    am: "Ù¾",
    pm: "Ø¯",
    midnight: "Ù-Ø´",
    noon: "Ù",
    morning: "ÙÛ Ø¨ÛÛØ§ÙÛØ¯Ø§",
    afternoon: "ÙÛ Ø¯ÙØ§Û ÙÛÙÛÚÛØ¯Ø§",
    evening: "ÙÛ Ø¦ÛÙØ§Ø±ÛØ¯Ø§",
    night: "ÙÛ Ø´ÛÙØ¯Ø§",
  },
  abbreviated: {
    am: "Ù¾-Ù",
    pm: "Ø¯-Ù",
    midnight: "ÙÛÙÛ Ø´ÛÙ",
    noon: "ÙÛÙÛÚÛ",
    morning: "ÙÛ Ø¨ÛÛØ§ÙÛØ¯Ø§",
    afternoon: "ÙÛ Ø¯ÙØ§Û ÙÛÙÛÚÛØ¯Ø§",
    evening: "ÙÛ Ø¦ÛÙØ§Ø±ÛØ¯Ø§",
    night: "ÙÛ Ø´ÛÙØ¯Ø§",
  },
  wide: {
    am: "Ù¾ÛØ´ ÙÛÙÛÚÛ",
    pm: "Ø¯ÙØ§Û ÙÛÙÛÚÛ",
    midnight: "ÙÛÙÛ Ø´ÛÙ",
    noon: "ÙÛÙÛÚÛ",
    morning: "ÙÛ Ø¨ÛÛØ§ÙÛØ¯Ø§",
    afternoon: "ÙÛ Ø¯ÙØ§Û ÙÛÙÛÚÛØ¯Ø§",
    evening: "ÙÛ Ø¦ÛÙØ§Ø±ÛØ¯Ø§",
    night: "ÙÛ Ø´ÛÙØ¯Ø§",
  },
};

const ordinalNumber$16 = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$16.localize = {
  ordinalNumber: ordinalNumber$16,

  era: (0, _index$4R.buildLocalizeFn)({
    values: eraValues$16,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4R.buildLocalizeFn)({
    values: quarterValues$16,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4R.buildLocalizeFn)({
    values: monthValues$16,
    defaultWidth: "wide",
  }),

  day: (0, _index$4R.buildLocalizeFn)({
    values: dayValues$16,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4R.buildLocalizeFn)({
    values: dayPeriodValues$16,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$T,
    defaultFormattingWidth: "wide",
  }),
});

var match$15 = {};

match$15.match = void 0;

var _index$4Q = buildMatchFn$1;
var _index2$2n = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$15 = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$15 = /\d+/i;

const matchEraPatterns$15 = {
  narrow: /^(Ù¾|Ø¯)/i,
  abbreviated: /^(Ù¾-Ø²|Ø¯.Ø²)/i,
  wide: /^(Ù¾ÛØ´ Ø²Ø§ÛÙ| Ø¯ÙØ§Û Ø²Ø§ÛÙ)/i,
};
const parseEraPatterns$15 = {
  any: [/^Ø¯/g, /^Ù¾/g],
};

const matchQuarterPatterns$15 = {
  narrow: /^[1234]/i,
  abbreviated: /^Ù[1234]Ú/i,
  wide: /^(ÛÛÚ©ÛÙ|Ø¯ÙÙÛÙ|Ø³ÛÛÛÙ| ÚÙØ§Ø±ÛÙ) (ÚØ§Ø±ÛÚ¯Û)? quarter/i,
};
const parseQuarterPatterns$15 = {
  wide: [/ÚØ§Ø±ÛÚ¯Û ÛÛÚ©ÛÙ/, /ÚØ§Ø±ÛÚ¯Û Ø¯ÙÙÛÙ/, /ÚØ§Ø±ÛÚ¯Û Ø³ÙÛÛÙ/, /ÚØ§Ø±ÛÚ¯Û ÚÙØ§Ø±ÛÙ/],

  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$15 = {
  narrow: /^(Ú©-Ø¯|Ø´|Ø¦Ø§|Ù|Ù|Ø­|Øª|Ø¦Û|ØªØ´-Û|ØªØ´-Ø¯|Ú©-Û)/i,
  abbreviated:
    /^(Ú©Ø§Ù-Ø¯ÙÙ|Ø´ÙØ¨|Ø¦Ø§Ø¯|ÙÛØ³|ÙØ§ÛØ³|Ø­ÙØ²|ØªÛÙ|Ø¦Ø§Ø¨|Ø¦ÛÙ|ØªØ´-ÛÛÚ©|ØªØ´-Ø¯ÙÙ|Ú©Ø§Ù-ÛÛÚ©)/i,
  wide: /^(Ú©Ø§ÙÙÙÙÛ Ø¯ÙÙÛÙ|Ø´ÙØ¨Ø§Øª|Ø¦Ø§Ø¯Ø§Ø±|ÙÛØ³Ø§Ù|ÙØ§ÛØ³|Ø­ÙØ²ÛÛØ±Ø§Ù|ØªÛÙÙÙØ²|Ø¦Ø§Ø¨|Ø¦ÛÛÙÙÙ|ØªØ´Ø±ÛÙÛ ÛÛÚ©ÛÙ|ØªØ´Ø±ÛÙÛ Ø¯ÙÙÛÙ|Ú©Ø§ÙÙÙÙÛ ÛÛÚ©ÛÙ)/i,
};
const parseMonthPatterns$15 = {
  narrow: [
    /^Ú©-Ø¯/i,
    /^Ø´/i,
    /^Ø¦Ø§/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø­/i,
    /^Øª/i,
    /^Ø¦Ø§/i,
    /^Ø¦Û/i,
    /^ØªØ´-Û/i,
    /^ØªØ´-Ø¯/i,
    /^Ú©-Û/i,
  ],

  any: [
    /^Ú©Ø§Ù-Ø¯ÙÙ/i,
    /^Ø´ÙØ¨/i,
    /^Ø¦Ø§Ø¯/i,
    /^ÙÛØ³/i,
    /^ÙØ§ÛØ³/i,
    /^Ø­ÙØ²/i,
    /^ØªÛÙ/i,
    /^Ø¦Ø§Ø¨/i,
    /^Ø¦ÛÙ/i,
    /^ØªØ´-ÛÛÚ©/i,
    /^ØªØ´-Ø¯ÙÙ/i,
    /^|Ú©Ø§Ù-ÛÛÚ©/i,
  ],
};

const matchDayPatterns$15 = {
  narrow: /^(Ø´|Û|Ø¯|Ø³|Ú|Ù¾|ÙÛ)/i,
  short: /^(ÛÛ-Ø´Û|Ø¯ÙÙ-Ø´Û|Ø³Û-Ø´Û|ÚÙ-Ø´Û|Ù¾Û-Ø´Û|ÙÛ|Ø´Û)/i,
  abbreviated: /^(ÛÛÚ©-Ø´ÛÙ|Ø¯ÙÙ-Ø´ÛÙ|Ø³Û-Ø´ÛÙ|ÚÙØ§Ø±-Ø´ÛÙ|Ù¾ÛÙØ®-Ø´ÛÙ|ÙÛÛÙÛ|Ø´ÛÙÛ)/i,
  wide: /^(ÛÛÚ© Ø´ÛÙÛ|Ø¯ÙÙ Ø´ÛÙÛ|Ø³Û Ø´ÛÙÛ|ÚÙØ§Ø± Ø´ÛÙÛ|Ù¾ÛÙØ¬ Ø´ÛÙÛ|ÙÛÛÙÛ|Ø´ÛÙÛ)/i,
};
const parseDayPatterns$15 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$15 = {
  narrow: /^(Ù¾|Ø¯|Ù-Ø´|Ù| (Ø¨ÛÛØ§ÙÛ|Ø¯ÙØ§Û ÙÛÙÛÚÛ|Ø¦ÛÙØ§Ø±Û|Ø´ÛÙ))/i,
  abbreviated: /^(Ù¾-Ù|Ø¯-Ù|ÙÛÙÛ Ø´ÛÙ|ÙÛÙÛÚÛ|Ø¨ÛÛØ§ÙÛ|Ø¯ÙØ§Û ÙÛÙÛÚÛ|Ø¦ÛÙØ§Ø±Û|Ø´ÛÙ)/,
  wide: /^(Ù¾ÛØ´ ÙÛÙÛÚÛ|Ø¯ÙØ§Û ÙÛÙÛÚÛ|ÙÛÙÛÚÛ|ÙÛÙÛ Ø´ÛÙ|ÙÛØ¨ÛÛØ§ÙÛØ¯Ø§|ÙÛØ¯ÙØ§ÛÙÛÙÛÚÛØ¯Ø§|ÙÛ Ø¦ÛÙØ§Ø±ÛØ¯Ø§|ÙÛ Ø´ÛÙØ¯Ø§)/,
  any: /^(Ù¾|Ø¯|Ø¨ÛÛØ§ÙÛ|ÙÛÙÛÚÛ|Ø¦ÛÙØ§Ø±Û|Ø´ÛÙ)/,
};
const parseDayPeriodPatterns$15 = {
  any: {
    am: /^Ø¯/i,
    pm: /^Ù¾/i,
    midnight: /^Ù-Ø´/i,
    noon: /^Ù/i,
    morning: /Ø¨ÛÛØ§ÙÛ/i,
    afternoon: /Ø¯ÙØ§ÛÙÛÙÛÚÛ/i,
    evening: /Ø¦ÛÙØ§Ø±Û/i,
    night: /Ø´ÛÙ/i,
  },
};

(match$15.match = {
  ordinalNumber: (0, _index2$2n.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$15,
    parsePattern: parseOrdinalNumberPattern$15,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4Q.buildMatchFn)({
    matchPatterns: matchEraPatterns$15,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$15,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4Q.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$15,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$15,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4Q.buildMatchFn)({
    matchPatterns: matchMonthPatterns$15,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$15,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4Q.buildMatchFn)({
    matchPatterns: matchDayPatterns$15,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$15,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4Q.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$15,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$15,
    defaultParseWidth: "any",
  }),
});

ckb.ckb = void 0;
var _index$4P = formatDistance$2d;
var _index2$2m = formatLong$1e;
var _index3$1h = formatRelative$2d;
var _index4$1g = localize$16;
var _index5$1g = match$15;

/**
 * @type {Locale}
 * @category Locales
 * @summary Central Kurdish locale.
 * @language Central Kurdish
 * @iso-639-2 kur
 * @author Revan Sarbast [@Revan99]{@link https://github.com/Revan99}
 */
(ckb.ckb = {
  code: "ckb",
  formatDistance: _index$4P.formatDistance,
  formatLong: _index2$2m.formatLong,
  formatRelative: _index3$1h.formatRelative,
  localize: _index4$1g.localize,
  match: _index5$1g.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var cs = {};

var formatDistance$2b = {};

formatDistance$2b.formatDistance = void 0;

const formatDistanceLocale$14 = {
  lessThanXSeconds: {
    one: {
      regular: "mÃ©nÄ neÅ¾ 1 sekunda",
      past: "pÅed mÃ©nÄ neÅ¾ 1 sekundou",
      future: "za mÃ©nÄ neÅ¾ 1 sekundu",
    },
    few: {
      regular: "mÃ©nÄ neÅ¾ {{count}} sekundy",
      past: "pÅed mÃ©nÄ neÅ¾ {{count}} sekundami",
      future: "za mÃ©nÄ neÅ¾ {{count}} sekundy",
    },
    many: {
      regular: "mÃ©nÄ neÅ¾ {{count}} sekund",
      past: "pÅed mÃ©nÄ neÅ¾ {{count}} sekundami",
      future: "za mÃ©nÄ neÅ¾ {{count}} sekund",
    },
  },

  xSeconds: {
    one: {
      regular: "1 sekunda",
      past: "pÅed 1 sekundou",
      future: "za 1 sekundu",
    },
    few: {
      regular: "{{count}} sekundy",
      past: "pÅed {{count}} sekundami",
      future: "za {{count}} sekundy",
    },
    many: {
      regular: "{{count}} sekund",
      past: "pÅed {{count}} sekundami",
      future: "za {{count}} sekund",
    },
  },

  halfAMinute: {
    type: "other",
    other: {
      regular: "pÅ¯l minuty",
      past: "pÅed pÅ¯l minutou",
      future: "za pÅ¯l minuty",
    },
  },

  lessThanXMinutes: {
    one: {
      regular: "mÃ©nÄ neÅ¾ 1 minuta",
      past: "pÅed mÃ©nÄ neÅ¾ 1 minutou",
      future: "za mÃ©nÄ neÅ¾ 1 minutu",
    },
    few: {
      regular: "mÃ©nÄ neÅ¾ {{count}} minuty",
      past: "pÅed mÃ©nÄ neÅ¾ {{count}} minutami",
      future: "za mÃ©nÄ neÅ¾ {{count}} minuty",
    },
    many: {
      regular: "mÃ©nÄ neÅ¾ {{count}} minut",
      past: "pÅed mÃ©nÄ neÅ¾ {{count}} minutami",
      future: "za mÃ©nÄ neÅ¾ {{count}} minut",
    },
  },

  xMinutes: {
    one: {
      regular: "1 minuta",
      past: "pÅed 1 minutou",
      future: "za 1 minutu",
    },
    few: {
      regular: "{{count}} minuty",
      past: "pÅed {{count}} minutami",
      future: "za {{count}} minuty",
    },
    many: {
      regular: "{{count}} minut",
      past: "pÅed {{count}} minutami",
      future: "za {{count}} minut",
    },
  },

  aboutXHours: {
    one: {
      regular: "pÅibliÅ¾nÄ 1 hodina",
      past: "pÅibliÅ¾nÄ pÅed 1 hodinou",
      future: "pÅibliÅ¾nÄ za 1 hodinu",
    },
    few: {
      regular: "pÅibliÅ¾nÄ {{count}} hodiny",
      past: "pÅibliÅ¾nÄ pÅed {{count}} hodinami",
      future: "pÅibliÅ¾nÄ za {{count}} hodiny",
    },
    many: {
      regular: "pÅibliÅ¾nÄ {{count}} hodin",
      past: "pÅibliÅ¾nÄ pÅed {{count}} hodinami",
      future: "pÅibliÅ¾nÄ za {{count}} hodin",
    },
  },

  xHours: {
    one: {
      regular: "1 hodina",
      past: "pÅed 1 hodinou",
      future: "za 1 hodinu",
    },
    few: {
      regular: "{{count}} hodiny",
      past: "pÅed {{count}} hodinami",
      future: "za {{count}} hodiny",
    },
    many: {
      regular: "{{count}} hodin",
      past: "pÅed {{count}} hodinami",
      future: "za {{count}} hodin",
    },
  },

  xDays: {
    one: {
      regular: "1 den",
      past: "pÅed 1 dnem",
      future: "za 1 den",
    },
    few: {
      regular: "{{count}} dny",
      past: "pÅed {{count}} dny",
      future: "za {{count}} dny",
    },
    many: {
      regular: "{{count}} dnÃ­",
      past: "pÅed {{count}} dny",
      future: "za {{count}} dnÃ­",
    },
  },

  aboutXWeeks: {
    one: {
      regular: "pÅibliÅ¾nÄ 1 tÃ½den",
      past: "pÅibliÅ¾nÄ pÅed 1 tÃ½dnem",
      future: "pÅibliÅ¾nÄ za 1 tÃ½den",
    },

    few: {
      regular: "pÅibliÅ¾nÄ {{count}} tÃ½dny",
      past: "pÅibliÅ¾nÄ pÅed {{count}} tÃ½dny",
      future: "pÅibliÅ¾nÄ za {{count}} tÃ½dny",
    },

    many: {
      regular: "pÅibliÅ¾nÄ {{count}} tÃ½dnÅ¯",
      past: "pÅibliÅ¾nÄ pÅed {{count}} tÃ½dny",
      future: "pÅibliÅ¾nÄ za {{count}} tÃ½dnÅ¯",
    },
  },

  xWeeks: {
    one: {
      regular: "1 tÃ½den",
      past: "pÅed 1 tÃ½dnem",
      future: "za 1 tÃ½den",
    },

    few: {
      regular: "{{count}} tÃ½dny",
      past: "pÅed {{count}} tÃ½dny",
      future: "za {{count}} tÃ½dny",
    },

    many: {
      regular: "{{count}} tÃ½dnÅ¯",
      past: "pÅed {{count}} tÃ½dny",
      future: "za {{count}} tÃ½dnÅ¯",
    },
  },

  aboutXMonths: {
    one: {
      regular: "pÅibliÅ¾nÄ 1 mÄsÃ­c",
      past: "pÅibliÅ¾nÄ pÅed 1 mÄsÃ­cem",
      future: "pÅibliÅ¾nÄ za 1 mÄsÃ­c",
    },

    few: {
      regular: "pÅibliÅ¾nÄ {{count}} mÄsÃ­ce",
      past: "pÅibliÅ¾nÄ pÅed {{count}} mÄsÃ­ci",
      future: "pÅibliÅ¾nÄ za {{count}} mÄsÃ­ce",
    },

    many: {
      regular: "pÅibliÅ¾nÄ {{count}} mÄsÃ­cÅ¯",
      past: "pÅibliÅ¾nÄ pÅed {{count}} mÄsÃ­ci",
      future: "pÅibliÅ¾nÄ za {{count}} mÄsÃ­cÅ¯",
    },
  },

  xMonths: {
    one: {
      regular: "1 mÄsÃ­c",
      past: "pÅed 1 mÄsÃ­cem",
      future: "za 1 mÄsÃ­c",
    },

    few: {
      regular: "{{count}} mÄsÃ­ce",
      past: "pÅed {{count}} mÄsÃ­ci",
      future: "za {{count}} mÄsÃ­ce",
    },

    many: {
      regular: "{{count}} mÄsÃ­cÅ¯",
      past: "pÅed {{count}} mÄsÃ­ci",
      future: "za {{count}} mÄsÃ­cÅ¯",
    },
  },

  aboutXYears: {
    one: {
      regular: "pÅibliÅ¾nÄ 1 rok",
      past: "pÅibliÅ¾nÄ pÅed 1 rokem",
      future: "pÅibliÅ¾nÄ za 1 rok",
    },
    few: {
      regular: "pÅibliÅ¾nÄ {{count}} roky",
      past: "pÅibliÅ¾nÄ pÅed {{count}} roky",
      future: "pÅibliÅ¾nÄ za {{count}} roky",
    },
    many: {
      regular: "pÅibliÅ¾nÄ {{count}} rokÅ¯",
      past: "pÅibliÅ¾nÄ pÅed {{count}} roky",
      future: "pÅibliÅ¾nÄ za {{count}} rokÅ¯",
    },
  },

  xYears: {
    one: {
      regular: "1 rok",
      past: "pÅed 1 rokem",
      future: "za 1 rok",
    },
    few: {
      regular: "{{count}} roky",
      past: "pÅed {{count}} roky",
      future: "za {{count}} roky",
    },
    many: {
      regular: "{{count}} rokÅ¯",
      past: "pÅed {{count}} roky",
      future: "za {{count}} rokÅ¯",
    },
  },

  overXYears: {
    one: {
      regular: "vÃ­ce neÅ¾ 1 rok",
      past: "pÅed vÃ­ce neÅ¾ 1 rokem",
      future: "za vÃ­ce neÅ¾ 1 rok",
    },
    few: {
      regular: "vÃ­ce neÅ¾ {{count}} roky",
      past: "pÅed vÃ­ce neÅ¾ {{count}} roky",
      future: "za vÃ­ce neÅ¾ {{count}} roky",
    },
    many: {
      regular: "vÃ­ce neÅ¾ {{count}} rokÅ¯",
      past: "pÅed vÃ­ce neÅ¾ {{count}} roky",
      future: "za vÃ­ce neÅ¾ {{count}} rokÅ¯",
    },
  },

  almostXYears: {
    one: {
      regular: "skoro 1 rok",
      past: "skoro pÅed 1 rokem",
      future: "skoro za 1 rok",
    },
    few: {
      regular: "skoro {{count}} roky",
      past: "skoro pÅed {{count}} roky",
      future: "skoro za {{count}} roky",
    },
    many: {
      regular: "skoro {{count}} rokÅ¯",
      past: "skoro pÅed {{count}} roky",
      future: "skoro za {{count}} rokÅ¯",
    },
  },
};

const formatDistance$2a = (token, count, options) => {
  let pluralResult;

  const tokenValue = formatDistanceLocale$14[token];

  // cs pluralization
  if (tokenValue.type === "other") {
    pluralResult = tokenValue.other;
  } else if (count === 1) {
    pluralResult = tokenValue.one;
  } else if (count > 1 && count < 5) {
    pluralResult = tokenValue.few;
  } else {
    pluralResult = tokenValue.many;
  }

  // times
  const suffixExist = options?.addSuffix === true;
  const comparison = options?.comparison;

  let timeResult;
  if (suffixExist && comparison === -1) {
    timeResult = pluralResult.past;
  } else if (suffixExist && comparison === 1) {
    timeResult = pluralResult.future;
  } else {
    timeResult = pluralResult.regular;
  }

  return timeResult.replace("{{count}}", String(count));
};
formatDistance$2b.formatDistance = formatDistance$2a;

var formatLong$1d = {};

formatLong$1d.formatLong = void 0;
var _index$4O = buildFormatLongFn$1;

const dateFormats$1d = {
  full: "EEEE, d. MMMM yyyy",
  long: "d. MMMM yyyy",
  medium: "d. M. yyyy",
  short: "dd.MM.yyyy",
};

const timeFormats$1d = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$1d = {
  full: "{{date}} 'v' {{time}}",
  long: "{{date}} 'v' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1d.formatLong = {
  date: (0, _index$4O.buildFormatLongFn)({
    formats: dateFormats$1d,
    defaultWidth: "full",
  }),

  time: (0, _index$4O.buildFormatLongFn)({
    formats: timeFormats$1d,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4O.buildFormatLongFn)({
    formats: dateTimeFormats$1d,
    defaultWidth: "full",
  }),
});

var formatRelative$2b = {};

formatRelative$2b.formatRelative = void 0;

const accusativeWeekdays$5 = [
  "nedÄli",
  "pondÄlÃ­",
  "ÃºterÃ½",
  "stÅedu",
  "Ätvrtek",
  "pÃ¡tek",
  "sobotu",
];

const formatRelativeLocale$15 = {
  lastWeek: "'poslednÃ­' eeee 've' p",
  yesterday: "'vÄera v' p",
  today: "'dnes v' p",
  tomorrow: "'zÃ­tra v' p",
  nextWeek: (date) => {
    const day = date.getDay();
    return "'v " + accusativeWeekdays$5[day] + " o' p";
  },
  other: "P",
};

const formatRelative$2a = (token, date) => {
  const format = formatRelativeLocale$15[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$2b.formatRelative = formatRelative$2a;

var localize$15 = {};

localize$15.localize = void 0;
var _index$4N = buildLocalizeFn$1;

const eraValues$15 = {
  narrow: ["pÅ. n. l.", "n. l."],
  abbreviated: ["pÅ. n. l.", "n. l."],
  wide: ["pÅed naÅ¡Ã­m letopoÄtem", "naÅ¡eho letopoÄtu"],
};

const quarterValues$15 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. ÄtvrtletÃ­", "2. ÄtvrtletÃ­", "3. ÄtvrtletÃ­", "4. ÄtvrtletÃ­"],

  wide: ["1. ÄtvrtletÃ­", "2. ÄtvrtletÃ­", "3. ÄtvrtletÃ­", "4. ÄtvrtletÃ­"],
};

const monthValues$15 = {
  narrow: ["L", "Ã", "B", "D", "K", "Ä", "Ä", "S", "Z", "Å", "L", "P"],
  abbreviated: [
    "led",
    "Ãºno",
    "bÅe",
    "dub",
    "kvÄ",
    "Ävn",
    "Ävc",
    "srp",
    "zÃ¡Å",
    "ÅÃ­j",
    "lis",
    "pro",
  ],

  wide: [
    "leden",
    "Ãºnor",
    "bÅezen",
    "duben",
    "kvÄten",
    "Äerven",
    "Äervenec",
    "srpen",
    "zÃ¡ÅÃ­",
    "ÅÃ­jen",
    "listopad",
    "prosinec",
  ],
};

const formattingMonthValues$f = {
  narrow: ["L", "Ã", "B", "D", "K", "Ä", "Ä", "S", "Z", "Å", "L", "P"],
  abbreviated: [
    "led",
    "Ãºno",
    "bÅe",
    "dub",
    "kvÄ",
    "Ävn",
    "Ävc",
    "srp",
    "zÃ¡Å",
    "ÅÃ­j",
    "lis",
    "pro",
  ],

  wide: [
    "ledna",
    "Ãºnora",
    "bÅezna",
    "dubna",
    "kvÄtna",
    "Äervna",
    "Äervence",
    "srpna",
    "zÃ¡ÅÃ­",
    "ÅÃ­jna",
    "listopadu",
    "prosince",
  ],
};

const dayValues$15 = {
  narrow: ["ne", "po", "Ãºt", "st", "Ät", "pÃ¡", "so"],
  short: ["ne", "po", "Ãºt", "st", "Ät", "pÃ¡", "so"],
  abbreviated: ["ned", "pon", "Ãºte", "stÅ", "Ätv", "pÃ¡t", "sob"],
  wide: ["nedÄle", "pondÄlÃ­", "ÃºterÃ½", "stÅeda", "Ätvrtek", "pÃ¡tek", "sobota"],
};

const dayPeriodValues$15 = {
  narrow: {
    am: "dop.",
    pm: "odp.",
    midnight: "pÅ¯lnoc",
    noon: "poledne",
    morning: "rÃ¡no",
    afternoon: "odpoledne",
    evening: "veÄer",
    night: "noc",
  },
  abbreviated: {
    am: "dop.",
    pm: "odp.",
    midnight: "pÅ¯lnoc",
    noon: "poledne",
    morning: "rÃ¡no",
    afternoon: "odpoledne",
    evening: "veÄer",
    night: "noc",
  },
  wide: {
    am: "dopoledne",
    pm: "odpoledne",
    midnight: "pÅ¯lnoc",
    noon: "poledne",
    morning: "rÃ¡no",
    afternoon: "odpoledne",
    evening: "veÄer",
    night: "noc",
  },
};

const formattingDayPeriodValues$S = {
  narrow: {
    am: "dop.",
    pm: "odp.",
    midnight: "pÅ¯lnoc",
    noon: "poledne",
    morning: "rÃ¡no",
    afternoon: "odpoledne",
    evening: "veÄer",
    night: "noc",
  },
  abbreviated: {
    am: "dop.",
    pm: "odp.",
    midnight: "pÅ¯lnoc",
    noon: "poledne",
    morning: "rÃ¡no",
    afternoon: "odpoledne",
    evening: "veÄer",
    night: "noc",
  },
  wide: {
    am: "dopoledne",
    pm: "odpoledne",
    midnight: "pÅ¯lnoc",
    noon: "poledne",
    morning: "rÃ¡no",
    afternoon: "odpoledne",
    evening: "veÄer",
    night: "noc",
  },
};

const ordinalNumber$15 = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$15.localize = {
  ordinalNumber: ordinalNumber$15,

  era: (0, _index$4N.buildLocalizeFn)({
    values: eraValues$15,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4N.buildLocalizeFn)({
    values: quarterValues$15,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4N.buildLocalizeFn)({
    values: monthValues$15,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$f,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$4N.buildLocalizeFn)({
    values: dayValues$15,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4N.buildLocalizeFn)({
    values: dayPeriodValues$15,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$S,
    defaultFormattingWidth: "wide",
  }),
});

var match$14 = {};

match$14.match = void 0;

var _index$4M = buildMatchFn$1;
var _index2$2l = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$14 = /^(\d+)\.?/i;
const parseOrdinalNumberPattern$14 = /\d+/i;

const matchEraPatterns$14 = {
  narrow: /^(p[År](\.|ed) Kr\.|p[År](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(p[År](\.|ed) Kr\.|p[År](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(p[År](\.|ed) Kristem|p[År](\.|ed) na[Å¡s][Ã­i]m letopo[Äc]tem|po Kristu|na[Å¡s]eho letopo[Äc]tu)/i,
};

const parseEraPatterns$14 = {
  any: [/^p[År]/i, /^(po|n)/i],
};

const matchQuarterPatterns$14 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\. [Äc]tvrtlet[Ã­i]/i,
  wide: /^[1234]\. [Äc]tvrtlet[Ã­i]/i,
};
const parseQuarterPatterns$14 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$14 = {
  narrow: /^[lÃºubdkÄcszÅrlp]/i,
  abbreviated:
    /^(led|[Ãºu]no|b[År]e|dub|kv[Äe]|[Äc]vn|[Äc]vc|srp|z[Ã¡a][År]|[År][Ã­i]j|lis|pro)/i,
  wide: /^(leden|ledna|[Ãºu]nora?|b[År]ezen|b[År]ezna|duben|dubna|kv[Äe]ten|kv[Äe]tna|[Äc]erven(ec|ce)?|[Äc]ervna|srpen|srpna|z[Ã¡a][År][Ã­i]|[År][Ã­i]jen|[År][Ã­i]jna|listopad(a|u)?|prosinec|prosince)/i,
};
const parseMonthPatterns$14 = {
  narrow: [
    /^l/i,
    /^[Ãºu]/i,
    /^b/i,
    /^d/i,
    /^k/i,
    /^[Äc]/i,
    /^[Äc]/i,
    /^s/i,
    /^z/i,
    /^[År]/i,
    /^l/i,
    /^p/i,
  ],

  any: [
    /^led/i,
    /^[Ãºu]n/i,
    /^b[År]e/i,
    /^dub/i,
    /^kv[Äe]/i,
    /^[Äc]vn|[Äc]erven(?!\w)|[Äc]ervna/i,
    /^[Äc]vc|[Äc]erven(ec|ce)/i,
    /^srp/i,
    /^z[Ã¡a][År]/i,
    /^[År][Ã­i]j/i,
    /^lis/i,
    /^pro/i,
  ],
};

const matchDayPatterns$14 = {
  narrow: /^[npuÃºsÄps]/i,
  short: /^(ne|po|[Ãºu]t|st|[Äc]t|p[Ã¡a]|so)/i,
  abbreviated: /^(ned|pon|[Ãºu]te|st[rÅ]|[Äc]tv|p[Ã¡a]t|sob)/i,
  wide: /^(ned[Äe]le|pond[Äe]l[Ã­i]|[Ãºu]ter[Ã½y]|st[År]eda|[Äc]tvrtek|p[Ã¡a]tek|sobota)/i,
};

const parseDayPatterns$14 = {
  narrow: [/^n/i, /^p/i, /^[Ãºu]/i, /^s/i, /^[Äc]/i, /^p/i, /^s/i],
  any: [/^ne/i, /^po/i, /^[Ãºu]t/i, /^st/i, /^[Äc]t/i, /^p[Ã¡a]/i, /^so/i],
};

const matchDayPeriodPatterns$14 = {
  any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[Å¯u]lnoc|poledne|r[Ã¡a]no|odpoledne|ve[Äc]er|(v )?noci?/i,
};
const parseDayPeriodPatterns$14 = {
  any: {
    am: /^dop/i,
    pm: /^odp/i,
    midnight: /^p[Å¯u]lnoc/i,
    noon: /^poledne/i,
    morning: /r[Ã¡a]no/i,
    afternoon: /odpoledne/i,
    evening: /ve[Äc]er/i,
    night: /noc/i,
  },
};

(match$14.match = {
  ordinalNumber: (0, _index2$2l.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$14,
    parsePattern: parseOrdinalNumberPattern$14,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4M.buildMatchFn)({
    matchPatterns: matchEraPatterns$14,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$14,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4M.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$14,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$14,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4M.buildMatchFn)({
    matchPatterns: matchMonthPatterns$14,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$14,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4M.buildMatchFn)({
    matchPatterns: matchDayPatterns$14,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$14,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4M.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$14,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$14,
    defaultParseWidth: "any",
  }),
});

cs.cs = void 0;
var _index$4L = formatDistance$2b;
var _index2$2k = formatLong$1d;
var _index3$1g = formatRelative$2b;
var _index4$1f = localize$15;
var _index5$1f = match$14;

/**
 * @category Locales
 * @summary Czech locale.
 * @language Czech
 * @iso-639-2 ces
 * @author David Rus [@davidrus](https://github.com/davidrus)
 * @author Pavel HrÃ¡ch [@SilenY](https://github.com/SilenY)
 * @author Jozef BÃ­roÅ¡ [@JozefBiros](https://github.com/JozefBiros)
 */
(cs.cs = {
  code: "cs",
  formatDistance: _index$4L.formatDistance,
  formatLong: _index2$2k.formatLong,
  formatRelative: _index3$1g.formatRelative,
  localize: _index4$1f.localize,
  match: _index5$1f.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var cy = {};

var formatDistance$29 = {};

formatDistance$29.formatDistance = void 0;

const formatDistanceLocale$13 = {
  lessThanXSeconds: {
    one: "llai na eiliad",
    other: "llai na {{count}} eiliad",
  },

  xSeconds: {
    one: "1 eiliad",
    other: "{{count}} eiliad",
  },

  halfAMinute: "hanner munud",

  lessThanXMinutes: {
    one: "llai na munud",
    two: "llai na 2 funud",
    other: "llai na {{count}} munud",
  },

  xMinutes: {
    one: "1 munud",
    two: "2 funud",
    other: "{{count}} munud",
  },

  aboutXHours: {
    one: "tua 1 awr",
    other: "tua {{count}} awr",
  },

  xHours: {
    one: "1 awr",
    other: "{{count}} awr",
  },

  xDays: {
    one: "1 diwrnod",
    two: "2 ddiwrnod",
    other: "{{count}} diwrnod",
  },

  aboutXWeeks: {
    one: "tua 1 wythnos",
    two: "tua pythefnos",
    other: "tua {{count}} wythnos",
  },

  xWeeks: {
    one: "1 wythnos",
    two: "pythefnos",
    other: "{{count}} wythnos",
  },

  aboutXMonths: {
    one: "tua 1 mis",
    two: "tua 2 fis",
    other: "tua {{count}} mis",
  },

  xMonths: {
    one: "1 mis",
    two: "2 fis",
    other: "{{count}} mis",
  },

  aboutXYears: {
    one: "tua 1 flwyddyn",
    two: "tua 2 flynedd",
    other: "tua {{count}} mlynedd",
  },

  xYears: {
    one: "1 flwyddyn",
    two: "2 flynedd",
    other: "{{count}} mlynedd",
  },

  overXYears: {
    one: "dros 1 flwyddyn",
    two: "dros 2 flynedd",
    other: "dros {{count}} mlynedd",
  },

  almostXYears: {
    one: "bron 1 flwyddyn",
    two: "bron 2 flynedd",
    other: "bron {{count}} mlynedd",
  },
};

const formatDistance$28 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$13[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "mewn " + result;
    } else {
      return result + " yn Ã´l";
    }
  }

  return result;
};
formatDistance$29.formatDistance = formatDistance$28;

var formatLong$1c = {};

formatLong$1c.formatLong = void 0;
var _index$4K = buildFormatLongFn$1;

const dateFormats$1c = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$1c = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$1c = {
  full: "{{date}} 'am' {{time}}",
  long: "{{date}} 'am' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$1c.formatLong = {
  date: (0, _index$4K.buildFormatLongFn)({
    formats: dateFormats$1c,
    defaultWidth: "full",
  }),

  time: (0, _index$4K.buildFormatLongFn)({
    formats: timeFormats$1c,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4K.buildFormatLongFn)({
    formats: dateTimeFormats$1c,
    defaultWidth: "full",
  }),
});

var formatRelative$29 = {};

formatRelative$29.formatRelative = void 0;

const formatRelativeLocale$14 = {
  lastWeek: "eeee 'diwethaf am' p",
  yesterday: "'ddoe am' p",
  today: "'heddiw am' p",
  tomorrow: "'yfory am' p",
  nextWeek: "eeee 'am' p",
  other: "P",
};

const formatRelative$28 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$14[token];
formatRelative$29.formatRelative = formatRelative$28;

var localize$14 = {};

localize$14.localize = void 0;
var _index$4J = buildLocalizeFn$1;

const eraValues$14 = {
  narrow: ["C", "O"],
  abbreviated: ["CC", "OC"],
  wide: ["Cyn Crist", "Ar Ã´l Crist"],
};

const quarterValues$14 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ch1", "Ch2", "Ch3", "Ch4"],
  wide: ["Chwarter 1af", "2ail chwarter", "3ydd chwarter", "4ydd chwarter"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$14 = {
  narrow: ["I", "Ch", "Ma", "E", "Mi", "Me", "G", "A", "Md", "H", "T", "Rh"],

  abbreviated: [
    "Ion",
    "Chwe",
    "Maw",
    "Ebr",
    "Mai",
    "Meh",
    "Gor",
    "Aws",
    "Med",
    "Hyd",
    "Tach",
    "Rhag",
  ],

  wide: [
    "Ionawr",
    "Chwefror",
    "Mawrth",
    "Ebrill",
    "Mai",
    "Mehefin",
    "Gorffennaf",
    "Awst",
    "Medi",
    "Hydref",
    "Tachwedd",
    "Rhagfyr",
  ],
};

const dayValues$14 = {
  narrow: ["S", "Ll", "M", "M", "I", "G", "S"],
  short: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"],
  abbreviated: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
  wide: [
    "dydd Sul",
    "dydd Llun",
    "dydd Mawrth",
    "dydd Mercher",
    "dydd Iau",
    "dydd Gwener",
    "dydd Sadwrn",
  ],
};

const dayPeriodValues$14 = {
  narrow: {
    am: "b",
    pm: "h",
    midnight: "hn",
    noon: "hd",
    morning: "bore",
    afternoon: "prynhawn",
    evening: "gyda'r nos",
    night: "nos",
  },
  abbreviated: {
    am: "yb",
    pm: "yh",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "bore",
    afternoon: "prynhawn",
    evening: "gyda'r nos",
    night: "nos",
  },
  wide: {
    am: "y.b.",
    pm: "y.h.",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "bore",
    afternoon: "prynhawn",
    evening: "gyda'r nos",
    night: "nos",
  },
};

const formattingDayPeriodValues$R = {
  narrow: {
    am: "b",
    pm: "h",
    midnight: "hn",
    noon: "hd",
    morning: "yn y bore",
    afternoon: "yn y prynhawn",
    evening: "gyda'r nos",
    night: "yn y nos",
  },
  abbreviated: {
    am: "yb",
    pm: "yh",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "yn y bore",
    afternoon: "yn y prynhawn",
    evening: "gyda'r nos",
    night: "yn y nos",
  },
  wide: {
    am: "y.b.",
    pm: "y.h.",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "yn y bore",
    afternoon: "yn y prynhawn",
    evening: "gyda'r nos",
    night: "yn y nos",
  },
};

const ordinalNumber$14 = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  if (number < 20) {
    switch (number) {
      case 0:
        return number + "fed";
      case 1:
        return number + "af";
      case 2:
        return number + "ail";
      case 3:
      case 4:
        return number + "ydd";
      case 5:
      case 6:
        return number + "ed";
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 15:
      case 18:
        return number + "fed";
      case 11:
      case 13:
      case 14:
      case 16:
      case 17:
      case 19:
        return number + "eg";
    }
  } else if ((number >= 50 && number <= 60) || number === 80 || number >= 100) {
    return number + "fed";
  }
  return number + "ain";
};

(localize$14.localize = {
  ordinalNumber: ordinalNumber$14,

  era: (0, _index$4J.buildLocalizeFn)({
    values: eraValues$14,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4J.buildLocalizeFn)({
    values: quarterValues$14,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4J.buildLocalizeFn)({
    values: monthValues$14,
    defaultWidth: "wide",
  }),

  day: (0, _index$4J.buildLocalizeFn)({
    values: dayValues$14,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4J.buildLocalizeFn)({
    values: dayPeriodValues$14,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$R,
    defaultFormattingWidth: "wide",
  }),
});

var match$13 = {};

match$13.match = void 0;

var _index$4I = buildMatchFn$1;
var _index2$2j = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$13 = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
const parseOrdinalNumberPattern$13 = /\d+/i;

const matchEraPatterns$13 = {
  narrow: /^(c|o)/i,
  abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
  wide: /^(cyn christ|ar Ã´l crist|ar ol crist)/i,
};
const parseEraPatterns$13 = {
  wide: [/^c/i, /^(ar Ã´l crist|ar ol crist)/i],
  any: [/^c/i, /^o/i],
};

const matchQuarterPatterns$13 = {
  narrow: /^[1234]/i,
  abbreviated: /^ch[1234]/i,
  wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i,
};
const parseQuarterPatterns$13 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$13 = {
  narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
  abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
  wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i,
};
const parseMonthPatterns$13 = {
  narrow: [
    /^i/i,
    /^ch/i,
    /^m/i,
    /^e/i,
    /^m/i,
    /^m/i,
    /^g/i,
    /^a/i,
    /^m/i,
    /^h/i,
    /^t/i,
    /^rh/i,
  ],

  any: [
    /^io/i,
    /^ch/i,
    /^maw/i,
    /^e/i,
    /^mai/i,
    /^meh/i,
    /^g/i,
    /^a/i,
    /^med/i,
    /^h/i,
    /^t/i,
    /^rh/i,
  ],
};

const matchDayPatterns$13 = {
  narrow: /^(s|ll|m|i|g)/i,
  short: /^(su|ll|ma|me|ia|gw|sa)/i,
  abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
  wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i,
};
const parseDayPatterns$13 = {
  narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
  wide: [
    /^dydd su/i,
    /^dydd ll/i,
    /^dydd ma/i,
    /^dydd me/i,
    /^dydd i/i,
    /^dydd g/i,
    /^dydd sa/i,
  ],

  any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i],
};

const matchDayPeriodPatterns$13 = {
  narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
  any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
};
const parseDayPeriodPatterns$13 = {
  any: {
    am: /^b|(y\.?\s?b\.?)/i,
    pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
    midnight: /^hn|hanner nos/i,
    noon: /^hd|hanner dydd/i,
    morning: /bore/i,
    afternoon: /prynhawn/i,
    evening: /^gyda'r nos$/i,
    night: /blah/i,
  },
};

(match$13.match = {
  ordinalNumber: (0, _index2$2j.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$13,
    parsePattern: parseOrdinalNumberPattern$13,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4I.buildMatchFn)({
    matchPatterns: matchEraPatterns$13,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$13,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4I.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$13,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$13,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4I.buildMatchFn)({
    matchPatterns: matchMonthPatterns$13,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$13,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4I.buildMatchFn)({
    matchPatterns: matchDayPatterns$13,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$13,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4I.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$13,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$13,
    defaultParseWidth: "any",
  }),
});

cy.cy = void 0;
var _index$4H = formatDistance$29;
var _index2$2i = formatLong$1c;
var _index3$1f = formatRelative$29;
var _index4$1e = localize$14;
var _index5$1e = match$13;

/**
 * @category Locales
 * @summary Welsh locale.
 * @language Welsh
 * @iso-639-2 cym
 * @author Elwyn Malethan [@elmomalmo](https://github.com/elmomalmo)
 */
(cy.cy = {
  code: "cy",
  formatDistance: _index$4H.formatDistance,
  formatLong: _index2$2i.formatLong,
  formatRelative: _index3$1f.formatRelative,
  localize: _index4$1e.localize,
  match: _index5$1e.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var da = {};

var formatDistance$27 = {};

formatDistance$27.formatDistance = void 0;

const formatDistanceLocale$12 = {
  lessThanXSeconds: {
    one: "mindre end Ã©t sekund",
    other: "mindre end {{count}} sekunder",
  },

  xSeconds: {
    one: "1 sekund",
    other: "{{count}} sekunder",
  },

  halfAMinute: "Ã©t halvt minut",

  lessThanXMinutes: {
    one: "mindre end Ã©t minut",
    other: "mindre end {{count}} minutter",
  },

  xMinutes: {
    one: "1 minut",
    other: "{{count}} minutter",
  },

  aboutXHours: {
    one: "cirka 1 time",
    other: "cirka {{count}} timer",
  },

  xHours: {
    one: "1 time",
    other: "{{count}} timer",
  },

  xDays: {
    one: "1 dag",
    other: "{{count}} dage",
  },

  aboutXWeeks: {
    one: "cirka 1 uge",
    other: "cirka {{count}} uger",
  },

  xWeeks: {
    one: "1 uge",
    other: "{{count}} uger",
  },

  aboutXMonths: {
    one: "cirka 1 mÃ¥ned",
    other: "cirka {{count}} mÃ¥neder",
  },

  xMonths: {
    one: "1 mÃ¥ned",
    other: "{{count}} mÃ¥neder",
  },

  aboutXYears: {
    one: "cirka 1 Ã¥r",
    other: "cirka {{count}} Ã¥r",
  },

  xYears: {
    one: "1 Ã¥r",
    other: "{{count}} Ã¥r",
  },

  overXYears: {
    one: "over 1 Ã¥r",
    other: "over {{count}} Ã¥r",
  },

  almostXYears: {
    one: "nÃ¦sten 1 Ã¥r",
    other: "nÃ¦sten {{count}} Ã¥r",
  },
};

const formatDistance$26 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$12[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " siden";
    }
  }

  return result;
};
formatDistance$27.formatDistance = formatDistance$26;

var formatLong$1b = {};

formatLong$1b.formatLong = void 0;
var _index$4G = buildFormatLongFn$1;

const dateFormats$1b = {
  full: "EEEE 'den' d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd/MM/y",
};

const timeFormats$1b = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1b = {
  full: "{{date}} 'kl'. {{time}}",
  long: "{{date}} 'kl'. {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$1b.formatLong = {
  date: (0, _index$4G.buildFormatLongFn)({
    formats: dateFormats$1b,
    defaultWidth: "full",
  }),

  time: (0, _index$4G.buildFormatLongFn)({
    formats: timeFormats$1b,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4G.buildFormatLongFn)({
    formats: dateTimeFormats$1b,
    defaultWidth: "full",
  }),
});

var formatRelative$27 = {};

formatRelative$27.formatRelative = void 0;

const formatRelativeLocale$13 = {
  lastWeek: "'sidste' eeee 'kl.' p",
  yesterday: "'i gÃ¥r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "'pÃ¥' eeee 'kl.' p",
  other: "P",
};

const formatRelative$26 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$13[token];
formatRelative$27.formatRelative = formatRelative$26;

var localize$13 = {};

localize$13.localize = void 0;
var _index$4F = buildLocalizeFn$1;

const eraValues$13 = {
  narrow: ["fvt", "vt"],
  abbreviated: ["f.v.t.", "v.t."],
  wide: ["fÃ¸r vesterlandsk tidsregning", "vesterlandsk tidsregning"],
};

const quarterValues$13 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. kvt.", "2. kvt.", "3. kvt.", "4. kvt."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$13 = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mar.",
    "apr.",
    "maj",
    "jun.",
    "jul.",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "januar",
    "februar",
    "marts",
    "april",
    "maj",
    "juni",
    "juli",
    "august",
    "september",
    "oktober",
    "november",
    "december",
  ],
};

// Note that 'Days - abbreviated - Formatting' has periods at the end.
// https://www.unicode.org/cldr/charts/32/summary/da.html#1760
// This makes grammatical sense in danish, as most abbreviations have periods.
const dayValues$13 = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["sÃ¸", "ma", "ti", "on", "to", "fr", "lÃ¸"],
  abbreviated: ["sÃ¸n.", "man.", "tir.", "ons.", "tor.", "fre.", "lÃ¸r."],

  wide: [
    "sÃ¸ndag",
    "mandag",
    "tirsdag",
    "onsdag",
    "torsdag",
    "fredag",
    "lÃ¸rdag",
  ],
};

const dayPeriodValues$13 = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnat",
    noon: "middag",
    morning: "morgen",
    afternoon: "eftermiddag",
    evening: "aften",
    night: "nat",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnat",
    noon: "middag",
    morning: "morgen",
    afternoon: "eftermiddag",
    evening: "aften",
    night: "nat",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnat",
    noon: "middag",
    morning: "morgen",
    afternoon: "eftermiddag",
    evening: "aften",
    night: "nat",
  },
};

const formattingDayPeriodValues$Q = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnat",
    noon: "middag",
    morning: "om morgenen",
    afternoon: "om eftermiddagen",
    evening: "om aftenen",
    night: "om natten",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnat",
    noon: "middag",
    morning: "om morgenen",
    afternoon: "om eftermiddagen",
    evening: "om aftenen",
    night: "om natten",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnat",
    noon: "middag",
    morning: "om morgenen",
    afternoon: "om eftermiddagen",
    evening: "om aftenen",
    night: "om natten",
  },
};

const ordinalNumber$13 = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$13.localize = {
  ordinalNumber: ordinalNumber$13,

  era: (0, _index$4F.buildLocalizeFn)({
    values: eraValues$13,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4F.buildLocalizeFn)({
    values: quarterValues$13,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4F.buildLocalizeFn)({
    values: monthValues$13,
    defaultWidth: "wide",
  }),

  day: (0, _index$4F.buildLocalizeFn)({
    values: dayValues$13,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4F.buildLocalizeFn)({
    values: dayPeriodValues$13,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$Q,
    defaultFormattingWidth: "wide",
  }),
});

var match$12 = {};

match$12.match = void 0;

var _index$4E = buildMatchFn$1;
var _index2$2h = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$12 = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern$12 = /\d+/i;

const matchEraPatterns$12 = {
  narrow: /^(fKr|fvt|eKr|vt)/i,
  abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
  wide: /^(f.Kr.|fÃ¸r vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i,
};
const parseEraPatterns$12 = {
  any: [/^f/i, /^(v|e)/i],
};

const matchQuarterPatterns$12 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]. kvt\./i,
  wide: /^[1234]\.? kvartal/i,
};
const parseQuarterPatterns$12 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$12 = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i,
};
const parseMonthPatterns$12 = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$12 = {
  narrow: /^[smtofl]/i,
  short: /^(sÃ¸n.|man.|tir.|ons.|tor.|fre.|lÃ¸r.)/i,
  abbreviated: /^(sÃ¸n|man|tir|ons|tor|fre|lÃ¸r)/i,
  wide: /^(sÃ¸ndag|mandag|tirsdag|onsdag|torsdag|fredag|lÃ¸rdag)/i,
};
const parseDayPatterns$12 = {
  narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i],
};

const matchDayPeriodPatterns$12 = {
  narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
  any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
};
const parseDayPeriodPatterns$12 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /midnat/i,
    noon: /middag/i,
    morning: /morgen/i,
    afternoon: /eftermiddag/i,
    evening: /aften/i,
    night: /nat/i,
  },
};

(match$12.match = {
  ordinalNumber: (0, _index2$2h.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$12,
    parsePattern: parseOrdinalNumberPattern$12,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4E.buildMatchFn)({
    matchPatterns: matchEraPatterns$12,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$12,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4E.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$12,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$12,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4E.buildMatchFn)({
    matchPatterns: matchMonthPatterns$12,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$12,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4E.buildMatchFn)({
    matchPatterns: matchDayPatterns$12,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$12,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4E.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$12,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$12,
    defaultParseWidth: "any",
  }),
});

da.da = void 0;
var _index$4D = formatDistance$27;
var _index2$2g = formatLong$1b;
var _index3$1e = formatRelative$27;
var _index4$1d = localize$13;
var _index5$1d = match$12;

/**
 * @category Locales
 * @summary Danish locale.
 * @language Danish
 * @iso-639-2 dan
 * @author Mathias WÃ¸bbe [@MathiasKandelborg](https://github.com/MathiasKandelborg)
 * @author Anders B. Hansen [@Andersbiha](https://github.com/Andersbiha)
 * @author [@kgram](https://github.com/kgram)
 * @author [@stefanbugge](https://github.com/stefanbugge)
 */
(da.da = {
  code: "da",
  formatDistance: _index$4D.formatDistance,
  formatLong: _index2$2g.formatLong,
  formatRelative: _index3$1e.formatRelative,
  localize: _index4$1d.localize,
  match: _index5$1d.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var de = {};

var formatDistance$25 = {};

formatDistance$25.formatDistance = void 0;

const formatDistanceLocale$11 = {
  lessThanXSeconds: {
    standalone: {
      one: "weniger als 1 Sekunde",
      other: "weniger als {{count}} Sekunden",
    },
    withPreposition: {
      one: "weniger als 1 Sekunde",
      other: "weniger als {{count}} Sekunden",
    },
  },

  xSeconds: {
    standalone: {
      one: "1 Sekunde",
      other: "{{count}} Sekunden",
    },
    withPreposition: {
      one: "1 Sekunde",
      other: "{{count}} Sekunden",
    },
  },

  halfAMinute: {
    standalone: "eine halbe Minute",
    withPreposition: "einer halben Minute",
  },

  lessThanXMinutes: {
    standalone: {
      one: "weniger als 1 Minute",
      other: "weniger als {{count}} Minuten",
    },
    withPreposition: {
      one: "weniger als 1 Minute",
      other: "weniger als {{count}} Minuten",
    },
  },

  xMinutes: {
    standalone: {
      one: "1 Minute",
      other: "{{count}} Minuten",
    },
    withPreposition: {
      one: "1 Minute",
      other: "{{count}} Minuten",
    },
  },

  aboutXHours: {
    standalone: {
      one: "etwa 1 Stunde",
      other: "etwa {{count}} Stunden",
    },
    withPreposition: {
      one: "etwa 1 Stunde",
      other: "etwa {{count}} Stunden",
    },
  },

  xHours: {
    standalone: {
      one: "1 Stunde",
      other: "{{count}} Stunden",
    },
    withPreposition: {
      one: "1 Stunde",
      other: "{{count}} Stunden",
    },
  },

  xDays: {
    standalone: {
      one: "1 Tag",
      other: "{{count}} Tage",
    },
    withPreposition: {
      one: "1 Tag",
      other: "{{count}} Tagen",
    },
  },

  aboutXWeeks: {
    standalone: {
      one: "etwa 1 Woche",
      other: "etwa {{count}} Wochen",
    },
    withPreposition: {
      one: "etwa 1 Woche",
      other: "etwa {{count}} Wochen",
    },
  },

  xWeeks: {
    standalone: {
      one: "1 Woche",
      other: "{{count}} Wochen",
    },
    withPreposition: {
      one: "1 Woche",
      other: "{{count}} Wochen",
    },
  },

  aboutXMonths: {
    standalone: {
      one: "etwa 1 Monat",
      other: "etwa {{count}} Monate",
    },
    withPreposition: {
      one: "etwa 1 Monat",
      other: "etwa {{count}} Monaten",
    },
  },

  xMonths: {
    standalone: {
      one: "1 Monat",
      other: "{{count}} Monate",
    },
    withPreposition: {
      one: "1 Monat",
      other: "{{count}} Monaten",
    },
  },

  aboutXYears: {
    standalone: {
      one: "etwa 1 Jahr",
      other: "etwa {{count}} Jahre",
    },
    withPreposition: {
      one: "etwa 1 Jahr",
      other: "etwa {{count}} Jahren",
    },
  },

  xYears: {
    standalone: {
      one: "1 Jahr",
      other: "{{count}} Jahre",
    },
    withPreposition: {
      one: "1 Jahr",
      other: "{{count}} Jahren",
    },
  },

  overXYears: {
    standalone: {
      one: "mehr als 1 Jahr",
      other: "mehr als {{count}} Jahre",
    },
    withPreposition: {
      one: "mehr als 1 Jahr",
      other: "mehr als {{count}} Jahren",
    },
  },

  almostXYears: {
    standalone: {
      one: "fast 1 Jahr",
      other: "fast {{count}} Jahre",
    },
    withPreposition: {
      one: "fast 1 Jahr",
      other: "fast {{count}} Jahren",
    },
  },
};

const formatDistance$24 = (token, count, options) => {
  let result;

  const tokenValue = options?.addSuffix
    ? formatDistanceLocale$11[token].withPreposition
    : formatDistanceLocale$11[token].standalone;
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return "vor " + result;
    }
  }

  return result;
};
formatDistance$25.formatDistance = formatDistance$24;

var formatLong$1a = {};

formatLong$1a.formatLong = void 0;
var _index$4C = buildFormatLongFn$1;

// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
const dateFormats$1a = {
  full: "EEEE, do MMMM y", // Montag, 7. Januar 2018
  long: "do MMMM y", // 7. Januar 2018
  medium: "do MMM y", // 7. Jan. 2018
  short: "dd.MM.y", // 07.01.2018
};

const timeFormats$1a = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$1a = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$1a.formatLong = {
  date: (0, _index$4C.buildFormatLongFn)({
    formats: dateFormats$1a,
    defaultWidth: "full",
  }),

  time: (0, _index$4C.buildFormatLongFn)({
    formats: timeFormats$1a,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4C.buildFormatLongFn)({
    formats: dateTimeFormats$1a,
    defaultWidth: "full",
  }),
});

var formatRelative$25 = {};

formatRelative$25.formatRelative = void 0;

const formatRelativeLocale$12 = {
  lastWeek: "'letzten' eeee 'um' p",
  yesterday: "'gestern um' p",
  today: "'heute um' p",
  tomorrow: "'morgen um' p",
  nextWeek: "eeee 'um' p",
  other: "P",
};

const formatRelative$24 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$12[token];
formatRelative$25.formatRelative = formatRelative$24;

var localize$12 = {};

localize$12.localize = void 0;
var _index$4B = buildLocalizeFn$1;

const eraValues$12 = {
  narrow: ["v.Chr.", "n.Chr."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["vor Christus", "nach Christus"],
};

const quarterValues$12 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"],
};

// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$12 = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "MÃ¤r",
    "Apr",
    "Mai",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Okt",
    "Nov",
    "Dez",
  ],

  wide: [
    "Januar",
    "Februar",
    "MÃ¤rz",
    "April",
    "Mai",
    "Juni",
    "Juli",
    "August",
    "September",
    "Oktober",
    "November",
    "Dezember",
  ],
};

// https://st.unicode.org/cldr-apps/v#/de/Gregorian/
const formattingMonthValues$e = {
  narrow: monthValues$12.narrow,
  abbreviated: [
    "Jan.",
    "Feb.",
    "MÃ¤rz",
    "Apr.",
    "Mai",
    "Juni",
    "Juli",
    "Aug.",
    "Sep.",
    "Okt.",
    "Nov.",
    "Dez.",
  ],

  wide: monthValues$12.wide,
};

const dayValues$12 = {
  narrow: ["S", "M", "D", "M", "D", "F", "S"],
  short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
  abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
  wide: [
    "Sonntag",
    "Montag",
    "Dienstag",
    "Mittwoch",
    "Donnerstag",
    "Freitag",
    "Samstag",
  ],
};

// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
const dayPeriodValues$12 = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachm.",
    evening: "Abend",
    night: "Nacht",
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht",
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht",
  },
};
const formattingDayPeriodValues$P = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachm.",
    evening: "abends",
    night: "nachts",
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts",
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts",
  },
};

const ordinalNumber$12 = (dirtyNumber) => {
  const number = Number(dirtyNumber);

  return number + ".";
};

(localize$12.localize = {
  ordinalNumber: ordinalNumber$12,

  era: (0, _index$4B.buildLocalizeFn)({
    values: eraValues$12,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4B.buildLocalizeFn)({
    values: quarterValues$12,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4B.buildLocalizeFn)({
    values: monthValues$12,
    formattingValues: formattingMonthValues$e,
    defaultWidth: "wide",
  }),

  day: (0, _index$4B.buildLocalizeFn)({
    values: dayValues$12,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4B.buildLocalizeFn)({
    values: dayPeriodValues$12,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$P,
    defaultFormattingWidth: "wide",
  }),
});

var match$11 = {};

match$11.match = void 0;

var _index$4A = buildMatchFn$1;
var _index2$2f = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$11 = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern$11 = /\d+/i;

const matchEraPatterns$11 = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i,
};
const parseEraPatterns$11 = {
  any: [/^v/i, /^n/i],
};

const matchQuarterPatterns$11 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i,
};
const parseQuarterPatterns$11 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$11 = {
  narrow: /^[jfmasond]/i,
  abbreviated:
    /^(j[aÃ¤]n|feb|mÃ¤r[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
  wide: /^(januar|februar|mÃ¤rz|april|mai|juni|juli|august|september|oktober|november|dezember)/i,
};
const parseMonthPatterns$11 = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^j[aÃ¤]/i,
    /^f/i,
    /^mÃ¤r/i,
    /^ap/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$11 = {
  narrow: /^[smdmf]/i,
  short: /^(so|mo|di|mi|do|fr|sa)/i,
  abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
  wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i,
};
const parseDayPatterns$11 = {
  any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$11 = {
  narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  abbreviated:
    /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i,
};
const parseDayPeriodPatterns$11 = {
  any: {
    am: /^v/i,
    pm: /^n/i,
    midnight: /^Mitte/i,
    noon: /^Mitta/i,
    morning: /morgens/i,
    afternoon: /nachmittags/i, // will never be matched. Afternoon is matched by `pm`
    evening: /abends/i,
    night: /nachts/i, // will never be matched. Night is matched by `pm`
  },
};

(match$11.match = {
  ordinalNumber: (0, _index2$2f.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$11,
    parsePattern: parseOrdinalNumberPattern$11,
    valueCallback: (value) => parseInt(value),
  }),

  era: (0, _index$4A.buildMatchFn)({
    matchPatterns: matchEraPatterns$11,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$11,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4A.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$11,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$11,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4A.buildMatchFn)({
    matchPatterns: matchMonthPatterns$11,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$11,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4A.buildMatchFn)({
    matchPatterns: matchDayPatterns$11,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$11,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4A.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$11,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$11,
    defaultParseWidth: "any",
  }),
});

de.de = void 0;
var _index$4z = formatDistance$25;
var _index2$2e = formatLong$1a;
var _index3$1d = formatRelative$25;
var _index4$1c = localize$12;
var _index5$1c = match$11;

/**
 * @category Locales
 * @summary German locale.
 * @language German
 * @iso-639-2 deu
 * @author Thomas Eilmsteiner [@DeMuu](https://github.com/DeMuu)
 * @author Asia [@asia-t](https://github.com/asia-t)
 * @author Van Vuong Ngo [@vanvuongngo](https://github.com/vanvuongngo)
 * @author RomanErnst [@pex](https://github.com/pex)
 * @author Philipp Keck [@Philipp91](https://github.com/Philipp91)
 */
(de.de = {
  code: "de",
  formatDistance: _index$4z.formatDistance,
  formatLong: _index2$2e.formatLong,
  formatRelative: _index3$1d.formatRelative,
  localize: _index4$1c.localize,
  match: _index5$1c.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var deAT = {};

var localize$11 = {};

localize$11.localize = void 0;
var _index$4y = buildLocalizeFn$1;

const eraValues$11 = {
  narrow: ["v.Chr.", "n.Chr."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["vor Christus", "nach Christus"],
};

const quarterValues$11 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"],
};

// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$11 = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "JÃ¤n",
    "Feb",
    "MÃ¤r",
    "Apr",
    "Mai",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Okt",
    "Nov",
    "Dez",
  ],

  wide: [
    "JÃ¤nner",
    "Februar",
    "MÃ¤rz",
    "April",
    "Mai",
    "Juni",
    "Juli",
    "August",
    "September",
    "Oktober",
    "November",
    "Dezember",
  ],
};

// https://st.unicode.org/cldr-apps/v#/de_AT/Gregorian/
const formattingMonthValues$d = {
  narrow: monthValues$11.narrow,
  abbreviated: [
    "JÃ¤n.",
    "Feb.",
    "MÃ¤rz",
    "Apr.",
    "Mai",
    "Juni",
    "Juli",
    "Aug.",
    "Sep.",
    "Okt.",
    "Nov.",
    "Dez.",
  ],

  wide: monthValues$11.wide,
};

const dayValues$11 = {
  narrow: ["S", "M", "D", "M", "D", "F", "S"],
  short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
  abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
  wide: [
    "Sonntag",
    "Montag",
    "Dienstag",
    "Mittwoch",
    "Donnerstag",
    "Freitag",
    "Samstag",
  ],
};

// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
const dayPeriodValues$11 = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachm.",
    evening: "Abend",
    night: "Nacht",
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht",
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht",
  },
};
const formattingDayPeriodValues$O = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachm.",
    evening: "abends",
    night: "nachts",
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts",
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts",
  },
};

const ordinalNumber$11 = (dirtyNumber) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$11.localize = {
  ordinalNumber: ordinalNumber$11,

  era: (0, _index$4y.buildLocalizeFn)({
    values: eraValues$11,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4y.buildLocalizeFn)({
    values: quarterValues$11,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4y.buildLocalizeFn)({
    values: monthValues$11,
    formattingValues: formattingMonthValues$d,
    defaultWidth: "wide",
  }),

  day: (0, _index$4y.buildLocalizeFn)({
    values: dayValues$11,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4y.buildLocalizeFn)({
    values: dayPeriodValues$11,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$O,
    defaultFormattingWidth: "wide",
  }),
});

deAT.deAT = void 0;
var _index$4x = formatDistance$25;
var _index2$2d = formatLong$1a;
var _index3$1c = formatRelative$25;
var _index4$1b = match$11;

var _index5$1b = localize$11; // difference to 'de' locale

/**
 * @category Locales
 * @summary German locale (Austria).
 * @language German
 * @iso-639-2 deu
 * @author Christoph Tobias Stenglein [@cstenglein](https://github.com/cstenglein)
 */
(deAT.deAT = {
  code: "de-AT",
  formatDistance: _index$4x.formatDistance,
  formatLong: _index2$2d.formatLong,
  formatRelative: _index3$1c.formatRelative,
  localize: _index5$1b.localize,
  match: _index4$1b.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var el = {};

var formatDistance$23 = {};

formatDistance$23.formatDistance = void 0;

const formatDistanceLocale$10 = {
  lessThanXSeconds: {
    one: "Î»Î¹Î³ÏÏÎµÏÎ¿ Î±ÏÏ Î­Î½Î± Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ¿",
    other: "Î»Î¹Î³ÏÏÎµÏÎ¿ Î±ÏÏ {{count}} Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±",
  },

  xSeconds: {
    one: "1 Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ¿",
    other: "{{count}} Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±",
  },

  halfAMinute: "Î¼Î¹ÏÏ Î»ÎµÏÏÏ",

  lessThanXMinutes: {
    one: "Î»Î¹Î³ÏÏÎµÏÎ¿ Î±ÏÏ Î­Î½Î± Î»ÎµÏÏÏ",
    other: "Î»Î¹Î³ÏÏÎµÏÎ¿ Î±ÏÏ {{count}} Î»ÎµÏÏÎ¬",
  },

  xMinutes: {
    one: "1 Î»ÎµÏÏÏ",
    other: "{{count}} Î»ÎµÏÏÎ¬",
  },

  aboutXHours: {
    one: "ÏÎµÏÎ¯ÏÎ¿Ï 1 ÏÏÎ±",
    other: "ÏÎµÏÎ¯ÏÎ¿Ï {{count}} ÏÏÎµÏ",
  },

  xHours: {
    one: "1 ÏÏÎ±",
    other: "{{count}} ÏÏÎµÏ",
  },

  xDays: {
    one: "1 Î·Î¼Î­ÏÎ±",
    other: "{{count}} Î·Î¼Î­ÏÎµÏ",
  },

  aboutXWeeks: {
    one: "ÏÎµÏÎ¯ÏÎ¿Ï 1 ÎµÎ²Î´Î¿Î¼Î¬Î´Î±",
    other: "ÏÎµÏÎ¯ÏÎ¿Ï {{count}} ÎµÎ²Î´Î¿Î¼Î¬Î´ÎµÏ",
  },

  xWeeks: {
    one: "1 ÎµÎ²Î´Î¿Î¼Î¬Î´Î±",
    other: "{{count}} ÎµÎ²Î´Î¿Î¼Î¬Î´ÎµÏ",
  },

  aboutXMonths: {
    one: "ÏÎµÏÎ¯ÏÎ¿Ï 1 Î¼Î®Î½Î±Ï",
    other: "ÏÎµÏÎ¯ÏÎ¿Ï {{count}} Î¼Î®Î½ÎµÏ",
  },

  xMonths: {
    one: "1 Î¼Î®Î½Î±Ï",
    other: "{{count}} Î¼Î®Î½ÎµÏ",
  },

  aboutXYears: {
    one: "ÏÎµÏÎ¯ÏÎ¿Ï 1 ÏÏÏÎ½Î¿",
    other: "ÏÎµÏÎ¯ÏÎ¿Ï {{count}} ÏÏÏÎ½Î¹Î±",
  },

  xYears: {
    one: "1 ÏÏÏÎ½Î¿",
    other: "{{count}} ÏÏÏÎ½Î¹Î±",
  },

  overXYears: {
    one: "ÏÎ¬Î½Ï Î±ÏÏ 1 ÏÏÏÎ½Î¿",
    other: "ÏÎ¬Î½Ï Î±ÏÏ {{count}} ÏÏÏÎ½Î¹Î±",
  },

  almostXYears: {
    one: "ÏÎµÏÎ¯ÏÎ¿Ï 1 ÏÏÏÎ½Î¿",
    other: "ÏÎµÏÎ¯ÏÎ¿Ï {{count}} ÏÏÏÎ½Î¹Î±",
  },
};

const formatDistance$22 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$10[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ÏÎµ " + result;
    } else {
      return result + " ÏÏÎ¹Î½";
    }
  }

  return result;
};
formatDistance$23.formatDistance = formatDistance$22;

var formatLong$19 = {};

formatLong$19.formatLong = void 0;
var _index$4w = buildFormatLongFn$1;

const dateFormats$19 = {
  full: "EEEE, d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "d/M/yy",
};

const timeFormats$19 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$19 = {
  full: "{{date}} - {{time}}",
  long: "{{date}} - {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$19.formatLong = {
  date: (0, _index$4w.buildFormatLongFn)({
    formats: dateFormats$19,
    defaultWidth: "full",
  }),

  time: (0, _index$4w.buildFormatLongFn)({
    formats: timeFormats$19,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4w.buildFormatLongFn)({
    formats: dateTimeFormats$19,
    defaultWidth: "full",
  }),
});

var formatRelative$23 = {};

formatRelative$23.formatRelative = void 0;

const formatRelativeLocale$11 = {
  lastWeek: (date) => {
    switch (date.getDay()) {
      case 6: //Î£Î¬Î²Î²Î±ÏÎ¿
        return "'ÏÎ¿ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î¿' eeee 'ÏÏÎ¹Ï' p";
      default:
        return "'ÏÎ·Î½ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î·' eeee 'ÏÏÎ¹Ï' p";
    }
  },
  yesterday: "'ÏÎ¸ÎµÏ ÏÏÎ¹Ï' p",
  today: "'ÏÎ®Î¼ÎµÏÎ± ÏÏÎ¹Ï' p",
  tomorrow: "'Î±ÏÏÎ¹Î¿ ÏÏÎ¹Ï' p",
  nextWeek: "eeee 'ÏÏÎ¹Ï' p",
  other: "P",
};

const formatRelative$22 = (token, date) => {
  const format = formatRelativeLocale$11[token];

  if (typeof format === "function") return format(date);

  return format;
};
formatRelative$23.formatRelative = formatRelative$22;

var localize$10 = {};

localize$10.localize = void 0;
var _index$4v = buildLocalizeFn$1;

const eraValues$10 = {
  narrow: ["ÏÎ§", "Î¼Î§"],
  abbreviated: ["Ï.Î§.", "Î¼.Î§."],
  wide: ["ÏÏÎ¿ Î§ÏÎ¹ÏÏÎ¿Ï", "Î¼ÎµÏÎ¬ Î§ÏÎ¹ÏÏÏÎ½"],
};

const quarterValues$10 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Î¤1", "Î¤2", "Î¤3", "Î¤4"],
  wide: ["1Î¿ ÏÏÎ¯Î¼Î·Î½Î¿", "2Î¿ ÏÏÎ¯Î¼Î·Î½Î¿", "3Î¿ ÏÏÎ¯Î¼Î·Î½Î¿", "4Î¿ ÏÏÎ¯Î¼Î·Î½Î¿"],
};

const monthValues$10 = {
  narrow: ["Î", "Î¦", "Î", "Î", "Î", "Î", "Î", "Î", "Î£", "Î", "Î", "Î"],
  abbreviated: [
    "ÎÎ±Î½",
    "Î¦ÎµÎ²",
    "ÎÎ¬Ï",
    "ÎÏÏ",
    "ÎÎ¬Î¹",
    "ÎÎ¿ÏÎ½",
    "ÎÎ¿ÏÎ»",
    "ÎÏÎ³",
    "Î£ÎµÏ",
    "ÎÎºÏ",
    "ÎÎ¿Î­",
    "ÎÎµÎº",
  ],

  wide: [
    "ÎÎ±Î½Î¿ÏÎ¬ÏÎ¹Î¿Ï",
    "Î¦ÎµÎ²ÏÎ¿ÏÎ¬ÏÎ¹Î¿Ï",
    "ÎÎ¬ÏÏÎ¹Î¿Ï",
    "ÎÏÏÎ¯Î»Î¹Î¿Ï",
    "ÎÎ¬Î¹Î¿Ï",
    "ÎÎ¿ÏÎ½Î¹Î¿Ï",
    "ÎÎ¿ÏÎ»Î¹Î¿Ï",
    "ÎÏÎ³Î¿ÏÏÏÎ¿Ï",
    "Î£ÎµÏÏÎ­Î¼Î²ÏÎ¹Î¿Ï",
    "ÎÎºÏÏÎ²ÏÎ¹Î¿Ï",
    "ÎÎ¿Î­Î¼Î²ÏÎ¹Î¿Ï",
    "ÎÎµÎºÎ­Î¼Î²ÏÎ¹Î¿Ï",
  ],
};

const formattingMonthValues$c = {
  narrow: ["Î", "Î¦", "Î", "Î", "Î", "Î", "Î", "Î", "Î£", "Î", "Î", "Î"],
  abbreviated: [
    "ÎÎ±Î½",
    "Î¦ÎµÎ²",
    "ÎÎ±Ï",
    "ÎÏÏ",
    "ÎÎ±Î",
    "ÎÎ¿ÏÎ½",
    "ÎÎ¿ÏÎ»",
    "ÎÏÎ³",
    "Î£ÎµÏ",
    "ÎÎºÏ",
    "ÎÎ¿Îµ",
    "ÎÎµÎº",
  ],

  wide: [
    "ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï",
    "Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï",
    "ÎÎ±ÏÏÎ¯Î¿Ï",
    "ÎÏÏÎ¹Î»Î¯Î¿Ï",
    "ÎÎ±ÎÎ¿Ï",
    "ÎÎ¿ÏÎ½Î¯Î¿Ï",
    "ÎÎ¿ÏÎ»Î¯Î¿Ï",
    "ÎÏÎ³Î¿ÏÏÏÎ¿Ï",
    "Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï",
    "ÎÎºÏÏÎ²ÏÎ¯Î¿Ï",
    "ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï",
    "ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï",
  ],
};

const dayValues$10 = {
  narrow: ["Î", "Î", "T", "Î¤", "Î ", "Î ", "Î£"],
  short: ["ÎÏ", "ÎÎµ", "Î¤Ï", "Î¤Îµ", "Î Î­", "Î Î±", "Î£Î¬"],
  abbreviated: ["ÎÏÏ", "ÎÎµÏ", "Î¤ÏÎ¯", "Î¤ÎµÏ", "Î Î­Î¼", "Î Î±Ï", "Î£Î¬Î²"],
  wide: [
    "ÎÏÏÎ¹Î±ÎºÎ®",
    "ÎÎµÏÏÎ­ÏÎ±",
    "Î¤ÏÎ¯ÏÎ·",
    "Î¤ÎµÏÎ¬ÏÏÎ·",
    "Î Î­Î¼ÏÏÎ·",
    "Î Î±ÏÎ±ÏÎºÎµÏÎ®",
    "Î£Î¬Î²Î²Î±ÏÎ¿",
  ],
};

const dayPeriodValues$10 = {
  narrow: {
    am: "ÏÎ¼",
    pm: "Î¼Î¼",
    midnight: "Î¼ÎµÏÎ¬Î½ÏÏÏÎ±",
    noon: "Î¼ÎµÏÎ·Î¼Î­ÏÎ¹",
    morning: "ÏÏÏÎ¯",
    afternoon: "Î±ÏÏÎ³ÎµÏÎ¼Î±",
    evening: "Î²ÏÎ¬Î´Ï",
    night: "Î½ÏÏÏÎ±",
  },
  abbreviated: {
    am: "Ï.Î¼.",
    pm: "Î¼.Î¼.",
    midnight: "Î¼ÎµÏÎ¬Î½ÏÏÏÎ±",
    noon: "Î¼ÎµÏÎ·Î¼Î­ÏÎ¹",
    morning: "ÏÏÏÎ¯",
    afternoon: "Î±ÏÏÎ³ÎµÏÎ¼Î±",
    evening: "Î²ÏÎ¬Î´Ï",
    night: "Î½ÏÏÏÎ±",
  },
  wide: {
    am: "Ï.Î¼.",
    pm: "Î¼.Î¼.",
    midnight: "Î¼ÎµÏÎ¬Î½ÏÏÏÎ±",
    noon: "Î¼ÎµÏÎ·Î¼Î­ÏÎ¹",
    morning: "ÏÏÏÎ¯",
    afternoon: "Î±ÏÏÎ³ÎµÏÎ¼Î±",
    evening: "Î²ÏÎ¬Î´Ï",
    night: "Î½ÏÏÏÎ±",
  },
};

const ordinalNumber$10 = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = options?.unit;
  let suffix;

  if (unit === "year" || unit === "month") {
    suffix = "Î¿Ï";
  } else if (
    unit === "week" ||
    unit === "dayOfYear" ||
    unit === "day" ||
    unit === "hour" ||
    unit === "date"
  ) {
    suffix = "Î·";
  } else {
    suffix = "Î¿";
  }

  return number + suffix;
};

(localize$10.localize = {
  ordinalNumber: ordinalNumber$10,

  era: (0, _index$4v.buildLocalizeFn)({
    values: eraValues$10,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4v.buildLocalizeFn)({
    values: quarterValues$10,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4v.buildLocalizeFn)({
    values: monthValues$10,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$c,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$4v.buildLocalizeFn)({
    values: dayValues$10,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4v.buildLocalizeFn)({
    values: dayPeriodValues$10,
    defaultWidth: "wide",
  }),
});

var match$10 = {};

match$10.match = void 0;

var _index$4u = buildMatchFn$1;
var _index2$2c = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$10 = /^(\d+)(Î¿Ï|Î·|Î¿)?/i;
const parseOrdinalNumberPattern$10 = /\d+/i;

const matchEraPatterns$10 = {
  narrow: /^(ÏÎ§|Î¼Î§)/i,
  abbreviated: /^(Ï\.?\s?Ï\.?|Ï\.?\s?Îº\.?\s?Ï\.?|Î¼\.?\s?Ï\.?|Îº\.?\s?Ï\.?)/i,
  wide: /^(ÏÏÎ¿ Î§ÏÎ¹ÏÏÎ¿(Ï|Ï)|ÏÏÎ¹Î½ Î±Ï(Ï|Î¿) ÏÎ·Î½ ÎÎ¿Î¹Î½(Î®|Î·) Î§ÏÎ¿Î½Î¿Î»Î¿Î³(Î¯|Î¹)Î±|Î¼ÎµÏ(Î¬|Î±) Î§ÏÎ¹ÏÏ(Ï|Î¿)Î½|ÎÎ¿Î¹Î½(Î®|Î·) Î§ÏÎ¿Î½Î¿Î»Î¿Î³(Î¯|Î¹)Î±)/i,
};
const parseEraPatterns$10 = {
  any: [/^Ï/i, /^(Î¼|Îº)/i],
};

const matchQuarterPatterns$10 = {
  narrow: /^[1234]/i,
  abbreviated: /^Ï[1234]/i,
  wide: /^[1234]Î¿? ÏÏ(Î¯|Î¹)Î¼Î·Î½Î¿/i,
};
const parseQuarterPatterns$10 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$10 = {
  narrow: /^[Î¹ÏÎ¼Î±Î¼Î¹Î¹Î±ÏÎ¿Î½Î´]/i,
  abbreviated:
    /^(Î¹Î±Î½|ÏÎµÎ²|Î¼[Î¬Î±]Ï|Î±ÏÏ|Î¼[Î¬Î±][Î¹Î]|Î¹Î¿[ÏÏ]Î½|Î¹Î¿[ÏÏ]Î»|Î±[ÏÏ]Î³|ÏÎµÏ|Î¿ÎºÏ|Î½Î¿[Î­Îµ]|Î´ÎµÎº)/i,
  wide: /^(Î¼[Î¬Î±][Î¹Î]|Î±[ÏÏ]Î³Î¿[ÏÏ]ÏÏ)(Î¿Ï|Î¿Ï)|(Î¹Î±Î½Î¿Ï[Î¬Î±]Ï|ÏÎµÎ²ÏÎ¿Ï[Î¬Î±]Ï|Î¼[Î¬Î±]ÏÏ|Î±ÏÏ[Î¯Î¹]Î»|Î¹Î¿[ÏÏ]Î½|Î¹Î¿[ÏÏ]Î»|ÏÎµÏÏ[Î­Îµ]Î¼Î²Ï|Î¿ÎºÏ[ÏÏ]Î²Ï|Î½Î¿[Î­Îµ]Î¼Î²Ï|Î´ÎµÎº[Î­Îµ]Î¼Î²Ï)(Î¹Î¿Ï|Î¯Î¿Ï)/i,
};
const parseMonthPatterns$10 = {
  narrow: [
    /^Î¹/i,
    /^Ï/i,
    /^Î¼/i,
    /^Î±/i,
    /^Î¼/i,
    /^Î¹/i,
    /^Î¹/i,
    /^Î±/i,
    /^Ï/i,
    /^Î¿/i,
    /^Î½/i,
    /^Î´/i,
  ],

  any: [
    /^Î¹Î±/i,
    /^Ï/i,
    /^Î¼[Î¬Î±]Ï/i,
    /^Î±Ï/i,
    /^Î¼[Î¬Î±][Î¹Î]/i,
    /^Î¹Î¿[ÏÏ]Î½/i,
    /^Î¹Î¿[ÏÏ]Î»/i,
    /^Î±[ÏÏ]/i,
    /^Ï/i,
    /^Î¿/i,
    /^Î½/i,
    /^Î´/i,
  ],
};

const matchDayPatterns$10 = {
  narrow: /^[ÎºÎ´ÏÏÏ]/i,
  short: /^(ÎºÏ|Î´Îµ|ÏÏ|ÏÎµ|Ï[ÎµÎ­]|Ï[Î±Î¬]|Ï[Î±Î¬])/i,
  abbreviated: /^(ÎºÏÏ|Î´ÎµÏ|ÏÏÎ¹|ÏÎµÏ|ÏÎµÎ¼|ÏÎ±Ï|ÏÎ±Î²)/i,
  wide: /^(ÎºÏÏÎ¹Î±Îº(Î®|Î·)|Î´ÎµÏÏ(Î­|Îµ)ÏÎ±|ÏÏ(Î¯|Î¹)ÏÎ·|ÏÎµÏ(Î¬|Î±)ÏÏÎ·|Ï(Î­|Îµ)Î¼ÏÏÎ·|ÏÎ±ÏÎ±ÏÎºÎµÏ(Î®|Î·)|Ï(Î¬|Î±)Î²Î²Î±ÏÎ¿)/i,
};
const parseDayPatterns$10 = {
  narrow: [/^Îº/i, /^Î´/i, /^Ï/i, /^Ï/i, /^Ï/i, /^Ï/i, /^Ï/i],
  any: [/^Îº/i, /^Î´/i, /^ÏÏ/i, /^ÏÎµ/i, /^Ï[ÎµÎ­]/i, /^Ï[Î±Î¬]/i, /^Ï/i],
};

const matchDayPeriodPatterns$10 = {
  narrow:
    /^(ÏÎ¼|Î¼Î¼|Î¼ÎµÏ(Î¬|Î±)Î½ÏÏÏÎ±|Î¼ÎµÏÎ·Î¼(Î­|Îµ)ÏÎ¹|ÏÏÏ(Î¯|Î¹)|Î±Ï(Ï|Î¿)Î³ÎµÏÎ¼Î±|Î²Ï(Î¬|Î±)Î´Ï|Î½(Ï|Ï)ÏÏÎ±)/i,
  any: /^([ÏÎ¼]\.?\s?Î¼\.?|Î¼ÎµÏ(Î¬|Î±)Î½ÏÏÏÎ±|Î¼ÎµÏÎ·Î¼(Î­|Îµ)ÏÎ¹|ÏÏÏ(Î¯|Î¹)|Î±Ï(Ï|Î¿)Î³ÎµÏÎ¼Î±|Î²Ï(Î¬|Î±)Î´Ï|Î½(Ï|Ï)ÏÏÎ±)/i,
};
const parseDayPeriodPatterns$10 = {
  any: {
    am: /^ÏÎ¼|Ï\.\s?Î¼\./i,
    pm: /^Î¼Î¼|Î¼\.\s?Î¼\./i,
    midnight: /^Î¼ÎµÏÎ¬Î½/i,
    noon: /^Î¼ÎµÏÎ·Î¼(Î­|Îµ)/i,
    morning: /ÏÏÏ(Î¯|Î¹)/i,
    afternoon: /Î±Ï(Ï|Î¿)Î³ÎµÏÎ¼Î±/i,
    evening: /Î²Ï(Î¬|Î±)Î´Ï/i,
    night: /Î½(Ï|Ï)ÏÏÎ±/i,
  },
};

(match$10.match = {
  ordinalNumber: (0, _index2$2c.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$10,
    parsePattern: parseOrdinalNumberPattern$10,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4u.buildMatchFn)({
    matchPatterns: matchEraPatterns$10,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$10,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4u.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$10,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$10,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4u.buildMatchFn)({
    matchPatterns: matchMonthPatterns$10,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$10,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4u.buildMatchFn)({
    matchPatterns: matchDayPatterns$10,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$10,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4u.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$10,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$10,
    defaultParseWidth: "any",
  }),
});

el.el = void 0;
var _index$4t = formatDistance$23;
var _index2$2b = formatLong$19;
var _index3$1b = formatRelative$23;
var _index4$1a = localize$10;
var _index5$1a = match$10;

/**
 * @category Locales
 * @summary Greek locale.
 * @language Greek
 * @iso-639-2 ell
 * @author Fanis Katsimpas [@fanixk](https://github.com/fanixk)
 * @author Theodoros Orfanidis [@teoulas](https://github.com/teoulas)
 */
(el.el = {
  code: "el",
  formatDistance: _index$4t.formatDistance,
  formatLong: _index2$2b.formatLong,
  formatRelative: _index3$1b.formatRelative,
  localize: _index4$1a.localize,
  match: _index5$1a.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var enAU = {};

var formatDistance$21 = {};

formatDistance$21.formatDistance = void 0;

const formatDistanceLocale$$ = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds",
  },

  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds",
  },

  halfAMinute: "half a minute",

  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes",
  },

  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes",
  },

  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours",
  },

  xHours: {
    one: "1 hour",
    other: "{{count}} hours",
  },

  xDays: {
    one: "1 day",
    other: "{{count}} days",
  },

  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks",
  },

  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months",
  },

  xMonths: {
    one: "1 month",
    other: "{{count}} months",
  },

  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years",
  },

  xYears: {
    one: "1 year",
    other: "{{count}} years",
  },

  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years",
  },

  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years",
  },
};

const formatDistance$20 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$$[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }

  return result;
};
formatDistance$21.formatDistance = formatDistance$20;

var formatLong$18 = {};

formatLong$18.formatLong = void 0;
var _index$4s = buildFormatLongFn$1;

const dateFormats$18 = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$18 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$18 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$18.formatLong = {
  date: (0, _index$4s.buildFormatLongFn)({
    formats: dateFormats$18,
    defaultWidth: "full",
  }),

  time: (0, _index$4s.buildFormatLongFn)({
    formats: timeFormats$18,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4s.buildFormatLongFn)({
    formats: dateTimeFormats$18,
    defaultWidth: "full",
  }),
});

var formatRelative$21 = {};

formatRelative$21.formatRelative = void 0;

const formatRelativeLocale$10 = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P",
};

const formatRelative$20 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$10[token];
formatRelative$21.formatRelative = formatRelative$20;

var localize$$ = {};

localize$$.localize = void 0;
var _index$4r = buildLocalizeFn$1;

const eraValues$$ = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"],
};

const quarterValues$$ = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$$ = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ],

  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
};

const dayValues$$ = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ],
};

const dayPeriodValues$$ = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
};

const formattingDayPeriodValues$N = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
};

const ordinalNumber$$ = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};

(localize$$.localize = {
  ordinalNumber: ordinalNumber$$,

  era: (0, _index$4r.buildLocalizeFn)({
    values: eraValues$$,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4r.buildLocalizeFn)({
    values: quarterValues$$,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$4r.buildLocalizeFn)({
    values: monthValues$$,
    defaultWidth: "wide",
  }),

  day: (0, _index$4r.buildLocalizeFn)({
    values: dayValues$$,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4r.buildLocalizeFn)({
    values: dayPeriodValues$$,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$N,
    defaultFormattingWidth: "wide",
  }),
});

var match$$ = {};

match$$.match = void 0;

var _index$4q = buildMatchFn$1;
var _index2$2a = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$$ = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$$ = /\d+/i;

const matchEraPatterns$$ = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i,
};
const parseEraPatterns$$ = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns$$ = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i,
};
const parseQuarterPatterns$$ = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$$ = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
};
const parseMonthPatterns$$ = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$$ = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
};
const parseDayPatterns$$ = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$$ = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns$$ = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

(match$$.match = {
  ordinalNumber: (0, _index2$2a.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$$,
    parsePattern: parseOrdinalNumberPattern$$,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$4q.buildMatchFn)({
    matchPatterns: matchEraPatterns$$,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$$,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$4q.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$$,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$$,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$4q.buildMatchFn)({
    matchPatterns: matchMonthPatterns$$,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$$,
    defaultParseWidth: "any",
  }),

  day: (0, _index$4q.buildMatchFn)({
    matchPatterns: matchDayPatterns$$,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$$,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$4q.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$$,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$$,
    defaultParseWidth: "any",
  }),
});

enAU.enAU = void 0;
var _index$4p = formatDistance$21;
var _index2$29 = formatLong$18;
var _index3$1a = formatRelative$21;
var _index4$19 = localize$$;
var _index5$19 = match$$;

/**
 * @category Locales
 * @summary English locale (Australia).
 * @language English
 * @iso-639-2 eng
 * @author Julien Malige [@JulienMalige](https://github.com/JulienMalige)
 */
(enAU.enAU = {
  code: "en-AU",
  formatDistance: _index$4p.formatDistance,
  formatLong: _index2$29.formatLong,
  formatRelative: _index3$1a.formatRelative,
  localize: _index4$19.localize,
  match: _index5$19.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var enCA = {};

var formatDistance$1$ = {};

formatDistance$1$.formatDistance = void 0;

const formatDistanceLocale$_ = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds",
  },

  xSeconds: {
    one: "a second",
    other: "{{count}} seconds",
  },

  halfAMinute: "half a minute",

  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes",
  },

  xMinutes: {
    one: "a minute",
    other: "{{count}} minutes",
  },

  aboutXHours: {
    one: "about an hour",
    other: "about {{count}} hours",
  },

  xHours: {
    one: "an hour",
    other: "{{count}} hours",
  },

  xDays: {
    one: "a day",
    other: "{{count}} days",
  },

  aboutXWeeks: {
    one: "about a week",
    other: "about {{count}} weeks",
  },

  xWeeks: {
    one: "a week",
    other: "{{count}} weeks",
  },

  aboutXMonths: {
    one: "about a month",
    other: "about {{count}} months",
  },

  xMonths: {
    one: "a month",
    other: "{{count}} months",
  },

  aboutXYears: {
    one: "about a year",
    other: "about {{count}} years",
  },

  xYears: {
    one: "a year",
    other: "{{count}} years",
  },

  overXYears: {
    one: "over a year",
    other: "over {{count}} years",
  },

  almostXYears: {
    one: "almost a year",
    other: "almost {{count}} years",
  },
};

const formatDistance$1_ = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$_[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }

  return result;
};
formatDistance$1$.formatDistance = formatDistance$1_;

var formatLong$17 = {};

formatLong$17.formatLong = void 0;
var _index$4o = buildFormatLongFn$1;

const dateFormats$17 = {
  full: "EEEE, MMMM do, yyyy",
  long: "MMMM do, yyyy",
  medium: "MMM d, yyyy",
  short: "yyyy-MM-dd",
};

const timeFormats$17 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$17 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$17.formatLong = {
  date: (0, _index$4o.buildFormatLongFn)({
    formats: dateFormats$17,
    defaultWidth: "full",
  }),

  time: (0, _index$4o.buildFormatLongFn)({
    formats: timeFormats$17,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4o.buildFormatLongFn)({
    formats: dateTimeFormats$17,
    defaultWidth: "full",
  }),
});

enCA.enCA = void 0;
var _index$4n = formatRelative$21;
var _index2$28 = localize$$;
var _index3$19 = match$$;

var _index4$18 = formatDistance$1$;
var _index5$18 = formatLong$17;

/**
 * @category Locales
 * @summary English locale (Canada).
 * @language English
 * @iso-639-2 eng
 * @author Mark Owsiak [@markowsiak](https://github.com/markowsiak)
 * @author Marco Imperatore [@mimperatore](https://github.com/mimperatore)
 */
(enCA.enCA = {
  code: "en-CA",
  formatDistance: _index4$18.formatDistance,
  formatLong: _index5$18.formatLong,
  formatRelative: _index$4n.formatRelative,
  localize: _index2$28.localize,
  match: _index3$19.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var enGB = {};

var formatLong$16 = {};

formatLong$16.formatLong = void 0;
var _index$4m = buildFormatLongFn$1;

const dateFormats$16 = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$16 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$16 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$16.formatLong = {
  date: (0, _index$4m.buildFormatLongFn)({
    formats: dateFormats$16,
    defaultWidth: "full",
  }),

  time: (0, _index$4m.buildFormatLongFn)({
    formats: timeFormats$16,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4m.buildFormatLongFn)({
    formats: dateTimeFormats$16,
    defaultWidth: "full",
  }),
});

enGB.enGB = void 0;
var _index$4l = formatDistance$21;
var _index2$27 = formatRelative$21;
var _index3$18 = localize$$;
var _index4$17 = match$$;

var _index5$17 = formatLong$16;

/**
 * @category Locales
 * @summary English locale (United Kingdom).
 * @language English
 * @iso-639-2 eng
 * @author Alex [@glintik](https://github.com/glintik)
 */
(enGB.enGB = {
  code: "en-GB",
  formatDistance: _index$4l.formatDistance,
  formatLong: _index5$17.formatLong,
  formatRelative: _index2$27.formatRelative,
  localize: _index3$18.localize,
  match: _index4$17.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var enIE = {};

enIE.enIE = void 0;
var _index$4k = formatDistance$21;
var _index2$26 = formatRelative$21;
var _index3$17 = localize$$;
var _index4$16 = match$$;

var _index5$16 = formatLong$16;

/**
 * @category Locales
 * @summary English locale (Ireland).
 * @language English
 * @iso-639-2 eng
 * @author Tetiana [@tan75](https://github.com/tan75)
 */
(enIE.enIE = {
  code: "en-IE",
  formatDistance: _index$4k.formatDistance,
  formatLong: _index5$16.formatLong,
  formatRelative: _index2$26.formatRelative,
  localize: _index3$17.localize,
  match: _index4$16.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var enIN = {};

var formatLong$15 = {};

formatLong$15.formatLong = void 0;
var _index$4j = buildFormatLongFn$1;

const dateFormats$15 = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM, yyyy",
  medium: "d MMM, yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$15 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$15 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$15.formatLong = {
  date: (0, _index$4j.buildFormatLongFn)({
    formats: dateFormats$15,
    defaultWidth: "full",
  }),

  time: (0, _index$4j.buildFormatLongFn)({
    formats: timeFormats$15,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4j.buildFormatLongFn)({
    formats: dateTimeFormats$15,
    defaultWidth: "full",
  }),
});

enIN.enIN = void 0;
var _index$4i = formatDistance$21;
var _index2$25 = formatRelative$21;
var _index3$16 = localize$$;
var _index4$15 = match$$;

var _index5$15 = formatLong$15;

/**
 * @category Locales
 * @summary English locale (India).
 * @language English
 * @iso-639-2 eng
 * @author Galeel Bhasha Satthar [@gbhasha](https://github.com/gbhasha)
 */
(enIN.enIN = {
  code: "en-IN",
  formatDistance: _index$4i.formatDistance,
  formatLong: _index5$15.formatLong,
  formatRelative: _index2$25.formatRelative,
  localize: _index3$16.localize,
  match: _index4$15.match,
  options: {
    weekStartsOn: 1, // Monday is the first day of the week.
    firstWeekContainsDate: 4, // The week that contains Jan 4th is the first week of the year.
  },
});

var enNZ = {};

var formatLong$14 = {};

formatLong$14.formatLong = void 0;
var _index$4h = buildFormatLongFn$1;

const dateFormats$14 = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$14 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$14 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$14.formatLong = {
  date: (0, _index$4h.buildFormatLongFn)({
    formats: dateFormats$14,
    defaultWidth: "full",
  }),

  time: (0, _index$4h.buildFormatLongFn)({
    formats: timeFormats$14,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4h.buildFormatLongFn)({
    formats: dateTimeFormats$14,
    defaultWidth: "full",
  }),
});

enNZ.enNZ = void 0;
var _index$4g = formatDistance$21;
var _index2$24 = formatRelative$21;
var _index3$15 = localize$$;
var _index4$14 = match$$;

var _index5$14 = formatLong$14;

/**
 * @category Locales
 * @summary English locale (New Zealand).
 * @language English
 * @iso-639-2 eng
 * @author Murray Lucas [@muntact](https://github.com/muntact)
 */
(enNZ.enNZ = {
  code: "en-NZ",
  formatDistance: _index$4g.formatDistance,
  formatLong: _index5$14.formatLong,
  formatRelative: _index2$24.formatRelative,
  localize: _index3$15.localize,
  match: _index4$14.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var enUS = {};

var formatLong$13 = {};

formatLong$13.formatLong = void 0;
var _index$4f = buildFormatLongFn$1;

const dateFormats$13 = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$13 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$13 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$13.formatLong = {
  date: (0, _index$4f.buildFormatLongFn)({
    formats: dateFormats$13,
    defaultWidth: "full",
  }),

  time: (0, _index$4f.buildFormatLongFn)({
    formats: timeFormats$13,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4f.buildFormatLongFn)({
    formats: dateTimeFormats$13,
    defaultWidth: "full",
  }),
});

enUS.enUS = void 0;
var _index$4e = formatDistance$21;
var _index2$23 = formatLong$13;
var _index3$14 = formatRelative$21;
var _index4$13 = localize$$;
var _index5$13 = match$$;

/**
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */
(enUS.enUS = {
  code: "en-US",
  formatDistance: _index$4e.formatDistance,
  formatLong: _index2$23.formatLong,
  formatRelative: _index3$14.formatRelative,
  localize: _index4$13.localize,
  match: _index5$13.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var enZA = {};

var formatLong$12 = {};

formatLong$12.formatLong = void 0;
var _index$4d = buildFormatLongFn$1;

const dateFormats$12 = {
  full: "EEEE, dd MMMM yyyy",
  long: "dd MMMM yyyy",
  medium: "dd MMM yyyy",
  short: "yyyy/MM/dd",
};

const timeFormats$12 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$12 = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$12.formatLong = {
  date: (0, _index$4d.buildFormatLongFn)({
    formats: dateFormats$12,
    defaultWidth: "full",
  }),

  time: (0, _index$4d.buildFormatLongFn)({
    formats: timeFormats$12,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4d.buildFormatLongFn)({
    formats: dateTimeFormats$12,
    defaultWidth: "full",
  }),
});

enZA.enZA = void 0;
var _index$4c = formatDistance$21;
var _index2$22 = formatRelative$21;
var _index3$13 = localize$$;
var _index4$12 = match$$;

var _index5$12 = formatLong$12;

/**
 * @category Locales
 * @summary English locale (South Africa).
 * @language English
 * @iso-639-2 eng
 * @author Shaila Kavrakova [@shaykav](https://github.com/shaykav)
 */
(enZA.enZA = {
  code: "en-ZA",
  formatDistance: _index$4c.formatDistance,
  formatLong: _index5$12.formatLong,
  formatRelative: _index2$22.formatRelative,
  localize: _index3$13.localize,
  match: _index4$12.match,
  options: {
    weekStartsOn: 0, // Sunday is the first day of the week.
    firstWeekContainsDate: 1, // The week that contains Jan 1st is the first week of the year.
  },
});

var eo = {};

var formatDistance$1Z = {};

formatDistance$1Z.formatDistance = void 0;

const formatDistanceLocale$Z = {
  lessThanXSeconds: {
    one: "malpli ol sekundo",
    other: "malpli ol {{count}} sekundoj",
  },

  xSeconds: {
    one: "1 sekundo",
    other: "{{count}} sekundoj",
  },

  halfAMinute: "duonminuto",

  lessThanXMinutes: {
    one: "malpli ol minuto",
    other: "malpli ol {{count}} minutoj",
  },

  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutoj",
  },

  aboutXHours: {
    one: "proksimume 1 horo",
    other: "proksimume {{count}} horoj",
  },

  xHours: {
    one: "1 horo",
    other: "{{count}} horoj",
  },

  xDays: {
    one: "1 tago",
    other: "{{count}} tagoj",
  },

  aboutXMonths: {
    one: "proksimume 1 monato",
    other: "proksimume {{count}} monatoj",
  },

  xWeeks: {
    one: "1 semajno",
    other: "{{count}} semajnoj",
  },

  aboutXWeeks: {
    one: "proksimume 1 semajno",
    other: "proksimume {{count}} semajnoj",
  },

  xMonths: {
    one: "1 monato",
    other: "{{count}} monatoj",
  },

  aboutXYears: {
    one: "proksimume 1 jaro",
    other: "proksimume {{count}} jaroj",
  },

  xYears: {
    one: "1 jaro",
    other: "{{count}} jaroj",
  },

  overXYears: {
    one: "pli ol 1 jaro",
    other: "pli ol {{count}} jaroj",
  },

  almostXYears: {
    one: "preskaÅ­ 1 jaro",
    other: "preskaÅ­ {{count}} jaroj",
  },
};

const formatDistance$1Y = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$Z[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options?.comparison && options.comparison > 0) {
      return "post " + result;
    } else {
      return "antaÅ­ " + result;
    }
  }

  return result;
};
formatDistance$1Z.formatDistance = formatDistance$1Y;

var formatLong$11 = {};

formatLong$11.formatLong = void 0;
var _index$4b = buildFormatLongFn$1;

const dateFormats$11 = {
  full: "EEEE, do 'de' MMMM y",
  long: "y-MMMM-dd",
  medium: "y-MMM-dd",
  short: "yyyy-MM-dd",
};

const timeFormats$11 = {
  full: "Ho 'horo kaj' m:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$11 = {
  any: "{{date}} {{time}}",
};

(formatLong$11.formatLong = {
  date: (0, _index$4b.buildFormatLongFn)({
    formats: dateFormats$11,
    defaultWidth: "full",
  }),

  time: (0, _index$4b.buildFormatLongFn)({
    formats: timeFormats$11,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$4b.buildFormatLongFn)({
    formats: dateTimeFormats$11,
    defaultWidth: "any",
  }),
});

var formatRelative$1$ = {};

formatRelative$1$.formatRelative = void 0;

const formatRelativeLocale$$ = {
  lastWeek: "'pasinta' eeee 'je' p",
  yesterday: "'hieraÅ­ je' p",
  today: "'hodiaÅ­ je' p",
  tomorrow: "'morgaÅ­ je' p",
  nextWeek: "eeee 'je' p",
  other: "P",
};

const formatRelative$1_ = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$$[token];
formatRelative$1$.formatRelative = formatRelative$1_;

var localize$_ = {};

localize$_.localize = void 0;

var _index$4a = buildLocalizeFn$1;

const eraValues$_ = {
  narrow: ["aK", "pK"],
  abbreviated: ["a.K.E.", "p.K.E."],
  wide: ["antaÅ­ Komuna Erao", "Komuna Erao"],
};

const quarterValues$_ = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: [
    "1-a kvaronjaro",
    "2-a kvaronjaro",
    "3-a kvaronjaro",
    "4-a kvaronjaro",
  ],
};

const monthValues$_ = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "maj",
    "jun",
    "jul",
    "aÅ­g",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januaro",
    "februaro",
    "marto",
    "aprilo",
    "majo",
    "junio",
    "julio",
    "aÅ­gusto",
    "septembro",
    "oktobro",
    "novembro",
    "decembro",
  ],
};

const dayValues$_ = {
  narrow: ["D", "L", "M", "M", "Ä´", "V", "S"],
  short: ["di", "lu", "ma", "me", "Äµa", "ve", "sa"],
  abbreviated: ["dim", "lun", "mar", "mer", "ÄµaÅ­", "ven", "sab"],
  wide: [
    "dimanÄo",
    "lundo",
    "mardo",
    "merkredo",
    "ÄµaÅ­do",
    "vendredo",
    "sabato",
  ],
};

const dayPeriodValues$_ = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "noktomezo",
    noon: "tagmezo",
    morning: "matene",
    afternoon: "posttagmeze",
    evening: "vespere",
    night: "nokte",
  },
  abbreviated: {
    am: "a.t.m.",
    pm: "p.t.m.",
    midnight: "noktomezo",
    noon: "tagmezo",
    morning: "matene",
    afternoon: "posttagmeze",
    evening: "vespere",
    night: "nokte",
  },
  wide: {
    am: "antaÅ­tagmeze",
    pm: "posttagmeze",
    midnight: "noktomezo",
    noon: "tagmezo",
    morning: "matene",
    afternoon: "posttagmeze",
    evening: "vespere",
    night: "nokte",
  },
};

const ordinalNumber$_ = (dirtyNumber) => {
  const number = Number(dirtyNumber);
  return number + "-a";
};

(localize$_.localize = {
  ordinalNumber: ordinalNumber$_,

  era: (0, _index$4a.buildLocalizeFn)({
    values: eraValues$_,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$4a.buildLocalizeFn)({
    values: quarterValues$_,
    defaultWidth: "wide",
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    },
  }),

  month: (0, _index$4a.buildLocalizeFn)({
    values: monthValues$_,
    defaultWidth: "wide",
  }),

  day: (0, _index$4a.buildLocalizeFn)({
    values: dayValues$_,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$4a.buildLocalizeFn)({
    values: dayPeriodValues$_,
    defaultWidth: "wide",
  }),
});

var match$_ = {};

match$_.match = void 0;
var _index$49 = buildMatchPatternFn$1;
var _index2$21 = buildMatchFn$1;

const matchOrdinalNumberPattern$_ = /^(\d+)(-?a)?/i;
const parseOrdinalNumberPattern$_ = /\d+/i;

const matchEraPatterns$_ = {
  narrow: /^([ap]k)/i,
  abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
  wide: /^((antaÇ |post )?komuna erao)/i,
};
const parseEraPatterns$_ = {
  any: [/^a/i, /^[kp]/i],
};

const matchQuarterPatterns$_ = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](-?a)? kvaronjaro/i,
};
const parseQuarterPatterns$_ = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$_ = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(Å­|ux|uh|u)g|sep|okt|nov|dec)/i,
  wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(Å­|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i,
};
const parseMonthPatterns$_ = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^a(u|Å­)/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$_ = {
  narrow: /^[dlmÄµjvs]/i,
  short: /^(di|lu|ma|me|(Äµ|jx|jh|j)a|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|(Äµ|jx|jh|j)a(Å­|ux|uh|u)|ven|sab)/i,
  wide: /^(diman(Ä|cx|ch|c)o|lundo|mardo|merkredo|(Äµ|jx|jh|j)a(Å­|ux|uh|u)do|vendredo|sabato)/i,
};
const parseDayPatterns$_ = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|Äµ)/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|Äµ)/i, /^v/i, /^s/i],
};

const matchDayPeriodPatterns$_ = {
  narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  abbreviated:
    /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  wide: /^(anta(Å­|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i,
};
const parseDayPeriodPatterns$_ = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^noktom/i,
    noon: /^t/i,
    morning: /^m/i,
    afternoon: /^posttagmeze/i,
    evening: /^v/i,
    night: /^n/i,
  },
};

(match$_.match = {
  ordinalNumber: (0, _index$49.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$_,
    parsePattern: parseOrdinalNumberPattern$_,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index2$21.buildMatchFn)({
    matchPatterns: matchEraPatterns$_,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$_,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$21.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$_,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$_,
    defaultParseWidth: "any",
    valueCallback: function (index) {
      return index + 1;
    },
  }),

  month: (0, _index2$21.buildMatchFn)({
    matchPatterns: matchMonthPatterns$_,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$_,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$21.buildMatchFn)({
    matchPatterns: matchDayPatterns$_,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$_,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$21.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$_,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$_,
    defaultParseWidth: "any",
  }),
});

eo.eo = void 0;
var _index$48 = formatDistance$1Z;
var _index2$20 = formatLong$11;
var _index3$12 = formatRelative$1$;
var _index4$11 = localize$_;
var _index5$11 = match$_;

/**
 * @category Locales
 * @summary Esperanto locale.
 * @language Esperanto
 * @iso-639-2 epo
 * @author date-fns
 */
(eo.eo = {
  code: "eo",
  formatDistance: _index$48.formatDistance,
  formatLong: _index2$20.formatLong,
  formatRelative: _index3$12.formatRelative,
  localize: _index4$11.localize,
  match: _index5$11.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var es = {};

var formatDistance$1X = {};

formatDistance$1X.formatDistance = void 0;

const formatDistanceLocale$Y = {
  lessThanXSeconds: {
    one: "menos de un segundo",
    other: "menos de {{count}} segundos",
  },

  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos",
  },

  halfAMinute: "medio minuto",

  lessThanXMinutes: {
    one: "menos de un minuto",
    other: "menos de {{count}} minutos",
  },

  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos",
  },

  aboutXHours: {
    one: "alrededor de 1 hora",
    other: "alrededor de {{count}} horas",
  },

  xHours: {
    one: "1 hora",
    other: "{{count}} horas",
  },

  xDays: {
    one: "1 dÃ­a",
    other: "{{count}} dÃ­as",
  },

  aboutXWeeks: {
    one: "alrededor de 1 semana",
    other: "alrededor de {{count}} semanas",
  },

  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas",
  },

  aboutXMonths: {
    one: "alrededor de 1 mes",
    other: "alrededor de {{count}} meses",
  },

  xMonths: {
    one: "1 mes",
    other: "{{count}} meses",
  },

  aboutXYears: {
    one: "alrededor de 1 aÃ±o",
    other: "alrededor de {{count}} aÃ±os",
  },

  xYears: {
    one: "1 aÃ±o",
    other: "{{count}} aÃ±os",
  },

  overXYears: {
    one: "mÃ¡s de 1 aÃ±o",
    other: "mÃ¡s de {{count}} aÃ±os",
  },

  almostXYears: {
    one: "casi 1 aÃ±o",
    other: "casi {{count}} aÃ±os",
  },
};

const formatDistance$1W = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$Y[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "hace " + result;
    }
  }

  return result;
};
formatDistance$1X.formatDistance = formatDistance$1W;

var formatLong$10 = {};

formatLong$10.formatLong = void 0;
var _index$47 = buildFormatLongFn$1;

const dateFormats$10 = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$10 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$10 = {
  full: "{{date}} 'a las' {{time}}",
  long: "{{date}} 'a las' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$10.formatLong = {
  date: (0, _index$47.buildFormatLongFn)({
    formats: dateFormats$10,
    defaultWidth: "full",
  }),

  time: (0, _index$47.buildFormatLongFn)({
    formats: timeFormats$10,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$47.buildFormatLongFn)({
    formats: dateTimeFormats$10,
    defaultWidth: "full",
  }),
});

var formatRelative$1Z = {};

formatRelative$1Z.formatRelative = void 0;

const formatRelativeLocale$_ = {
  lastWeek: "'el' eeee 'pasado a la' p",
  yesterday: "'ayer a la' p",
  today: "'hoy a la' p",
  tomorrow: "'maÃ±ana a la' p",
  nextWeek: "eeee 'a la' p",
  other: "P",
};

const formatRelativeLocalePlural$2 = {
  lastWeek: "'el' eeee 'pasado a las' p",
  yesterday: "'ayer a las' p",
  today: "'hoy a las' p",
  tomorrow: "'maÃ±ana a las' p",
  nextWeek: "eeee 'a las' p",
  other: "P",
};

const formatRelative$1Y = (token, date, _baseDate, _options) => {
  if (date.getHours() !== 1) {
    return formatRelativeLocalePlural$2[token];
  } else {
    return formatRelativeLocale$_[token];
  }
};
formatRelative$1Z.formatRelative = formatRelative$1Y;

var localize$Z = {};

localize$Z.localize = void 0;
var _index$46 = buildLocalizeFn$1;

const eraValues$Z = {
  narrow: ["AC", "DC"],
  abbreviated: ["AC", "DC"],
  wide: ["antes de cristo", "despuÃ©s de cristo"],
};

const quarterValues$Z = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1Âº trimestre", "2Âº trimestre", "3Âº trimestre", "4Âº trimestre"],
};

const monthValues$Z = {
  narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "ene",
    "feb",
    "mar",
    "abr",
    "may",
    "jun",
    "jul",
    "ago",
    "sep",
    "oct",
    "nov",
    "dic",
  ],

  wide: [
    "enero",
    "febrero",
    "marzo",
    "abril",
    "mayo",
    "junio",
    "julio",
    "agosto",
    "septiembre",
    "octubre",
    "noviembre",
    "diciembre",
  ],
};

const dayValues$Z = {
  narrow: ["d", "l", "m", "m", "j", "v", "s"],
  short: ["do", "lu", "ma", "mi", "ju", "vi", "sÃ¡"],
  abbreviated: ["dom", "lun", "mar", "miÃ©", "jue", "vie", "sÃ¡b"],
  wide: [
    "domingo",
    "lunes",
    "martes",
    "miÃ©rcoles",
    "jueves",
    "viernes",
    "sÃ¡bado",
  ],
};

const dayPeriodValues$Z = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "maÃ±ana",
    afternoon: "tarde",
    evening: "tarde",
    night: "noche",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "maÃ±ana",
    afternoon: "tarde",
    evening: "tarde",
    night: "noche",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "maÃ±ana",
    afternoon: "tarde",
    evening: "tarde",
    night: "noche",
  },
};

const formattingDayPeriodValues$M = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "de la maÃ±ana",
    afternoon: "de la tarde",
    evening: "de la tarde",
    night: "de la noche",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "de la maÃ±ana",
    afternoon: "de la tarde",
    evening: "de la tarde",
    night: "de la noche",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "de la maÃ±ana",
    afternoon: "de la tarde",
    evening: "de la tarde",
    night: "de la noche",
  },
};

const ordinalNumber$Z = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "Âº";
};

(localize$Z.localize = {
  ordinalNumber: ordinalNumber$Z,

  era: (0, _index$46.buildLocalizeFn)({
    values: eraValues$Z,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$46.buildLocalizeFn)({
    values: quarterValues$Z,
    defaultWidth: "wide",
    argumentCallback: (quarter) => Number(quarter) - 1,
  }),

  month: (0, _index$46.buildLocalizeFn)({
    values: monthValues$Z,
    defaultWidth: "wide",
  }),

  day: (0, _index$46.buildLocalizeFn)({
    values: dayValues$Z,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$46.buildLocalizeFn)({
    values: dayPeriodValues$Z,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$M,
    defaultFormattingWidth: "wide",
  }),
});

var match$Z = {};

match$Z.match = void 0;
var _index$45 = buildMatchPatternFn$1;
var _index2$1$ = buildMatchFn$1;

const matchOrdinalNumberPattern$Z = /^(\d+)(Âº)?/i;
const parseOrdinalNumberPattern$Z = /\d+/i;

const matchEraPatterns$Z = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes de la era com[uÃº]n|despu[eÃ©]s de cristo|era com[uÃº]n)/i,
};
const parseEraPatterns$Z = {
  any: [/^ac/i, /^dc/i],
  wide: [
    /^(antes de cristo|antes de la era com[uÃº]n)/i,
    /^(despu[eÃ©]s de cristo|era com[uÃº]n)/i,
  ],
};

const matchQuarterPatterns$Z = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](Âº)? trimestre/i,
};
const parseQuarterPatterns$Z = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$Z = {
  narrow: /^[efmajsond]/i,
  abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
  wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
};
const parseMonthPatterns$Z = {
  narrow: [
    /^e/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^en/i,
    /^feb/i,
    /^mar/i,
    /^abr/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^ago/i,
    /^sep/i,
    /^oct/i,
    /^nov/i,
    /^dic/i,
  ],
};

const matchDayPatterns$Z = {
  narrow: /^[dlmjvs]/i,
  short: /^(do|lu|ma|mi|ju|vi|s[Ã¡a])/i,
  abbreviated: /^(dom|lun|mar|mi[Ã©e]|jue|vie|s[Ã¡a]b)/i,
  wide: /^(domingo|lunes|martes|mi[Ã©e]rcoles|jueves|viernes|s[Ã¡a]bado)/i,
};
const parseDayPatterns$Z = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i],
};

const matchDayPeriodPatterns$Z = {
  narrow: /^(a|p|mn|md|(de la|a las) (maÃ±ana|tarde|noche))/i,
  any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (maÃ±ana|tarde|noche))/i,
};
const parseDayPeriodPatterns$Z = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /maÃ±ana/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noche/i,
  },
};

(match$Z.match = {
  ordinalNumber: (0, _index$45.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$Z,
    parsePattern: parseOrdinalNumberPattern$Z,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index2$1$.buildMatchFn)({
    matchPatterns: matchEraPatterns$Z,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$Z,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$1$.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$Z,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$Z,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index2$1$.buildMatchFn)({
    matchPatterns: matchMonthPatterns$Z,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$Z,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$1$.buildMatchFn)({
    matchPatterns: matchDayPatterns$Z,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$Z,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$1$.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$Z,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$Z,
    defaultParseWidth: "any",
  }),
});

es.es = void 0;
var _index$44 = formatDistance$1X;
var _index2$1_ = formatLong$10;
var _index3$11 = formatRelative$1Z;
var _index4$10 = localize$Z;
var _index5$10 = match$Z;

/**
 * @category Locales
 * @summary Spanish locale.
 * @language Spanish
 * @iso-639-2 spa
 * @author Juan Angosto [@juanangosto](https://github.com/juanangosto)
 * @author Guillermo Grau [@guigrpa](https://github.com/guigrpa)
 * @author Fernando AgÃ¼ero [@fjaguero](https://github.com/fjaguero)
 * @author GastÃ³n Haro [@harogaston](https://github.com/harogaston)
 * @author Yago Carballo [@YagoCarballo](https://github.com/YagoCarballo)
 */
(es.es = {
  code: "es",
  formatDistance: _index$44.formatDistance,
  formatLong: _index2$1_.formatLong,
  formatRelative: _index3$11.formatRelative,
  localize: _index4$10.localize,
  match: _index5$10.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var et = {};

var formatDistance$1V = {};

formatDistance$1V.formatDistance = void 0;

const formatDistanceLocale$X = {
  lessThanXSeconds: {
    standalone: {
      one: "vÃ¤hem kui Ã¼ks sekund",
      other: "vÃ¤hem kui {{count}} sekundit",
    },
    withPreposition: {
      one: "vÃ¤hem kui Ã¼he sekundi",
      other: "vÃ¤hem kui {{count}} sekundi",
    },
  },

  xSeconds: {
    standalone: {
      one: "Ã¼ks sekund",
      other: "{{count}} sekundit",
    },
    withPreposition: {
      one: "Ã¼he sekundi",
      other: "{{count}} sekundi",
    },
  },

  halfAMinute: {
    standalone: "pool minutit",
    withPreposition: "poole minuti",
  },

  lessThanXMinutes: {
    standalone: {
      one: "vÃ¤hem kui Ã¼ks minut",
      other: "vÃ¤hem kui {{count}} minutit",
    },
    withPreposition: {
      one: "vÃ¤hem kui Ã¼he minuti",
      other: "vÃ¤hem kui {{count}} minuti",
    },
  },

  xMinutes: {
    standalone: {
      one: "Ã¼ks minut",
      other: "{{count}} minutit",
    },
    withPreposition: {
      one: "Ã¼he minuti",
      other: "{{count}} minuti",
    },
  },

  aboutXHours: {
    standalone: {
      one: "umbes Ã¼ks tund",
      other: "umbes {{count}} tundi",
    },
    withPreposition: {
      one: "umbes Ã¼he tunni",
      other: "umbes {{count}} tunni",
    },
  },

  xHours: {
    standalone: {
      one: "Ã¼ks tund",
      other: "{{count}} tundi",
    },
    withPreposition: {
      one: "Ã¼he tunni",
      other: "{{count}} tunni",
    },
  },

  xDays: {
    standalone: {
      one: "Ã¼ks pÃ¤ev",
      other: "{{count}} pÃ¤eva",
    },
    withPreposition: {
      one: "Ã¼he pÃ¤eva",
      other: "{{count}} pÃ¤eva",
    },
  },

  aboutXWeeks: {
    standalone: {
      one: "umbes Ã¼ks nÃ¤dal",
      other: "umbes {{count}} nÃ¤dalat",
    },
    withPreposition: {
      one: "umbes Ã¼he nÃ¤dala",
      other: "umbes {{count}} nÃ¤dala",
    },
  },

  xWeeks: {
    standalone: {
      one: "Ã¼ks nÃ¤dal",
      other: "{{count}} nÃ¤dalat",
    },
    withPreposition: {
      one: "Ã¼he nÃ¤dala",
      other: "{{count}} nÃ¤dala",
    },
  },

  aboutXMonths: {
    standalone: {
      one: "umbes Ã¼ks kuu",
      other: "umbes {{count}} kuud",
    },
    withPreposition: {
      one: "umbes Ã¼he kuu",
      other: "umbes {{count}} kuu",
    },
  },

  xMonths: {
    standalone: {
      one: "Ã¼ks kuu",
      other: "{{count}} kuud",
    },
    withPreposition: {
      one: "Ã¼he kuu",
      other: "{{count}} kuu",
    },
  },

  aboutXYears: {
    standalone: {
      one: "umbes Ã¼ks aasta",
      other: "umbes {{count}} aastat",
    },
    withPreposition: {
      one: "umbes Ã¼he aasta",
      other: "umbes {{count}} aasta",
    },
  },

  xYears: {
    standalone: {
      one: "Ã¼ks aasta",
      other: "{{count}} aastat",
    },
    withPreposition: {
      one: "Ã¼he aasta",
      other: "{{count}} aasta",
    },
  },

  overXYears: {
    standalone: {
      one: "rohkem kui Ã¼ks aasta",
      other: "rohkem kui {{count}} aastat",
    },
    withPreposition: {
      one: "rohkem kui Ã¼he aasta",
      other: "rohkem kui {{count}} aasta",
    },
  },

  almostXYears: {
    standalone: {
      one: "peaaegu Ã¼ks aasta",
      other: "peaaegu {{count}} aastat",
    },
    withPreposition: {
      one: "peaaegu Ã¼he aasta",
      other: "peaaegu {{count}} aasta",
    },
  },
};

const formatDistance$1U = (token, count, options) => {
  const usageGroup = options?.addSuffix
    ? formatDistanceLocale$X[token].withPreposition
    : formatDistanceLocale$X[token].standalone;

  let result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " pÃ¤rast";
    } else {
      return result + " eest";
    }
  }

  return result;
};
formatDistance$1V.formatDistance = formatDistance$1U;

var formatLong$$ = {};

formatLong$$.formatLong = void 0;
var _index$43 = buildFormatLongFn$1;

const dateFormats$$ = {
  full: "EEEE, d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y",
};

const timeFormats$$ = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$$ = {
  full: "{{date}} 'kell' {{time}}",
  long: "{{date}} 'kell' {{time}}",
  medium: "{{date}}. {{time}}",
  short: "{{date}}. {{time}}",
};

(formatLong$$.formatLong = {
  date: (0, _index$43.buildFormatLongFn)({
    formats: dateFormats$$,
    defaultWidth: "full",
  }),

  time: (0, _index$43.buildFormatLongFn)({
    formats: timeFormats$$,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$43.buildFormatLongFn)({
    formats: dateTimeFormats$$,
    defaultWidth: "full",
  }),
});

var formatRelative$1X = {};

formatRelative$1X.formatRelative = void 0;

const formatRelativeLocale$Z = {
  lastWeek: "'eelmine' eeee 'kell' p",
  yesterday: "'eile kell' p",
  today: "'tÃ¤na kell' p",
  tomorrow: "'homme kell' p",
  nextWeek: "'jÃ¤rgmine' eeee 'kell' p",
  other: "P",
};

const formatRelative$1W = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$Z[token];
formatRelative$1X.formatRelative = formatRelative$1W;

var localize$Y = {};

localize$Y.localize = void 0;
var _index$42 = buildLocalizeFn$1;

const eraValues$Y = {
  narrow: ["e.m.a", "m.a.j"],
  abbreviated: ["e.m.a", "m.a.j"],
  wide: ["enne meie ajaarvamist", "meie ajaarvamise jÃ¤rgi"],
};

const quarterValues$Y = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$Y = {
  narrow: ["J", "V", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jaan",
    "veebr",
    "mÃ¤rts",
    "apr",
    "mai",
    "juuni",
    "juuli",
    "aug",
    "sept",
    "okt",
    "nov",
    "dets",
  ],

  wide: [
    "jaanuar",
    "veebruar",
    "mÃ¤rts",
    "aprill",
    "mai",
    "juuni",
    "juuli",
    "august",
    "september",
    "oktoober",
    "november",
    "detsember",
  ],
};

const dayValues$Y = {
  narrow: ["P", "E", "T", "K", "N", "R", "L"],
  short: ["P", "E", "T", "K", "N", "R", "L"],
  abbreviated: [
    "pÃ¼hap.",
    "esmasp.",
    "teisip.",
    "kolmap.",
    "neljap.",
    "reede.",
    "laup.",
  ],

  wide: [
    "pÃ¼hapÃ¤ev",
    "esmaspÃ¤ev",
    "teisipÃ¤ev",
    "kolmapÃ¤ev",
    "neljapÃ¤ev",
    "reede",
    "laupÃ¤ev",
  ],
};

const dayPeriodValues$Y = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "keskÃ¶Ã¶",
    noon: "keskpÃ¤ev",
    morning: "hommik",
    afternoon: "pÃ¤rastlÃµuna",
    evening: "Ãµhtu",
    night: "Ã¶Ã¶",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "keskÃ¶Ã¶",
    noon: "keskpÃ¤ev",
    morning: "hommik",
    afternoon: "pÃ¤rastlÃµuna",
    evening: "Ãµhtu",
    night: "Ã¶Ã¶",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "keskÃ¶Ã¶",
    noon: "keskpÃ¤ev",
    morning: "hommik",
    afternoon: "pÃ¤rastlÃµuna",
    evening: "Ãµhtu",
    night: "Ã¶Ã¶",
  },
};

const formattingDayPeriodValues$L = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "keskÃ¶Ã¶l",
    noon: "keskpÃ¤eval",
    morning: "hommikul",
    afternoon: "pÃ¤rastlÃµunal",
    evening: "Ãµhtul",
    night: "Ã¶Ã¶sel",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "keskÃ¶Ã¶l",
    noon: "keskpÃ¤eval",
    morning: "hommikul",
    afternoon: "pÃ¤rastlÃµunal",
    evening: "Ãµhtul",
    night: "Ã¶Ã¶sel",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "keskÃ¶Ã¶l",
    noon: "keskpÃ¤eval",
    morning: "hommikul",
    afternoon: "pÃ¤rastlÃµunal",
    evening: "Ãµhtul",
    night: "Ã¶Ã¶sel",
  },
};

const ordinalNumber$Y = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$Y.localize = {
  ordinalNumber: ordinalNumber$Y,

  era: (0, _index$42.buildLocalizeFn)({
    values: eraValues$Y,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$42.buildLocalizeFn)({
    values: quarterValues$Y,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$42.buildLocalizeFn)({
    values: monthValues$Y,
    defaultWidth: "wide",
    formattingValues: monthValues$Y,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$42.buildLocalizeFn)({
    values: dayValues$Y,
    defaultWidth: "wide",
    formattingValues: dayValues$Y,
    defaultFormattingWidth: "wide",
  }),

  dayPeriod: (0, _index$42.buildLocalizeFn)({
    values: dayPeriodValues$Y,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$L,
    defaultFormattingWidth: "wide",
  }),
});

var match$Y = {};

match$Y.match = void 0;

var _index$41 = buildMatchFn$1;
var _index2$1Z = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$Y = /^\d+\./i;
const parseOrdinalNumberPattern$Y = /\d+/i;

const matchEraPatterns$Y = {
  narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  wide: /^(enne meie ajaarvamist|meie ajaarvamise jÃ¤rgi|enne Kristust|pÃ¤rast Kristust)/i,
};
const parseEraPatterns$Y = {
  any: [/^e/i, /^(m|p)/i],
};

const matchQuarterPatterns$Y = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](\.)? kvartal/i,
};
const parseQuarterPatterns$Y = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$Y = {
  narrow: /^[jvmasond]/i,
  abbreviated: /^(jaan|veebr|mÃ¤rts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
  wide: /^(jaanuar|veebruar|mÃ¤rts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i,
};
const parseMonthPatterns$Y = {
  narrow: [
    /^j/i,
    /^v/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^v/i,
    /^mÃ¤r/i,
    /^ap/i,
    /^mai/i,
    /^juun/i,
    /^juul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$Y = {
  narrow: /^[petknrl]/i,
  short: /^[petknrl]/i,
  abbreviated: /^(pÃ¼h?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
  wide: /^(pÃ¼hapÃ¤ev|esmaspÃ¤ev|teisipÃ¤ev|kolmapÃ¤ev|neljapÃ¤ev|reede|laupÃ¤ev)/i,
};
const parseDayPatterns$Y = {
  any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i],
};

const matchDayPeriodPatterns$Y = {
  any: /^(am|pm|keskÃ¶Ã¶l?|keskpÃ¤ev(al)?|hommik(ul)?|pÃ¤rastlÃµunal?|Ãµhtul?|Ã¶Ã¶(sel)?)/i,
};
const parseDayPeriodPatterns$Y = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^keskÃ¶/i,
    noon: /^keskp/i,
    morning: /hommik/i,
    afternoon: /pÃ¤rastlÃµuna/i,
    evening: /Ãµhtu/i,
    night: /Ã¶Ã¶/i,
  },
};

(match$Y.match = {
  ordinalNumber: (0, _index2$1Z.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$Y,
    parsePattern: parseOrdinalNumberPattern$Y,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$41.buildMatchFn)({
    matchPatterns: matchEraPatterns$Y,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$Y,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$41.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$Y,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$Y,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$41.buildMatchFn)({
    matchPatterns: matchMonthPatterns$Y,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$Y,
    defaultParseWidth: "any",
  }),

  day: (0, _index$41.buildMatchFn)({
    matchPatterns: matchDayPatterns$Y,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$Y,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$41.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$Y,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$Y,
    defaultParseWidth: "any",
  }),
});

et.et = void 0;
var _index$40 = formatDistance$1V;
var _index2$1Y = formatLong$$;
var _index3$10 = formatRelative$1X;
var _index4$$ = localize$Y;
var _index5$$ = match$Y;

/**
 * @category Locales
 * @summary Estonian locale.
 * @language Estonian
 * @iso-639-2 est
 * @author Priit Hansen [@HansenPriit](https://github.com/priithansen)
 */
(et.et = {
  code: "et",
  formatDistance: _index$40.formatDistance,
  formatLong: _index2$1Y.formatLong,
  formatRelative: _index3$10.formatRelative,
  localize: _index4$$.localize,
  match: _index5$$.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var eu = {};

var formatDistance$1T = {};

formatDistance$1T.formatDistance = void 0;

const formatDistanceLocale$W = {
  lessThanXSeconds: {
    one: "segundo bat baino gutxiago",
    other: "{{count}} segundo baino gutxiago",
  },

  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundo",
  },

  halfAMinute: "minutu erdi",

  lessThanXMinutes: {
    one: "minutu bat baino gutxiago",
    other: "{{count}} minutu baino gutxiago",
  },

  xMinutes: {
    one: "1 minutu",
    other: "{{count}} minutu",
  },

  aboutXHours: {
    one: "1 ordu gutxi gorabehera",
    other: "{{count}} ordu gutxi gorabehera",
  },

  xHours: {
    one: "1 ordu",
    other: "{{count}} ordu",
  },

  xDays: {
    one: "1 egun",
    other: "{{count}} egun",
  },

  aboutXWeeks: {
    one: "aste 1 inguru",
    other: "{{count}} aste inguru",
  },

  xWeeks: {
    one: "1 aste",
    other: "{{count}} astean",
  },

  aboutXMonths: {
    one: "1 hilabete gutxi gorabehera",
    other: "{{count}} hilabete gutxi gorabehera",
  },

  xMonths: {
    one: "1 hilabete",
    other: "{{count}} hilabete",
  },

  aboutXYears: {
    one: "1 urte gutxi gorabehera",
    other: "{{count}} urte gutxi gorabehera",
  },

  xYears: {
    one: "1 urte",
    other: "{{count}} urte",
  },

  overXYears: {
    one: "1 urte baino gehiago",
    other: "{{count}} urte baino gehiago",
  },

  almostXYears: {
    one: "ia 1 urte",
    other: "ia {{count}} urte",
  },
};

const formatDistance$1S = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$W[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "duela " + result;
    }
  }

  return result;
};
formatDistance$1T.formatDistance = formatDistance$1S;

var formatLong$_ = {};

formatLong$_.formatLong = void 0;
var _index$3$ = buildFormatLongFn$1;

const dateFormats$_ = {
  full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
  long: "y'ko' MMMM'ren' d'a'",
  medium: "y MMM d",
  short: "yy/MM/dd",
};

const timeFormats$_ = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$_ = {
  full: "{{date}} 'tan' {{time}}",
  long: "{{date}} 'tan' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$_.formatLong = {
  date: (0, _index$3$.buildFormatLongFn)({
    formats: dateFormats$_,
    defaultWidth: "full",
  }),

  time: (0, _index$3$.buildFormatLongFn)({
    formats: timeFormats$_,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3$.buildFormatLongFn)({
    formats: dateTimeFormats$_,
    defaultWidth: "full",
  }),
});

var formatRelative$1V = {};

formatRelative$1V.formatRelative = void 0;

const formatRelativeLocale$Y = {
  lastWeek: "'joan den' eeee, LT",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: "eeee, p",
  other: "P",
};

const formatRelativeLocalePlural$1 = {
  lastWeek: "'joan den' eeee, p",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: "eeee, p",
  other: "P",
};

const formatRelative$1U = (token, date) => {
  if (date.getHours() !== 1) {
    return formatRelativeLocalePlural$1[token];
  }
  return formatRelativeLocale$Y[token];
};
formatRelative$1V.formatRelative = formatRelative$1U;

var localize$X = {};

localize$X.localize = void 0;
var _index$3_ = buildLocalizeFn$1;

const eraValues$X = {
  narrow: ["k.a.", "k.o."],
  abbreviated: ["k.a.", "k.o."],
  wide: ["kristo aurretik", "kristo ondoren"],
};

const quarterValues$X = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1H", "2H", "3H", "4H"],
  wide: [
    "1. hiruhilekoa",
    "2. hiruhilekoa",
    "3. hiruhilekoa",
    "4. hiruhilekoa",
  ],
};

const monthValues$X = {
  narrow: ["u", "o", "m", "a", "m", "e", "u", "a", "i", "u", "a", "a"],
  abbreviated: [
    "urt",
    "ots",
    "mar",
    "api",
    "mai",
    "eka",
    "uzt",
    "abu",
    "ira",
    "urr",
    "aza",
    "abe",
  ],

  wide: [
    "urtarrila",
    "otsaila",
    "martxoa",
    "apirila",
    "maiatza",
    "ekaina",
    "uztaila",
    "abuztua",
    "iraila",
    "urria",
    "azaroa",
    "abendua",
  ],
};

const dayValues$X = {
  narrow: ["i", "a", "a", "a", "o", "o", "l"],
  short: ["ig", "al", "as", "az", "og", "or", "lr"],
  abbreviated: ["iga", "ast", "ast", "ast", "ost", "ost", "lar"],
  wide: [
    "igandea",
    "astelehena",
    "asteartea",
    "asteazkena",
    "osteguna",
    "ostirala",
    "larunbata",
  ],
};

const dayPeriodValues$X = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "ge",
    noon: "eg",
    morning: "goiza",
    afternoon: "arratsaldea",
    evening: "arratsaldea",
    night: "gaua",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goiza",
    afternoon: "arratsaldea",
    evening: "arratsaldea",
    night: "gaua",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goiza",
    afternoon: "arratsaldea",
    evening: "arratsaldea",
    night: "gaua",
  },
};

const formattingDayPeriodValues$K = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "ge",
    noon: "eg",
    morning: "goizean",
    afternoon: "arratsaldean",
    evening: "arratsaldean",
    night: "gauean",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goizean",
    afternoon: "arratsaldean",
    evening: "arratsaldean",
    night: "gauean",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goizean",
    afternoon: "arratsaldean",
    evening: "arratsaldean",
    night: "gauean",
  },
};

const ordinalNumber$X = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$X.localize = {
  ordinalNumber: ordinalNumber$X,

  era: (0, _index$3_.buildLocalizeFn)({
    values: eraValues$X,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3_.buildLocalizeFn)({
    values: quarterValues$X,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3_.buildLocalizeFn)({
    values: monthValues$X,
    defaultWidth: "wide",
  }),

  day: (0, _index$3_.buildLocalizeFn)({
    values: dayValues$X,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3_.buildLocalizeFn)({
    values: dayPeriodValues$X,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$K,
    defaultFormattingWidth: "wide",
  }),
});

var match$X = {};

match$X.match = void 0;

var _index$3Z = buildMatchFn$1;
var _index2$1X = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$X = /^(\d+)(.)?/i;
const parseOrdinalNumberPattern$X = /\d+/i;

const matchEraPatterns$X = {
  narrow: /^(k.a.|k.o.)/i,
  abbreviated: /^(k.a.|k.o.)/i,
  wide: /^(kristo aurretik|kristo ondoren)/i,
};
const parseEraPatterns$X = {
  narrow: [/^k.a./i, /^k.o./i],
  abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
  wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i],
};

const matchQuarterPatterns$X = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]H/i,
  wide: /^[1234](.)? hiruhilekoa/i,
};
const parseQuarterPatterns$X = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$X = {
  narrow: /^[uomaei]/i,
  abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
  wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i,
};
const parseMonthPatterns$X = {
  narrow: [
    /^u/i,
    /^o/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^e/i,
    /^u/i,
    /^a/i,
    /^i/i,
    /^u/i,
    /^a/i,
    /^a/i,
  ],

  any: [
    /^urt/i,
    /^ots/i,
    /^mar/i,
    /^api/i,
    /^mai/i,
    /^eka/i,
    /^uzt/i,
    /^abu/i,
    /^ira/i,
    /^urr/i,
    /^aza/i,
    /^abe/i,
  ],
};

const matchDayPatterns$X = {
  narrow: /^[iaol]/i,
  short: /^(ig|al|as|az|og|or|lr)/i,
  abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
  wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i,
};
const parseDayPatterns$X = {
  narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
  short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
  abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],

  wide: [
    /^igandea/i,
    /^astelehena/i,
    /^asteartea/i,
    /^asteazkena/i,
    /^osteguna/i,
    /^ostirala/i,
    /^larunbata/i,
  ],
};

const matchDayPeriodPatterns$X = {
  narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
  any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
};
const parseDayPeriodPatterns$X = {
  narrow: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^ge/i,
    noon: /^eg/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i,
  },
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^gauerdia/i,
    noon: /^eguerdia/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i,
  },
};

(match$X.match = {
  ordinalNumber: (0, _index2$1X.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$X,
    parsePattern: parseOrdinalNumberPattern$X,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3Z.buildMatchFn)({
    matchPatterns: matchEraPatterns$X,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$X,
    defaultParseWidth: "wide",
  }),

  quarter: (0, _index$3Z.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$X,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$X,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3Z.buildMatchFn)({
    matchPatterns: matchMonthPatterns$X,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$X,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3Z.buildMatchFn)({
    matchPatterns: matchDayPatterns$X,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$X,
    defaultParseWidth: "wide",
  }),

  dayPeriod: (0, _index$3Z.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$X,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$X,
    defaultParseWidth: "any",
  }),
});

eu.eu = void 0;
var _index$3Y = formatDistance$1T;
var _index2$1W = formatLong$_;
var _index3$$ = formatRelative$1V;
var _index4$_ = localize$X;
var _index5$_ = match$X;

/**
 * @category Locales
 * @summary Basque locale.
 * @language Basque
 * @iso-639-2 eus
 * @author Jacob SÃ¶derblom [@JacobSoderblom](https://github.com/JacobSoderblom)
 */
(eu.eu = {
  code: "eu",
  formatDistance: _index$3Y.formatDistance,
  formatLong: _index2$1W.formatLong,
  formatRelative: _index3$$.formatRelative,
  localize: _index4$_.localize,
  match: _index5$_.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var faIR = {};

var formatDistance$1R = {};

formatDistance$1R.formatDistance = void 0;

const formatDistanceLocale$V = {
  lessThanXSeconds: {
    one: "Ú©ÙØªØ± Ø§Ø² ÛÚ© Ø«Ø§ÙÛÙ",
    other: "Ú©ÙØªØ± Ø§Ø² {{count}} Ø«Ø§ÙÛÙ",
  },

  xSeconds: {
    one: "1 Ø«Ø§ÙÛÙ",
    other: "{{count}} Ø«Ø§ÙÛÙ",
  },

  halfAMinute: "ÙÛÙ Ø¯ÙÛÙÙ",

  lessThanXMinutes: {
    one: "Ú©ÙØªØ± Ø§Ø² ÛÚ© Ø¯ÙÛÙÙ",
    other: "Ú©ÙØªØ± Ø§Ø² {{count}} Ø¯ÙÛÙÙ",
  },

  xMinutes: {
    one: "1 Ø¯ÙÛÙÙ",
    other: "{{count}} Ø¯ÙÛÙÙ",
  },

  aboutXHours: {
    one: "Ø­Ø¯ÙØ¯ 1 Ø³Ø§Ø¹Øª",
    other: "Ø­Ø¯ÙØ¯ {{count}} Ø³Ø§Ø¹Øª",
  },

  xHours: {
    one: "1 Ø³Ø§Ø¹Øª",
    other: "{{count}} Ø³Ø§Ø¹Øª",
  },

  xDays: {
    one: "1 Ø±ÙØ²",
    other: "{{count}} Ø±ÙØ²",
  },

  aboutXWeeks: {
    one: "Ø­Ø¯ÙØ¯ 1 ÙÙØªÙ",
    other: "Ø­Ø¯ÙØ¯ {{count}} ÙÙØªÙ",
  },

  xWeeks: {
    one: "1 ÙÙØªÙ",
    other: "{{count}} ÙÙØªÙ",
  },

  aboutXMonths: {
    one: "Ø­Ø¯ÙØ¯ 1 ÙØ§Ù",
    other: "Ø­Ø¯ÙØ¯ {{count}} ÙØ§Ù",
  },

  xMonths: {
    one: "1 ÙØ§Ù",
    other: "{{count}} ÙØ§Ù",
  },

  aboutXYears: {
    one: "Ø­Ø¯ÙØ¯ 1 Ø³Ø§Ù",
    other: "Ø­Ø¯ÙØ¯ {{count}} Ø³Ø§Ù",
  },

  xYears: {
    one: "1 Ø³Ø§Ù",
    other: "{{count}} Ø³Ø§Ù",
  },

  overXYears: {
    one: "Ø¨ÛØ´ØªØ± Ø§Ø² 1 Ø³Ø§Ù",
    other: "Ø¨ÛØ´ØªØ± Ø§Ø² {{count}} Ø³Ø§Ù",
  },

  almostXYears: {
    one: "ÙØ²Ø¯ÛÚ© 1 Ø³Ø§Ù",
    other: "ÙØ²Ø¯ÛÚ© {{count}} Ø³Ø§Ù",
  },
};

const formatDistance$1Q = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$V[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ø¯Ø± " + result;
    } else {
      return result + " ÙØ¨Ù";
    }
  }

  return result;
};
formatDistance$1R.formatDistance = formatDistance$1Q;

var formatLong$Z = {};

formatLong$Z.formatLong = void 0;
var _index$3X = buildFormatLongFn$1;

const dateFormats$Z = {
  full: "EEEE do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "yyyy/MM/dd",
};

const timeFormats$Z = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$Z = {
  full: "{{date}} 'Ø¯Ø±' {{time}}",
  long: "{{date}} 'Ø¯Ø±' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$Z.formatLong = {
  date: (0, _index$3X.buildFormatLongFn)({
    formats: dateFormats$Z,
    defaultWidth: "full",
  }),

  time: (0, _index$3X.buildFormatLongFn)({
    formats: timeFormats$Z,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3X.buildFormatLongFn)({
    formats: dateTimeFormats$Z,
    defaultWidth: "full",
  }),
});

var formatRelative$1T = {};

formatRelative$1T.formatRelative = void 0;

const formatRelativeLocale$X = {
  lastWeek: "eeee 'Ú¯Ø°Ø´ØªÙ Ø¯Ø±' p",
  yesterday: "'Ø¯ÛØ±ÙØ² Ø¯Ø±' p",
  today: "'Ø§ÙØ±ÙØ² Ø¯Ø±' p",
  tomorrow: "'ÙØ±Ø¯Ø§ Ø¯Ø±' p",
  nextWeek: "eeee 'Ø¯Ø±' p",
  other: "P",
};

const formatRelative$1S = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$X[token];
formatRelative$1T.formatRelative = formatRelative$1S;

var localize$W = {};

localize$W.localize = void 0;
var _index$3W = buildLocalizeFn$1;

const eraValues$W = {
  narrow: ["Ù", "Ø¨"],
  abbreviated: ["Ù.Ù.", "Ø¨.Ù."],
  wide: ["ÙØ¨Ù Ø§Ø² ÙÛÙØ§Ø¯", "Ø¨Ø¹Ø¯ Ø§Ø² ÙÛÙØ§Ø¯"],
};

const quarterValues$W = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ø³âÙ1", "Ø³âÙ2", "Ø³âÙ3", "Ø³âÙ4"],
  wide: ["Ø³ÙâÙØ§ÙÙ 1", "Ø³ÙâÙØ§ÙÙ 2", "Ø³ÙâÙØ§ÙÙ 3", "Ø³ÙâÙØ§ÙÙ 4"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$W = {
  narrow: ["Ú", "Ù", "Ù", "Ø¢", "Ù", "Ø¬", "Ø¬", "Ø¢", "Ø³", "Ø§", "Ù", "Ø¯"],
  abbreviated: [
    "ÚØ§ÙÙ",
    "ÙÙØ±",
    "ÙØ§Ø±Ø³",
    "Ø¢Ù¾Ø±",
    "ÙÛ",
    "Ø¬ÙÙ",
    "Ø¬ÙÙÙ",
    "Ø¢Ú¯Ù",
    "Ø³Ù¾ØªÙ",
    "Ø§Ú©ØªÙ",
    "ÙÙØ§ÙÙ",
    "Ø¯Ø³Ø§ÙÙ",
  ],

  wide: [
    "ÚØ§ÙÙÛÙ",
    "ÙÙØ±ÛÙ",
    "ÙØ§Ø±Ø³",
    "Ø¢Ù¾Ø±ÛÙ",
    "ÙÛ",
    "Ø¬ÙÙ",
    "Ø¬ÙÙØ§Û",
    "Ø¢Ú¯ÙØ³Øª",
    "Ø³Ù¾ØªØ§ÙØ¨Ø±",
    "Ø§Ú©ØªØ¨Ø±",
    "ÙÙØ§ÙØ¨Ø±",
    "Ø¯Ø³Ø§ÙØ¨Ø±",
  ],
};

const dayValues$W = {
  narrow: ["Û", "Ø¯", "Ø³", "Ú", "Ù¾", "Ø¬", "Ø´"],
  short: ["1Ø´", "2Ø´", "3Ø´", "4Ø´", "5Ø´", "Ø¬", "Ø´"],
  abbreviated: [
    "ÛÚ©Ø´ÙØ¨Ù",
    "Ø¯ÙØ´ÙØ¨Ù",
    "Ø³ÙâØ´ÙØ¨Ù",
    "ÚÙØ§Ø±Ø´ÙØ¨Ù",
    "Ù¾ÙØ¬Ø´ÙØ¨Ù",
    "Ø¬ÙØ¹Ù",
    "Ø´ÙØ¨Ù",
  ],

  wide: ["ÛÚ©Ø´ÙØ¨Ù", "Ø¯ÙØ´ÙØ¨Ù", "Ø³ÙâØ´ÙØ¨Ù", "ÚÙØ§Ø±Ø´ÙØ¨Ù", "Ù¾ÙØ¬Ø´ÙØ¨Ù", "Ø¬ÙØ¹Ù", "Ø´ÙØ¨Ù"],
};

const dayPeriodValues$W = {
  narrow: {
    am: "Ù",
    pm: "Ø¨",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "Øµ",
    afternoon: "Ø¨.Ø¸.",
    evening: "Ø¹",
    night: "Ø´",
  },
  abbreviated: {
    am: "Ù.Ø¸.",
    pm: "Ø¨.Ø¸.",
    midnight: "ÙÛÙÙâØ´Ø¨",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø­",
    afternoon: "Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±",
    evening: "Ø¹ØµØ±",
    night: "Ø´Ø¨",
  },
  wide: {
    am: "ÙØ¨ÙâØ§Ø²Ø¸ÙØ±",
    pm: "Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±",
    midnight: "ÙÛÙÙâØ´Ø¨",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø­",
    afternoon: "Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±",
    evening: "Ø¹ØµØ±",
    night: "Ø´Ø¨",
  },
};

const formattingDayPeriodValues$J = {
  narrow: {
    am: "Ù",
    pm: "Ø¨",
    midnight: "Ù",
    noon: "Ø¸",
    morning: "Øµ",
    afternoon: "Ø¨.Ø¸.",
    evening: "Ø¹",
    night: "Ø´",
  },
  abbreviated: {
    am: "Ù.Ø¸.",
    pm: "Ø¨.Ø¸.",
    midnight: "ÙÛÙÙâØ´Ø¨",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø­",
    afternoon: "Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±",
    evening: "Ø¹ØµØ±",
    night: "Ø´Ø¨",
  },
  wide: {
    am: "ÙØ¨ÙâØ§Ø²Ø¸ÙØ±",
    pm: "Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±",
    midnight: "ÙÛÙÙâØ´Ø¨",
    noon: "Ø¸ÙØ±",
    morning: "ØµØ¨Ø­",
    afternoon: "Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±",
    evening: "Ø¹ØµØ±",
    night: "Ø´Ø¨",
  },
};

const ordinalNumber$W = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$W.localize = {
  ordinalNumber: ordinalNumber$W,

  era: (0, _index$3W.buildLocalizeFn)({
    values: eraValues$W,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3W.buildLocalizeFn)({
    values: quarterValues$W,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3W.buildLocalizeFn)({
    values: monthValues$W,
    defaultWidth: "wide",
  }),

  day: (0, _index$3W.buildLocalizeFn)({
    values: dayValues$W,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3W.buildLocalizeFn)({
    values: dayPeriodValues$W,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$J,
    defaultFormattingWidth: "wide",
  }),
});

var match$W = {};

match$W.match = void 0;

var _index$3V = buildMatchFn$1;
var _index2$1V = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$W = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$W = /\d+/i;

const matchEraPatterns$W = {
  narrow: /^(Ù|Ø¨)/i,
  abbreviated: /^(Ù\.?\s?Ù\.?|Ù\.?\s?Ø¯\.?\s?Ù\.?|Ù\.?\s?|Ø¯\.?\s?Ù\.?)/i,
  wide: /^(ÙØ¨Ù Ø§Ø² ÙÛÙØ§Ø¯|ÙØ¨Ù Ø§Ø² Ø¯ÙØ±Ø§Ù ÙØ´ØªØ±Ú©|ÙÛÙØ§Ø¯Û|Ø¯ÙØ±Ø§Ù ÙØ´ØªØ±Ú©|Ø¨Ø¹Ø¯ Ø§Ø² ÙÛÙØ§Ø¯)/i,
};
const parseEraPatterns$W = {
  any: [/^ÙØ¨Ù/i, /^Ø¨Ø¹Ø¯/i],
};

const matchQuarterPatterns$W = {
  narrow: /^[1234]/i,
  abbreviated: /^Ø³âÙ[1234]/i,
  wide: /^Ø³ÙâÙØ§ÙÙ [1234]/i,
};
const parseQuarterPatterns$W = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$W = {
  narrow: /^[Ø¬ÚÙÙØ¢Ø§ÙØ§Ø³ÙØ¯]/i,
  abbreviated:
    /^(Ø¬ÙÙ|ÚØ§ÙÙ|ÚØ§ÙÙÛÙ|ÙÙØ±ÛÙ|ÙÙØ±|ÙØ§Ø±Ø³|Ø¢ÙØ±ÛÙ|Ø¢Ù¾Ø±|ÙÙ|ÙÛ|ÚÙØ¦Ù|Ø¬ÙÙ|Ø¬ÙÙ|Ø¬ÙÙÙ|ÚÙØ¦ÛÙ|Ø§ÙØª|Ø¢Ú¯Ù|Ø³Ù¾ØªÙØ¨Ø±|Ø³Ù¾ØªØ§ÙØ¨Ø±|Ø§Ú©ØªØ¨Ø±|Ø§Ú©ØªÙØ¨Ø±|ÙÙØ§ÙØ¨Ø±|ÙÙØ§ÙÙ|Ø¯Ø³Ø§ÙØ¨Ø±|Ø¯Ø³Ø§ÙÙ|Ø¯Ø³Ù)/i,
  wide: /^(ÚØ§ÙÙÛÙ|Ø¬ÙÙØ±Û|ÙØ¨Ø±ÙØ±Û|ÙÙØ±ÛÙ|ÙØ§Ø±Ú|ÙØ§Ø±Ø³|Ø¢Ù¾Ø±ÛÙ|Ø§Ù¾Ø±ÛÙ|Ø§ÛÙ¾Ø±ÛÙ|Ø¢ÙØ±ÛÙ|ÙÙ|ÙÛ|ÚÙØ¦Ù|Ø¬ÙÙ|Ø¬ÙÙØ§Û|ÚÙØ¦ÛÙ|Ø¢Ú¯Ø³Øª|Ø§Ú¯Ø³Øª|Ø¢Ú¯ÙØ³Øª|Ø§ÙØª|Ø³Ù¾ØªÙØ¨Ø±|Ø³Ù¾ØªØ§ÙØ¨Ø±|Ø§Ú©ØªØ¨Ø±|Ø§Ú©ØªÙØ¨Ø±|ÙÙØ§ÙØ¨Ø±|ÙÙÙØ¨Ø±|Ø¯Ø³Ø§ÙØ¨Ø±|Ø¯Ø³ÙØ¨Ø±)/i,
};
const parseMonthPatterns$W = {
  narrow: [
    /^(Ú|Ø¬)/i,
    /^Ù/i,
    /^Ù/i,
    /^(Ø¢|Ø§)/i,
    /^Ù/i,
    /^(Ú|Ø¬)/i,
    /^(Ø¬|Ú)/i,
    /^(Ø¢|Ø§)/i,
    /^Ø³/i,
    /^Ø§/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^ÚØ§/i,
    /^Ù/i,
    /^ÙØ§/i,
    /^Ø¢Ù¾/i,
    /^(ÙÛ|ÙÙ)/i,
    /^(ÚÙØ¦Ù|Ø¬ÙÙ)/i,
    /^(ÚÙØ¦Û|Ø¬ÙÙ)/i,
    /^(Ø§ÙØª|Ø¢Ú¯)/i,
    /^Ø³/i,
    /^(Ø§ÙÚ©|Ø§Ú©)/i,
    /^Ù/i,
    /^Ø¯/i,
  ],
};

const matchDayPatterns$W = {
  narrow: /^[Ø´ÛØ¯Ø³ÚÙ¾Ø¬]/i,
  short: /^(Ø´|Ø¬|1Ø´|2Ø´|3Ø´|4Ø´|5Ø´)/i,
  abbreviated: /^(ÛÚ©Ø´ÙØ¨Ù|Ø¯ÙØ´ÙØ¨Ù|Ø³ÙâØ´ÙØ¨Ù|ÚÙØ§Ø±Ø´ÙØ¨Ù|Ù¾ÙØ¬âØ´ÙØ¨Ù|Ø¬ÙØ¹Ù|Ø´ÙØ¨Ù)/i,
  wide: /^(ÛÚ©Ø´ÙØ¨Ù|Ø¯ÙØ´ÙØ¨Ù|Ø³ÙâØ´ÙØ¨Ù|ÚÙØ§Ø±Ø´ÙØ¨Ù|Ù¾ÙØ¬âØ´ÙØ¨Ù|Ø¬ÙØ¹Ù|Ø´ÙØ¨Ù)/i,
};
const parseDayPatterns$W = {
  narrow: [/^Û/i, /^Ø¯Ù/i, /^Ø³/i, /^Ú/i, /^Ù¾/i, /^Ø¬/i, /^Ø´/i],
  any: [
    /^(Û|1Ø´|ÛÚ©Ø´ÙØ¨Ù)/i,
    /^(Ø¯|2Ø´|Ø¯ÙØ´ÙØ¨Ù)/i,
    /^(Ø³|3Ø´|Ø³ÙâØ´ÙØ¨Ù)/i,
    /^(Ú|4Ø´|ÚÙØ§Ø±Ø´ÙØ¨Ù)/i,
    /^(Ù¾|5Ø´|Ù¾ÙØ¬Ø´ÙØ¨Ù)/i,
    /^(Ø¬|Ø¬ÙØ¹Ù)/i,
    /^(Ø´|Ø´ÙØ¨Ù)/i,
  ],
};

const matchDayPeriodPatterns$W = {
  narrow: /^(Ø¨|Ù|Ù|Ø¸|Øµ|Ø¨.Ø¸.|Ø¹|Ø´)/i,
  abbreviated: /^(Ù.Ø¸.|Ø¨.Ø¸.|ÙÛÙÙâØ´Ø¨|Ø¸ÙØ±|ØµØ¨Ø­|Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±|Ø¹ØµØ±|Ø´Ø¨)/i,
  wide: /^(ÙØ¨ÙâØ§Ø²Ø¸ÙØ±|ÙÛÙÙâØ´Ø¨|Ø¸ÙØ±|ØµØ¨Ø­|Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±|Ø¹ØµØ±|Ø´Ø¨)/i,
};
const parseDayPeriodPatterns$W = {
  any: {
    am: /^(Ù|Ù.Ø¸.|ÙØ¨ÙâØ§Ø²Ø¸ÙØ±)/i,
    pm: /^(Ø¨|Ø¨.Ø¸.|Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±)/i,
    midnight: /^(âÙÛÙÙâØ´Ø¨|Ù)/i,
    noon: /^(Ø¸|Ø¸ÙØ±)/i,
    morning: /(Øµ|ØµØ¨Ø­)/i,
    afternoon: /(Ø¨|Ø¨.Ø¸.|Ø¨Ø¹Ø¯Ø§Ø²Ø¸ÙØ±)/i,
    evening: /(Ø¹|Ø¹ØµØ±)/i,
    night: /(Ø´|Ø´Ø¨)/i,
  },
};

(match$W.match = {
  ordinalNumber: (0, _index2$1V.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$W,
    parsePattern: parseOrdinalNumberPattern$W,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3V.buildMatchFn)({
    matchPatterns: matchEraPatterns$W,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$W,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3V.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$W,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$W,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3V.buildMatchFn)({
    matchPatterns: matchMonthPatterns$W,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$W,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3V.buildMatchFn)({
    matchPatterns: matchDayPatterns$W,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$W,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3V.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$W,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$W,
    defaultParseWidth: "any",
  }),
});

faIR.faIR = void 0;
var _index$3U = formatDistance$1R;
var _index2$1U = formatLong$Z;
var _index3$_ = formatRelative$1T;
var _index4$Z = localize$W;
var _index5$Z = match$W;

/**
 * @category Locales
 * @summary Persian/Farsi locale (Iran).
 * @language Persian
 * @iso-639-2 ira
 * @author Morteza Ziyae [@mort3za](https://github.com/mort3za)
 */
(faIR.faIR = {
  code: "fa-IR",
  formatDistance: _index$3U.formatDistance,
  formatLong: _index2$1U.formatLong,
  formatRelative: _index3$_.formatRelative,
  localize: _index4$Z.localize,
  match: _index5$Z.match,
  options: {
    weekStartsOn: 6 /* Saturday */,
    firstWeekContainsDate: 1,
  },
});

var fi = {};

var formatDistance$1P = {};

formatDistance$1P.formatDistance = void 0;

function futureSeconds(text) {
  return text.replace(/sekuntia?/, "sekunnin");
}

function futureMinutes(text) {
  return text.replace(/minuuttia?/, "minuutin");
}

function futureHours(text) {
  return text.replace(/tuntia?/, "tunnin");
}

function futureDays(text) {
  return text.replace(/pÃ¤ivÃ¤Ã¤?/, "pÃ¤ivÃ¤n");
}

function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, "viikon");
}

function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, "kuukauden");
}

function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, "vuoden");
}

const formatDistanceLocale$U = {
  lessThanXSeconds: {
    one: "alle sekunti",
    other: "alle {{count}} sekuntia",
    futureTense: futureSeconds,
  },

  xSeconds: {
    one: "sekunti",
    other: "{{count}} sekuntia",
    futureTense: futureSeconds,
  },

  halfAMinute: {
    one: "puoli minuuttia",
    other: "puoli minuuttia",
    futureTense: (_text) => "puolen minuutin",
  },

  lessThanXMinutes: {
    one: "alle minuutti",
    other: "alle {{count}} minuuttia",
    futureTense: futureMinutes,
  },

  xMinutes: {
    one: "minuutti",
    other: "{{count}} minuuttia",
    futureTense: futureMinutes,
  },

  aboutXHours: {
    one: "noin tunti",
    other: "noin {{count}} tuntia",
    futureTense: futureHours,
  },

  xHours: {
    one: "tunti",
    other: "{{count}} tuntia",
    futureTense: futureHours,
  },

  xDays: {
    one: "pÃ¤ivÃ¤",
    other: "{{count}} pÃ¤ivÃ¤Ã¤",
    futureTense: futureDays,
  },

  aboutXWeeks: {
    one: "noin viikko",
    other: "noin {{count}} viikkoa",
    futureTense: futureWeeks,
  },

  xWeeks: {
    one: "viikko",
    other: "{{count}} viikkoa",
    futureTense: futureWeeks,
  },

  aboutXMonths: {
    one: "noin kuukausi",
    other: "noin {{count}} kuukautta",
    futureTense: futureMonths,
  },

  xMonths: {
    one: "kuukausi",
    other: "{{count}} kuukautta",
    futureTense: futureMonths,
  },

  aboutXYears: {
    one: "noin vuosi",
    other: "noin {{count}} vuotta",
    futureTense: futureYears,
  },

  xYears: {
    one: "vuosi",
    other: "{{count}} vuotta",
    futureTense: futureYears,
  },

  overXYears: {
    one: "yli vuosi",
    other: "yli {{count}} vuotta",
    futureTense: futureYears,
  },

  almostXYears: {
    one: "lÃ¤hes vuosi",
    other: "lÃ¤hes {{count}} vuotta",
    futureTense: futureYears,
  },
};

const formatDistance$1O = (token, count, options) => {
  const tokenValue = formatDistanceLocale$U[token];
  const result =
    count === 1
      ? tokenValue.one
      : tokenValue.other.replace("{{count}}", String(count));

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return tokenValue.futureTense(result) + " kuluttua";
    } else {
      return result + " sitten";
    }
  }

  return result;
};
formatDistance$1P.formatDistance = formatDistance$1O;

var formatLong$Y = {};

formatLong$Y.formatLong = void 0;
var _index$3T = buildFormatLongFn$1;

const dateFormats$Y = {
  full: "eeee d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "d.M.y",
};

const timeFormats$Y = {
  full: "HH.mm.ss zzzz",
  long: "HH.mm.ss z",
  medium: "HH.mm.ss",
  short: "HH.mm",
};

const dateTimeFormats$Y = {
  full: "{{date}} 'klo' {{time}}",
  long: "{{date}} 'klo' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$Y.formatLong = {
  date: (0, _index$3T.buildFormatLongFn)({
    formats: dateFormats$Y,
    defaultWidth: "full",
  }),

  time: (0, _index$3T.buildFormatLongFn)({
    formats: timeFormats$Y,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3T.buildFormatLongFn)({
    formats: dateTimeFormats$Y,
    defaultWidth: "full",
  }),
});

var formatRelative$1R = {};

formatRelative$1R.formatRelative = void 0;

const formatRelativeLocale$W = {
  lastWeek: "'viime' eeee 'klo' p",
  yesterday: "'eilen klo' p",
  today: "'tÃ¤nÃ¤Ã¤n klo' p",
  tomorrow: "'huomenna klo' p",
  nextWeek: "'ensi' eeee 'klo' p",
  other: "P",
};

const formatRelative$1Q = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$W[token];
formatRelative$1R.formatRelative = formatRelative$1Q;

var localize$V = {};

localize$V.localize = void 0;
var _index$3S = buildLocalizeFn$1;

const eraValues$V = {
  narrow: ["eaa.", "jaa."],
  abbreviated: ["eaa.", "jaa."],
  wide: ["ennen ajanlaskun alkua", "jÃ¤lkeen ajanlaskun alun"],
};

const quarterValues$V = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartaali", "2. kvartaali", "3. kvartaali", "4. kvartaali"],
};

const monthValues$V = {
  narrow: ["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"],
  abbreviated: [
    "tammi",
    "helmi",
    "maalis",
    "huhti",
    "touko",
    "kesÃ¤",
    "heinÃ¤",
    "elo",
    "syys",
    "loka",
    "marras",
    "joulu",
  ],

  wide: [
    "tammikuu",
    "helmikuu",
    "maaliskuu",
    "huhtikuu",
    "toukokuu",
    "kesÃ¤kuu",
    "heinÃ¤kuu",
    "elokuu",
    "syyskuu",
    "lokakuu",
    "marraskuu",
    "joulukuu",
  ],
};

const formattingMonthValues$b = {
  narrow: monthValues$V.narrow,
  abbreviated: monthValues$V.abbreviated,
  wide: [
    "tammikuuta",
    "helmikuuta",
    "maaliskuuta",
    "huhtikuuta",
    "toukokuuta",
    "kesÃ¤kuuta",
    "heinÃ¤kuuta",
    "elokuuta",
    "syyskuuta",
    "lokakuuta",
    "marraskuuta",
    "joulukuuta",
  ],
};

const dayValues$V = {
  narrow: ["S", "M", "T", "K", "T", "P", "L"],
  short: ["su", "ma", "ti", "ke", "to", "pe", "la"],
  abbreviated: ["sunn.", "maan.", "tiis.", "kesk.", "torst.", "perj.", "la"],

  wide: [
    "sunnuntai",
    "maanantai",
    "tiistai",
    "keskiviikko",
    "torstai",
    "perjantai",
    "lauantai",
  ],
};

const formattingDayValues$3 = {
  narrow: dayValues$V.narrow,
  short: dayValues$V.short,
  abbreviated: dayValues$V.abbreviated,
  wide: [
    "sunnuntaina",
    "maanantaina",
    "tiistaina",
    "keskiviikkona",
    "torstaina",
    "perjantaina",
    "lauantaina",
  ],
};

const dayPeriodValues$V = {
  narrow: {
    am: "ap",
    pm: "ip",
    midnight: "keskiyÃ¶",
    noon: "keskipÃ¤ivÃ¤",
    morning: "ap",
    afternoon: "ip",
    evening: "illalla",
    night: "yÃ¶llÃ¤",
  },
  abbreviated: {
    am: "ap",
    pm: "ip",
    midnight: "keskiyÃ¶",
    noon: "keskipÃ¤ivÃ¤",
    morning: "ap",
    afternoon: "ip",
    evening: "illalla",
    night: "yÃ¶llÃ¤",
  },
  wide: {
    am: "ap",
    pm: "ip",
    midnight: "keskiyÃ¶llÃ¤",
    noon: "keskipÃ¤ivÃ¤llÃ¤",
    morning: "aamupÃ¤ivÃ¤llÃ¤",
    afternoon: "iltapÃ¤ivÃ¤llÃ¤",
    evening: "illalla",
    night: "yÃ¶llÃ¤",
  },
};

const ordinalNumber$V = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$V.localize = {
  ordinalNumber: ordinalNumber$V,

  era: (0, _index$3S.buildLocalizeFn)({
    values: eraValues$V,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3S.buildLocalizeFn)({
    values: quarterValues$V,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3S.buildLocalizeFn)({
    values: monthValues$V,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$b,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$3S.buildLocalizeFn)({
    values: dayValues$V,
    defaultWidth: "wide",
    formattingValues: formattingDayValues$3,
    defaultFormattingWidth: "wide",
  }),

  dayPeriod: (0, _index$3S.buildLocalizeFn)({
    values: dayPeriodValues$V,
    defaultWidth: "wide",
  }),
});

var match$V = {};

match$V.match = void 0;

var _index$3R = buildMatchFn$1;
var _index2$1T = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$V = /^(\d+)(\.)/i;
const parseOrdinalNumberPattern$V = /\d+/i;

const matchEraPatterns$V = {
  narrow: /^(e|j)/i,
  abbreviated: /^(eaa.|jaa.)/i,
  wide: /^(ennen ajanlaskun alkua|jÃ¤lkeen ajanlaskun alun)/i,
};
const parseEraPatterns$V = {
  any: [/^e/i, /^j/i],
};

const matchQuarterPatterns$V = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\.? kvartaali/i,
};
const parseQuarterPatterns$V = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$V = {
  narrow: /^[thmkeslj]/i,
  abbreviated:
    /^(tammi|helmi|maalis|huhti|touko|kesÃ¤|heinÃ¤|elo|syys|loka|marras|joulu)/i,
  wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesÃ¤kuu|heinÃ¤kuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i,
};
const parseMonthPatterns$V = {
  narrow: [
    /^t/i,
    /^h/i,
    /^m/i,
    /^h/i,
    /^t/i,
    /^k/i,
    /^h/i,
    /^e/i,
    /^s/i,
    /^l/i,
    /^m/i,
    /^j/i,
  ],

  any: [
    /^ta/i,
    /^hel/i,
    /^maa/i,
    /^hu/i,
    /^to/i,
    /^k/i,
    /^hei/i,
    /^e/i,
    /^s/i,
    /^l/i,
    /^mar/i,
    /^j/i,
  ],
};

const matchDayPatterns$V = {
  narrow: /^[smtkpl]/i,
  short: /^(su|ma|ti|ke|to|pe|la)/i,
  abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
  wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i,
};
const parseDayPatterns$V = {
  narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i],
};

const matchDayPeriodPatterns$V = {
  narrow:
    /^(ap|ip|keskiyÃ¶|keskipÃ¤ivÃ¤|aamupÃ¤ivÃ¤llÃ¤|iltapÃ¤ivÃ¤llÃ¤|illalla|yÃ¶llÃ¤)/i,
  any: /^(ap|ip|keskiyÃ¶llÃ¤|keskipÃ¤ivÃ¤llÃ¤|aamupÃ¤ivÃ¤llÃ¤|iltapÃ¤ivÃ¤llÃ¤|illalla|yÃ¶llÃ¤)/i,
};
const parseDayPeriodPatterns$V = {
  any: {
    am: /^ap/i,
    pm: /^ip/i,
    midnight: /^keskiyÃ¶/i,
    noon: /^keskipÃ¤ivÃ¤/i,
    morning: /aamupÃ¤ivÃ¤llÃ¤/i,
    afternoon: /iltapÃ¤ivÃ¤llÃ¤/i,
    evening: /illalla/i,
    night: /yÃ¶llÃ¤/i,
  },
};

(match$V.match = {
  ordinalNumber: (0, _index2$1T.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$V,
    parsePattern: parseOrdinalNumberPattern$V,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3R.buildMatchFn)({
    matchPatterns: matchEraPatterns$V,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$V,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3R.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$V,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$V,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3R.buildMatchFn)({
    matchPatterns: matchMonthPatterns$V,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$V,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3R.buildMatchFn)({
    matchPatterns: matchDayPatterns$V,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$V,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3R.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$V,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$V,
    defaultParseWidth: "any",
  }),
});

fi.fi = void 0;
var _index$3Q = formatDistance$1P;
var _index2$1S = formatLong$Y;
var _index3$Z = formatRelative$1R;
var _index4$Y = localize$V;
var _index5$Y = match$V;

/**
 * @category Locales
 * @summary Finnish locale.
 * @language Finnish
 * @iso-639-2 fin
 * @author Pyry-Samuli Lahti [@Pyppe](https://github.com/Pyppe)
 * @author Edo Rivai [@mikolajgrzyb](https://github.com/mikolajgrzyb)
 * @author Samu Juvonen [@sjuvonen](https://github.com/sjuvonen)
 */
(fi.fi = {
  code: "fi",
  formatDistance: _index$3Q.formatDistance,
  formatLong: _index2$1S.formatLong,
  formatRelative: _index3$Z.formatRelative,
  localize: _index4$Y.localize,
  match: _index5$Y.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var fr = {};

var formatDistance$1N = {};

formatDistance$1N.formatDistance = void 0;

const formatDistanceLocale$T = {
  lessThanXSeconds: {
    one: "moins dâune seconde",
    other: "moins de {{count}} secondes",
  },

  xSeconds: {
    one: "1 seconde",
    other: "{{count}} secondes",
  },

  halfAMinute: "30 secondes",

  lessThanXMinutes: {
    one: "moins dâune minute",
    other: "moins de {{count}} minutes",
  },

  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes",
  },

  aboutXHours: {
    one: "environ 1 heure",
    other: "environ {{count}} heures",
  },

  xHours: {
    one: "1 heure",
    other: "{{count}} heures",
  },

  xDays: {
    one: "1 jour",
    other: "{{count}} jours",
  },

  aboutXWeeks: {
    one: "environ 1 semaine",
    other: "environ {{count}} semaines",
  },

  xWeeks: {
    one: "1 semaine",
    other: "{{count}} semaines",
  },

  aboutXMonths: {
    one: "environ 1 mois",
    other: "environ {{count}} mois",
  },

  xMonths: {
    one: "1 mois",
    other: "{{count}} mois",
  },

  aboutXYears: {
    one: "environ 1 an",
    other: "environ {{count}} ans",
  },

  xYears: {
    one: "1 an",
    other: "{{count}} ans",
  },

  overXYears: {
    one: "plus dâun an",
    other: "plus de {{count}} ans",
  },

  almostXYears: {
    one: "presquâun an",
    other: "presque {{count}} ans",
  },
};

const formatDistance$1M = (token, count, options) => {
  let result;
  const form = formatDistanceLocale$T[token];
  if (typeof form === "string") {
    result = form;
  } else if (count === 1) {
    result = form.one;
  } else {
    result = form.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dans " + result;
    } else {
      return "il y a " + result;
    }
  }

  return result;
};
formatDistance$1N.formatDistance = formatDistance$1M;

var formatLong$X = {};

formatLong$X.formatLong = void 0;
var _index$3P = buildFormatLongFn$1;

const dateFormats$X = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$X = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$X = {
  full: "{{date}} 'Ã ' {{time}}",
  long: "{{date}} 'Ã ' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$X.formatLong = {
  date: (0, _index$3P.buildFormatLongFn)({
    formats: dateFormats$X,
    defaultWidth: "full",
  }),

  time: (0, _index$3P.buildFormatLongFn)({
    formats: timeFormats$X,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3P.buildFormatLongFn)({
    formats: dateTimeFormats$X,
    defaultWidth: "full",
  }),
});

var formatRelative$1P = {};

formatRelative$1P.formatRelative = void 0;

const formatRelativeLocale$V = {
  lastWeek: "eeee 'dernier Ã ' p",
  yesterday: "'hier Ã ' p",
  today: "'aujourdâhui Ã ' p",
  tomorrow: "'demain Ã ' p'",
  nextWeek: "eeee 'prochain Ã ' p",
  other: "P",
};

const formatRelative$1O = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$V[token];
formatRelative$1P.formatRelative = formatRelative$1O;

var localize$U = {};

localize$U.localize = void 0;
var _index$3O = buildLocalizeFn$1;

const eraValues$U = {
  narrow: ["av. J.-C", "ap. J.-C"],
  abbreviated: ["av. J.-C", "ap. J.-C"],
  wide: ["avant JÃ©sus-Christ", "aprÃ¨s JÃ©sus-Christ"],
};

const quarterValues$U = {
  narrow: ["T1", "T2", "T3", "T4"],
  abbreviated: ["1er trim.", "2Ã¨me trim.", "3Ã¨me trim.", "4Ã¨me trim."],
  wide: ["1er trimestre", "2Ã¨me trimestre", "3Ã¨me trimestre", "4Ã¨me trimestre"],
};

const monthValues$U = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "janv.",
    "fÃ©vr.",
    "mars",
    "avr.",
    "mai",
    "juin",
    "juil.",
    "aoÃ»t",
    "sept.",
    "oct.",
    "nov.",
    "dÃ©c.",
  ],

  wide: [
    "janvier",
    "fÃ©vrier",
    "mars",
    "avril",
    "mai",
    "juin",
    "juillet",
    "aoÃ»t",
    "septembre",
    "octobre",
    "novembre",
    "dÃ©cembre",
  ],
};

const dayValues$U = {
  narrow: ["D", "L", "M", "M", "J", "V", "S"],
  short: ["di", "lu", "ma", "me", "je", "ve", "sa"],
  abbreviated: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],

  wide: [
    "dimanche",
    "lundi",
    "mardi",
    "mercredi",
    "jeudi",
    "vendredi",
    "samedi",
  ],
};

const dayPeriodValues$U = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "minuit",
    noon: "midi",
    morning: "mat.",
    afternoon: "ap.m.",
    evening: "soir",
    night: "mat.",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "minuit",
    noon: "midi",
    morning: "matin",
    afternoon: "aprÃ¨s-midi",
    evening: "soir",
    night: "matin",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "minuit",
    noon: "midi",
    morning: "du matin",
    afternoon: "de lâaprÃ¨s-midi",
    evening: "du soir",
    night: "du matin",
  },
};

const ordinalNumber$U = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = options?.unit;

  if (number === 0) return "0";

  const feminineUnits = ["year", "week", "hour", "minute", "second"];
  let suffix;

  if (number === 1) {
    suffix = unit && feminineUnits.includes(unit) ? "Ã¨re" : "er";
  } else {
    suffix = "Ã¨me";
  }

  return number + suffix;
};

const LONG_MONTHS_TOKENS = ["MMM", "MMMM"];

(localize$U.localize = {
  preprocessor: (date, parts) => {
    // Replaces the `do` tokens with `d` when used with long month tokens and the day of the month is greater than one.
    // Use case "do MMMM" => 1er aoÃ»t, 29 aoÃ»t
    // see https://github.com/date-fns/date-fns/issues/1391

    if (date.getDate() === 1) return parts;

    const hasLongMonthToken = parts.some(
      (part) => part.isToken && LONG_MONTHS_TOKENS.includes(part.value),
    );

    if (!hasLongMonthToken) return parts;

    return parts.map((part) =>
      part.isToken && part.value === "do"
        ? { isToken: true, value: "d" }
        : part,
    );
  },

  ordinalNumber: ordinalNumber$U,

  era: (0, _index$3O.buildLocalizeFn)({
    values: eraValues$U,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3O.buildLocalizeFn)({
    values: quarterValues$U,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3O.buildLocalizeFn)({
    values: monthValues$U,
    defaultWidth: "wide",
  }),

  day: (0, _index$3O.buildLocalizeFn)({
    values: dayValues$U,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3O.buildLocalizeFn)({
    values: dayPeriodValues$U,
    defaultWidth: "wide",
  }),
});

var match$U = {};

match$U.match = void 0;

var _index$3N = buildMatchFn$1;
var _index2$1R = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$U = /^(\d+)(iÃ¨me|Ã¨re|Ã¨me|er|e)?/i;
const parseOrdinalNumberPattern$U = /\d+/i;

const matchEraPatterns$U = {
  narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
  abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(avant JÃ©sus-Christ|aprÃ¨s JÃ©sus-Christ)/i,
};
const parseEraPatterns$U = {
  any: [/^av/i, /^ap/i],
};

const matchQuarterPatterns$U = {
  narrow: /^T?[1234]/i,
  abbreviated: /^[1234](er|Ã¨me|e)? trim\.?/i,
  wide: /^[1234](er|Ã¨me|e)? trimestre/i,
};
const parseQuarterPatterns$U = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$U = {
  narrow: /^[jfmasond]/i,
  abbreviated:
    /^(janv|fÃ©vr|mars|avr|mai|juin|juill|juil|aoÃ»t|sept|oct|nov|dÃ©c)\.?/i,
  wide: /^(janvier|fÃ©vrier|mars|avril|mai|juin|juillet|aoÃ»t|septembre|octobre|novembre|dÃ©cembre)/i,
};
const parseMonthPatterns$U = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^av/i,
    /^ma/i,
    /^juin/i,
    /^juil/i,
    /^ao/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$U = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|lu|ma|me|je|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
  wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i,
};
const parseDayPatterns$U = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i],
};

const matchDayPeriodPatterns$U = {
  narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
  any: /^([ap]\.?\s?m\.?|du matin|de l'aprÃ¨s[-\s]midi|du soir|de la nuit)/i,
};
const parseDayPeriodPatterns$U = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /soir/i,
    night: /nuit/i,
  },
};

(match$U.match = {
  ordinalNumber: (0, _index2$1R.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$U,
    parsePattern: parseOrdinalNumberPattern$U,
    valueCallback: (value) => parseInt(value),
  }),

  era: (0, _index$3N.buildMatchFn)({
    matchPatterns: matchEraPatterns$U,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$U,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3N.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$U,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$U,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3N.buildMatchFn)({
    matchPatterns: matchMonthPatterns$U,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$U,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3N.buildMatchFn)({
    matchPatterns: matchDayPatterns$U,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$U,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3N.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$U,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$U,
    defaultParseWidth: "any",
  }),
});

fr.fr = void 0;
var _index$3M = formatDistance$1N;
var _index2$1Q = formatLong$X;
var _index3$Y = formatRelative$1P;
var _index4$X = localize$U;
var _index5$X = match$U;

/**
 * @category Locales
 * @summary French locale.
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau](https://github.com/izeau)
 * @author FranÃ§ois B [@fbonzon](https://github.com/fbonzon)
 */
(fr.fr = {
  code: "fr",
  formatDistance: _index$3M.formatDistance,
  formatLong: _index2$1Q.formatLong,
  formatRelative: _index3$Y.formatRelative,
  localize: _index4$X.localize,
  match: _index5$X.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var frCA = {};

var formatLong$W = {};

formatLong$W.formatLong = void 0;
var _index$3L = buildFormatLongFn$1;

const dateFormats$W = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "yy-MM-dd",
};

const timeFormats$W = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$W = {
  full: "{{date}} 'Ã ' {{time}}",
  long: "{{date}} 'Ã ' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$W.formatLong = {
  date: (0, _index$3L.buildFormatLongFn)({
    formats: dateFormats$W,
    defaultWidth: "full",
  }),

  time: (0, _index$3L.buildFormatLongFn)({
    formats: timeFormats$W,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3L.buildFormatLongFn)({
    formats: dateTimeFormats$W,
    defaultWidth: "full",
  }),
});

frCA.frCA = void 0;
var _index$3K = formatDistance$1N;
var _index2$1P = formatRelative$1P;
var _index3$X = localize$U;
var _index4$W = match$U;

var _index5$W = formatLong$W; // Same as fr
// Unique for fr-CA
/**
 * @category Locales
 * @summary French locale (Canada).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau](https://github.com/izeau)
 * @author FranÃ§ois B [@fbonzon](https://github.com/fbonzon)
 * @author Gabriele Petrioli [@gpetrioli](https://github.com/gpetrioli)
 */
(frCA.frCA = {
  code: "fr-CA",
  formatDistance: _index$3K.formatDistance,
  formatLong: _index5$W.formatLong,
  formatRelative: _index2$1P.formatRelative,
  localize: _index3$X.localize,
  match: _index4$W.match,

  // Unique for fr-CA
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var frCH = {};

var formatLong$V = {};

formatLong$V.formatLong = void 0;
var _index$3J = buildFormatLongFn$1;

const dateFormats$V = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.y",
};

const timeFormats$V = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$V = {
  full: "{{date}} 'Ã ' {{time}}",
  long: "{{date}} 'Ã ' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$V.formatLong = {
  date: (0, _index$3J.buildFormatLongFn)({
    formats: dateFormats$V,
    defaultWidth: "full",
  }),

  time: (0, _index$3J.buildFormatLongFn)({
    formats: timeFormats$V,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3J.buildFormatLongFn)({
    formats: dateTimeFormats$V,
    defaultWidth: "full",
  }),
});

var formatRelative$1N = {};

formatRelative$1N.formatRelative = void 0;

const formatRelativeLocale$U = {
  lastWeek: "eeee 'la semaine derniÃ¨re Ã ' p",
  yesterday: "'hier Ã ' p",
  today: "'aujourdâhui Ã ' p",
  tomorrow: "'demain Ã ' p'",
  nextWeek: "eeee 'la semaine prochaine Ã ' p",
  other: "P",
};

const formatRelative$1M = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$U[token];
formatRelative$1N.formatRelative = formatRelative$1M;

frCH.frCH = void 0;
var _index$3I = formatDistance$1N;
var _index2$1O = localize$U;
var _index3$W = match$U;

var _index4$V = formatLong$V;
var _index5$V = formatRelative$1N; // Same as fr
// Unique for fr-CH
/**
 * @category Locales
 * @summary French locale (Switzerland).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau](https://github.com/izeau)
 * @author FranÃ§ois B [@fbonzon](https://github.com/fbonzon)
 * @author Van Vuong Ngo [@vanvuongngo](https://github.com/vanvuongngo)
 * @author Alex Hoeing [@dcbn](https://github.com/dcbn)
 */
(frCH.frCH = {
  code: "fr-CH",
  formatDistance: _index$3I.formatDistance,
  formatLong: _index4$V.formatLong,
  formatRelative: _index5$V.formatRelative,
  localize: _index2$1O.localize,
  match: _index3$W.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var fy = {};

var formatDistance$1L = {};

formatDistance$1L.formatDistance = void 0;

const formatDistanceLocale$S = {
  lessThanXSeconds: {
    one: "minder as 1 sekonde",
    other: "minder as {{count}} sekonden",
  },

  xSeconds: {
    one: "1 sekonde",
    other: "{{count}} sekonden",
  },

  halfAMinute: "oardel minÃºt",

  lessThanXMinutes: {
    one: "minder as 1 minÃºt",
    other: "minder as {{count}} minuten",
  },

  xMinutes: {
    one: "1 minÃºt",
    other: "{{count}} minuten",
  },

  aboutXHours: {
    one: "sawat 1 oere",
    other: "sawat {{count}} oere",
  },

  xHours: {
    one: "1 oere",
    other: "{{count}} oere",
  },

  xDays: {
    one: "1 dei",
    other: "{{count}} dagen",
  },

  aboutXWeeks: {
    one: "sawat 1 wike",
    other: "sawat {{count}} wiken",
  },

  xWeeks: {
    one: "1 wike",
    other: "{{count}} wiken",
  },

  aboutXMonths: {
    one: "sawat 1 moanne",
    other: "sawat {{count}} moannen",
  },

  xMonths: {
    one: "1 moanne",
    other: "{{count}} moannen",
  },

  aboutXYears: {
    one: "sawat 1 jier",
    other: "sawat {{count}} jier",
  },

  xYears: {
    one: "1 jier",
    other: "{{count}} jier",
  },

  overXYears: {
    one: "mear as 1 jier",
    other: "mear as {{count}}s jier",
  },

  almostXYears: {
    one: "hast 1 jier",
    other: "hast {{count}} jier",
  },
};

const formatDistance$1K = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$S[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "oer " + result;
    } else {
      return result + " lyn";
    }
  }

  return result;
};
formatDistance$1L.formatDistance = formatDistance$1K;

var formatLong$U = {};

formatLong$U.formatLong = void 0;
var _index$3H = buildFormatLongFn$1;

const dateFormats$U = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd-MM-y",
};

const timeFormats$U = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$U = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$U.formatLong = {
  date: (0, _index$3H.buildFormatLongFn)({
    formats: dateFormats$U,
    defaultWidth: "full",
  }),

  time: (0, _index$3H.buildFormatLongFn)({
    formats: timeFormats$U,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3H.buildFormatLongFn)({
    formats: dateTimeFormats$U,
    defaultWidth: "full",
  }),
});

var formatRelative$1L = {};

formatRelative$1L.formatRelative = void 0;

const formatRelativeLocale$T = {
  lastWeek: "'Ã´frÃ»ne' eeee 'om' p",
  yesterday: "'juster om' p",
  today: "'hjoed om' p",
  tomorrow: "'moarn om' p",
  nextWeek: "eeee 'om' p",
  other: "P",
};

const formatRelative$1K = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$T[token];
formatRelative$1L.formatRelative = formatRelative$1K;

var localize$T = {};

localize$T.localize = void 0;
var _index$3G = buildLocalizeFn$1;

const eraValues$T = {
  narrow: ["f.K.", "n.K."],
  abbreviated: ["f.Kr.", "n.Kr."],
  wide: ["foar Kristus", "nei Kristus"],
};

const quarterValues$T = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1e fearnsjier", "2e fearnsjier", "3e fearnsjier", "4e fearnsjier"],
};

const monthValues$T = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "jan.",
    "feb.",
    "mrt.",
    "apr.",
    "mai.",
    "jun.",
    "jul.",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "des.",
  ],

  wide: [
    "jannewaris",
    "febrewaris",
    "maart",
    "april",
    "maaie",
    "juny",
    "july",
    "augustus",
    "septimber",
    "oktober",
    "novimber",
    "desimber",
  ],
};

const dayValues$T = {
  narrow: ["s", "m", "t", "w", "t", "f", "s"],
  short: ["si", "mo", "ti", "wo", "to", "fr", "so"],
  abbreviated: ["snein", "moa", "tii", "woa", "ton", "fre", "sneon"],
  wide: [
    "snein",
    "moandei",
    "tiisdei",
    "woansdei",
    "tongersdei",
    "freed",
    "sneon",
  ],
};

const dayPeriodValues$T = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "middei",
    morning: "moarns",
    afternoon: "middeis",
    evening: "jÃ»ns",
    night: "nachts",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "middei",
    morning: "moarns",
    afternoon: "middeis",
    evening: "jÃ»ns",
    night: "nachts",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "middei",
    morning: "moarns",
    afternoon: "middeis",
    evening: "jÃ»ns",
    night: "nachts",
  },
};

const ordinalNumber$T = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "e";
};

(localize$T.localize = {
  ordinalNumber: ordinalNumber$T,

  era: (0, _index$3G.buildLocalizeFn)({
    values: eraValues$T,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3G.buildLocalizeFn)({
    values: quarterValues$T,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3G.buildLocalizeFn)({
    values: monthValues$T,
    defaultWidth: "wide",
  }),

  day: (0, _index$3G.buildLocalizeFn)({
    values: dayValues$T,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3G.buildLocalizeFn)({
    values: dayPeriodValues$T,
    defaultWidth: "wide",
  }),
});

var match$T = {};

match$T.match = void 0;

var _index$3F = buildMatchFn$1;
var _index2$1N = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$T = /^(\d+)e?/i;
const parseOrdinalNumberPattern$T = /\d+/i;

const matchEraPatterns$T = {
  narrow: /^([fn]\.? ?K\.?)/,
  abbreviated: /^([fn]\. ?Kr\.?)/,
  wide: /^((foar|nei) Kristus)/,
};
const parseEraPatterns$T = {
  any: [/^f/, /^n/],
};

const matchQuarterPatterns$T = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e fearnsjier/i,
};

const parseQuarterPatterns$T = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$T = {
  narrow: /^[jfmasond]/i,
  abbreviated:
    /^(jan.|feb.|mrt.|apr.|mai.|jun.|jul.|aug.|sep.|okt.|nov.|des.)/i,
  wide: /^(jannewaris|febrewaris|maart|april|maaie|juny|july|augustus|septimber|oktober|novimber|desimber)/i,
};
const parseMonthPatterns$T = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^jan/i,
    /^feb/i,
    /^m(r|a)/i,
    /^apr/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^aug/i,
    /^sep/i,
    /^okt/i,
    /^nov/i,
    /^des/i,
  ],
};

const matchDayPatterns$T = {
  narrow: /^[smtwf]/i,
  short: /^(si|mo|ti|wo|to|fr|so)/i,
  abbreviated: /^(snein|moa|tii|woa|ton|fre|sneon)/i,
  wide: /^(snein|moandei|tiisdei|woansdei|tongersdei|freed|sneon)/i,
};
const parseDayPatterns$T = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^sn/i, /^mo/i, /^ti/i, /^wo/i, /^to/i, /^fr/i, /^sn/i],
};

const matchDayPeriodPatterns$T = {
  any: /^(am|pm|middernacht|middeis|moarns|middei|jÃ»ns|nachts)/i,
};
const parseDayPeriodPatterns$T = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^middei/i,
    morning: /moarns/i,
    afternoon: /^middeis/i,
    evening: /jÃ»ns/i,
    night: /nachts/i,
  },
};

(match$T.match = {
  ordinalNumber: (0, _index2$1N.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$T,
    parsePattern: parseOrdinalNumberPattern$T,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3F.buildMatchFn)({
    matchPatterns: matchEraPatterns$T,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$T,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3F.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$T,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$T,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3F.buildMatchFn)({
    matchPatterns: matchMonthPatterns$T,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$T,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3F.buildMatchFn)({
    matchPatterns: matchDayPatterns$T,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$T,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3F.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$T,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$T,
    defaultParseWidth: "any",
  }),
});

fy.fy = void 0;
var _index$3E = formatDistance$1L;
var _index2$1M = formatLong$U;
var _index3$V = formatRelative$1L;
var _index4$U = localize$T;
var _index5$U = match$T;

/**
 * @category Locales
 * @summary Western Frisian locale (Netherlands).
 * @language West Frisian
 * @iso-639-2 fry
 * @author Damon Asberg [@damon02](https://github.com/damon02)
 */
(fy.fy = {
  code: "fy",
  formatDistance: _index$3E.formatDistance,
  formatLong: _index2$1M.formatLong,
  formatRelative: _index3$V.formatRelative,
  localize: _index4$U.localize,
  match: _index5$U.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var gd = {};

var formatDistance$1J = {};

formatDistance$1J.formatDistance = void 0;

const formatDistanceLocale$R = {
  lessThanXSeconds: {
    one: "nas lugha na diog",
    other: "nas lugha na {{count}} diogan",
  },

  xSeconds: {
    one: "1 diog",
    two: "2 dhiog",
    twenty: "20 diog",
    other: "{{count}} diogan",
  },

  halfAMinute: "leth mhionaid",

  lessThanXMinutes: {
    one: "nas lugha na mionaid",
    other: "nas lugha na {{count}} mionaidean",
  },

  xMinutes: {
    one: "1 mionaid",
    two: "2 mhionaid",
    twenty: "20 mionaid",
    other: "{{count}} mionaidean",
  },

  aboutXHours: {
    one: "mu uair de thÃ¬de",
    other: "mu {{count}} uairean de thÃ¬de",
  },

  xHours: {
    one: "1 uair de thÃ¬de",
    two: "2 uair de thÃ¬de",
    twenty: "20 uair de thÃ¬de",
    other: "{{count}} uairean de thÃ¬de",
  },

  xDays: {
    one: "1 lÃ ",
    other: "{{count}} lÃ ",
  },

  aboutXWeeks: {
    one: "mu 1 seachdain",
    other: "mu {{count}} seachdainean",
  },

  xWeeks: {
    one: "1 seachdain",
    other: "{{count}} seachdainean",
  },

  aboutXMonths: {
    one: "mu mhÃ¬os",
    other: "mu {{count}} mÃ¬osan",
  },

  xMonths: {
    one: "1 mÃ¬os",
    other: "{{count}} mÃ¬osan",
  },

  aboutXYears: {
    one: "mu bhliadhna",
    other: "mu {{count}} bliadhnaichean",
  },

  xYears: {
    one: "1 bhliadhna",
    other: "{{count}} bliadhna",
  },

  overXYears: {
    one: "cÃ²rr is bliadhna",
    other: "cÃ²rr is {{count}} bliadhnaichean",
  },

  almostXYears: {
    one: "cha mhÃ²r bliadhna",
    other: "cha mhÃ²r {{count}} bliadhnaichean",
  },
};

const formatDistance$1I = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$R[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else if (count === 20 && !!tokenValue.twenty) {
    result = tokenValue.twenty;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ann an " + result;
    } else {
      return "o chionn " + result;
    }
  }

  return result;
};
formatDistance$1J.formatDistance = formatDistance$1I;

var formatLong$T = {};

formatLong$T.formatLong = void 0;
var _index$3D = buildFormatLongFn$1;

const dateFormats$T = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$T = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$T = {
  full: "{{date}} 'aig' {{time}}",
  long: "{{date}} 'aig' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$T.formatLong = {
  date: (0, _index$3D.buildFormatLongFn)({
    formats: dateFormats$T,
    defaultWidth: "full",
  }),

  time: (0, _index$3D.buildFormatLongFn)({
    formats: timeFormats$T,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3D.buildFormatLongFn)({
    formats: dateTimeFormats$T,
    defaultWidth: "full",
  }),
});

var formatRelative$1J = {};

formatRelative$1J.formatRelative = void 0;

const formatRelativeLocale$S = {
  lastWeek: "'mu dheireadh' eeee 'aig' p", //FIX
  yesterday: "'an-dÃ¨ aig' p",
  today: "'an-diugh aig' p",
  tomorrow: "'a-mÃ ireach aig' p",
  nextWeek: "eeee 'aig' p",
  other: "P",
};

const formatRelative$1I = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$S[token];
formatRelative$1J.formatRelative = formatRelative$1I;

var localize$S = {};

localize$S.localize = void 0;
var _index$3C = buildLocalizeFn$1;

const eraValues$S = {
  narrow: ["R", "A"],
  abbreviated: ["RC", "AD"],
  wide: ["ro ChrÃ¬osta", "anno domini"],
};

const quarterValues$S = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["C1", "C2", "C3", "C4"],
  wide: [
    "a' chiad chairteal",
    "an dÃ rna cairteal",
    "an treas cairteal",
    "an ceathramh cairteal",
  ],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$S = {
  narrow: ["F", "G", "M", "G", "C", "Ã", "I", "L", "S", "D", "S", "D"],
  abbreviated: [
    "Faoi",
    "Gear",
    "MÃ rt",
    "Gibl",
    "CÃ¨it",
    "Ãgmh",
    "Iuch",
    "LÃ¹n",
    "Sult",
    "DÃ mh",
    "Samh",
    "DÃ¹bh",
  ],

  wide: [
    "Am Faoilleach",
    "An Gearran",
    "Am MÃ rt",
    "An Giblean",
    "An CÃ¨itean",
    "An t-Ãgmhios",
    "An t-Iuchar",
    "An LÃ¹nastal",
    "An t-Sultain",
    "An DÃ mhair",
    "An t-Samhain",
    "An DÃ¹bhlachd",
  ],
};

const dayValues$S = {
  narrow: ["D", "L", "M", "C", "A", "H", "S"],
  short: ["DÃ²", "Lu", "MÃ ", "Ci", "Ar", "Ha", "Sa"],
  abbreviated: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
  wide: [
    "DidÃ²mhnaich",
    "Diluain",
    "DimÃ irt",
    "Diciadain",
    "Diardaoin",
    "Dihaoine",
    "Disathairne",
  ],
};

const dayPeriodValues$S = {
  narrow: {
    am: "m",
    pm: "f",
    midnight: "m.o.",
    noon: "m.l.",
    morning: "madainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "oidhche",
  },
  abbreviated: {
    am: "M.",
    pm: "F.",
    midnight: "meadhan oidhche",
    noon: "meadhan lÃ ",
    morning: "madainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "oidhche",
  },
  wide: {
    am: "m.",
    pm: "f.",
    midnight: "meadhan oidhche",
    noon: "meadhan lÃ ",
    morning: "madainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "oidhche",
  },
};

const formattingDayPeriodValues$I = {
  narrow: {
    am: "m",
    pm: "f",
    midnight: "m.o.",
    noon: "m.l.",
    morning: "sa mhadainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "air an oidhche",
  },
  abbreviated: {
    am: "M.",
    pm: "F.",
    midnight: "meadhan oidhche",
    noon: "meadhan lÃ ",
    morning: "sa mhadainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "air an oidhche",
  },
  wide: {
    am: "m.",
    pm: "f.",
    midnight: "meadhan oidhche",
    noon: "meadhan lÃ ",
    morning: "sa mhadainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "air an oidhche",
  },
};

const ordinalNumber$S = (dirtyNumber) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "d";
      case 2:
        return number + "na";
    }
  }

  if (rem100 === 12) {
    return number + "na";
  }

  return number + "mh";
};

(localize$S.localize = {
  ordinalNumber: ordinalNumber$S,

  era: (0, _index$3C.buildLocalizeFn)({
    values: eraValues$S,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3C.buildLocalizeFn)({
    values: quarterValues$S,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3C.buildLocalizeFn)({
    values: monthValues$S,
    defaultWidth: "wide",
  }),

  day: (0, _index$3C.buildLocalizeFn)({
    values: dayValues$S,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3C.buildLocalizeFn)({
    values: dayPeriodValues$S,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$I,
    defaultFormattingWidth: "wide",
  }),
});

var match$S = {};

match$S.match = void 0;

var _index$3B = buildMatchFn$1;
var _index2$1L = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$S = /^(\d+)(d|na|tr|mh)?/i;
const parseOrdinalNumberPattern$S = /\d+/i;

const matchEraPatterns$S = {
  narrow: /^(r|a)/i,
  abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
  wide: /^(ro ChrÃ¬osta|ron aois choitchinn|anno domini|aois choitcheann)/i,
};
const parseEraPatterns$S = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns$S = {
  narrow: /^[1234]/i,
  abbreviated: /^c[1234]/i,
  wide: /^[1234](cd|na|tr|mh)? cairteal/i,
};
const parseQuarterPatterns$S = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$S = {
  narrow: /^[fgmcÃ²ilsd]/i,
  abbreviated: /^(faoi|gear|mÃ rt|gibl|cÃ¨it|Ã²gmh|iuch|lÃ¹n|sult|dÃ mh|samh|dÃ¹bh)/i,
  wide: /^(am faoilleach|an gearran|am mÃ rt|an giblean|an cÃ¨itean|an t-Ãgmhios|an t-Iuchar|an lÃ¹nastal|an t-Sultain|an dÃ mhair|an t-Samhain|an dÃ¹bhlachd)/i,
};
const parseMonthPatterns$S = {
  narrow: [
    /^f/i,
    /^g/i,
    /^m/i,
    /^g/i,
    /^c/i,
    /^Ã²/i,
    /^i/i,
    /^l/i,
    /^s/i,
    /^d/i,
    /^s/i,
    /^d/i,
  ],

  any: [
    /^fa/i,
    /^ge/i,
    /^mÃ /i,
    /^gi/i,
    /^c/i,
    /^Ã²/i,
    /^i/i,
    /^l/i,
    /^su/i,
    /^d/i,
    /^sa/i,
    /^d/i,
  ],
};

const matchDayPatterns$S = {
  narrow: /^[dlmcahs]/i,
  short: /^(dÃ²|lu|mÃ |ci|ar|ha|sa)/i,
  abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
  wide: /^(didÃ²mhnaich|diluain|dimÃ irt|diciadain|diardaoin|dihaoine|disathairne)/i,
};
const parseDayPatterns$S = {
  narrow: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
  any: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
};

const matchDayPeriodPatterns$S = {
  narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
  any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan lÃ |(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
};
const parseDayPeriodPatterns$S = {
  any: {
    am: /^m/i,
    pm: /^f/i,
    midnight: /^meadhan oidhche/i,
    noon: /^meadhan lÃ /i,
    morning: /sa mhadainn/i,
    afternoon: /feasgar/i,
    evening: /feasgar/i,
    night: /air an oidhche/i,
  },
};

(match$S.match = {
  ordinalNumber: (0, _index2$1L.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$S,
    parsePattern: parseOrdinalNumberPattern$S,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3B.buildMatchFn)({
    matchPatterns: matchEraPatterns$S,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$S,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3B.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$S,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$S,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3B.buildMatchFn)({
    matchPatterns: matchMonthPatterns$S,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$S,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3B.buildMatchFn)({
    matchPatterns: matchDayPatterns$S,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$S,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3B.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$S,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$S,
    defaultParseWidth: "any",
  }),
});

gd.gd = void 0;
var _index$3A = formatDistance$1J;
var _index2$1K = formatLong$T;
var _index3$U = formatRelative$1J;
var _index4$T = localize$S;
var _index5$T = match$S;

/**
 * @category Locales
 * @summary Scottish Gaelic.
 * @language Scottish Gaelic
 * @iso-639-2 gla
 * @author Lee Driscoll [@leedriscoll](https://github.com/leedriscoll)
 */
(gd.gd = {
  code: "gd",
  formatDistance: _index$3A.formatDistance,
  formatLong: _index2$1K.formatLong,
  formatRelative: _index3$U.formatRelative,
  localize: _index4$T.localize,
  match: _index5$T.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var gl = {};

var formatDistance$1H = {};

formatDistance$1H.formatDistance = void 0;

const formatDistanceLocale$Q = {
  lessThanXSeconds: {
    one: "menos dun segundo",
    other: "menos de {{count}} segundos",
  },

  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos",
  },

  halfAMinute: "medio minuto",

  lessThanXMinutes: {
    one: "menos dun minuto",
    other: "menos de {{count}} minutos",
  },

  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos",
  },

  aboutXHours: {
    one: "arredor dunha hora",
    other: "arredor de {{count}} horas",
  },

  xHours: {
    one: "1 hora",
    other: "{{count}} horas",
  },

  xDays: {
    one: "1 dÃ­a",
    other: "{{count}} dÃ­as",
  },

  aboutXWeeks: {
    one: "arredor dunha semana",
    other: "arredor de {{count}} semanas",
  },

  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas",
  },

  aboutXMonths: {
    one: "arredor de 1 mes",
    other: "arredor de {{count}} meses",
  },

  xMonths: {
    one: "1 mes",
    other: "{{count}} meses",
  },

  aboutXYears: {
    one: "arredor dun ano",
    other: "arredor de {{count}} anos",
  },

  xYears: {
    one: "1 ano",
    other: "{{count}} anos",
  },

  overXYears: {
    one: "mÃ¡is dun ano",
    other: "mÃ¡is de {{count}} anos",
  },

  almostXYears: {
    one: "case un ano",
    other: "case {{count}} anos",
  },
};

const formatDistance$1G = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$Q[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "hai " + result;
    }
  }

  return result;
};
formatDistance$1H.formatDistance = formatDistance$1G;

var formatLong$S = {};

formatLong$S.formatLong = void 0;
var _index$3z = buildFormatLongFn$1;

const dateFormats$S = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$S = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$S = {
  full: "{{date}} 'Ã¡s' {{time}}",
  long: "{{date}} 'Ã¡s' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$S.formatLong = {
  date: (0, _index$3z.buildFormatLongFn)({
    formats: dateFormats$S,
    defaultWidth: "full",
  }),

  time: (0, _index$3z.buildFormatLongFn)({
    formats: timeFormats$S,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3z.buildFormatLongFn)({
    formats: dateTimeFormats$S,
    defaultWidth: "full",
  }),
});

var formatRelative$1H = {};

formatRelative$1H.formatRelative = void 0;

const formatRelativeLocale$R = {
  lastWeek: "'o' eeee 'pasado Ã¡' LT",
  yesterday: "'onte Ã¡' p",
  today: "'hoxe Ã¡' p",
  tomorrow: "'maÃ±Ã¡ Ã¡' p",
  nextWeek: "eeee 'Ã¡' p",
  other: "P",
};

const formatRelativeLocalePlural = {
  lastWeek: "'o' eeee 'pasado Ã¡s' p",
  yesterday: "'onte Ã¡s' p",
  today: "'hoxe Ã¡s' p",
  tomorrow: "'maÃ±Ã¡ Ã¡s' p",
  nextWeek: "eeee 'Ã¡s' p",
  other: "P",
};

const formatRelative$1G = (token, date, _baseDate, _options) => {
  if (date.getHours() !== 1) {
    return formatRelativeLocalePlural[token];
  }
  return formatRelativeLocale$R[token];
};
formatRelative$1H.formatRelative = formatRelative$1G;

var localize$R = {};

localize$R.localize = void 0;
var _index$3y = buildLocalizeFn$1;

const eraValues$R = {
  narrow: ["AC", "DC"],
  abbreviated: ["AC", "DC"],
  wide: ["antes de cristo", "despois de cristo"],
};

const quarterValues$R = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1Âº trimestre", "2Âº trimestre", "3Âº trimestre", "4Âº trimestre"],
};

const monthValues$R = {
  narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "xan",
    "feb",
    "mar",
    "abr",
    "mai",
    "xun",
    "xul",
    "ago",
    "set",
    "out",
    "nov",
    "dec",
  ],

  wide: [
    "xaneiro",
    "febreiro",
    "marzo",
    "abril",
    "maio",
    "xuÃ±o",
    "xullo",
    "agosto",
    "setembro",
    "outubro",
    "novembro",
    "decembro",
  ],
};

const dayValues$R = {
  narrow: ["d", "l", "m", "m", "j", "v", "s"],
  short: ["do", "lu", "ma", "me", "xo", "ve", "sa"],
  abbreviated: ["dom", "lun", "mar", "mer", "xov", "ven", "sab"],
  wide: ["domingo", "luns", "martes", "mÃ©rcores", "xoves", "venres", "sÃ¡bado"],
};

const dayPeriodValues$R = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "maÃ±Ã¡",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoite",
    noon: "mediodÃ­a",
    morning: "maÃ±Ã¡",
    afternoon: "tarde",
    evening: "tardiÃ±a",
    night: "noite",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoite",
    noon: "mediodÃ­a",
    morning: "maÃ±Ã¡",
    afternoon: "tarde",
    evening: "tardiÃ±a",
    night: "noite",
  },
};

const formattingDayPeriodValues$H = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "da maÃ±Ã¡",
    afternoon: "da tarde",
    evening: "da tardiÃ±a",
    night: "da noite",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoite",
    noon: "mediodÃ­a",
    morning: "da maÃ±Ã¡",
    afternoon: "da tarde",
    evening: "da tardiÃ±a",
    night: "da noite",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoite",
    noon: "mediodÃ­a",
    morning: "da maÃ±Ã¡",
    afternoon: "da tarde",
    evening: "da tardiÃ±a",
    night: "da noite",
  },
};

const ordinalNumber$R = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "Âº";
};

(localize$R.localize = {
  ordinalNumber: ordinalNumber$R,

  era: (0, _index$3y.buildLocalizeFn)({
    values: eraValues$R,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3y.buildLocalizeFn)({
    values: quarterValues$R,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3y.buildLocalizeFn)({
    values: monthValues$R,
    defaultWidth: "wide",
  }),

  day: (0, _index$3y.buildLocalizeFn)({
    values: dayValues$R,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3y.buildLocalizeFn)({
    values: dayPeriodValues$R,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$H,
    defaultFormattingWidth: "wide",
  }),
});

var match$R = {};

match$R.match = void 0;

var _index$3x = buildMatchFn$1;
var _index2$1J = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$R = /^(\d+)(Âº)?/i;
const parseOrdinalNumberPattern$R = /\d+/i;

const matchEraPatterns$R = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era com[uÃº]n|despois de cristo|era com[uÃº]n)/i,
};
const parseEraPatterns$R = {
  any: [/^ac/i, /^dc/i],
  wide: [
    /^(antes de cristo|antes da era com[uÃº]n)/i,
    /^(despois de cristo|era com[uÃº]n)/i,
  ],
};

const matchQuarterPatterns$R = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](Âº)? trimestre/i,
};
const parseQuarterPatterns$R = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$R = {
  narrow: /^[xfmasond]/i,
  abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
  wide: /^(xaneiro|febreiro|marzo|abril|maio|xuÃ±o|xullo|agosto|setembro|outubro|novembro|decembro)/i,
};
const parseMonthPatterns$R = {
  narrow: [
    /^x/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^x/i,
    /^x/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^xan/i,
    /^feb/i,
    /^mar/i,
    /^abr/i,
    /^mai/i,
    /^xun/i,
    /^xul/i,
    /^ago/i,
    /^set/i,
    /^out/i,
    /^nov/i,
    /^dec/i,
  ],
};

const matchDayPatterns$R = {
  narrow: /^[dlmxvs]/i,
  short: /^(do|lu|ma|me|xo|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
  wide: /^(domingo|luns|martes|m[eÃ©]rcores|xoves|venres|s[Ã¡a]bado)/i,
};
const parseDayPatterns$R = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i],
};

const matchDayPeriodPatterns$R = {
  narrow: /^(a|p|mn|md|(da|[aÃ¡]s) (maÃ±[aÃ¡]|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|medianoite|mediod[iÃ­]a|(da|[aÃ¡]s) (maÃ±[aÃ¡]|tarde|noite))/i,
};
const parseDayPeriodPatterns$R = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /maÃ±[aÃ¡]/i,
    afternoon: /tarde/i,
    evening: /tardiÃ±a/i,
    night: /noite/i,
  },
};

(match$R.match = {
  ordinalNumber: (0, _index2$1J.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$R,
    parsePattern: parseOrdinalNumberPattern$R,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3x.buildMatchFn)({
    matchPatterns: matchEraPatterns$R,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$R,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3x.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$R,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$R,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3x.buildMatchFn)({
    matchPatterns: matchMonthPatterns$R,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$R,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3x.buildMatchFn)({
    matchPatterns: matchDayPatterns$R,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$R,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3x.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$R,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$R,
    defaultParseWidth: "any",
  }),
});

gl.gl = void 0;
var _index$3w = formatDistance$1H;
var _index2$1I = formatLong$S;
var _index3$T = formatRelative$1H;
var _index4$S = localize$R;
var _index5$S = match$R;

/**
 * @category Locales
 * @summary Galician locale.
 * @language Galician
 * @iso-639-2 glg
 * @author Alberto Doval - Cocodin Technology[@cocodinTech](https://github.com/cocodinTech)
 * @author Fidel Pita [@fidelpita](https://github.com/fidelpita)
 */
(gl.gl = {
  code: "gl",
  formatDistance: _index$3w.formatDistance,
  formatLong: _index2$1I.formatLong,
  formatRelative: _index3$T.formatRelative,
  localize: _index4$S.localize,
  match: _index5$S.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var gu = {};

var formatDistance$1F = {};

formatDistance$1F.formatDistance = void 0;

// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
const formatDistanceLocale$P = {
  lessThanXSeconds: {
    one: "àª¹àª®àª£àª¾àª", // CLDR #1461
    other: "âàªàª¶àª°à« {{count}} àª¸à«àªàªàª¡",
  },

  xSeconds: {
    one: "1 àª¸à«àªàªàª¡",
    other: "{{count}} àª¸à«àªàªàª¡",
  },

  halfAMinute: "àªàª¡àª§à« àª®àª¿àª¨àª¿àª",

  lessThanXMinutes: {
    one: "àª àª®àª¿àª¨àª¿àª", // CLDR #1448
    other: "âàªàª¶àª°à« {{count}} àª®àª¿àª¨àª¿àª",
  },

  xMinutes: {
    one: "1 àª®àª¿àª¨àª¿àª",
    other: "{{count}} àª®àª¿àª¨àª¿àª",
  },

  aboutXHours: {
    one: "âàªàª¶àª°à« 1 àªàª²àª¾àª",
    other: "âàªàª¶àª°à« {{count}} àªàª²àª¾àª",
  },

  xHours: {
    one: "1 àªàª²àª¾àª",
    other: "{{count}} àªàª²àª¾àª",
  },

  xDays: {
    one: "1 àª¦àª¿àªµàª¸",
    other: "{{count}} àª¦àª¿àªµàª¸",
  },

  aboutXWeeks: {
    one: "àªàª¶àª°à« 1 àªàª àªµàª¾àª¡àª¿àª¯à«àª",
    other: "àªàª¶àª°à« {{count}} àªàª àªµàª¾àª¡àª¿àª¯àª¾",
  },

  xWeeks: {
    one: "1 àªàª àªµàª¾àª¡àª¿àª¯à«àª",
    other: "{{count}} àªàª àªµàª¾àª¡àª¿àª¯àª¾",
  },

  aboutXMonths: {
    one: "àªàª¶àª°à« 1 àª®àª¹àª¿àª¨à«",
    other: "àªàª¶àª°à« {{count}} àª®àª¹àª¿àª¨àª¾",
  },

  xMonths: {
    one: "1 àª®àª¹àª¿àª¨à«",
    other: "{{count}} àª®àª¹àª¿àª¨àª¾",
  },

  aboutXYears: {
    one: "àªàª¶àª°à« 1 àªµàª°à«àª·",
    other: "àªàª¶àª°à« {{count}} àªµàª°à«àª·",
  },

  xYears: {
    one: "1 àªµàª°à«àª·",
    other: "{{count}} àªµàª°à«àª·",
  },

  overXYears: {
    one: "1 àªµàª°à«àª·àª¥à« àªµàª§à«",
    other: "{{count}} àªµàª°à«àª·àª¥à« àªµàª§à«",
  },

  almostXYears: {
    one: "àª²àªàª­àª 1 àªµàª°à«àª·",
    other: "àª²àªàª­àª {{count}} àªµàª°à«àª·",
  },
};

const formatDistance$1E = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$P[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "àª®àª¾àª";
    } else {
      return result + " àªªàª¹à«àª²àª¾àª";
    }
  }

  return result;
};
formatDistance$1F.formatDistance = formatDistance$1E;

var formatLong$R = {};

formatLong$R.formatLong = void 0;
var _index$3v = buildFormatLongFn$1;

//Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
const dateFormats$R = {
  full: "EEEE, d MMMM, y", // CLDR #1825
  long: "d MMMM, y", // CLDR #1826
  medium: "d MMM, y", // CLDR #1827
  short: "d/M/yy", // CLDR #1828
};

const timeFormats$R = {
  full: "hh:mm:ss a zzzz", // CLDR #1829
  long: "hh:mm:ss a z", // CLDR #1830
  medium: "hh:mm:ss a", // CLDR #1831
  short: "hh:mm a", // CLDR #1832
};

const dateTimeFormats$R = {
  full: "{{date}} {{time}}", // CLDR #1833
  long: "{{date}} {{time}}", // CLDR #1834
  medium: "{{date}} {{time}}", // CLDR #1835
  short: "{{date}} {{time}}", // CLDR #1836
};

(formatLong$R.formatLong = {
  date: (0, _index$3v.buildFormatLongFn)({
    formats: dateFormats$R,
    defaultWidth: "full",
  }),

  time: (0, _index$3v.buildFormatLongFn)({
    formats: timeFormats$R,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3v.buildFormatLongFn)({
    formats: dateTimeFormats$R,
    defaultWidth: "full",
  }),
});

var formatRelative$1F = {};

formatRelative$1F.formatRelative = void 0;

// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html

const formatRelativeLocale$Q = {
  lastWeek: "'àªªàª¾àªàª²àª¾' eeee p", // CLDR #1384
  yesterday: "'àªàªàªàª¾àª²à«' p", // CLDR #1409
  today: "'àªàªà«' p", // CLDR #1410
  tomorrow: "'àªàªµàª¤à«àªàª¾àª²à«' p", // CLDR #1411
  nextWeek: "eeee p", // CLDR #1386
  other: "P",
};

const formatRelative$1E = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$Q[token];
formatRelative$1F.formatRelative = formatRelative$1E;

var localize$Q = {};

localize$Q.localize = void 0;
var _index$3u = buildLocalizeFn$1;

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1621 - #1630
const eraValues$Q = {
  narrow: ["àªàª¸àªªà«", "àªàª¸"],
  abbreviated: ["àª.àª¸.àªªà«àª°à«àªµà«", "àª.àª¸."],
  wide: ["àªàª¸àªµà«àª¸àª¨ àªªà«àª°à«àªµà«", "àªàª¸àªµà«àª¸àª¨"],
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1631 - #1654
const quarterValues$Q = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1àª²à« àª¤à«àª°àª¿àª®àª¾àª¸", "2àªà« àª¤à«àª°àª¿àª®àª¾àª¸", "3àªà« àª¤à«àª°àª¿àª®àª¾àª¸", "4àª¥à« àª¤à«àª°àª¿àª®àª¾àª¸"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1655 - #1726
const monthValues$Q = {
  narrow: ["àªàª¾", "àª«à«", "àª®àª¾", "àª", "àª®à«", "àªà«", "àªà«", "àª", "àª¸", "àª", "àª¨", "àª¡àª¿"],

  abbreviated: [
    "àªàª¾àª¨à«àª¯à«",
    "àª«à«àª¬à«àª°à«",
    "àª®àª¾àª°à«àª",
    "àªàªªà«àª°àª¿àª²",
    "àª®à«",
    "àªà«àª¨",
    "àªà«àª²àª¾àª",
    "àªàªàª¸à«àª",
    "àª¸àªªà«àªà«",
    "àªàªà«àªà«",
    "àª¨àªµà«",
    "àª¡àª¿àª¸à«",
  ],

  wide: [
    "àªàª¾àª¨à«àª¯à«àªàª°à«",
    "àª«à«àª¬à«àª°à«àªàª°à«",
    "àª®àª¾àª°à«àª",
    "àªàªªà«àª°àª¿àª²",
    "àª®à«",
    "àªà«àª¨",
    "àªà«àª²àª¾àª",
    "àªàªàª¸à«àª",
    "àª¸àªªà«àªà«àª®à«àª¬àª°",
    "àªàªà«àªà«àª¬àª°",
    "àª¨àªµà«àª®à«àª¬àª°",
    "àª¡àª¿àª¸à«àª®à«àª¬àª°",
  ],
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1727 - #1768
const dayValues$Q = {
  narrow: ["àª°", "àª¸à«", "àª®àª", "àª¬à«", "àªà«", "àª¶à«", "àª¶"],
  short: ["àª°", "àª¸à«", "àª®àª", "àª¬à«", "àªà«", "àª¶à«", "àª¶"],
  abbreviated: ["àª°àªµàª¿", "àª¸à«àª®", "àª®àªàªàª³", "àª¬à«àª§", "àªà«àª°à«", "àª¶à«àªà«àª°", "àª¶àª¨àª¿"],
  wide: [
    "àª°àªµàª¿àªµàª¾àª°" /* Sunday */,
    "àª¸à«àª®àªµàª¾àª°" /* Monday */,
    "àª®àªàªàª³àªµàª¾àª°" /* Tuesday */,
    "àª¬à«àª§àªµàª¾àª°" /* Wednesday */,
    "àªà«àª°à«àªµàª¾àª°" /* Thursday */,
    "àª¶à«àªà«àª°àªµàª¾àª°" /* Friday */,
    "àª¶àª¨àª¿àªµàª¾àª°" /* Saturday */,
  ],
};

// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1783 - #1824
const dayPeriodValues$Q = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "àª®.àª°àª¾àª¤à«àª°àª¿",
    noon: "àª¬.",
    morning: "àª¸àªµàª¾àª°à«",
    afternoon: "àª¬àªªà«àª°à«",
    evening: "àª¸àª¾àªàªà«",
    night: "àª°àª¾àª¤à«àª°à«",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "âàª®àª§à«àª¯àª°àª¾àª¤à«àª°àª¿",
    noon: "àª¬àªªà«àª°à«",
    morning: "àª¸àªµàª¾àª°à«",
    afternoon: "àª¬àªªà«àª°à«",
    evening: "àª¸àª¾àªàªà«",
    night: "àª°àª¾àª¤à«àª°à«",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "âàª®àª§à«àª¯àª°àª¾àª¤à«àª°àª¿",
    noon: "àª¬àªªà«àª°à«",
    morning: "àª¸àªµàª¾àª°à«",
    afternoon: "àª¬àªªà«àª°à«",
    evening: "àª¸àª¾àªàªà«",
    night: "àª°àª¾àª¤à«àª°à«",
  },
};

const formattingDayPeriodValues$G = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "àª®.àª°àª¾àª¤à«àª°àª¿",
    noon: "àª¬àªªà«àª°à«",
    morning: "àª¸àªµàª¾àª°à«",
    afternoon: "àª¬àªªà«àª°à«",
    evening: "àª¸àª¾àªàªà«",
    night: "àª°àª¾àª¤à«àª°à«",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "àª®àª§à«àª¯àª°àª¾àª¤à«àª°àª¿",
    noon: "àª¬àªªà«àª°à«",
    morning: "àª¸àªµàª¾àª°à«",
    afternoon: "àª¬àªªà«àª°à«",
    evening: "àª¸àª¾àªàªà«",
    night: "àª°àª¾àª¤à«àª°à«",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "âàª®àª§à«àª¯àª°àª¾àª¤à«àª°àª¿",
    noon: "àª¬àªªà«àª°à«",
    morning: "àª¸àªµàª¾àª°à«",
    afternoon: "àª¬àªªà«àª°à«",
    evening: "àª¸àª¾àªàªà«",
    night: "àª°àª¾àª¤à«àª°à«",
  },
};

const ordinalNumber$Q = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$Q.localize = {
  ordinalNumber: ordinalNumber$Q,

  era: (0, _index$3u.buildLocalizeFn)({
    values: eraValues$Q,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3u.buildLocalizeFn)({
    values: quarterValues$Q,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3u.buildLocalizeFn)({
    values: monthValues$Q,
    defaultWidth: "wide",
  }),

  day: (0, _index$3u.buildLocalizeFn)({
    values: dayValues$Q,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3u.buildLocalizeFn)({
    values: dayPeriodValues$Q,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$G,
    defaultFormattingWidth: "wide",
  }),
});

var match$Q = {};

match$Q.match = void 0;

var _index$3t = buildMatchFn$1;
var _index2$1H = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$Q = /^(\d+)(àª²|àª|àª¥|àª à«àª |àª®)?/i;
const parseOrdinalNumberPattern$Q = /\d+/i;

const matchEraPatterns$Q = {
  narrow: /^(àªàª¸àªªà«|àªàª¸)/i,
  abbreviated: /^(àª\.àª¸\.àªªà«àª°à«àªµà«|àª\.àª¸\.)/i,
  wide: /^(àªàª¸àªµà«àª¸àª¨\sàªªà«àª°à«àªµà«|àªàª¸àªµà«àª¸àª¨)/i,
};
const parseEraPatterns$Q = {
  any: [/^àªàª¸àªªà«/i, /^àªàª¸/i],
};

const matchQuarterPatterns$Q = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](àª²à«|àªà«|àª¥à«)? àª¤à«àª°àª¿àª®àª¾àª¸/i,
};
const parseQuarterPatterns$Q = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$Q = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[àªàª¾àª«à«àª®àª¾àªàª®à«àªà«àªà«àªàª¸àªàª¨àª¡àª¿]/i,
  abbreviated:
    /^(àªàª¾àª¨à«àª¯à«|àª«à«àª¬à«àª°à«|àª®àª¾àª°à«àª|àªàªªà«àª°àª¿àª²|àª®à«|àªà«àª¨|àªà«àª²àª¾àª|àªàªàª¸à«àª|àª¸àªªà«àªà«|àªàªà«àªà«|àª¨àªµà«|àª¡àª¿àª¸à«)/i,
  wide: /^(àªàª¾àª¨à«àª¯à«àªàª°à«|àª«à«àª¬à«àª°à«àªàª°à«|àª®àª¾àª°à«àª|àªàªªà«àª°àª¿àª²|àª®à«|àªà«àª¨|àªà«àª²àª¾àª|àªàªàª¸à«àª|àª¸àªªà«àªà«àª®à«àª¬àª°|àªàªà«àªà«àª¬àª°|àª¨àªµà«àª®à«àª¬àª°|àª¡àª¿àª¸à«àª®à«àª¬àª°)/i,
};
const parseMonthPatterns$Q = {
  narrow: [
    /^àªàª¾/i,
    /^àª«à«/i,
    /^àª®àª¾/i,
    /^àª/i,
    /^àª®à«/i,
    /^àªà«/i,
    /^àªà«/i,
    /^àªàª/i,
    /^àª¸/i,
    /^àªàªà«àªà«/i,
    /^àª¨/i,
    /^àª¡àª¿/i,
  ],

  any: [
    /^àªàª¾/i,
    /^àª«à«/i,
    /^àª®àª¾/i,
    /^àª/i,
    /^àª®à«/i,
    /^àªà«/i,
    /^àªà«/i,
    /^àªàª/i,
    /^àª¸/i,
    /^àªàªà«àªà«/i,
    /^àª¨/i,
    /^àª¡àª¿/i,
  ],
};

const matchDayPatterns$Q = {
  narrow: /^(àª°|àª¸à«|àª®àª|àª¬à«|àªà«|àª¶à«|àª¶)/i,
  short: /^(àª°|àª¸à«|àª®àª|àª¬à«|àªà«|àª¶à«|àª¶)/i,
  abbreviated: /^(àª°àªµàª¿|àª¸à«àª®|àª®àªàªàª³|àª¬à«àª§|àªà«àª°à«|àª¶à«àªà«àª°|àª¶àª¨àª¿)/i,
  wide: /^(àª°àªµàª¿àªµàª¾àª°|àª¸à«àª®àªµàª¾àª°|àª®àªàªàª³àªµàª¾àª°|àª¬à«àª§àªµàª¾àª°|àªà«àª°à«àªµàª¾àª°|àª¶à«àªà«àª°àªµàª¾àª°|àª¶àª¨àª¿àªµàª¾àª°)/i,
};
const parseDayPatterns$Q = {
  narrow: [/^àª°/i, /^àª¸à«/i, /^àª®àª/i, /^àª¬à«/i, /^àªà«/i, /^àª¶à«/i, /^àª¶/i],
  any: [/^àª°/i, /^àª¸à«/i, /^àª®àª/i, /^àª¬à«/i, /^àªà«/i, /^àª¶à«/i, /^àª¶/i],
};

const matchDayPeriodPatterns$Q = {
  narrow: /^(a|p|àª®\.?|àª¸|àª¬|àª¸àª¾àª|àª°àª¾)/i,
  any: /^(a|p|àª®\.?|àª¸|àª¬|àª¸àª¾àª|àª°àª¾)/i,
};
const parseDayPeriodPatterns$Q = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^àª®\.?/i,
    noon: /^àª¬/i,
    morning: /àª¸/i,
    afternoon: /àª¬/i,
    evening: /àª¸àª¾àª/i,
    night: /àª°àª¾/i,
  },
};

(match$Q.match = {
  ordinalNumber: (0, _index2$1H.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$Q,
    parsePattern: parseOrdinalNumberPattern$Q,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3t.buildMatchFn)({
    matchPatterns: matchEraPatterns$Q,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$Q,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3t.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$Q,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$Q,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3t.buildMatchFn)({
    matchPatterns: matchMonthPatterns$Q,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$Q,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3t.buildMatchFn)({
    matchPatterns: matchDayPatterns$Q,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$Q,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3t.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$Q,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$Q,
    defaultParseWidth: "any",
  }),
});

gu.gu = void 0;
var _index$3s = formatDistance$1F;
var _index2$1G = formatLong$R;
var _index3$S = formatRelative$1F;
var _index4$R = localize$Q;
var _index5$R = match$Q;

/**
 * @category Locales
 * @summary Gujarati locale (India).
 * @language Gujarati
 * @iso-639-2 guj
 * @author Manaday Mavani [@ManadayM](https://github.com/manadaym)
 */
(gu.gu = {
  code: "gu",
  formatDistance: _index$3s.formatDistance,
  formatLong: _index2$1G.formatLong,
  formatRelative: _index3$S.formatRelative,
  localize: _index4$R.localize,
  match: _index5$R.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var he = {};

var formatDistance$1D = {};

formatDistance$1D.formatDistance = void 0;

const formatDistanceLocale$O = {
  lessThanXSeconds: {
    one: "×¤×××ª ××©× ×××",
    two: "×¤×××ª ××©×ª× ×©× ×××ª",
    other: "×¤×××ª ×Ö¾{{count}} ×©× ×××ª",
  },

  xSeconds: {
    one: "×©× ×××",
    two: "×©×ª× ×©× ×××ª",
    other: "{{count}} ×©× ×××ª",
  },

  halfAMinute: "××¦× ××§×",

  lessThanXMinutes: {
    one: "×¤×××ª ×××§×",
    two: "×¤×××ª ××©×ª× ××§××ª",
    other: "×¤×××ª ×Ö¾{{count}} ××§××ª",
  },

  xMinutes: {
    one: "××§×",
    two: "×©×ª× ××§××ª",
    other: "{{count}} ××§××ª",
  },

  aboutXHours: {
    one: "××©×¢×",
    two: "××©×¢×ª×××",
    other: "×Ö¾{{count}} ×©×¢××ª",
  },

  xHours: {
    one: "×©×¢×",
    two: "×©×¢×ª×××",
    other: "{{count}} ×©×¢××ª",
  },

  xDays: {
    one: "×××",
    two: "××××××",
    other: "{{count}} ××××",
  },

  aboutXWeeks: {
    one: "××©×××¢",
    two: "××©×××¢×××",
    other: "×Ö¾{{count}} ×©×××¢××ª",
  },

  xWeeks: {
    one: "×©×××¢",
    two: "×©×××¢×××",
    other: "{{count}} ×©×××¢××ª",
  },

  aboutXMonths: {
    one: "×××××©",
    two: "×××××©×××",
    other: "×Ö¾{{count}} ××××©××",
  },

  xMonths: {
    one: "××××©",
    two: "××××©×××",
    other: "{{count}} ××××©××",
  },

  aboutXYears: {
    one: "××©× ×",
    two: "××©× ×ª×××",
    other: "×Ö¾{{count}} ×©× ××",
  },

  xYears: {
    one: "×©× ×",
    two: "×©× ×ª×××",
    other: "{{count}} ×©× ××",
  },

  overXYears: {
    one: "×××ª×¨ ××©× ×",
    two: "×××ª×¨ ××©× ×ª×××",
    other: "×××ª×¨ ×Ö¾{{count}} ×©× ××",
  },

  almostXYears: {
    one: "×××¢× ×©× ×",
    two: "×××¢× ×©× ×ª×××",
    other: "×××¢× {{count}} ×©× ××",
  },
};

const formatDistance$1C = (token, count, options) => {
  // Return word instead of `in one day` or `one day ago`
  if (token === "xDays" && options?.addSuffix && count <= 2) {
    if (options.comparison && options.comparison > 0) {
      return count === 1 ? "×××¨" : "×××¨×ª×××";
    }

    return count === 1 ? "××ª×××" : "×©××©××";
  }

  let result;

  const tokenValue = formatDistanceLocale$O[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "××¢×× " + result;
    } else {
      return "××¤× × " + result;
    }
  }

  return result;
};
formatDistance$1D.formatDistance = formatDistance$1C;

var formatLong$Q = {};

formatLong$Q.formatLong = void 0;
var _index$3r = buildFormatLongFn$1;

const dateFormats$Q = {
  full: "EEEE, d ×MMMM y",
  long: "d ×MMMM y",
  medium: "d ×MMM y",
  short: "d.M.y",
};

const timeFormats$Q = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$Q = {
  full: "{{date}} '××©×¢×' {{time}}",
  long: "{{date}} '××©×¢×' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$Q.formatLong = {
  date: (0, _index$3r.buildFormatLongFn)({
    formats: dateFormats$Q,
    defaultWidth: "full",
  }),

  time: (0, _index$3r.buildFormatLongFn)({
    formats: timeFormats$Q,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3r.buildFormatLongFn)({
    formats: dateTimeFormats$Q,
    defaultWidth: "full",
  }),
});

var formatRelative$1D = {};

formatRelative$1D.formatRelative = void 0;

const formatRelativeLocale$P = {
  lastWeek: "eeee '×©×¢××¨ ××©×¢×' p",
  yesterday: "'××ª××× ××©×¢×' p",
  today: "'×××× ××©×¢×' p",
  tomorrow: "'×××¨ ××©×¢×' p",
  nextWeek: "eeee '××©×¢×' p",
  other: "P",
};

const formatRelative$1C = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$P[token];
formatRelative$1D.formatRelative = formatRelative$1C;

var localize$P = {};

localize$P.localize = void 0;
var _index$3q = buildLocalizeFn$1;

const eraValues$P = {
  narrow: ["××¤× ××´×¡", "××¡×¤××¨×"],
  abbreviated: ["××¤× ××´×¡", "××¡×¤××¨×"],
  wide: ["××¤× × ××¡×¤××¨×", "××¡×¤××¨×"],
};

const quarterValues$P = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["×¨××¢×× 1", "×¨××¢×× 2", "×¨××¢×× 3", "×¨××¢×× 4"],
};

const monthValues$P = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],

  abbreviated: [
    "×× ××³",
    "×¤××¨×³",
    "××¨×¥",
    "××¤×¨×³",
    "×××",
    "××× ×",
    "××××",
    "××××³",
    "×¡×¤××³",
    "×××§×³",
    "× ×××³",
    "××¦××³",
  ],

  wide: [
    "×× ×××¨",
    "×¤××¨×××¨",
    "××¨×¥",
    "××¤×¨××",
    "×××",
    "××× ×",
    "××××",
    "×××××¡×",
    "×¡×¤××××¨",
    "×××§××××¨",
    "× ×××××¨",
    "××¦×××¨",
  ],
};

const dayValues$P = {
  narrow: ["××³", "××³", "××³", "××³", "××³", "××³", "×©×³"],
  short: ["××³", "××³", "××³", "××³", "××³", "××³", "×©×³"],
  abbreviated: [
    "××× ××³",
    "××× ××³",
    "××× ××³",
    "××× ××³",
    "××× ××³",
    "××× ××³",
    "×©××ª",
  ],

  wide: [
    "××× ×¨××©××",
    "××× ×©× ×",
    "××× ×©×××©×",
    "××× ×¨×××¢×",
    "××× ××××©×",
    "××× ×©××©×",
    "××× ×©××ª",
  ],
};

const dayPeriodValues$P = {
  narrow: {
    am: "××¤× ××´×¦",
    pm: "××××´×¦",
    midnight: "××¦××ª",
    noon: "×¦××¨×××",
    morning: "×××§×¨",
    afternoon: "×××¨ ××¦××¨×××",
    evening: "×¢×¨×",
    night: "××××",
  },
  abbreviated: {
    am: "××¤× ××´×¦",
    pm: "××××´×¦",
    midnight: "××¦××ª",
    noon: "×¦××¨×××",
    morning: "×××§×¨",
    afternoon: "×××¨ ××¦××¨×××",
    evening: "×¢×¨×",
    night: "××××",
  },
  wide: {
    am: "××¤× ××´×¦",
    pm: "××××´×¦",
    midnight: "××¦××ª",
    noon: "×¦××¨×××",
    morning: "×××§×¨",
    afternoon: "×××¨ ××¦××¨×××",
    evening: "×¢×¨×",
    night: "××××",
  },
};

const formattingDayPeriodValues$F = {
  narrow: {
    am: "××¤× ××´×¦",
    pm: "××××´×¦",
    midnight: "××¦××ª",
    noon: "×¦××¨×××",
    morning: "××××§×¨",
    afternoon: "××¦××¨×××",
    evening: "××¢×¨×",
    night: "×××××",
  },
  abbreviated: {
    am: "××¤× ××´×¦",
    pm: "××××´×¦",
    midnight: "××¦××ª",
    noon: "×¦××¨×××",
    morning: "××××§×¨",
    afternoon: "×××¨ ××¦××¨×××",
    evening: "××¢×¨×",
    night: "×××××",
  },
  wide: {
    am: "××¤× ××´×¦",
    pm: "××××´×¦",
    midnight: "××¦××ª",
    noon: "×¦××¨×××",
    morning: "××××§×¨",
    afternoon: "×××¨ ××¦××¨×××",
    evening: "××¢×¨×",
    night: "×××××",
  },
};

const ordinalNumber$P = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);

  // We only show words till 10
  if (number <= 0 || number > 10) return String(number);

  const unit = String(options?.unit);

  const isFemale = ["year", "hour", "minute", "second"].indexOf(unit) >= 0;

  const male = [
    "×¨××©××",
    "×©× ×",
    "×©×××©×",
    "×¨×××¢×",
    "××××©×",
    "×©××©×",
    "×©×××¢×",
    "×©××× ×",
    "×ª×©××¢×",
    "×¢×©××¨×",
  ];

  const female = [
    "×¨××©×× ×",
    "×©× ×××",
    "×©×××©××ª",
    "×¨×××¢××ª",
    "××××©××ª",
    "×©××©××ª",
    "×©×××¢××ª",
    "×©××× ××ª",
    "×ª×©××¢××ª",
    "×¢×©××¨××ª",
  ];

  const index = number - 1;
  return isFemale ? female[index] : male[index];
};

(localize$P.localize = {
  ordinalNumber: ordinalNumber$P,

  era: (0, _index$3q.buildLocalizeFn)({
    values: eraValues$P,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3q.buildLocalizeFn)({
    values: quarterValues$P,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3q.buildLocalizeFn)({
    values: monthValues$P,
    defaultWidth: "wide",
  }),

  day: (0, _index$3q.buildLocalizeFn)({
    values: dayValues$P,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3q.buildLocalizeFn)({
    values: dayPeriodValues$P,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$F,
    defaultFormattingWidth: "wide",
  }),
});

var match$P = {};

match$P.match = void 0;

var _index$3p = buildMatchFn$1;
var _index2$1F = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$P =
  /^(\d+|(×¨××©××|×©× ×|×©×××©×|×¨×××¢×|××××©×|×©××©×|×©×××¢×|×©××× ×|×ª×©××¢×|×¢×©××¨×|×¨××©×× ×|×©× ×××|×©×××©××ª|×¨×××¢××ª|××××©××ª|×©××©××ª|×©×××¢××ª|×©××× ××ª|×ª×©××¢××ª|×¢×©××¨××ª))/i;
const parseOrdinalNumberPattern$P = /^(\d+|×¨×|×©× |×©×|×¨×|×|×©×|×©×|×©×|×ª|×¢)/i;

const matchEraPatterns$P = {
  narrow: /^×(×¡×¤××¨×|×¤× ××´×¡)/i,
  abbreviated: /^×(×¡×¤××¨×|×¤× ××´×¡)/i,
  wide: /^×(×¤× × ×)?×¡×¤××¨×/i,
};
const parseEraPatterns$P = {
  any: [/^××¤/i, /^××¡/i],
};

const matchQuarterPatterns$P = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^×¨××¢×× [1234]/i,
};
const parseQuarterPatterns$P = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$P = {
  narrow: /^\d+/i,
  abbreviated: /^(×× ×|×¤××¨|××¨×¥|××¤×¨|×××|××× ×|××××|×××|×¡×¤×|×××§|× ××|××¦×)×³?/i,
  wide: /^(×× ×××¨|×¤××¨×××¨|××¨×¥|××¤×¨××|×××|××× ×|××××|×××××¡×|×¡×¤××××¨|×××§××××¨|× ×××××¨|××¦×××¨)/i,
};
const parseMonthPatterns$P = {
  narrow: [
    /^1$/i,
    /^2/i,
    /^3/i,
    /^4/i,
    /^5/i,
    /^6/i,
    /^7/i,
    /^8/i,
    /^9/i,
    /^10/i,
    /^11/i,
    /^12/i,
  ],

  any: [
    /^×× /i,
    /^×¤/i,
    /^××¨/i,
    /^××¤/i,
    /^××/i,
    /^××× /i,
    /^×××/i,
    /^×××/i,
    /^×¡/i,
    /^×××§/i,
    /^× /i,
    /^×/i,
  ],
};

const matchDayPatterns$P = {
  narrow: /^[×××××××©]×³/i,
  short: /^[×××××××©]×³/i,
  abbreviated: /^(×©××ª|××× (×|×|×|×|×|×)×³)/i,
  wide: /^××× (×¨××©××|×©× ×|×©×××©×|×¨×××¢×|××××©×|×©××©×|×©××ª)/i,
};
const parseDayPatterns$P = {
  abbreviated: [/××³$/i, /××³$/i, /××³$/i, /××³$/i, /××³$/i, /××³$/i, /^×©/i],
  wide: [/×$/i, /× ×$/i, /×××©×$/i, /×¢×$/i, /×××©×$/i, /×©××©×$/i, /×ª$/i],
  any: [/^×/i, /^×/i, /^×/i, /^×/i, /^×/i, /^×/i, /^×©/i],
};

const matchDayPeriodPatterns$P = {
  any: /^(×××¨ ×|×)?(××¦××ª|×¦××¨×××|×××§×¨|×¢×¨×|××××|××××´×¦|××¤× ××´×¦)/i,
};
const parseDayPeriodPatterns$P = {
  any: {
    am: /^××¤/i,
    pm: /^×××/i,
    midnight: /^×/i,
    noon: /^×¦/i,
    morning: /×××§×¨/i,
    afternoon: /××¦|×××¨/i,
    evening: /×¢×¨×/i,
    night: /××××/i,
  },
};

const ordinalName = ["×¨×", "×©× ", "×©×", "×¨×", "×", "×©×", "×©×", "×©×", "×ª", "×¢"];

(match$P.match = {
  ordinalNumber: (0, _index2$1F.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$P,
    parsePattern: parseOrdinalNumberPattern$P,
    valueCallback: (value) => {
      const number = parseInt(value, 10);
      return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
    },
  }),

  era: (0, _index$3p.buildMatchFn)({
    matchPatterns: matchEraPatterns$P,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$P,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3p.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$P,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$P,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3p.buildMatchFn)({
    matchPatterns: matchMonthPatterns$P,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$P,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3p.buildMatchFn)({
    matchPatterns: matchDayPatterns$P,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$P,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3p.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$P,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$P,
    defaultParseWidth: "any",
  }),
});

he.he = void 0;
var _index$3o = formatDistance$1D;
var _index2$1E = formatLong$Q;
var _index3$R = formatRelative$1D;
var _index4$Q = localize$P;
var _index5$Q = match$P;

/**
 * @category Locales
 * @summary Hebrew locale.
 * @language Hebrew
 * @iso-639-2 heb
 * @author Nir Lahad [@nirlah](https://github.com/nirlah)
 */
(he.he = {
  code: "he",
  formatDistance: _index$3o.formatDistance,
  formatLong: _index2$1E.formatLong,
  formatRelative: _index3$R.formatRelative,
  localize: _index4$Q.localize,
  match: _index5$Q.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var hi = {};

var formatDistance$1B = {};

var localize$O = {};

localize$O.localeToNumber = localeToNumber;
localize$O.localize = void 0;
localize$O.numberToLocale = numberToLocale;
var _index$3n = buildLocalizeFn$1;

const numberValues = {
  locale: {
    1: "à¥§",
    2: "à¥¨",
    3: "à¥©",
    4: "à¥ª",
    5: "à¥«",
    6: "à¥¬",
    7: "à¥­",
    8: "à¥®",
    9: "à¥¯",
    0: "à¥¦",
  },
  number: {
    "à¥§": "1",
    "à¥¨": "2",
    "à¥©": "3",
    "à¥ª": "4",
    "à¥«": "5",
    "à¥¬": "6",
    "à¥­": "7",
    "à¥®": "8",
    "à¥¯": "9",
    "à¥¦": "0",
  },
};

// CLDR #1585 - #1592
const eraValues$O = {
  narrow: ["à¤à¤¸à¤¾-à¤ªà¥à¤°à¥à¤µ", "à¤à¤¸à¥à¤µà¥"],
  abbreviated: ["à¤à¤¸à¤¾-à¤ªà¥à¤°à¥à¤µ", "à¤à¤¸à¥à¤µà¥"],
  wide: ["à¤à¤¸à¤¾-à¤ªà¥à¤°à¥à¤µ", "à¤à¤¸à¤µà¥ à¤¸à¤¨"],
};

// CLDR #1593 - #1616
const quarterValues$O = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["à¤¤à¤¿1", "à¤¤à¤¿2", "à¤¤à¤¿3", "à¤¤à¤¿4"],
  wide: ["à¤ªà¤¹à¤²à¥ à¤¤à¤¿à¤®à¤¾à¤¹à¥", "à¤¦à¥à¤¸à¤°à¥ à¤¤à¤¿à¤®à¤¾à¤¹à¥", "à¤¤à¥à¤¸à¤°à¥ à¤¤à¤¿à¤®à¤¾à¤¹à¥", "à¤à¥à¤¥à¥ à¤¤à¤¿à¤®à¤¾à¤¹à¥"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
// https://www.unicode.org/cldr/charts/32/summary/hi.html
// CLDR #1617 - #1688
const monthValues$O = {
  narrow: [
    "à¤",
    "à¤«à¤¼",
    "à¤®à¤¾",
    "à¤",
    "à¤®à¤",
    "à¤à¥",
    "à¤à¥",
    "à¤à¤",
    "à¤¸à¤¿",
    "à¤à¤à¥à¤à¥",
    "à¤¨",
    "à¤¦à¤¿",
  ],

  abbreviated: [
    "à¤à¤¨",
    "à¤«à¤¼à¤°",
    "à¤®à¤¾à¤°à¥à¤",
    "à¤à¤ªà¥à¤°à¥à¤²",
    "à¤®à¤",
    "à¤à¥à¤¨",
    "à¤à¥à¤²",
    "à¤à¤",
    "à¤¸à¤¿à¤¤",
    "à¤à¤à¥à¤à¥",
    "à¤¨à¤µ",
    "à¤¦à¤¿à¤¸",
  ],

  wide: [
    "à¤à¤¨à¤µà¤°à¥",
    "à¤«à¤¼à¤°à¤µà¤°à¥",
    "à¤®à¤¾à¤°à¥à¤",
    "à¤à¤ªà¥à¤°à¥à¤²",
    "à¤®à¤",
    "à¤à¥à¤¨",
    "à¤à¥à¤²à¤¾à¤",
    "à¤à¤à¤¸à¥à¤¤",
    "à¤¸à¤¿à¤¤à¤à¤¬à¤°",
    "à¤à¤à¥à¤à¥à¤¬à¤°",
    "à¤¨à¤µà¤à¤¬à¤°",
    "à¤¦à¤¿à¤¸à¤à¤¬à¤°",
  ],
};

// CLDR #1689 - #1744
const dayValues$O = {
  narrow: ["à¤°", "à¤¸à¥", "à¤®à¤", "à¤¬à¥", "à¤à¥", "à¤¶à¥", "à¤¶"],
  short: ["à¤°", "à¤¸à¥", "à¤®à¤", "à¤¬à¥", "à¤à¥", "à¤¶à¥", "à¤¶"],
  abbreviated: ["à¤°à¤µà¤¿", "à¤¸à¥à¤®", "à¤®à¤à¤à¤²", "à¤¬à¥à¤§", "à¤à¥à¤°à¥", "à¤¶à¥à¤à¥à¤°", "à¤¶à¤¨à¤¿"],
  wide: [
    "à¤°à¤µà¤¿à¤µà¤¾à¤°",
    "à¤¸à¥à¤®à¤µà¤¾à¤°",
    "à¤®à¤à¤à¤²à¤µà¤¾à¤°",
    "à¤¬à¥à¤§à¤µà¤¾à¤°",
    "à¤à¥à¤°à¥à¤µà¤¾à¤°",
    "à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°",
    "à¤¶à¤¨à¤¿à¤µà¤¾à¤°",
  ],
};

const dayPeriodValues$O = {
  narrow: {
    am: "à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨",
    pm: "à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨",
    midnight: "à¤®à¤§à¥à¤¯à¤°à¤¾à¤¤à¥à¤°à¤¿",
    noon: "à¤¦à¥à¤ªà¤¹à¤°",
    morning: "à¤¸à¥à¤¬à¤¹",
    afternoon: "à¤¦à¥à¤ªà¤¹à¤°",
    evening: "à¤¶à¤¾à¤®",
    night: "à¤°à¤¾à¤¤",
  },
  abbreviated: {
    am: "à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨",
    pm: "à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨",
    midnight: "à¤®à¤§à¥à¤¯à¤°à¤¾à¤¤à¥à¤°à¤¿",
    noon: "à¤¦à¥à¤ªà¤¹à¤°",
    morning: "à¤¸à¥à¤¬à¤¹",
    afternoon: "à¤¦à¥à¤ªà¤¹à¤°",
    evening: "à¤¶à¤¾à¤®",
    night: "à¤°à¤¾à¤¤",
  },
  wide: {
    am: "à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨",
    pm: "à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨",
    midnight: "à¤®à¤§à¥à¤¯à¤°à¤¾à¤¤à¥à¤°à¤¿",
    noon: "à¤¦à¥à¤ªà¤¹à¤°",
    morning: "à¤¸à¥à¤¬à¤¹",
    afternoon: "à¤¦à¥à¤ªà¤¹à¤°",
    evening: "à¤¶à¤¾à¤®",
    night: "à¤°à¤¾à¤¤",
  },
};

const formattingDayPeriodValues$E = {
  narrow: {
    am: "à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨",
    pm: "à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨",
    midnight: "à¤®à¤§à¥à¤¯à¤°à¤¾à¤¤à¥à¤°à¤¿",
    noon: "à¤¦à¥à¤ªà¤¹à¤°",
    morning: "à¤¸à¥à¤¬à¤¹",
    afternoon: "à¤¦à¥à¤ªà¤¹à¤°",
    evening: "à¤¶à¤¾à¤®",
    night: "à¤°à¤¾à¤¤",
  },
  abbreviated: {
    am: "à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨",
    pm: "à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨",
    midnight: "à¤®à¤§à¥à¤¯à¤°à¤¾à¤¤à¥à¤°à¤¿",
    noon: "à¤¦à¥à¤ªà¤¹à¤°",
    morning: "à¤¸à¥à¤¬à¤¹",
    afternoon: "à¤¦à¥à¤ªà¤¹à¤°",
    evening: "à¤¶à¤¾à¤®",
    night: "à¤°à¤¾à¤¤",
  },
  wide: {
    am: "à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨",
    pm: "à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨",
    midnight: "à¤®à¤§à¥à¤¯à¤°à¤¾à¤¤à¥à¤°à¤¿",
    noon: "à¤¦à¥à¤ªà¤¹à¤°",
    morning: "à¤¸à¥à¤¬à¤¹",
    afternoon: "à¤¦à¥à¤ªà¤¹à¤°",
    evening: "à¤¶à¤¾à¤®",
    night: "à¤°à¤¾à¤¤",
  },
};

const ordinalNumber$O = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return numberToLocale(number);
};

function localeToNumber(locale) {
  const enNumber = locale.toString().replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
    return numberValues.number[match];
  });
  return Number(enNumber);
}

function numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function (match) {
    return numberValues.locale[match];
  });
}

(localize$O.localize = {
  ordinalNumber: ordinalNumber$O,

  era: (0, _index$3n.buildLocalizeFn)({
    values: eraValues$O,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3n.buildLocalizeFn)({
    values: quarterValues$O,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3n.buildLocalizeFn)({
    values: monthValues$O,
    defaultWidth: "wide",
  }),

  day: (0, _index$3n.buildLocalizeFn)({
    values: dayValues$O,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3n.buildLocalizeFn)({
    values: dayPeriodValues$O,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$E,
    defaultFormattingWidth: "wide",
  }),
});

formatDistance$1B.formatDistance = void 0;
var _index$3m = localize$O;

// Source: https://www.unicode.org/cldr/charts/32/summary/hi.html

const formatDistanceLocale$N = {
  lessThanXSeconds: {
    one: "à¥§ à¤¸à¥à¤à¤à¤¡ à¤¸à¥ à¤à¤®", // CLDR #1310
    other: "{{count}} à¤¸à¥à¤à¤à¤¡ à¤¸à¥ à¤à¤®",
  },

  xSeconds: {
    one: "à¥§ à¤¸à¥à¤à¤à¤¡",
    other: "{{count}} à¤¸à¥à¤à¤à¤¡",
  },

  halfAMinute: "à¤à¤§à¤¾ à¤®à¤¿à¤¨à¤",

  lessThanXMinutes: {
    one: "à¥§ à¤®à¤¿à¤¨à¤ à¤¸à¥ à¤à¤®",
    other: "{{count}} à¤®à¤¿à¤¨à¤ à¤¸à¥ à¤à¤®",
  },

  xMinutes: {
    one: "à¥§ à¤®à¤¿à¤¨à¤", // CLDR #1307
    other: "{{count}} à¤®à¤¿à¤¨à¤",
  },

  aboutXHours: {
    one: "à¤²à¤à¤­à¤ à¥§ à¤à¤à¤à¤¾",
    other: "à¤²à¤à¤­à¤ {{count}} à¤à¤à¤à¥",
  },

  xHours: {
    one: "à¥§ à¤à¤à¤à¤¾", // CLDR #1304
    other: "{{count}} à¤à¤à¤à¥", // CLDR #4467
  },

  xDays: {
    one: "à¥§ à¤¦à¤¿à¤¨", // CLDR #1286
    other: "{{count}} à¤¦à¤¿à¤¨",
  },

  aboutXWeeks: {
    one: "à¤²à¤à¤­à¤ à¥§ à¤¸à¤ªà¥à¤¤à¤¾à¤¹",
    other: "à¤²à¤à¤­à¤ {{count}} à¤¸à¤ªà¥à¤¤à¤¾à¤¹",
  },

  xWeeks: {
    one: "à¥§ à¤¸à¤ªà¥à¤¤à¤¾à¤¹",
    other: "{{count}} à¤¸à¤ªà¥à¤¤à¤¾à¤¹",
  },

  aboutXMonths: {
    one: "à¤²à¤à¤­à¤ à¥§ à¤®à¤¹à¥à¤¨à¤¾",
    other: "à¤²à¤à¤­à¤ {{count}} à¤®à¤¹à¥à¤¨à¥",
  },

  xMonths: {
    one: "à¥§ à¤®à¤¹à¥à¤¨à¤¾",
    other: "{{count}} à¤®à¤¹à¥à¤¨à¥",
  },

  aboutXYears: {
    one: "à¤²à¤à¤­à¤ à¥§ à¤µà¤°à¥à¤·",
    other: "à¤²à¤à¤­à¤ {{count}} à¤µà¤°à¥à¤·", // CLDR #4823
  },

  xYears: {
    one: "à¥§ à¤µà¤°à¥à¤·",
    other: "{{count}} à¤µà¤°à¥à¤·",
  },

  overXYears: {
    one: "à¥§ à¤µà¤°à¥à¤· à¤¸à¥ à¤à¤§à¤¿à¤",
    other: "{{count}} à¤µà¤°à¥à¤· à¤¸à¥ à¤à¤§à¤¿à¤",
  },

  almostXYears: {
    one: "à¤²à¤à¤­à¤ à¥§ à¤µà¤°à¥à¤·",
    other: "à¤²à¤à¤­à¤ {{count}} à¤µà¤°à¥à¤·",
  },
};

const formatDistance$1A = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$N[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace(
      "{{count}}",
      (0, _index$3m.numberToLocale)(count),
    );
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "à¤®à¥ ";
    } else {
      return result + " à¤ªà¤¹à¤²à¥";
    }
  }

  return result;
};
formatDistance$1B.formatDistance = formatDistance$1A;

var formatLong$P = {};

formatLong$P.formatLong = void 0;
var _index$3l = buildFormatLongFn$1;

const dateFormats$P = {
  full: "EEEE, do MMMM, y", // CLDR #1787
  long: "do MMMM, y", // CLDR #1788
  medium: "d MMM, y", // CLDR #1789
  short: "dd/MM/yyyy", // CLDR #1790
};

const timeFormats$P = {
  full: "h:mm:ss a zzzz", // CLDR #1791
  long: "h:mm:ss a z", // CLDR #1792
  medium: "h:mm:ss a", // CLDR #1793
  short: "h:mm a", // CLDR #1794
};

const dateTimeFormats$P = {
  full: "{{date}} 'à¤à¥' {{time}}", // CLDR #1795
  long: "{{date}} 'à¤à¥' {{time}}", // CLDR #1796
  medium: "{{date}}, {{time}}", // CLDR #1797
  short: "{{date}}, {{time}}", // CLDR #1798
};

(formatLong$P.formatLong = {
  date: (0, _index$3l.buildFormatLongFn)({
    formats: dateFormats$P,
    defaultWidth: "full",
  }),

  time: (0, _index$3l.buildFormatLongFn)({
    formats: timeFormats$P,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3l.buildFormatLongFn)({
    formats: dateTimeFormats$P,
    defaultWidth: "full",
  }),
});

var formatRelative$1B = {};

formatRelative$1B.formatRelative = void 0;

const formatRelativeLocale$O = {
  lastWeek: "'à¤ªà¤¿à¤à¤²à¥' eeee p",
  yesterday: "'à¤à¤²' p",
  today: "'à¤à¤' p",
  tomorrow: "'à¤à¤²' p",
  nextWeek: "eeee 'à¤à¥' p",
  other: "P",
};

const formatRelative$1A = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$O[token];
formatRelative$1B.formatRelative = formatRelative$1A;

var match$O = {};

match$O.match = void 0;

var _index$3k = buildMatchFn$1;
var _index2$1D = buildMatchPatternFn$1;
var _index3$Q = localize$O;

const matchOrdinalNumberPattern$O = /^[à¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯]+/i;
const parseOrdinalNumberPattern$O = /^[à¥¦à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯]+/i;

const matchEraPatterns$O = {
  narrow: /^(à¤à¤¸à¤¾-à¤ªà¥à¤°à¥à¤µ|à¤à¤¸à¥à¤µà¥)/i,
  abbreviated: /^(à¤à¤¸à¤¾\.?\s?à¤ªà¥à¤°à¥à¤µ\.?|à¤à¤¸à¤¾\.?)/i,
  wide: /^(à¤à¤¸à¤¾-à¤ªà¥à¤°à¥à¤µ|à¤à¤¸à¤µà¥ à¤ªà¥à¤°à¥à¤µ|à¤à¤¸à¤µà¥ à¤¸à¤¨|à¤à¤¸à¤µà¥)/i,
};

const parseEraPatterns$O = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns$O = {
  narrow: /^[1234]/i,
  abbreviated: /^à¤¤à¤¿[1234]/i,
  wide: /^[1234](à¤ªà¤¹à¤²à¥|à¤¦à¥à¤¸à¤°à¥|à¤¤à¥à¤¸à¤°à¥|à¤à¥à¤¥à¥)? à¤¤à¤¿à¤®à¤¾à¤¹à¥/i,
};
const parseQuarterPatterns$O = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$O = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[à¤à¤«à¤¼à¤®à¤¾à¤à¤ªà¥à¤®à¤à¤à¥à¤¨à¤à¥à¤à¤à¤¸à¤¿à¤à¤à¥à¤¤à¤¨à¤¦à¤¿]/i,
  abbreviated: /^(à¤à¤¨|à¤«à¤¼à¤°|à¤®à¤¾à¤°à¥à¤|à¤à¤ªà¥|à¤®à¤|à¤à¥à¤¨|à¤à¥à¤²|à¤à¤|à¤¸à¤¿à¤¤|à¤à¤à¥à¤¤à¥|à¤¨à¤µ|à¤¦à¤¿à¤¸)/i,
  wide: /^(à¤à¤¨à¤µà¤°à¥|à¤«à¤¼à¤°à¤µà¤°à¥|à¤®à¤¾à¤°à¥à¤|à¤à¤ªà¥à¤°à¥à¤²|à¤®à¤|à¤à¥à¤¨|à¤à¥à¤²à¤¾à¤|à¤à¤à¤¸à¥à¤¤|à¤¸à¤¿à¤¤à¤à¤¬à¤°|à¤à¤à¥à¤¤à¥à¤¬à¤°|à¤¨à¤µà¤à¤¬à¤°|à¤¦à¤¿à¤¸à¤à¤¬à¤°)/i,
};
const parseMonthPatterns$O = {
  narrow: [
    /^à¤/i,
    /^à¤«à¤¼/i,
    /^à¤®à¤¾/i,
    /^à¤à¤ªà¥/i,
    /^à¤®à¤/i,
    /^à¤à¥/i,
    /^à¤à¥/i,
    /^à¤à¤/i,
    /^à¤¸à¤¿/i,
    /^à¤à¤à¥à¤¤à¥/i,
    /^à¤¨/i,
    /^à¤¦à¤¿/i,
  ],

  any: [
    /^à¤à¤¨/i,
    /^à¤«à¤¼/i,
    /^à¤®à¤¾/i,
    /^à¤à¤ªà¥/i,
    /^à¤®à¤/i,
    /^à¤à¥/i,
    /^à¤à¥/i,
    /^à¤à¤/i,
    /^à¤¸à¤¿/i,
    /^à¤à¤à¥à¤¤à¥/i,
    /^à¤¨à¤µ/i,
    /^à¤¦à¤¿à¤¸/i,
  ],
};

const matchDayPatterns$O = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[à¤°à¤µà¤¿à¤¸à¥à¤®à¤®à¤à¤à¤²à¤¬à¥à¤§à¤à¥à¤°à¥à¤¶à¥à¤à¥à¤°à¤¶à¤¨à¤¿]/i,
  short: /^(à¤°à¤µà¤¿|à¤¸à¥à¤®|à¤®à¤à¤à¤²|à¤¬à¥à¤§|à¤à¥à¤°à¥|à¤¶à¥à¤à¥à¤°|à¤¶à¤¨à¤¿)/i,
  abbreviated: /^(à¤°à¤µà¤¿|à¤¸à¥à¤®|à¤®à¤à¤à¤²|à¤¬à¥à¤§|à¤à¥à¤°à¥|à¤¶à¥à¤à¥à¤°|à¤¶à¤¨à¤¿)/i,
  wide: /^(à¤°à¤µà¤¿à¤µà¤¾à¤°|à¤¸à¥à¤®à¤µà¤¾à¤°|à¤®à¤à¤à¤²à¤µà¤¾à¤°|à¤¬à¥à¤§à¤µà¤¾à¤°|à¤à¥à¤°à¥à¤µà¤¾à¤°|à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°|à¤¶à¤¨à¤¿à¤µà¤¾à¤°)/i,
};
const parseDayPatterns$O = {
  narrow: [/^à¤°à¤µà¤¿/i, /^à¤¸à¥à¤®/i, /^à¤®à¤à¤à¤²/i, /^à¤¬à¥à¤§/i, /^à¤à¥à¤°à¥/i, /^à¤¶à¥à¤à¥à¤°/i, /^à¤¶à¤¨à¤¿/i],

  any: [/^à¤°à¤µà¤¿/i, /^à¤¸à¥à¤®/i, /^à¤®à¤à¤à¤²/i, /^à¤¬à¥à¤§/i, /^à¤à¥à¤°à¥/i, /^à¤¶à¥à¤à¥à¤°/i, /^à¤¶à¤¨à¤¿/i],
};

const matchDayPeriodPatterns$O = {
  narrow: /^(à¤ªà¥|à¤|à¤®|à¤¦.\?|à¤¸à¥|à¤¦à¥|à¤¶à¤¾|à¤°à¤¾)/i,
  any: /^(à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨|à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨|à¤®|à¤¦.\?|à¤¸à¥|à¤¦à¥|à¤¶à¤¾|à¤°à¤¾)/i,
};
const parseDayPeriodPatterns$O = {
  any: {
    am: /^à¤ªà¥à¤°à¥à¤µà¤¾à¤¹à¥à¤¨/i,
    pm: /^à¤à¤ªà¤°à¤¾à¤¹à¥à¤¨/i,
    midnight: /^à¤®à¤§à¥à¤¯/i,
    noon: /^à¤¦à¥/i,
    morning: /à¤¸à¥/i,
    afternoon: /à¤¦à¥/i,
    evening: /à¤¶à¤¾/i,
    night: /à¤°à¤¾/i,
  },
};

(match$O.match = {
  ordinalNumber: (0, _index2$1D.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$O,
    parsePattern: parseOrdinalNumberPattern$O,
    valueCallback: _index3$Q.localeToNumber,
  }),

  era: (0, _index$3k.buildMatchFn)({
    matchPatterns: matchEraPatterns$O,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$O,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3k.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$O,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$O,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3k.buildMatchFn)({
    matchPatterns: matchMonthPatterns$O,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$O,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3k.buildMatchFn)({
    matchPatterns: matchDayPatterns$O,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$O,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3k.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$O,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$O,
    defaultParseWidth: "any",
  }),
});

hi.hi = void 0;
var _index$3j = formatDistance$1B;
var _index2$1C = formatLong$P;
var _index3$P = formatRelative$1B;
var _index4$P = localize$O;
var _index5$P = match$O;

/**
 * @category Locales
 * @summary Hindi locale (India).
 * @language Hindi
 * @iso-639-2 hin
 * @author Mukesh Mandiwal [@mukeshmandiwal](https://github.com/mukeshmandiwal)
 */
(hi.hi = {
  code: "hi",
  formatDistance: _index$3j.formatDistance,
  formatLong: _index2$1C.formatLong,
  formatRelative: _index3$P.formatRelative,
  localize: _index4$P.localize,
  match: _index5$P.match,
  options: {
    weekStartsOn: 0 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var hr = {};

var formatDistance$1z = {};

formatDistance$1z.formatDistance = void 0;

const formatDistanceLocale$M = {
  lessThanXSeconds: {
    one: {
      standalone: "manje od 1 sekunde",
      withPrepositionAgo: "manje od 1 sekunde",
      withPrepositionIn: "manje od 1 sekundu",
    },
    dual: "manje od {{count}} sekunde",
    other: "manje od {{count}} sekundi",
  },

  xSeconds: {
    one: {
      standalone: "1 sekunda",
      withPrepositionAgo: "1 sekunde",
      withPrepositionIn: "1 sekundu",
    },
    dual: "{{count}} sekunde",
    other: "{{count}} sekundi",
  },

  halfAMinute: "pola minute",

  lessThanXMinutes: {
    one: {
      standalone: "manje od 1 minute",
      withPrepositionAgo: "manje od 1 minute",
      withPrepositionIn: "manje od 1 minutu",
    },
    dual: "manje od {{count}} minute",
    other: "manje od {{count}} minuta",
  },

  xMinutes: {
    one: {
      standalone: "1 minuta",
      withPrepositionAgo: "1 minute",
      withPrepositionIn: "1 minutu",
    },
    dual: "{{count}} minute",
    other: "{{count}} minuta",
  },

  aboutXHours: {
    one: {
      standalone: "oko 1 sat",
      withPrepositionAgo: "oko 1 sat",
      withPrepositionIn: "oko 1 sat",
    },
    dual: "oko {{count}} sata",
    other: "oko {{count}} sati",
  },

  xHours: {
    one: {
      standalone: "1 sat",
      withPrepositionAgo: "1 sat",
      withPrepositionIn: "1 sat",
    },
    dual: "{{count}} sata",
    other: "{{count}} sati",
  },

  xDays: {
    one: {
      standalone: "1 dan",
      withPrepositionAgo: "1 dan",
      withPrepositionIn: "1 dan",
    },
    dual: "{{count}} dana",
    other: "{{count}} dana",
  },

  aboutXWeeks: {
    one: {
      standalone: "oko 1 tjedan",
      withPrepositionAgo: "oko 1 tjedan",
      withPrepositionIn: "oko 1 tjedan",
    },
    dual: "oko {{count}} tjedna",
    other: "oko {{count}} tjedana",
  },

  xWeeks: {
    one: {
      standalone: "1 tjedan",
      withPrepositionAgo: "1 tjedan",
      withPrepositionIn: "1 tjedan",
    },
    dual: "{{count}} tjedna",
    other: "{{count}} tjedana",
  },

  aboutXMonths: {
    one: {
      standalone: "oko 1 mjesec",
      withPrepositionAgo: "oko 1 mjesec",
      withPrepositionIn: "oko 1 mjesec",
    },
    dual: "oko {{count}} mjeseca",
    other: "oko {{count}} mjeseci",
  },

  xMonths: {
    one: {
      standalone: "1 mjesec",
      withPrepositionAgo: "1 mjesec",
      withPrepositionIn: "1 mjesec",
    },
    dual: "{{count}} mjeseca",
    other: "{{count}} mjeseci",
  },

  aboutXYears: {
    one: {
      standalone: "oko 1 godinu",
      withPrepositionAgo: "oko 1 godinu",
      withPrepositionIn: "oko 1 godinu",
    },
    dual: "oko {{count}} godine",
    other: "oko {{count}} godina",
  },

  xYears: {
    one: {
      standalone: "1 godina",
      withPrepositionAgo: "1 godine",
      withPrepositionIn: "1 godinu",
    },
    dual: "{{count}} godine",
    other: "{{count}} godina",
  },

  overXYears: {
    one: {
      standalone: "preko 1 godinu",
      withPrepositionAgo: "preko 1 godinu",
      withPrepositionIn: "preko 1 godinu",
    },
    dual: "preko {{count}} godine",
    other: "preko {{count}} godina",
  },

  almostXYears: {
    one: {
      standalone: "gotovo 1 godinu",
      withPrepositionAgo: "gotovo 1 godinu",
      withPrepositionIn: "gotovo 1 godinu",
    },
    dual: "gotovo {{count}} godine",
    other: "gotovo {{count}} godina",
  },
};

const formatDistance$1y = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$M[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (
    count % 10 > 1 &&
    count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "za " + result;
    } else {
      return "prije " + result;
    }
  }

  return result;
};
formatDistance$1z.formatDistance = formatDistance$1y;

var formatLong$O = {};

formatLong$O.formatLong = void 0;
var _index$3i = buildFormatLongFn$1;

const dateFormats$O = {
  full: "EEEE, d. MMMM y.",
  long: "d. MMMM y.",
  medium: "d. MMM y.",
  short: "dd. MM. y.",
};

const timeFormats$O = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$O = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$O.formatLong = {
  date: (0, _index$3i.buildFormatLongFn)({
    formats: dateFormats$O,
    defaultWidth: "full",
  }),

  time: (0, _index$3i.buildFormatLongFn)({
    formats: timeFormats$O,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3i.buildFormatLongFn)({
    formats: dateTimeFormats$O,
    defaultWidth: "full",
  }),
});

var formatRelative$1z = {};

formatRelative$1z.formatRelative = void 0;

const formatRelativeLocale$N = {
  lastWeek: (date) => {
    switch (date.getDay()) {
      case 0:
        return "'proÅ¡lu nedjelju u' p";
      case 3:
        return "'proÅ¡lu srijedu u' p";
      case 6:
        return "'proÅ¡lu subotu u' p";
      default:
        return "'proÅ¡li' EEEE 'u' p";
    }
  },
  yesterday: "'juÄer u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: (date) => {
    switch (date.getDay()) {
      case 0:
        return "'iduÄu nedjelju u' p";
      case 3:
        return "'iduÄu srijedu u' p";
      case 6:
        return "'iduÄu subotu u' p";
      default:
        return "'proÅ¡li' EEEE 'u' p";
    }
  },
  other: "P",
};

const formatRelative$1y = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$N[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$1z.formatRelative = formatRelative$1y;

var localize$N = {};

localize$N.localize = void 0;
var _index$3h = buildLocalizeFn$1;

const eraValues$N = {
  narrow: ["pr.n.e.", "AD"],
  abbreviated: ["pr. Kr.", "po. Kr."],
  wide: ["Prije Krista", "Poslije Krista"],
};

const quarterValues$N = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$N = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "sij",
    "velj",
    "oÅ¾u",
    "tra",
    "svi",
    "lip",
    "srp",
    "kol",
    "ruj",
    "lis",
    "stu",
    "pro",
  ],

  wide: [
    "sijeÄanj",
    "veljaÄa",
    "oÅ¾ujak",
    "travanj",
    "svibanj",
    "lipanj",
    "srpanj",
    "kolovoz",
    "rujan",
    "listopad",
    "studeni",
    "prosinac",
  ],
};

const formattingMonthValues$a = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "sij",
    "velj",
    "oÅ¾u",
    "tra",
    "svi",
    "lip",
    "srp",
    "kol",
    "ruj",
    "lis",
    "stu",
    "pro",
  ],

  wide: [
    "sijeÄnja",
    "veljaÄe",
    "oÅ¾ujka",
    "travnja",
    "svibnja",
    "lipnja",
    "srpnja",
    "kolovoza",
    "rujna",
    "listopada",
    "studenog",
    "prosinca",
  ],
};

const dayValues$N = {
  narrow: ["N", "P", "U", "S", "Ä", "P", "S"],
  short: ["ned", "pon", "uto", "sri", "Äet", "pet", "sub"],
  abbreviated: ["ned", "pon", "uto", "sri", "Äet", "pet", "sub"],
  wide: [
    "nedjelja",
    "ponedjeljak",
    "utorak",
    "srijeda",
    "Äetvrtak",
    "petak",
    "subota",
  ],
};

const formattingDayPeriodValues$D = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "naveÄer",
    night: "noÄu",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "naveÄer",
    night: "noÄu",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutro",
    afternoon: "poslije podne",
    evening: "naveÄer",
    night: "noÄu",
  },
};

const dayPeriodValues$N = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "naveÄer",
    night: "noÄu",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "naveÄer",
    night: "noÄu",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutro",
    afternoon: "poslije podne",
    evening: "naveÄer",
    night: "noÄu",
  },
};

const ordinalNumber$N = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$N.localize = {
  ordinalNumber: ordinalNumber$N,

  era: (0, _index$3h.buildLocalizeFn)({
    values: eraValues$N,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3h.buildLocalizeFn)({
    values: quarterValues$N,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3h.buildLocalizeFn)({
    values: monthValues$N,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$a,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$3h.buildLocalizeFn)({
    values: dayValues$N,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3h.buildLocalizeFn)({
    values: dayPeriodValues$N,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$D,
    defaultFormattingWidth: "wide",
  }),
});

var match$N = {};

match$N.match = void 0;

var _index$3g = buildMatchFn$1;
var _index2$1B = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$N = /^(\d+)\./i;
const parseOrdinalNumberPattern$N = /\d+/i;

const matchEraPatterns$N = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
  wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i,
};
const parseEraPatterns$N = {
  any: [/^pr/i, /^(po|nova)/i],
};

const matchQuarterPatterns$N = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i,
};
const parseQuarterPatterns$N = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$N = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(sij|velj|(oÅ¾u|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
  wide: /^((sijeÄanj|sijeÄnja|sijecanj|sijecnja)|(veljaÄa|veljaÄe|veljaca|veljace)|(oÅ¾ujak|oÅ¾ujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i,
};
const parseMonthPatterns$N = {
  narrow: [
    /1/i,
    /2/i,
    /3/i,
    /4/i,
    /5/i,
    /6/i,
    /7/i,
    /8/i,
    /9/i,
    /10/i,
    /11/i,
    /12/i,
  ],

  abbreviated: [
    /^sij/i,
    /^velj/i,
    /^(oÅ¾u|ozu)/i,
    /^tra/i,
    /^svi/i,
    /^lip/i,
    /^srp/i,
    /^kol/i,
    /^ruj/i,
    /^lis/i,
    /^stu/i,
    /^pro/i,
  ],

  wide: [
    /^sij/i,
    /^velj/i,
    /^(oÅ¾u|ozu)/i,
    /^tra/i,
    /^svi/i,
    /^lip/i,
    /^srp/i,
    /^kol/i,
    /^ruj/i,
    /^lis/i,
    /^stu/i,
    /^pro/i,
  ],
};

const matchDayPatterns$N = {
  narrow: /^[npusÄc]/i,
  short: /^(ned|pon|uto|sri|(Äet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sri|(Äet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(Äetvrtak|cetvrtak)|petak|subota)/i,
};
const parseDayPatterns$N = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$N = {
  any: /^(am|pm|ponoc|ponoÄ|(po)?podne|navecer|naveÄer|noÄu|poslije podne|ujutro)/i,
};
const parseDayPeriodPatterns$N = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(navece|naveÄe)/i,
    night: /(nocu|noÄu)/i,
  },
};

(match$N.match = {
  ordinalNumber: (0, _index2$1B.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$N,
    parsePattern: parseOrdinalNumberPattern$N,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3g.buildMatchFn)({
    matchPatterns: matchEraPatterns$N,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$N,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3g.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$N,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$N,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3g.buildMatchFn)({
    matchPatterns: matchMonthPatterns$N,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$N,
    defaultParseWidth: "wide",
  }),

  day: (0, _index$3g.buildMatchFn)({
    matchPatterns: matchDayPatterns$N,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$N,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3g.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$N,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$N,
    defaultParseWidth: "any",
  }),
});

hr.hr = void 0;
var _index$3f = formatDistance$1z;
var _index2$1A = formatLong$O;
var _index3$O = formatRelative$1z;
var _index4$O = localize$N;
var _index5$O = match$N;

/**
 * @category Locales
 * @summary Croatian locale.
 * @language Croatian
 * @iso-639-2 hrv
 * @author Matija MarohniÄ [@silvenon](https://github.com/silvenon)
 * @author Manico [@manico](https://github.com/manico)
 * @author Ivan JerÅ¾abek [@jerzabek](https://github.com/jerzabek)
 */
(hr.hr = {
  code: "hr",
  formatDistance: _index$3f.formatDistance,
  formatLong: _index2$1A.formatLong,
  formatRelative: _index3$O.formatRelative,
  localize: _index4$O.localize,
  match: _index5$O.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var ht = {};

var formatDistance$1x = {};

formatDistance$1x.formatDistance = void 0;

const formatDistanceLocale$L = {
  lessThanXSeconds: {
    one: "mwens pase yon segond",
    other: "mwens pase {{count}} segond",
  },

  xSeconds: {
    one: "1 segond",
    other: "{{count}} segond",
  },

  halfAMinute: "30 segond",

  lessThanXMinutes: {
    one: "mwens pase yon minit",
    other: "mwens pase {{count}} minit",
  },

  xMinutes: {
    one: "1 minit",
    other: "{{count}} minit",
  },

  aboutXHours: {
    one: "anviwon inÃ¨",
    other: "anviwon {{count}} Ã¨",
  },

  xHours: {
    one: "1 lÃ¨",
    other: "{{count}} lÃ¨",
  },

  xDays: {
    one: "1 jou",
    other: "{{count}} jou",
  },

  aboutXWeeks: {
    one: "anviwon 1 semÃ¨n",
    other: "anviwon {{count}} semÃ¨n",
  },

  xWeeks: {
    one: "1 semÃ¨n",
    other: "{{count}} semÃ¨n",
  },

  aboutXMonths: {
    one: "anviwon 1 mwa",
    other: "anviwon {{count}} mwa",
  },

  xMonths: {
    one: "1 mwa",
    other: "{{count}} mwa",
  },

  aboutXYears: {
    one: "anviwon 1 an",
    other: "anviwon {{count}} an",
  },

  xYears: {
    one: "1 an",
    other: "{{count}} an",
  },

  overXYears: {
    one: "plis pase 1 an",
    other: "plis pase {{count}} an",
  },

  almostXYears: {
    one: "prÃ¨ske 1 an",
    other: "prÃ¨ske {{count}} an",
  },
};

const formatDistance$1w = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$L[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "nan " + result;
    } else {
      return "sa fÃ¨ " + result;
    }
  }

  return result;
};
formatDistance$1x.formatDistance = formatDistance$1w;

var formatLong$N = {};

formatLong$N.formatLong = void 0;
var _index$3e = buildFormatLongFn$1;

const dateFormats$N = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$N = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$N = {
  full: "{{date}} 'nan lÃ¨' {{time}}",
  long: "{{date}} 'nan lÃ¨' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$N.formatLong = {
  date: (0, _index$3e.buildFormatLongFn)({
    formats: dateFormats$N,
    defaultWidth: "full",
  }),

  time: (0, _index$3e.buildFormatLongFn)({
    formats: timeFormats$N,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3e.buildFormatLongFn)({
    formats: dateTimeFormats$N,
    defaultWidth: "full",
  }),
});

var formatRelative$1x = {};

formatRelative$1x.formatRelative = void 0;

const formatRelativeLocale$M = {
  lastWeek: "eeee 'pase nan lÃ¨' p",
  yesterday: "'yÃ¨ nan lÃ¨' p",
  today: "'jodi a' p",
  tomorrow: "'demen nan lÃ¨' p'",
  nextWeek: "eeee 'pwochen nan lÃ¨' p",
  other: "P",
};

const formatRelative$1w = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$M[token];
formatRelative$1x.formatRelative = formatRelative$1w;

var localize$M = {};

localize$M.localize = void 0;
var _index$3d = buildLocalizeFn$1;

const eraValues$M = {
  narrow: ["av. J.-K", "ap. J.-K"],
  abbreviated: ["av. J.-K", "ap. J.-K"],
  wide: ["anvan Jezi Kris", "apre Jezi Kris"],
};

const quarterValues$M = {
  narrow: ["T1", "T2", "T3", "T4"],
  abbreviated: ["1ye trim.", "2yÃ¨m trim.", "3yÃ¨m trim.", "4yÃ¨m trim."],
  wide: ["1ye trimÃ¨s", "2yÃ¨m trimÃ¨s", "3yÃ¨m trimÃ¨s", "4yÃ¨m trimÃ¨s"],
};

const monthValues$M = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
  abbreviated: [
    "janv.",
    "fevr.",
    "mas",
    "avr.",
    "me",
    "jen",
    "jiyÃ¨",
    "out",
    "sept.",
    "okt.",
    "nov.",
    "des.",
  ],

  wide: [
    "janvye",
    "fevrye",
    "mas",
    "avril",
    "me",
    "jen",
    "jiyÃ¨",
    "out",
    "septanm",
    "oktÃ²b",
    "novanm",
    "desanm",
  ],
};

const dayValues$M = {
  narrow: ["D", "L", "M", "M", "J", "V", "S"],
  short: ["di", "le", "ma", "mÃ¨", "je", "va", "sa"],
  abbreviated: ["dim.", "len.", "mad.", "mÃ¨k.", "jed.", "van.", "sam."],

  wide: ["dimanch", "lendi", "madi", "mÃ¨kredi", "jedi", "vandredi", "samdi"],
};

const dayPeriodValues$M = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "minwit",
    noon: "midi",
    morning: "mat.",
    afternoon: "ap.m.",
    evening: "swa",
    night: "mat.",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "minwit",
    noon: "midi",
    morning: "maten",
    afternoon: "aprÃ¨midi",
    evening: "swa",
    night: "maten",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "minwit",
    noon: "midi",
    morning: "nan maten",
    afternoon: "nan aprÃ¨midi",
    evening: "nan aswÃ¨",
    night: "nan maten",
  },
};

const ordinalNumber$M = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  if (number === 0) return String(number);

  const suffix = number === 1 ? "ye" : "yÃ¨m";

  return number + suffix;
};

(localize$M.localize = {
  ordinalNumber: ordinalNumber$M,

  era: (0, _index$3d.buildLocalizeFn)({
    values: eraValues$M,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$3d.buildLocalizeFn)({
    values: quarterValues$M,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$3d.buildLocalizeFn)({
    values: monthValues$M,
    defaultWidth: "wide",
  }),

  day: (0, _index$3d.buildLocalizeFn)({
    values: dayValues$M,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$3d.buildLocalizeFn)({
    values: dayPeriodValues$M,
    defaultWidth: "wide",
  }),
});

var match$M = {};

match$M.match = void 0;

var _index$3c = buildMatchFn$1;
var _index2$1z = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$M = /^(\d+)(ye|yÃ¨m)?/i;
const parseOrdinalNumberPattern$M = /\d+/i;

const matchEraPatterns$M = {
  narrow: /^(av\.J\.K|ap\.J\.K|ap\.J\.-K)/i,
  abbreviated: /^(av\.J\.-K|av\.J-K|apr\.J\.-K|apr\.J-K|ap\.J-K)/i,
  wide: /^(avan Jezi Kris|apre Jezi Kris)/i,
};
const parseEraPatterns$M = {
  any: [/^av/i, /^ap/i],
};

const matchQuarterPatterns$M = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](ye|yÃ¨m)? trimÃ¨s/i,
};
const parseQuarterPatterns$M = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$M = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|fevr|mas|avr|me|jen|jiyÃ¨|out|sept|okt|nov|des)\.?/i,
  wide: /^(janvye|fevrye|mas|avril|me|jen|jiyÃ¨|out|septanm|oktÃ²b|novanm|desanm)/i,
};
const parseMonthPatterns$M = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^o/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^ma/i,
    /^av/i,
    /^me/i,
    /^je/i,
    /^ji/i,
    /^ou/i,
    /^s/i,
    /^ok/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$M = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|le|ma|me|je|va|sa)/i,
  abbreviated: /^(dim|len|mad|mÃ¨k|jed|van|sam)\.?/i,
  wide: /^(dimanch|lendi|madi|mÃ¨kredi|jedi|vandredi|samdi)/i,
};
const parseDayPatterns$M = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^le/i, /^ma/i, /^mÃ¨/i, /^je/i, /^va/i, /^sa/i],
};

const matchDayPeriodPatterns$M = {
  narrow: /^(a|p|minwit|midi|mat\.?|ap\.?m\.?|swa)/i,
  any: /^([ap]\.?\s?m\.?|nan maten|nan aprÃ¨midi|nan aswÃ¨)/i,
};
const parseDayPeriodPatterns$M = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /sw/i,
    night: /nwit/i,
  },
};

(match$M.match = {
  ordinalNumber: (0, _index2$1z.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$M,
    parsePattern: parseOrdinalNumberPattern$M,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$3c.buildMatchFn)({
    matchPatterns: matchEraPatterns$M,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$M,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$3c.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$M,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$M,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$3c.buildMatchFn)({
    matchPatterns: matchMonthPatterns$M,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$M,
    defaultParseWidth: "any",
  }),

  day: (0, _index$3c.buildMatchFn)({
    matchPatterns: matchDayPatterns$M,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$M,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$3c.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$M,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$M,
    defaultParseWidth: "any",
  }),
});

ht.ht = void 0;
var _index$3b = formatDistance$1x;
var _index2$1y = formatLong$N;
var _index3$N = formatRelative$1x;
var _index4$N = localize$M;
var _index5$N = match$M;

/**
 * @category Locales
 * @summary Haitian Creole locale.
 * @language Haitian Creole
 * @iso-639-2 hat
 * @author Rubens Mariuzzo [@rmariuzzo](https://github.com/rmariuzzo)
 * @author Watson Marcelain [@watsongm24](https://github.com/watsongm24)
 */
(ht.ht = {
  code: "ht",
  formatDistance: _index$3b.formatDistance,
  formatLong: _index2$1y.formatLong,
  formatRelative: _index3$N.formatRelative,
  localize: _index4$N.localize,
  match: _index5$N.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var hu = {};

var formatDistance$1v = {};

formatDistance$1v.formatDistance = void 0;

const translations$1 = {
  about: "kÃ¶rÃ¼lbelÃ¼l",
  over: "tÃ¶bb mint",
  almost: "majdnem",
  lessthan: "kevesebb mint",
};

const withoutSuffixes = {
  xseconds: " mÃ¡sodperc",
  halfaminute: "fÃ©l perc",
  xminutes: " perc",
  xhours: " Ã³ra",
  xdays: " nap",
  xweeks: " hÃ©t",
  xmonths: " hÃ³nap",
  xyears: " Ã©v",
};

const withSuffixes = {
  xseconds: {
    "-1": " mÃ¡sodperccel ezelÅtt",
    1: " mÃ¡sodperc mÃºlva",
    0: " mÃ¡sodperce",
  },
  halfaminute: {
    "-1": "fÃ©l perccel ezelÅtt",
    1: "fÃ©l perc mÃºlva",
    0: "fÃ©l perce",
  },
  xminutes: {
    "-1": " perccel ezelÅtt",
    1: " perc mÃºlva",
    0: " perce",
  },
  xhours: {
    "-1": " Ã³rÃ¡val ezelÅtt",
    1: " Ã³ra mÃºlva",
    0: " Ã³rÃ¡ja",
  },
  xdays: {
    "-1": " nappal ezelÅtt",
    1: " nap mÃºlva",
    0: " napja",
  },
  xweeks: {
    "-1": " hÃ©ttel ezelÅtt",
    1: " hÃ©t mÃºlva",
    0: " hete",
  },
  xmonths: {
    "-1": " hÃ³nappal ezelÅtt",
    1: " hÃ³nap mÃºlva",
    0: " hÃ³napja",
  },
  xyears: {
    "-1": " Ã©vvel ezelÅtt",
    1: " Ã©v mÃºlva",
    0: " Ã©ve",
  },
};

const formatDistance$1u = (token, count, options) => {
  const adverb = token.match(/about|over|almost|lessthan/i);
  const unit = adverb ? token.replace(adverb[0], "") : token;

  const addSuffix = options?.addSuffix === true;
  const key = unit.toLowerCase();
  const comparison = options?.comparison || 0;

  const translated = addSuffix
    ? withSuffixes[key][comparison]
    : withoutSuffixes[key];

  let result = key === "halfaminute" ? translated : count + translated;

  if (adverb) {
    const adv = adverb[0].toLowerCase();
    result = translations$1[adv] + " " + result;
  }

  return result;
};
formatDistance$1v.formatDistance = formatDistance$1u;

var formatLong$M = {};

formatLong$M.formatLong = void 0;
var _index$3a = buildFormatLongFn$1;

const dateFormats$M = {
  full: "y. MMMM d., EEEE",
  long: "y. MMMM d.",
  medium: "y. MMM d.",
  short: "y. MM. dd.",
};

const timeFormats$M = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$M = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$M.formatLong = {
  date: (0, _index$3a.buildFormatLongFn)({
    formats: dateFormats$M,
    defaultWidth: "full",
  }),

  time: (0, _index$3a.buildFormatLongFn)({
    formats: timeFormats$M,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3a.buildFormatLongFn)({
    formats: dateTimeFormats$M,
    defaultWidth: "full",
  }),
});

var formatRelative$1v = {};

formatRelative$1v.formatRelative = void 0;

const accusativeWeekdays$4 = [
  "vasÃ¡rnap",
  "hÃ©tfÅn",
  "kedden",
  "szerdÃ¡n",
  "csÃ¼tÃ¶rtÃ¶kÃ¶n",
  "pÃ©nteken",
  "szombaton",
];

function week(isFuture) {
  return (date) => {
    const weekday = accusativeWeekdays$4[date.getDay()];
    const prefix = isFuture ? "" : "'mÃºlt' ";
    return `${prefix}'${weekday}' p'-kor'`;
  };
}
const formatRelativeLocale$L = {
  lastWeek: week(false),
  yesterday: "'tegnap' p'-kor'",
  today: "'ma' p'-kor'",
  tomorrow: "'holnap' p'-kor'",
  nextWeek: week(true),
  other: "P",
};

const formatRelative$1u = (token, date) => {
  const format = formatRelativeLocale$L[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$1v.formatRelative = formatRelative$1u;

var localize$L = {};

localize$L.localize = void 0;
var _index$39 = buildLocalizeFn$1;

const eraValues$L = {
  narrow: ["ie.", "isz."],
  abbreviated: ["i. e.", "i. sz."],
  wide: ["Krisztus elÅtt", "idÅszÃ¡mÃ­tÃ¡sunk szerint"],
};

const quarterValues$L = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. n.Ã©v", "2. n.Ã©v", "3. n.Ã©v", "4. n.Ã©v"],
  wide: ["1. negyedÃ©v", "2. negyedÃ©v", "3. negyedÃ©v", "4. negyedÃ©v"],
};

const formattingQuarterValues$3 = {
  narrow: ["I.", "II.", "III.", "IV."],
  abbreviated: ["I. n.Ã©v", "II. n.Ã©v", "III. n.Ã©v", "IV. n.Ã©v"],
  wide: ["I. negyedÃ©v", "II. negyedÃ©v", "III. negyedÃ©v", "IV. negyedÃ©v"],
};

const monthValues$L = {
  narrow: ["J", "F", "M", "Ã", "M", "J", "J", "A", "Sz", "O", "N", "D"],

  abbreviated: [
    "jan.",
    "febr.",
    "mÃ¡rc.",
    "Ã¡pr.",
    "mÃ¡j.",
    "jÃºn.",
    "jÃºl.",
    "aug.",
    "szept.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "januÃ¡r",
    "februÃ¡r",
    "mÃ¡rcius",
    "Ã¡prilis",
    "mÃ¡jus",
    "jÃºnius",
    "jÃºlius",
    "augusztus",
    "szeptember",
    "oktÃ³ber",
    "november",
    "december",
  ],
};

const dayValues$L = {
  narrow: ["V", "H", "K", "Sz", "Cs", "P", "Sz"],
  short: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
  abbreviated: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
  wide: [
    "vasÃ¡rnap",
    "hÃ©tfÅ",
    "kedd",
    "szerda",
    "csÃ¼tÃ¶rtÃ¶k",
    "pÃ©ntek",
    "szombat",
  ],
};

const dayPeriodValues$L = {
  narrow: {
    am: "de.",
    pm: "du.",
    midnight: "Ã©jfÃ©l",
    noon: "dÃ©l",
    morning: "reggel",
    afternoon: "du.",
    evening: "este",
    night: "Ã©jjel",
  },
  abbreviated: {
    am: "de.",
    pm: "du.",
    midnight: "Ã©jfÃ©l",
    noon: "dÃ©l",
    morning: "reggel",
    afternoon: "du.",
    evening: "este",
    night: "Ã©jjel",
  },
  wide: {
    am: "de.",
    pm: "du.",
    midnight: "Ã©jfÃ©l",
    noon: "dÃ©l",
    morning: "reggel",
    afternoon: "dÃ©lutÃ¡n",
    evening: "este",
    night: "Ã©jjel",
  },
};

const ordinalNumber$L = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$L.localize = {
  ordinalNumber: ordinalNumber$L,

  era: (0, _index$39.buildLocalizeFn)({
    values: eraValues$L,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$39.buildLocalizeFn)({
    values: quarterValues$L,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
    formattingValues: formattingQuarterValues$3,
    defaultFormattingWidth: "wide",
  }),

  month: (0, _index$39.buildLocalizeFn)({
    values: monthValues$L,
    defaultWidth: "wide",
  }),

  day: (0, _index$39.buildLocalizeFn)({
    values: dayValues$L,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$39.buildLocalizeFn)({
    values: dayPeriodValues$L,
    defaultWidth: "wide",
  }),
});

var match$L = {};

match$L.match = void 0;

var _index$38 = buildMatchFn$1;
var _index2$1x = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$L = /^(\d+)\.?/i;
const parseOrdinalNumberPattern$L = /\d+/i;

const matchEraPatterns$L = {
  narrow: /^(ie\.|isz\.)/i,
  abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
  wide: /^(Krisztus elÅtt|idÅszÃ¡mÃ­tÃ¡sunk elÅtt|idÅszÃ¡mÃ­tÃ¡sunk szerint|i\. sz\.)/i,
};
const parseEraPatterns$L = {
  narrow: [/ie/i, /isz/i],
  abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
  any: [/elÅtt/i, /(szerint|i. sz.)/i],
};

const matchQuarterPatterns$L = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^[1234]?\.?\s?n\.Ã©v/i,
  wide: /^([1234]|I|II|III|IV)?\.?\s?negyedÃ©v/i,
};
const parseQuarterPatterns$L = {
  any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i],
};

const matchMonthPatterns$L = {
  narrow: /^[jfmaÃ¡sond]|sz/i,
  abbreviated:
    /^(jan\.?|febr\.?|mÃ¡rc\.?|Ã¡pr\.?|mÃ¡j\.?|jÃºn\.?|jÃºl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
  wide: /^(januÃ¡r|februÃ¡r|mÃ¡rcius|Ã¡prilis|mÃ¡jus|jÃºnius|jÃºlius|augusztus|szeptember|oktÃ³ber|november|december)/i,
};
const parseMonthPatterns$L = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a|Ã¡/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s|sz/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mÃ¡r/i,
    /^Ã¡p/i,
    /^mÃ¡j/i,
    /^jÃºn/i,
    /^jÃºl/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$L = {
  narrow: /^([vhkpc]|sz|cs|sz)/i,
  short: /^([vhkp]|sze|cs|szo)/i,
  abbreviated: /^([vhkp]|sze|cs|szo)/i,
  wide: /^(vasÃ¡rnap|hÃ©tfÅ|kedd|szerda|csÃ¼tÃ¶rtÃ¶k|pÃ©ntek|szombat)/i,
};
const parseDayPatterns$L = {
  narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
  any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i],
};

const matchDayPeriodPatterns$L = {
  any: /^((de|du)\.?|Ã©jfÃ©l|dÃ©lutÃ¡n|dÃ©l|reggel|este|Ã©jjel)/i,
};
const parseDayPeriodPatterns$L = {
  any: {
    am: /^de\.?/i,
    pm: /^du\.?/i,
    midnight: /^Ã©jf/i,
    noon: /^dÃ©/i,
    morning: /reg/i,
    afternoon: /^dÃ©lu\.?/i,
    evening: /es/i,
    night: /Ã©jj/i,
  },
};

(match$L.match = {
  ordinalNumber: (0, _index2$1x.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$L,
    parsePattern: parseOrdinalNumberPattern$L,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$38.buildMatchFn)({
    matchPatterns: matchEraPatterns$L,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$L,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$38.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$L,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$L,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$38.buildMatchFn)({
    matchPatterns: matchMonthPatterns$L,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$L,
    defaultParseWidth: "any",
  }),

  day: (0, _index$38.buildMatchFn)({
    matchPatterns: matchDayPatterns$L,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$L,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$38.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$L,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$L,
    defaultParseWidth: "any",
  }),
});

hu.hu = void 0;
var _index$37 = formatDistance$1v;
var _index2$1w = formatLong$M;
var _index3$M = formatRelative$1v;
var _index4$M = localize$L;
var _index5$M = match$L;

/**
 * @category Locales
 * @summary Hungarian locale.
 * @language Hungarian
 * @iso-639-2 hun
 * @author Pavlo Shpak [@pshpak](https://github.com/pshpak)
 * @author Eduardo Pardo [@eduardopsll](https://github.com/eduardopsll)
 * @author Zoltan Szepesi [@twodcube](https://github.com/twodcube)
 */
(hu.hu = {
  code: "hu",
  formatDistance: _index$37.formatDistance,
  formatLong: _index2$1w.formatLong,
  formatRelative: _index3$M.formatRelative,
  localize: _index4$M.localize,
  match: _index5$M.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var hy = {};

var formatDistance$1t = {};

formatDistance$1t.formatDistance = void 0;

const formatDistanceLocale$K = {
  lessThanXSeconds: {
    one: "Õ¡Õ¾Õ¥Õ¬Õ« ÖÕ«Õ¹ ÖÕ¡Õ¶ 1 Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶",
    other: "Õ¡Õ¾Õ¥Õ¬Õ« ÖÕ«Õ¹ ÖÕ¡Õ¶ {{count}} Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶",
  },

  xSeconds: {
    one: "1 Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶",
    other: "{{count}} Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶",
  },

  halfAMinute: "Õ¯Õ¥Õ½ ÖÕ¸ÕºÕ¥",

  lessThanXMinutes: {
    one: "Õ¡Õ¾Õ¥Õ¬Õ« ÖÕ«Õ¹ ÖÕ¡Õ¶ 1 ÖÕ¸ÕºÕ¥",
    other: "Õ¡Õ¾Õ¥Õ¬Õ« ÖÕ«Õ¹ ÖÕ¡Õ¶ {{count}} ÖÕ¸ÕºÕ¥",
  },

  xMinutes: {
    one: "1 ÖÕ¸ÕºÕ¥",
    other: "{{count}} ÖÕ¸ÕºÕ¥",
  },

  aboutXHours: {
    one: "Õ´Õ¸Õ¿ 1 ÕªÕ¡Õ´",
    other: "Õ´Õ¸Õ¿ {{count}} ÕªÕ¡Õ´",
  },

  xHours: {
    one: "1 ÕªÕ¡Õ´",
    other: "{{count}} ÕªÕ¡Õ´",
  },

  xDays: {
    one: "1 ÖÖ",
    other: "{{count}} ÖÖ",
  },

  aboutXWeeks: {
    one: "Õ´Õ¸Õ¿ 1 Õ·Õ¡Õ¢Õ¡Õ©",
    other: "Õ´Õ¸Õ¿ {{count}} Õ·Õ¡Õ¢Õ¡Õ©",
  },

  xWeeks: {
    one: "1 Õ·Õ¡Õ¢Õ¡Õ©",
    other: "{{count}} Õ·Õ¡Õ¢Õ¡Õ©",
  },

  aboutXMonths: {
    one: "Õ´Õ¸Õ¿ 1 Õ¡Õ´Õ«Õ½",
    other: "Õ´Õ¸Õ¿ {{count}} Õ¡Õ´Õ«Õ½",
  },

  xMonths: {
    one: "1 Õ¡Õ´Õ«Õ½",
    other: "{{count}} Õ¡Õ´Õ«Õ½",
  },

  aboutXYears: {
    one: "Õ´Õ¸Õ¿ 1 Õ¿Õ¡ÖÕ«",
    other: "Õ´Õ¸Õ¿ {{count}} Õ¿Õ¡ÖÕ«",
  },

  xYears: {
    one: "1 Õ¿Õ¡ÖÕ«",
    other: "{{count}} Õ¿Õ¡ÖÕ«",
  },

  overXYears: {
    one: "Õ¡Õ¾Õ¥Õ¬Õ« ÖÕ¡Õ¶ 1 Õ¿Õ¡ÖÕ«",
    other: "Õ¡Õ¾Õ¥Õ¬Õ« ÖÕ¡Õ¶ {{count}} Õ¿Õ¡ÖÕ«",
  },

  almostXYears: {
    one: "Õ°Õ¡Õ´Õ¡ÖÕµÕ¡ 1 Õ¿Õ¡ÖÕ«",
    other: "Õ°Õ¡Õ´Õ¡ÖÕµÕ¡ {{count}} Õ¿Õ¡ÖÕ«",
  },
};

const formatDistance$1s = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$K[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " Õ°Õ¥Õ¿Õ¸";
    } else {
      return result + " Õ¡Õ¼Õ¡Õ»";
    }
  }

  return result;
};
formatDistance$1t.formatDistance = formatDistance$1s;

var formatLong$L = {};

formatLong$L.formatLong = void 0;
var _index$36 = buildFormatLongFn$1;

const dateFormats$L = {
  full: "d MMMM, y, EEEE",
  long: "d MMMM, y",
  medium: "d MMM, y",
  short: "dd.MM.yyyy",
};

const timeFormats$L = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$L = {
  full: "{{date}} 'Õªâ¤'{{time}}",
  long: "{{date}} 'Õªâ¤'{{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$L.formatLong = {
  date: (0, _index$36.buildFormatLongFn)({
    formats: dateFormats$L,
    defaultWidth: "full",
  }),

  time: (0, _index$36.buildFormatLongFn)({
    formats: timeFormats$L,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$36.buildFormatLongFn)({
    formats: dateTimeFormats$L,
    defaultWidth: "full",
  }),
});

var formatRelative$1t = {};

formatRelative$1t.formatRelative = void 0;

const formatRelativeLocale$K = {
  lastWeek: "'Õ¶Õ¡Õ­Õ¸ÖÕ¤' eeee p'ÖÕ«Õ¶'",
  yesterday: "'Õ¥ÖÕ¥Õ¯' p'ÖÕ«Õ¶'",
  today: "'Õ¡ÕµÕ½ÖÖ' p'ÖÕ«Õ¶'",
  tomorrow: "'Õ¾Õ¡Õ²Õ¨' p'ÖÕ«Õ¶'",
  nextWeek: "'Õ°Õ¡Õ»Õ¸ÖÕ¤' eeee p'ÖÕ«Õ¶'",
  other: "P",
};

const formatRelative$1s = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$K[token];
formatRelative$1t.formatRelative = formatRelative$1s;

var localize$K = {};

localize$K.localize = void 0;
var _index$35 = buildLocalizeFn$1;

const eraValues$K = {
  narrow: ["Õ", "Õ"],
  abbreviated: ["ÕÔ±", "ÕÔ¹"],
  wide: ["ÕÖÕ«Õ½Õ¿Õ¸Õ½Õ«Ö Õ¡Õ¼Õ¡Õ»", "ÕÕ¥Ö Õ©Õ¾Õ¡ÖÕ¯Õ¸ÖÕ©ÕµÕ¡Õ¶"],
};

const quarterValues$K = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Õ1", "Õ2", "Õ3", "Õ4"],
  wide: ["1ÖÕ«Õ¶ ÖÕ¡Õ¼Õ¸ÖÕ¤", "2ÖÖÕ¤ ÖÕ¡Õ¼Õ¸ÖÕ¤", "3ÖÖÕ¤ ÖÕ¡Õ¼Õ¸ÖÕ¤", "4ÖÖÕ¤ ÖÕ¡Õ¼Õ¸ÖÕ¤"],
};

const monthValues$K = {
  narrow: ["Õ", "Õ", "Õ", "Ô±", "Õ", "Õ", "Õ", "Õ", "Õ", "Õ", "Õ", "Ô´"],
  abbreviated: [
    "Õ°Õ¸ÖÕ¶",
    "ÖÕ¥Õ¿",
    "Õ´Õ¡Ö",
    "Õ¡ÕºÖ",
    "Õ´Õ¡Õµ",
    "Õ°Õ¸ÖÕ¶",
    "Õ°Õ¸ÖÕ¬",
    "ÖÕ£Õ½",
    "Õ½Õ¥Õº",
    "Õ°Õ¸Õ¯",
    "Õ¶Õ¸Õµ",
    "Õ¤Õ¥Õ¯",
  ],

  wide: [
    "Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö",
    "ÖÕ¥Õ¿ÖÕ¾Õ¡Ö",
    "Õ´Õ¡ÖÕ¿",
    "Õ¡ÕºÖÕ«Õ¬",
    "Õ´Õ¡ÕµÕ«Õ½",
    "Õ°Õ¸ÖÕ¶Õ«Õ½",
    "Õ°Õ¸ÖÕ¬Õ«Õ½",
    "ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½",
    "Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö",
    "Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö",
    "Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö",
    "Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö",
  ],
};

const dayValues$K = {
  narrow: ["Ô¿", "Ôµ", "Ôµ", "Õ", "Õ", "Õ", "Õ"],
  short: ["Õ¯Ö", "Õ¥Ö", "Õ¥Ö", "Õ¹Ö", "Õ°Õ£", "Õ¸ÖÖ", "Õ·Õ¢"],
  abbreviated: ["Õ¯Õ«Ö", "Õ¥ÖÕ¯", "Õ¥ÖÖ", "Õ¹Õ¸Ö", "Õ°Õ¶Õ£", "Õ¸ÖÖÕ¢", "Õ·Õ¡Õ¢"],
  wide: [
    "Õ¯Õ«ÖÕ¡Õ¯Õ«",
    "Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«",
    "Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«",
    "Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«",
    "Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«",
    "Õ¸ÖÖÕ¢Õ¡Õ©",
    "Õ·Õ¡Õ¢Õ¡Õ©",
  ],
};

const dayPeriodValues$K = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "Õ¯Õ¥Õ½Õ£Õ·",
    noon: "Õ¯Õ¥Õ½ÖÖ",
    morning: "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿",
    afternoon: "ÖÕ¥ÖÕ¥Õ¯",
    evening: "Õ¥ÖÕ¥Õ¯Õ¸",
    night: "Õ£Õ«Õ·Õ¥Ö",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "Õ¯Õ¥Õ½Õ£Õ«Õ·Õ¥Ö",
    noon: "Õ¯Õ¥Õ½ÖÖ",
    morning: "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿",
    afternoon: "ÖÕ¥ÖÕ¥Õ¯",
    evening: "Õ¥ÖÕ¥Õ¯Õ¸",
    night: "Õ£Õ«Õ·Õ¥Ö",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "Õ¯Õ¥Õ½Õ£Õ«Õ·Õ¥Ö",
    noon: "Õ¯Õ¥Õ½ÖÖ",
    morning: "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿",
    afternoon: "ÖÕ¥ÖÕ¥Õ¯",
    evening: "Õ¥ÖÕ¥Õ¯Õ¸",
    night: "Õ£Õ«Õ·Õ¥Ö",
  },
};

const formattingDayPeriodValues$C = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "Õ¯Õ¥Õ½Õ£Õ·",
    noon: "Õ¯Õ¥Õ½ÖÖ",
    morning: "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¨",
    afternoon: "ÖÕ¥ÖÕ¥Õ¯Õ¨",
    evening: "Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶",
    night: "Õ£Õ«Õ·Õ¥ÖÕ¨",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "Õ¯Õ¥Õ½Õ£Õ«Õ·Õ¥ÖÕ«Õ¶",
    noon: "Õ¯Õ¥Õ½ÖÖÕ«Õ¶",
    morning: "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¨",
    afternoon: "ÖÕ¥ÖÕ¥Õ¯Õ¨",
    evening: "Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶",
    night: "Õ£Õ«Õ·Õ¥ÖÕ¨",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "Õ¯Õ¥Õ½Õ£Õ«Õ·Õ¥ÖÕ«Õ¶",
    noon: "Õ¯Õ¥Õ½ÖÖÕ«Õ¶",
    morning: "Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¨",
    afternoon: "ÖÕ¥ÖÕ¥Õ¯Õ¨",
    evening: "Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶",
    night: "Õ£Õ«Õ·Õ¥ÖÕ¨",
  },
};

const ordinalNumber$K = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  const rem100 = number % 100;
  if (rem100 < 10) {
    if (rem100 % 10 === 1) {
      return number + "ÖÕ«Õ¶";
    }
  }
  return number + "ÖÖÕ¤";
};

(localize$K.localize = {
  ordinalNumber: ordinalNumber$K,

  era: (0, _index$35.buildLocalizeFn)({
    values: eraValues$K,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$35.buildLocalizeFn)({
    values: quarterValues$K,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$35.buildLocalizeFn)({
    values: monthValues$K,
    defaultWidth: "wide",
  }),

  day: (0, _index$35.buildLocalizeFn)({
    values: dayValues$K,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$35.buildLocalizeFn)({
    values: dayPeriodValues$K,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$C,
    defaultFormattingWidth: "wide",
  }),
});

var match$K = {};

match$K.match = void 0;

var _index$34 = buildMatchFn$1;
var _index2$1v = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$K = /^(\d+)((-|Ö)?(Õ«Õ¶|ÖÕ¤))?/i;
const parseOrdinalNumberPattern$K = /\d+/i;

const matchEraPatterns$K = {
  narrow: /^(Õ|Õ)/i,
  abbreviated: /^(Õ\.?\s?Ô±\.?|Õ\.?\s?Ô¹\.?\s?Ô±\.?|Õ\.?\s?Ô¹\.?|Õ\.?\s?Õ\.?)/i,
  wide: /^(ÖÖÕ«Õ½Õ¿Õ¸Õ½Õ«Ö Õ¡Õ¼Õ¡Õ»|Õ´Õ¥Ö Õ©Õ¾Õ¡ÖÕ¯Õ¸ÖÕ©ÕµÕ¸ÖÕ¶Õ«Ö Õ¡Õ¼Õ¡Õ»|Õ´Õ¥Ö Õ©Õ¾Õ¡ÖÕ¯Õ¸ÖÕ©ÕµÕ¡Õ¶|ÖÖÕ«Õ½Õ¿Õ¸Õ½Õ«Ö Õ°Õ¥Õ¿Õ¸)/i,
};
const parseEraPatterns$K = {
  any: [/^Ö/i, /^Õ´/i],
};

const matchQuarterPatterns$K = {
  narrow: /^[1234]/i,
  abbreviated: /^Ö[1234]/i,
  wide: /^[1234]((-|Ö)?(Õ«Õ¶|ÖÕ¤)) ÖÕ¡Õ¼Õ¸ÖÕ¤/i,
};
const parseQuarterPatterns$K = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$K = {
  narrow: /^[Õ°ÖÕ´Õ¡ÖÕ½Õ¶Õ¤]/i,
  abbreviated: /^(Õ°Õ¸ÖÕ¶|ÖÕ¥Õ¿|Õ´Õ¡Ö|Õ¡ÕºÖ|Õ´Õ¡Õµ|Õ°Õ¸ÖÕ¶|Õ°Õ¸ÖÕ¬|ÖÕ£Õ½|Õ½Õ¥Õº|Õ°Õ¸Õ¯|Õ¶Õ¸Õµ|Õ¤Õ¥Õ¯)/i,
  wide: /^(Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö|ÖÕ¥Õ¿ÖÕ¾Õ¡Ö|Õ´Õ¡ÖÕ¿|Õ¡ÕºÖÕ«Õ¬|Õ´Õ¡ÕµÕ«Õ½|Õ°Õ¸ÖÕ¶Õ«Õ½|Õ°Õ¸ÖÕ¬Õ«Õ½|ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½|Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö|Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö|Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö|Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö)/i,
};
const parseMonthPatterns$K = {
  narrow: [
    /^Õ°/i,
    /^Ö/i,
    /^Õ´/i,
    /^Õ¡/i,
    /^Õ´/i,
    /^Õ°/i,
    /^Õ°/i,
    /^Ö/i,
    /^Õ½/i,
    /^Õ°/i,
    /^Õ¶/i,
    /^Õ¤/i,
  ],

  any: [
    /^Õ°Õ¸Ö/i,
    /^Ö/i,
    /^Õ´Õ¡Ö/i,
    /^Õ¡/i,
    /^Õ´Õ¡Õµ/i,
    /^Õ°Õ¸ÖÕ¶/i,
    /^Õ°Õ¸ÖÕ¬/i,
    /^Ö/i,
    /^Õ½/i,
    /^Õ°Õ¸Õ¯/i,
    /^Õ¶/i,
    /^Õ¤/i,
  ],
};

const matchDayPatterns$K = {
  narrow: /^[Õ¥Õ¹Õ°Õ¸Õ·Õ¯]/i,
  short: /^(Õ¯Ö|Õ¥Ö|Õ¥Ö|Õ¹Ö|Õ°Õ£|Õ¸ÖÖ|Õ·Õ¢)/i,
  abbreviated: /^(Õ¯Õ«Ö|Õ¥ÖÕ¯|Õ¥ÖÖ|Õ¹Õ¸Ö|Õ°Õ¶Õ£|Õ¸ÖÖÕ¢|Õ·Õ¡Õ¢)/i,
  wide: /^(Õ¯Õ«ÖÕ¡Õ¯Õ«|Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«|Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«|Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«|Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«|Õ¸ÖÖÕ¢Õ¡Õ©|Õ·Õ¡Õ¢Õ¡Õ©)/i,
};
const parseDayPatterns$K = {
  narrow: [/^Õ¯/i, /^Õ¥/i, /^Õ¥/i, /^Õ¹/i, /^Õ°/i, /^(Õ¸|Õ)/, /^Õ·/i],
  short: [/^Õ¯/i, /^Õ¥Ö/i, /^Õ¥Ö/i, /^Õ¹/i, /^Õ°/i, /^(Õ¸|Õ)/, /^Õ·/i],
  abbreviated: [/^Õ¯/i, /^Õ¥ÖÕ¯/i, /^Õ¥ÖÖ/i, /^Õ¹/i, /^Õ°/i, /^(Õ¸|Õ)/, /^Õ·/i],

  wide: [/^Õ¯/i, /^Õ¥ÖÕ¯/i, /^Õ¥ÖÕ¥/i, /^Õ¹/i, /^Õ°/i, /^(Õ¸|Õ)/, /^Õ·/i],
};

const matchDayPeriodPatterns$K = {
  narrow: /^([ap]|Õ¯Õ¥Õ½Õ£Õ·|Õ¯Õ¥Õ½ÖÖ|(Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¨?|ÖÕ¥ÖÕ¥Õ¯Õ¨?|Õ¥ÖÕ¥Õ¯Õ¸(ÕµÕ¡Õ¶)?|Õ£Õ«Õ·Õ¥ÖÕ¨?))/i,
  any: /^([ap]\.?\s?m\.?|Õ¯Õ¥Õ½Õ£Õ«Õ·Õ¥Ö(Õ«Õ¶)?|Õ¯Õ¥Õ½ÖÖ(Õ«Õ¶)?|(Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¨?|ÖÕ¥ÖÕ¥Õ¯Õ¨?|Õ¥ÖÕ¥Õ¯Õ¸(ÕµÕ¡Õ¶)?|Õ£Õ«Õ·Õ¥ÖÕ¨?))/i,
};
const parseDayPeriodPatterns$K = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /Õ¯Õ¥Õ½Õ£Õ«Õ·Õ¥Ö/i,
    noon: /Õ¯Õ¥Õ½ÖÖ/i,
    morning: /Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿/i,
    afternoon: /ÖÕ¥ÖÕ¥Õ¯/i,
    evening: /Õ¥ÖÕ¥Õ¯Õ¸/i,
    night: /Õ£Õ«Õ·Õ¥Ö/i,
  },
};

(match$K.match = {
  ordinalNumber: (0, _index2$1v.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$K,
    parsePattern: parseOrdinalNumberPattern$K,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$34.buildMatchFn)({
    matchPatterns: matchEraPatterns$K,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$K,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$34.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$K,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$K,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$34.buildMatchFn)({
    matchPatterns: matchMonthPatterns$K,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$K,
    defaultParseWidth: "any",
  }),

  day: (0, _index$34.buildMatchFn)({
    matchPatterns: matchDayPatterns$K,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$K,
    defaultParseWidth: "wide",
  }),

  dayPeriod: (0, _index$34.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$K,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$K,
    defaultParseWidth: "any",
  }),
});

hy.hy = void 0;
var _index$33 = formatDistance$1t;
var _index2$1u = formatLong$L;
var _index3$L = formatRelative$1t;
var _index4$L = localize$K;
var _index5$L = match$K;

/**
 * @category Locales
 * @summary Armenian locale
 * @language Armenian
 * @iso-639-2 arm
 * @author Alex Igityan [@alexigityan](https://github.com/alexigityan)
 */
(hy.hy = {
  code: "hy",
  formatDistance: _index$33.formatDistance,
  formatLong: _index2$1u.formatLong,
  formatRelative: _index3$L.formatRelative,
  localize: _index4$L.localize,
  match: _index5$L.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var id = {};

var formatDistance$1r = {};

formatDistance$1r.formatDistance = void 0;

const formatDistanceLocale$J = {
  lessThanXSeconds: {
    one: "kurang dari 1 detik",
    other: "kurang dari {{count}} detik",
  },

  xSeconds: {
    one: "1 detik",
    other: "{{count}} detik",
  },

  halfAMinute: "setengah menit",

  lessThanXMinutes: {
    one: "kurang dari 1 menit",
    other: "kurang dari {{count}} menit",
  },

  xMinutes: {
    one: "1 menit",
    other: "{{count}} menit",
  },

  aboutXHours: {
    one: "sekitar 1 jam",
    other: "sekitar {{count}} jam",
  },

  xHours: {
    one: "1 jam",
    other: "{{count}} jam",
  },

  xDays: {
    one: "1 hari",
    other: "{{count}} hari",
  },

  aboutXWeeks: {
    one: "sekitar 1 minggu",
    other: "sekitar {{count}} minggu",
  },

  xWeeks: {
    one: "1 minggu",
    other: "{{count}} minggu",
  },

  aboutXMonths: {
    one: "sekitar 1 bulan",
    other: "sekitar {{count}} bulan",
  },

  xMonths: {
    one: "1 bulan",
    other: "{{count}} bulan",
  },

  aboutXYears: {
    one: "sekitar 1 tahun",
    other: "sekitar {{count}} tahun",
  },

  xYears: {
    one: "1 tahun",
    other: "{{count}} tahun",
  },

  overXYears: {
    one: "lebih dari 1 tahun",
    other: "lebih dari {{count}} tahun",
  },

  almostXYears: {
    one: "hampir 1 tahun",
    other: "hampir {{count}} tahun",
  },
};

const formatDistance$1q = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$J[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dalam waktu " + result;
    } else {
      return result + " yang lalu";
    }
  }

  return result;
};
formatDistance$1r.formatDistance = formatDistance$1q;

var formatLong$K = {};

formatLong$K.formatLong = void 0;
var _index$32 = buildFormatLongFn$1;

const dateFormats$K = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "d/M/yyyy",
};

const timeFormats$K = {
  full: "HH.mm.ss",
  long: "HH.mm.ss",
  medium: "HH.mm",
  short: "HH.mm",
};

const dateTimeFormats$K = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$K.formatLong = {
  date: (0, _index$32.buildFormatLongFn)({
    formats: dateFormats$K,
    defaultWidth: "full",
  }),

  time: (0, _index$32.buildFormatLongFn)({
    formats: timeFormats$K,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$32.buildFormatLongFn)({
    formats: dateTimeFormats$K,
    defaultWidth: "full",
  }),
});

var formatRelative$1r = {};

formatRelative$1r.formatRelative = void 0;

const formatRelativeLocale$J = {
  lastWeek: "eeee 'lalu pukul' p",
  yesterday: "'Kemarin pukul' p",
  today: "'Hari ini pukul' p",
  tomorrow: "'Besok pukul' p",
  nextWeek: "eeee 'pukul' p",
  other: "P",
};

const formatRelative$1q = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$J[token];
formatRelative$1r.formatRelative = formatRelative$1q;

var localize$J = {};

localize$J.localize = void 0;
var _index$31 = buildLocalizeFn$1;

// All data for localization are taken from this page
// https://www.unicode.org/cldr/charts/32/summary/id.html
const eraValues$J = {
  narrow: ["SM", "M"],
  abbreviated: ["SM", "M"],
  wide: ["Sebelum Masehi", "Masehi"],
};

const quarterValues$J = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["Kuartal ke-1", "Kuartal ke-2", "Kuartal ke-3", "Kuartal ke-4"],
};

// Note: in Indonesian, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$J = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "Mei",
    "Jun",
    "Jul",
    "Agt",
    "Sep",
    "Okt",
    "Nov",
    "Des",
  ],

  wide: [
    "Januari",
    "Februari",
    "Maret",
    "April",
    "Mei",
    "Juni",
    "Juli",
    "Agustus",
    "September",
    "Oktober",
    "November",
    "Desember",
  ],
};

const dayValues$J = {
  narrow: ["M", "S", "S", "R", "K", "J", "S"],
  short: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
  abbreviated: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
  wide: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"],
};

const dayPeriodValues$J = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam",
  },
};

const formattingDayPeriodValues$B = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam",
  },
};

const ordinalNumber$J = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  // Can't use "pertama", "kedua" because can't be parsed

  return "ke-" + number;
};

(localize$J.localize = {
  ordinalNumber: ordinalNumber$J,

  era: (0, _index$31.buildLocalizeFn)({
    values: eraValues$J,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$31.buildLocalizeFn)({
    values: quarterValues$J,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$31.buildLocalizeFn)({
    values: monthValues$J,
    defaultWidth: "wide",
  }),

  day: (0, _index$31.buildLocalizeFn)({
    values: dayValues$J,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$31.buildLocalizeFn)({
    values: dayPeriodValues$J,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$B,
    defaultFormattingWidth: "wide",
  }),
});

var match$J = {};

match$J.match = void 0;

var _index$30 = buildMatchFn$1;
var _index2$1t = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$J = /^ke-(\d+)?/i;
const parseOrdinalNumberPattern$J = /\d+/i;

const matchEraPatterns$J = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
  wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i,
};
const parseEraPatterns$J = {
  any: [/^s/i, /^(m|e)/i],
};

const matchQuarterPatterns$J = {
  narrow: /^[1234]/i,
  abbreviated: /^K-?\s[1234]/i,
  wide: /^Kuartal ke-?\s?[1234]/i,
};
const parseQuarterPatterns$J = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$J = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
  wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i,
};
const parseMonthPatterns$J = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^ma/i,
    /^ap/i,
    /^me/i,
    /^jun/i,
    /^jul/i,
    /^ag/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$J = {
  narrow: /^[srkjm]/i,
  short: /^(min|sen|sel|rab|kam|jum|sab)/i,
  abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
  wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i,
};
const parseDayPatterns$J = {
  narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i],
};

const matchDayPeriodPatterns$J = {
  narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
};
const parseDayPeriodPatterns$J = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pagi/i,
    afternoon: /siang/i,
    evening: /sore/i,
    night: /malam/i,
  },
};

(match$J.match = {
  ordinalNumber: (0, _index2$1t.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$J,
    parsePattern: parseOrdinalNumberPattern$J,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$30.buildMatchFn)({
    matchPatterns: matchEraPatterns$J,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$J,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$30.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$J,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$J,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$30.buildMatchFn)({
    matchPatterns: matchMonthPatterns$J,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$J,
    defaultParseWidth: "any",
  }),

  day: (0, _index$30.buildMatchFn)({
    matchPatterns: matchDayPatterns$J,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$J,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$30.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$J,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$J,
    defaultParseWidth: "any",
  }),
});

id.id = void 0;
var _index$2$ = formatDistance$1r;
var _index2$1s = formatLong$K;
var _index3$K = formatRelative$1r;
var _index4$K = localize$J;
var _index5$K = match$J;

/**
 * @category Locales
 * @summary Indonesian locale.
 * @language Indonesian
 * @iso-639-2 ind
 * @author Rahmat Budiharso [@rbudiharso](https://github.com/rbudiharso)
 * @author Benget Nata [@bentinata](https://github.com/bentinata)
 * @author Budi Irawan [@deerawan](https://github.com/deerawan)
 * @author Try Ajitiono [@imballinst](https://github.com/imballinst)
 */
(id.id = {
  code: "id",
  formatDistance: _index$2$.formatDistance,
  formatLong: _index2$1s.formatLong,
  formatRelative: _index3$K.formatRelative,
  localize: _index4$K.localize,
  match: _index5$K.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var is = {};

var formatDistance$1p = {};

formatDistance$1p.formatDistance = void 0;

const formatDistanceLocale$I = {
  lessThanXSeconds: {
    one: "minna en 1 sekÃºnda",
    other: "minna en {{count}} sekÃºndur",
  },

  xSeconds: {
    one: "1 sekÃºnda",
    other: "{{count}} sekÃºndur",
  },

  halfAMinute: "hÃ¡lf mÃ­nÃºta",

  lessThanXMinutes: {
    one: "minna en 1 mÃ­nÃºta",
    other: "minna en {{count}} mÃ­nÃºtur",
  },

  xMinutes: {
    one: "1 mÃ­nÃºta",
    other: "{{count}} mÃ­nÃºtur",
  },

  aboutXHours: {
    one: "u.Ã¾.b. 1 klukkustund",
    other: "u.Ã¾.b. {{count}} klukkustundir",
  },

  xHours: {
    one: "1 klukkustund",
    other: "{{count}} klukkustundir",
  },

  xDays: {
    one: "1 dagur",
    other: "{{count}} dagar",
  },

  aboutXWeeks: {
    one: "um viku",
    other: "um {{count}} vikur",
  },

  xWeeks: {
    one: "1 viku",
    other: "{{count}} vikur",
  },

  aboutXMonths: {
    one: "u.Ã¾.b. 1 mÃ¡nuÃ°ur",
    other: "u.Ã¾.b. {{count}} mÃ¡nuÃ°ir",
  },

  xMonths: {
    one: "1 mÃ¡nuÃ°ur",
    other: "{{count}} mÃ¡nuÃ°ir",
  },

  aboutXYears: {
    one: "u.Ã¾.b. 1 Ã¡r",
    other: "u.Ã¾.b. {{count}} Ã¡r",
  },

  xYears: {
    one: "1 Ã¡r",
    other: "{{count}} Ã¡r",
  },

  overXYears: {
    one: "meira en 1 Ã¡r",
    other: "meira en {{count}} Ã¡r",
  },

  almostXYears: {
    one: "nÃ¦stum 1 Ã¡r",
    other: "nÃ¦stum {{count}} Ã¡r",
  },
};

const formatDistance$1o = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$I[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ã­ " + result;
    } else {
      return result + " sÃ­Ã°an";
    }
  }

  return result;
};
formatDistance$1p.formatDistance = formatDistance$1o;

var formatLong$J = {};

formatLong$J.formatLong = void 0;
var _index$2_ = buildFormatLongFn$1;

const dateFormats$J = {
  full: "EEEE, do MMMM y",
  long: "do MMMM y",
  medium: "do MMM y",
  short: "d.MM.y",
};

const timeFormats$J = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$J = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$J.formatLong = {
  date: (0, _index$2_.buildFormatLongFn)({
    formats: dateFormats$J,
    defaultWidth: "full",
  }),

  time: (0, _index$2_.buildFormatLongFn)({
    formats: timeFormats$J,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2_.buildFormatLongFn)({
    formats: dateTimeFormats$J,
    defaultWidth: "full",
  }),
});

var formatRelative$1p = {};

formatRelative$1p.formatRelative = void 0;

const formatRelativeLocale$I = {
  lastWeek: "'sÃ­Ã°asta' dddd 'kl.' p",
  yesterday: "'Ã­ gÃ¦r kl.' p",
  today: "'Ã­ dag kl.' p",
  tomorrow: "'Ã¡ morgun kl.' p",
  nextWeek: "dddd 'kl.' p",
  other: "P",
};

const formatRelative$1o = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$I[token];
formatRelative$1p.formatRelative = formatRelative$1o;

var localize$I = {};

localize$I.localize = void 0;
var _index$2Z = buildLocalizeFn$1;

const eraValues$I = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["fyrir Krist", "eftir Krist"],
};

const quarterValues$I = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1F", "2F", "3F", "4F"],
  wide: ["1. fjÃ³rÃ°ungur", "2. fjÃ³rÃ°ungur", "3. fjÃ³rÃ°ungur", "4. fjÃ³rÃ°ungur"],
};

const monthValues$I = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "Ã", "S", "Ã", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mars",
    "aprÃ­l",
    "maÃ­",
    "jÃºnÃ­",
    "jÃºlÃ­",
    "Ã¡gÃºst",
    "sept.",
    "okt.",
    "nÃ³v.",
    "des.",
  ],

  wide: [
    "janÃºar",
    "febrÃºar",
    "mars",
    "aprÃ­l",
    "maÃ­",
    "jÃºnÃ­",
    "jÃºlÃ­",
    "Ã¡gÃºst",
    "september",
    "oktÃ³ber",
    "nÃ³vember",
    "desember",
  ],
};

const dayValues$I = {
  narrow: ["S", "M", "Ã", "M", "F", "F", "L"],
  short: ["Su", "MÃ¡", "Ãr", "Mi", "Fi", "FÃ¶", "La"],
  abbreviated: ["sun.", "mÃ¡n.", "Ã¾ri.", "miÃ°.", "fim.", "fÃ¶s.", "lau."],

  wide: [
    "sunnudagur",
    "mÃ¡nudagur",
    "Ã¾riÃ°judagur",
    "miÃ°vikudagur",
    "fimmtudagur",
    "fÃ¶studagur",
    "laugardagur",
  ],
};

const dayPeriodValues$I = {
  narrow: {
    am: "f",
    pm: "e",
    midnight: "miÃ°nÃ¦tti",
    noon: "hÃ¡degi",
    morning: "morgunn",
    afternoon: "sÃ­Ã°degi",
    evening: "kvÃ¶ld",
    night: "nÃ³tt",
  },
  abbreviated: {
    am: "f.h.",
    pm: "e.h.",
    midnight: "miÃ°nÃ¦tti",
    noon: "hÃ¡degi",
    morning: "morgunn",
    afternoon: "sÃ­Ã°degi",
    evening: "kvÃ¶ld",
    night: "nÃ³tt",
  },
  wide: {
    am: "fyrir hÃ¡degi",
    pm: "eftir hÃ¡degi",
    midnight: "miÃ°nÃ¦tti",
    noon: "hÃ¡degi",
    morning: "morgunn",
    afternoon: "sÃ­Ã°degi",
    evening: "kvÃ¶ld",
    night: "nÃ³tt",
  },
};

const formattingDayPeriodValues$A = {
  narrow: {
    am: "f",
    pm: "e",
    midnight: "Ã¡ miÃ°nÃ¦tti",
    noon: "Ã¡ hÃ¡degi",
    morning: "aÃ° morgni",
    afternoon: "sÃ­Ã°degis",
    evening: "um kvÃ¶ld",
    night: "um nÃ³tt",
  },
  abbreviated: {
    am: "f.h.",
    pm: "e.h.",
    midnight: "Ã¡ miÃ°nÃ¦tti",
    noon: "Ã¡ hÃ¡degi",
    morning: "aÃ° morgni",
    afternoon: "sÃ­Ã°degis",
    evening: "um kvÃ¶ld",
    night: "um nÃ³tt",
  },
  wide: {
    am: "fyrir hÃ¡degi",
    pm: "eftir hÃ¡degi",
    midnight: "Ã¡ miÃ°nÃ¦tti",
    noon: "Ã¡ hÃ¡degi",
    morning: "aÃ° morgni",
    afternoon: "sÃ­Ã°degis",
    evening: "um kvÃ¶ld",
    night: "um nÃ³tt",
  },
};

const ordinalNumber$I = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  return number + ".";
};

(localize$I.localize = {
  ordinalNumber: ordinalNumber$I,

  era: (0, _index$2Z.buildLocalizeFn)({
    values: eraValues$I,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2Z.buildLocalizeFn)({
    values: quarterValues$I,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2Z.buildLocalizeFn)({
    values: monthValues$I,
    defaultWidth: "wide",
  }),

  day: (0, _index$2Z.buildLocalizeFn)({
    values: dayValues$I,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2Z.buildLocalizeFn)({
    values: dayPeriodValues$I,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$A,
    defaultFormattingWidth: "wide",
  }),
});

var match$I = {};

match$I.match = void 0;

var _index$2Y = buildMatchFn$1;
var _index2$1r = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$I = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern$I = /\d+(\.)?/i;

const matchEraPatterns$I = {
  narrow: /^(f\.Kr\.|e\.Kr\.)/i,
  abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
  wide: /^(fyrir Krist|eftir Krist)/i,
};
const parseEraPatterns$I = {
  any: [/^(f\.Kr\.)/i, /^(e\.Kr\.)/i],
};

const matchQuarterPatterns$I = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^q[1234]\.?/i,
  wide: /^[1234]\.? fjÃ³rÃ°ungur/i,
};
const parseQuarterPatterns$I = {
  any: [/1\.?/i, /2\.?/i, /3\.?/i, /4\.?/i],
};

const matchMonthPatterns$I = {
  narrow: /^[jfmÃ¡sÃ³nd]/i,
  abbreviated:
    /^(jan\.|feb\.|mars\.|aprÃ­l\.|maÃ­|jÃºnÃ­|jÃºlÃ­|Ã¡gust|sep\.|oct\.|nov\.|dec\.)/i,
  wide: /^(januar|febrÃºar|mars|aprÃ­l|maÃ­|jÃºnÃ­|jÃºlÃ­|Ã¡gust|september|oktÃ³ber|nÃ³vember|desember)/i,
};

const parseMonthPatterns$I = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^Ã¡/i,
    /^s/i,
    /^Ã³/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^maÃ­/i,
    /^jÃºn/i,
    /^jÃºl/i,
    /^Ã¡u/i,
    /^s/i,
    /^Ã³/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$I = {
  narrow: /^[smtwf]/i,
  short: /^(su|mÃ¡|Ã¾r|mi|fi|fÃ¶|la)/i,
  abbreviated: /^(sun|mÃ¡n|Ã¾ri|miÃ°|fim|fÃ¶s|lau)\.?/i,
  wide: /^(sunnudagur|mÃ¡nudagur|Ã¾riÃ°judagur|miÃ°vikudagur|fimmtudagur|fÃ¶studagur|laugardagur)/i,
};
const parseDayPatterns$I = {
  narrow: [/^s/i, /^m/i, /^Ã¾/i, /^m/i, /^f/i, /^f/i, /^l/i],
  any: [/^su/i, /^mÃ¡/i, /^Ã¾r/i, /^mi/i, /^fi/i, /^fÃ¶/i, /^la/i],
};

const matchDayPeriodPatterns$I = {
  narrow: /^(f|e|sÃ­Ã°degis|(Ã¡|aÃ°|um) (morgni|kvÃ¶ld|nÃ³tt|miÃ°nÃ¦tti))/i,
  any: /^(fyrir hÃ¡degi|eftir hÃ¡degi|[ef]\.?h\.?|sÃ­Ã°degis|morgunn|(Ã¡|aÃ°|um) (morgni|kvÃ¶ld|nÃ³tt|miÃ°nÃ¦tti))/i,
};
const parseDayPeriodPatterns$I = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^mi/i,
    noon: /^hÃ¡/i,
    morning: /morgunn/i,
    afternoon: /sÃ­Ã°degi/i,
    evening: /kvÃ¶ld/i,
    night: /nÃ³tt/i,
  },
};

(match$I.match = {
  ordinalNumber: (0, _index2$1r.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$I,
    parsePattern: parseOrdinalNumberPattern$I,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2Y.buildMatchFn)({
    matchPatterns: matchEraPatterns$I,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$I,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2Y.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$I,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$I,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2Y.buildMatchFn)({
    matchPatterns: matchMonthPatterns$I,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$I,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2Y.buildMatchFn)({
    matchPatterns: matchDayPatterns$I,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$I,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2Y.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$I,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$I,
    defaultParseWidth: "any",
  }),
});

is.is = void 0;
var _index$2X = formatDistance$1p;
var _index2$1q = formatLong$J;
var _index3$J = formatRelative$1p;
var _index4$J = localize$I;
var _index5$J = match$I;

/**
 * @category Locales
 * @summary Icelandic locale.
 * @language Icelandic
 * @iso-639-2 isl
 * @author Derek Blank [@derekblank](https://github.com/derekblank)
 * @author ArnÃ³r Ãmir [@lamayg](https://github.com/lamayg)
 */
(is.is = {
  code: "is",
  formatDistance: _index$2X.formatDistance,
  formatLong: _index2$1q.formatLong,
  formatRelative: _index3$J.formatRelative,
  localize: _index4$J.localize,
  match: _index5$J.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var it = {};

var formatDistance$1n = {};

formatDistance$1n.formatDistance = void 0;

const formatDistanceLocale$H = {
  lessThanXSeconds: {
    one: "meno di un secondo",
    other: "meno di {{count}} secondi",
  },

  xSeconds: {
    one: "un secondo",
    other: "{{count}} secondi",
  },

  halfAMinute: "alcuni secondi",

  lessThanXMinutes: {
    one: "meno di un minuto",
    other: "meno di {{count}} minuti",
  },

  xMinutes: {
    one: "un minuto",
    other: "{{count}} minuti",
  },

  aboutXHours: {
    one: "circa un'ora",
    other: "circa {{count}} ore",
  },

  xHours: {
    one: "un'ora",
    other: "{{count}} ore",
  },

  xDays: {
    one: "un giorno",
    other: "{{count}} giorni",
  },

  aboutXWeeks: {
    one: "circa una settimana",
    other: "circa {{count}} settimane",
  },

  xWeeks: {
    one: "una settimana",
    other: "{{count}} settimane",
  },

  aboutXMonths: {
    one: "circa un mese",
    other: "circa {{count}} mesi",
  },

  xMonths: {
    one: "un mese",
    other: "{{count}} mesi",
  },

  aboutXYears: {
    one: "circa un anno",
    other: "circa {{count}} anni",
  },

  xYears: {
    one: "un anno",
    other: "{{count}} anni",
  },

  overXYears: {
    one: "piÃ¹ di un anno",
    other: "piÃ¹ di {{count}} anni",
  },

  almostXYears: {
    one: "quasi un anno",
    other: "quasi {{count}} anni",
  },
};

const formatDistance$1m = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$H[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "tra " + result;
    } else {
      return result + " fa";
    }
  }

  return result;
};
formatDistance$1n.formatDistance = formatDistance$1m;

var formatLong$I = {};

formatLong$I.formatLong = void 0;
var _index$2W = buildFormatLongFn$1;

const dateFormats$I = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$I = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$I = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$I.formatLong = {
  date: (0, _index$2W.buildFormatLongFn)({
    formats: dateFormats$I,
    defaultWidth: "full",
  }),

  time: (0, _index$2W.buildFormatLongFn)({
    formats: timeFormats$I,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2W.buildFormatLongFn)({
    formats: dateTimeFormats$I,
    defaultWidth: "full",
  }),
});

var formatRelative$1n = {};

formatRelative$1n.formatRelative = void 0;
var _index$2V = isSameWeek$1;

const weekdays$2 = [
  "domenica",
  "lunedÃ¬",
  "martedÃ¬",
  "mercoledÃ¬",
  "giovedÃ¬",
  "venerdÃ¬",
  "sabato",
];

function lastWeek$5(day) {
  switch (day) {
    case 0:
      return "'domenica scorsa alle' p";
    default:
      return "'" + weekdays$2[day] + " scorso alle' p";
  }
}

function thisWeek$5(day) {
  return "'" + weekdays$2[day] + " alle' p";
}

function nextWeek$5(day) {
  switch (day) {
    case 0:
      return "'domenica prossima alle' p";
    default:
      return "'" + weekdays$2[day] + " prossimo alle' p";
  }
}

const formatRelativeLocale$H = {
  lastWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$2V.isSameWeek)(date, baseDate, options)) {
      return thisWeek$5(day);
    } else {
      return lastWeek$5(day);
    }
  },
  yesterday: "'ieri alle' p",
  today: "'oggi alle' p",
  tomorrow: "'domani alle' p",
  nextWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$2V.isSameWeek)(date, baseDate, options)) {
      return thisWeek$5(day);
    } else {
      return nextWeek$5(day);
    }
  },
  other: "P",
};

const formatRelative$1m = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$H[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$1n.formatRelative = formatRelative$1m;

var localize$H = {};

localize$H.localize = void 0;
var _index$2U = buildLocalizeFn$1;

const eraValues$H = {
  narrow: ["aC", "dC"],
  abbreviated: ["a.C.", "d.C."],
  wide: ["avanti Cristo", "dopo Cristo"],
};

const quarterValues$H = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1Âº trimestre", "2Âº trimestre", "3Âº trimestre", "4Âº trimestre"],
};

const monthValues$H = {
  narrow: ["G", "F", "M", "A", "M", "G", "L", "A", "S", "O", "N", "D"],
  abbreviated: [
    "gen",
    "feb",
    "mar",
    "apr",
    "mag",
    "giu",
    "lug",
    "ago",
    "set",
    "ott",
    "nov",
    "dic",
  ],

  wide: [
    "gennaio",
    "febbraio",
    "marzo",
    "aprile",
    "maggio",
    "giugno",
    "luglio",
    "agosto",
    "settembre",
    "ottobre",
    "novembre",
    "dicembre",
  ],
};

const dayValues$H = {
  narrow: ["D", "L", "M", "M", "G", "V", "S"],
  short: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
  abbreviated: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
  wide: [
    "domenica",
    "lunedÃ¬",
    "martedÃ¬",
    "mercoledÃ¬",
    "giovedÃ¬",
    "venerdÃ¬",
    "sabato",
  ],
};

const dayPeriodValues$H = {
  narrow: {
    am: "m.",
    pm: "p.",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "mattina",
    afternoon: "pomeriggio",
    evening: "sera",
    night: "notte",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "mattina",
    afternoon: "pomeriggio",
    evening: "sera",
    night: "notte",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "mattina",
    afternoon: "pomeriggio",
    evening: "sera",
    night: "notte",
  },
};

const formattingDayPeriodValues$z = {
  narrow: {
    am: "m.",
    pm: "p.",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "di mattina",
    afternoon: "del pomeriggio",
    evening: "di sera",
    night: "di notte",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "di mattina",
    afternoon: "del pomeriggio",
    evening: "di sera",
    night: "di notte",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "di mattina",
    afternoon: "del pomeriggio",
    evening: "di sera",
    night: "di notte",
  },
};

const ordinalNumber$H = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return String(number);
};

(localize$H.localize = {
  ordinalNumber: ordinalNumber$H,

  era: (0, _index$2U.buildLocalizeFn)({
    values: eraValues$H,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2U.buildLocalizeFn)({
    values: quarterValues$H,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2U.buildLocalizeFn)({
    values: monthValues$H,
    defaultWidth: "wide",
  }),

  day: (0, _index$2U.buildLocalizeFn)({
    values: dayValues$H,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2U.buildLocalizeFn)({
    values: dayPeriodValues$H,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$z,
    defaultFormattingWidth: "wide",
  }),
});

var match$H = {};

match$H.match = void 0;

var _index$2T = buildMatchFn$1;
var _index2$1p = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$H = /^(\d+)(Âº)?/i;
const parseOrdinalNumberPattern$H = /\d+/i;

const matchEraPatterns$H = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
  wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i,
};
const parseEraPatterns$H = {
  any: [/^a/i, /^(d|e)/i],
};

const matchQuarterPatterns$H = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](Âº)? trimestre/i,
};
const parseQuarterPatterns$H = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$H = {
  narrow: /^[gfmalsond]/i,
  abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
  wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i,
};
const parseMonthPatterns$H = {
  narrow: [
    /^g/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^g/i,
    /^l/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ge/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mag/i,
    /^gi/i,
    /^l/i,
    /^ag/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$H = {
  narrow: /^[dlmgvs]/i,
  short: /^(do|lu|ma|me|gi|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
  wide: /^(domenica|luned[i|Ã¬]|marted[i|Ã¬]|mercoled[i|Ã¬]|gioved[i|Ã¬]|venerd[i|Ã¬]|sabato)/i,
};
const parseDayPatterns$H = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i],
};

const matchDayPeriodPatterns$H = {
  narrow:
    /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
  any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
};
const parseDayPeriodPatterns$H = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mezza/i,
    noon: /^mezzo/i,
    morning: /mattina/i,
    afternoon: /pomeriggio/i,
    evening: /sera/i,
    night: /notte/i,
  },
};

(match$H.match = {
  ordinalNumber: (0, _index2$1p.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$H,
    parsePattern: parseOrdinalNumberPattern$H,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2T.buildMatchFn)({
    matchPatterns: matchEraPatterns$H,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$H,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2T.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$H,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$H,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2T.buildMatchFn)({
    matchPatterns: matchMonthPatterns$H,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$H,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2T.buildMatchFn)({
    matchPatterns: matchDayPatterns$H,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$H,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2T.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$H,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$H,
    defaultParseWidth: "any",
  }),
});

it.it = void 0;
var _index$2S = formatDistance$1n;
var _index2$1o = formatLong$I;
var _index3$I = formatRelative$1n;
var _index4$I = localize$H;
var _index5$I = match$H;

/**
 * @category Locales
 * @summary Italian locale.
 * @language Italian
 * @iso-639-2 ita
 * @author Alberto Restifo [@albertorestifo](https://github.com/albertorestifo)
 * @author Giovanni Polimeni [@giofilo](https://github.com/giofilo)
 * @author Vincenzo Carrese [@vin-car](https://github.com/vin-car)
 */
(it.it = {
  code: "it",
  formatDistance: _index$2S.formatDistance,
  formatLong: _index2$1o.formatLong,
  formatRelative: _index3$I.formatRelative,
  localize: _index4$I.localize,
  match: _index5$I.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var itCH = {};

var formatLong$H = {};

formatLong$H.formatLong = void 0;
var _index$2R = buildFormatLongFn$1;

const dateFormats$H = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.y",
};

const timeFormats$H = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$H = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$H.formatLong = {
  date: (0, _index$2R.buildFormatLongFn)({
    formats: dateFormats$H,
    defaultWidth: "full",
  }),

  time: (0, _index$2R.buildFormatLongFn)({
    formats: timeFormats$H,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2R.buildFormatLongFn)({
    formats: dateTimeFormats$H,
    defaultWidth: "full",
  }),
});

itCH.itCH = void 0;
var _index$2Q = formatDistance$1n;
var _index2$1n = formatRelative$1n;
var _index3$H = localize$H;
var _index4$H = match$H;
var _index5$H = formatLong$H;

/**
 * @category Locales
 * @summary Italian locale (Switzerland).
 * @language Italian
 * @iso-639-2 ita
 * @author Mike Peyer [@maic66](https://github.com/maic66)
 */
(itCH.itCH = {
  code: "it-CH",
  formatDistance: _index$2Q.formatDistance,
  formatLong: _index5$H.formatLong,
  formatRelative: _index2$1n.formatRelative,
  localize: _index3$H.localize,
  match: _index4$H.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var ja = {};

var formatDistance$1l = {};

formatDistance$1l.formatDistance = void 0;

const formatDistanceLocale$G = {
  lessThanXSeconds: {
    one: "1ç§æªæº",
    other: "{{count}}ç§æªæº",
    oneWithSuffix: "ç´1ç§",
    otherWithSuffix: "ç´{{count}}ç§",
  },

  xSeconds: {
    one: "1ç§",
    other: "{{count}}ç§",
  },

  halfAMinute: "30ç§",

  lessThanXMinutes: {
    one: "1åæªæº",
    other: "{{count}}åæªæº",
    oneWithSuffix: "ç´1å",
    otherWithSuffix: "ç´{{count}}å",
  },

  xMinutes: {
    one: "1å",
    other: "{{count}}å",
  },

  aboutXHours: {
    one: "ç´1æé",
    other: "ç´{{count}}æé",
  },

  xHours: {
    one: "1æé",
    other: "{{count}}æé",
  },

  xDays: {
    one: "1æ¥",
    other: "{{count}}æ¥",
  },

  aboutXWeeks: {
    one: "ç´1é±é",
    other: "ç´{{count}}é±é",
  },

  xWeeks: {
    one: "1é±é",
    other: "{{count}}é±é",
  },

  aboutXMonths: {
    one: "ç´1ãæ",
    other: "ç´{{count}}ãæ",
  },

  xMonths: {
    one: "1ãæ",
    other: "{{count}}ãæ",
  },

  aboutXYears: {
    one: "ç´1å¹´",
    other: "ç´{{count}}å¹´",
  },

  xYears: {
    one: "1å¹´",
    other: "{{count}}å¹´",
  },

  overXYears: {
    one: "1å¹´ä»¥ä¸",
    other: "{{count}}å¹´ä»¥ä¸",
  },

  almostXYears: {
    one: "1å¹´è¿ã",
    other: "{{count}}å¹´è¿ã",
  },
};

const formatDistance$1k = (token, count, options) => {
  options = options || {};

  let result;

  const tokenValue = formatDistanceLocale$G[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
    } else {
      result = tokenValue.other.replace("{{count}}", String(count));
    }
  }

  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "å¾";
    } else {
      return result + "å";
    }
  }

  return result;
};
formatDistance$1l.formatDistance = formatDistance$1k;

var formatLong$G = {};

formatLong$G.formatLong = void 0;
var _index$2P = buildFormatLongFn$1;

const dateFormats$G = {
  full: "yå¹´Mædæ¥EEEE",
  long: "yå¹´Mædæ¥",
  medium: "y/MM/dd",
  short: "y/MM/dd",
};

const timeFormats$G = {
  full: "Hæmmåssç§ zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$G = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$G.formatLong = {
  date: (0, _index$2P.buildFormatLongFn)({
    formats: dateFormats$G,
    defaultWidth: "full",
  }),

  time: (0, _index$2P.buildFormatLongFn)({
    formats: timeFormats$G,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2P.buildFormatLongFn)({
    formats: dateTimeFormats$G,
    defaultWidth: "full",
  }),
});

var formatRelative$1l = {};

formatRelative$1l.formatRelative = void 0;

const formatRelativeLocale$G = {
  lastWeek: "åé±ã®eeeeã®p",
  yesterday: "æ¨æ¥ã®p",
  today: "ä»æ¥ã®p",
  tomorrow: "ææ¥ã®p",
  nextWeek: "ç¿é±ã®eeeeã®p",
  other: "P",
};

const formatRelative$1k = (token, _date, _baseDate, _options) => {
  return formatRelativeLocale$G[token];
};
formatRelative$1l.formatRelative = formatRelative$1k;

var localize$G = {};

localize$G.localize = void 0;
var _index$2O = buildLocalizeFn$1;

const eraValues$G = {
  narrow: ["BC", "AC"],
  abbreviated: ["ç´åå", "è¥¿æ¦"],
  wide: ["ç´åå", "è¥¿æ¦"],
};

const quarterValues$G = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["ç¬¬1ååæ", "ç¬¬2ååæ", "ç¬¬3ååæ", "ç¬¬4ååæ"],
};

const monthValues$G = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],

  abbreviated: [
    "1æ",
    "2æ",
    "3æ",
    "4æ",
    "5æ",
    "6æ",
    "7æ",
    "8æ",
    "9æ",
    "10æ",
    "11æ",
    "12æ",
  ],

  wide: [
    "1æ",
    "2æ",
    "3æ",
    "4æ",
    "5æ",
    "6æ",
    "7æ",
    "8æ",
    "9æ",
    "10æ",
    "11æ",
    "12æ",
  ],
};

const dayValues$G = {
  narrow: ["æ¥", "æ", "ç«", "æ°´", "æ¨", "é", "å"],
  short: ["æ¥", "æ", "ç«", "æ°´", "æ¨", "é", "å"],
  abbreviated: ["æ¥", "æ", "ç«", "æ°´", "æ¨", "é", "å"],
  wide: ["æ¥ææ¥", "æææ¥", "ç«ææ¥", "æ°´ææ¥", "æ¨ææ¥", "éææ¥", "åææ¥"],
};

const dayPeriodValues$G = {
  narrow: {
    am: "åå",
    pm: "åå¾",
    midnight: "æ·±å¤",
    noon: "æ­£å",
    morning: "æ",
    afternoon: "åå¾",
    evening: "å¤",
    night: "æ·±å¤",
  },
  abbreviated: {
    am: "åå",
    pm: "åå¾",
    midnight: "æ·±å¤",
    noon: "æ­£å",
    morning: "æ",
    afternoon: "åå¾",
    evening: "å¤",
    night: "æ·±å¤",
  },
  wide: {
    am: "åå",
    pm: "åå¾",
    midnight: "æ·±å¤",
    noon: "æ­£å",
    morning: "æ",
    afternoon: "åå¾",
    evening: "å¤",
    night: "æ·±å¤",
  },
};
const formattingDayPeriodValues$y = {
  narrow: {
    am: "åå",
    pm: "åå¾",
    midnight: "æ·±å¤",
    noon: "æ­£å",
    morning: "æ",
    afternoon: "åå¾",
    evening: "å¤",
    night: "æ·±å¤",
  },
  abbreviated: {
    am: "åå",
    pm: "åå¾",
    midnight: "æ·±å¤",
    noon: "æ­£å",
    morning: "æ",
    afternoon: "åå¾",
    evening: "å¤",
    night: "æ·±å¤",
  },
  wide: {
    am: "åå",
    pm: "åå¾",
    midnight: "æ·±å¤",
    noon: "æ­£å",
    morning: "æ",
    afternoon: "åå¾",
    evening: "å¤",
    night: "æ·±å¤",
  },
};

const ordinalNumber$G = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = String(options?.unit);

  switch (unit) {
    case "year":
      return `${number}å¹´`;
    case "quarter":
      return `ç¬¬${number}ååæ`;
    case "month":
      return `${number}æ`;
    case "week":
      return `ç¬¬${number}é±`;
    case "date":
      return `${number}æ¥`;
    case "hour":
      return `${number}æ`;
    case "minute":
      return `${number}å`;
    case "second":
      return `${number}ç§`;
    default:
      return `${number}`;
  }
};

(localize$G.localize = {
  ordinalNumber: ordinalNumber$G,

  era: (0, _index$2O.buildLocalizeFn)({
    values: eraValues$G,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2O.buildLocalizeFn)({
    values: quarterValues$G,
    defaultWidth: "wide",
    argumentCallback: (quarter) => Number(quarter) - 1,
  }),

  month: (0, _index$2O.buildLocalizeFn)({
    values: monthValues$G,
    defaultWidth: "wide",
  }),

  day: (0, _index$2O.buildLocalizeFn)({
    values: dayValues$G,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2O.buildLocalizeFn)({
    values: dayPeriodValues$G,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$y,
    defaultFormattingWidth: "wide",
  }),
});

var match$G = {};

match$G.match = void 0;
var _index$2N = buildMatchPatternFn$1;
var _index2$1m = buildMatchFn$1;

const matchOrdinalNumberPattern$G = /^ç¬¬?\d+(å¹´|ååæ|æ|é±|æ¥|æ|å|ç§)?/i;
const parseOrdinalNumberPattern$G = /\d+/i;

const matchEraPatterns$G = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(ç´å[åå¾]|è¥¿æ¦)/i,
  wide: /^(ç´å[åå¾]|è¥¿æ¦)/i,
};
const parseEraPatterns$G = {
  narrow: [/^B/i, /^A/i],
  any: [/^(ç´åå)/i, /^(è¥¿æ¦|ç´åå¾)/i],
};

const matchQuarterPatterns$G = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^ç¬¬[1234ä¸äºä¸åï¼ï¼ï¼ï¼]ååæ/i,
};
const parseQuarterPatterns$G = {
  any: [/(1|ä¸|ï¼)/i, /(2|äº|ï¼)/i, /(3|ä¸|ï¼)/i, /(4|å|ï¼)/i],
};

const matchMonthPatterns$G = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])æ/i,
  wide: /^([123456789]|1[012])æ/i,
};
const parseMonthPatterns$G = {
  any: [
    /^1\D/,
    /^2/,
    /^3/,
    /^4/,
    /^5/,
    /^6/,
    /^7/,
    /^8/,
    /^9/,
    /^10/,
    /^11/,
    /^12/,
  ],
};

const matchDayPatterns$G = {
  narrow: /^[æ¥æç«æ°´æ¨éå]/,
  short: /^[æ¥æç«æ°´æ¨éå]/,
  abbreviated: /^[æ¥æç«æ°´æ¨éå]/,
  wide: /^[æ¥æç«æ°´æ¨éå]ææ¥/,
};
const parseDayPatterns$G = {
  any: [/^æ¥/, /^æ/, /^ç«/, /^æ°´/, /^æ¨/, /^é/, /^å/],
};

const matchDayPeriodPatterns$G = {
  any: /^(AM|PM|åå|åå¾|æ­£å|æ·±å¤|çå¤ä¸­|å¤|æ)/i,
};
const parseDayPeriodPatterns$G = {
  any: {
    am: /^(A|åå)/i,
    pm: /^(P|åå¾)/i,
    midnight: /^æ·±å¤|çå¤ä¸­/i,
    noon: /^æ­£å/i,
    morning: /^æ/i,
    afternoon: /^åå¾/i,
    evening: /^å¤/i,
    night: /^æ·±å¤/i,
  },
};

(match$G.match = {
  ordinalNumber: (0, _index$2N.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$G,
    parsePattern: parseOrdinalNumberPattern$G,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index2$1m.buildMatchFn)({
    matchPatterns: matchEraPatterns$G,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$G,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index2$1m.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$G,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$G,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index2$1m.buildMatchFn)({
    matchPatterns: matchMonthPatterns$G,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$G,
    defaultParseWidth: "any",
  }),

  day: (0, _index2$1m.buildMatchFn)({
    matchPatterns: matchDayPatterns$G,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$G,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index2$1m.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$G,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$G,
    defaultParseWidth: "any",
  }),
});

ja.ja = void 0;
var _index$2M = formatDistance$1l;
var _index2$1l = formatLong$G;
var _index3$G = formatRelative$1l;
var _index4$G = localize$G;
var _index5$G = match$G;

/**
 * @category Locales
 * @summary Japanese locale.
 * @language Japanese
 * @iso-639-2 jpn
 * @author Thomas Eilmsteiner [@DeMuu](https://github.com/DeMuu)
 * @author Yamagishi Kazutoshi [@ykzts](https://github.com/ykzts)
 * @author Luca Ban [@mesqueeb](https://github.com/mesqueeb)
 * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)
 * @author Taiki IKeda [@so99ynoodles](https://github.com/so99ynoodles)
 */
(ja.ja = {
  code: "ja",
  formatDistance: _index$2M.formatDistance,
  formatLong: _index2$1l.formatLong,
  formatRelative: _index3$G.formatRelative,
  localize: _index4$G.localize,
  match: _index5$G.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var jaHira = {};

var formatDistance$1j = {};

formatDistance$1j.formatDistance = void 0;

const formatDistanceLocale$F = {
  lessThanXSeconds: {
    one: "1ã³ããã¿ã¾ã",
    other: "{{count}}ã³ããã¿ã¾ã",
    oneWithSuffix: "ãã1ã³ãã",
    otherWithSuffix: "ãã{{count}}ã³ãã",
  },

  xSeconds: {
    one: "1ã³ãã",
    other: "{{count}}ã³ãã",
  },

  halfAMinute: "30ã³ãã",

  lessThanXMinutes: {
    one: "1ã·ãã¿ã¾ã",
    other: "{{count}}ãµãã¿ã¾ã",
    oneWithSuffix: "ãã1ã·ã",
    otherWithSuffix: "ãã{{count}}ãµã",
  },

  xMinutes: {
    one: "1ã·ã",
    other: "{{count}}ãµã",
  },

  aboutXHours: {
    one: "ãã1ããã",
    other: "ãã{{count}}ããã",
  },

  xHours: {
    one: "1ããã",
    other: "{{count}}ããã",
  },

  xDays: {
    one: "1ã«ã¡",
    other: "{{count}}ã«ã¡",
  },

  aboutXWeeks: {
    one: "ãã1ããããã",
    other: "ãã{{count}}ããããã",
  },

  xWeeks: {
    one: "1ããããã",
    other: "{{count}}ããããã",
  },

  aboutXMonths: {
    one: "ãã1ããã¤",
    other: "ãã{{count}}ããã¤",
  },

  xMonths: {
    one: "1ããã¤",
    other: "{{count}}ããã¤",
  },

  aboutXYears: {
    one: "ãã1ã­ã",
    other: "ãã{{count}}ã­ã",
  },

  xYears: {
    one: "1ã­ã",
    other: "{{count}}ã­ã",
  },

  overXYears: {
    one: "1ã­ããããã",
    other: "{{count}}ã­ããããã",
  },

  almostXYears: {
    one: "1ã­ãã¡ãã",
    other: "{{count}}ã­ãã¡ãã",
  },
};

const formatDistance$1i = (token, count, options) => {
  options = options || {};

  let result;

  const tokenValue = formatDistanceLocale$F[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
    } else {
      result = tokenValue.other.replace("{{count}}", String(count));
    }
  }

  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "ãã¨";
    } else {
      return result + "ã¾ã";
    }
  }

  return result;
};
formatDistance$1j.formatDistance = formatDistance$1i;

var formatLong$F = {};

formatLong$F.formatLong = void 0;
var _index$2L = buildFormatLongFn$1;

const dateFormats$F = {
  full: "yã­ãMãã¤dã«ã¡EEEE",
  long: "yã­ãMãã¤dã«ã¡",
  medium: "y/MM/dd",
  short: "y/MM/dd",
};

const timeFormats$F = {
  full: "Hãmmãµãssã³ãã zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$F = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$F.formatLong = {
  date: (0, _index$2L.buildFormatLongFn)({
    formats: dateFormats$F,
    defaultWidth: "full",
  }),

  time: (0, _index$2L.buildFormatLongFn)({
    formats: timeFormats$F,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2L.buildFormatLongFn)({
    formats: dateTimeFormats$F,
    defaultWidth: "full",
  }),
});

var formatRelative$1j = {};

formatRelative$1j.formatRelative = void 0;

const formatRelativeLocale$F = {
  lastWeek: "ãããããã®eeeeã®p",
  yesterday: "ãã®ãã®p",
  today: "ãããã®p",
  tomorrow: "ãããã®p",
  nextWeek: "ãããããã®eeeeã®p",
  other: "P",
};

const formatRelative$1i = (token, _date, _baseDate, _options) => {
  return formatRelativeLocale$F[token];
};
formatRelative$1j.formatRelative = formatRelative$1i;

var localize$F = {};

localize$F.localize = void 0;

var _index$2K = buildLocalizeFn$1;

const eraValues$F = {
  narrow: ["BC", "AC"],
  abbreviated: ["ããããã", "ãããã"],
  wide: ["ããããã", "ãããã"],
};

const quarterValues$F = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["ã ã1ãã¯ãã", "ã ã2ãã¯ãã", "ã ã3ãã¯ãã", "ã ã4ãã¯ãã"],
};

const monthValues$F = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],

  abbreviated: [
    "1ãã¤",
    "2ãã¤",
    "3ãã¤",
    "4ãã¤",
    "5ãã¤",
    "6ãã¤",
    "7ãã¤",
    "8ãã¤",
    "9ãã¤",
    "10ãã¤",
    "11ãã¤",
    "12ãã¤",
  ],

  wide: [
    "1ãã¤",
    "2ãã¤",
    "3ãã¤",
    "4ãã¤",
    "5ãã¤",
    "6ãã¤",
    "7ãã¤",
    "8ãã¤",
    "9ãã¤",
    "10ãã¤",
    "11ãã¤",
    "12ãã¤",
  ],
};

const dayValues$F = {
  narrow: ["ã«ã¡", "ãã¤", "ã", "ãã", "ãã", "ãã", "ã©"],
  short: ["ã«ã¡", "ãã¤", "ã", "ãã", "ãã", "ãã", "ã©"],
  abbreviated: ["ã«ã¡", "ãã¤", "ã", "ãã", "ãã", "ãã", "ã©"],
  wide: [
    "ã«ã¡ããã³",
    "ãã¤ããã³",
    "ãããã³",
    "ããããã³",
    "ããããã³",
    "ããããã³",
    "ã©ããã³",
  ],
};

const dayPeriodValues$F = {
  narrow: {
    am: "ããã",
    pm: "ãã",
    midnight: "ããã",
    noon: "ãããã",
    morning: "ãã",
    afternoon: "ãã",
    evening: "ãã",
    night: "ããã",
  },
  abbreviated: {
    am: "ããã",
    pm: "ãã",
    midnight: "ããã",
    noon: "ãããã",
    morning: "ãã",
    afternoon: "ãã",
    evening: "ãã",
    night: "ããã",
  },
  wide: {
    am: "ããã",
    pm: "ãã",
    midnight: "ããã",
    noon: "ãããã",
    morning: "ãã",
    afternoon: "ãã",
    evening: "ãã",
    night: "ããã",
  },
};
const formattingDayPeriodValues$x = {
  narrow: {
    am: "ããã",
    pm: "ãã",
    midnight: "ããã",
    noon: "ãããã",
    morning: "ãã",
    afternoon: "ãã",
    evening: "ãã",
    night: "ããã",
  },
  abbreviated: {
    am: "ããã",
    pm: "ãã",
    midnight: "ããã",
    noon: "ãããã",
    morning: "ãã",
    afternoon: "ãã",
    evening: "ãã",
    night: "ããã",
  },
  wide: {
    am: "ããã",
    pm: "ãã",
    midnight: "ããã",
    noon: "ãããã",
    morning: "ãã",
    afternoon: "ãã",
    evening: "ãã",
    night: "ããã",
  },
};

const ordinalNumber$F = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = String(options?.unit);

  switch (unit) {
    case "year":
      return `${number}ã­ã`;
    case "quarter":
      return `ã ã${number}ãã¯ãã`;
    case "month":
      return `${number}ãã¤`;
    case "week":
      return `ã ã${number}ããã`;
    case "date":
      return `${number}ã«ã¡`;
    case "hour":
      return `${number}ã`;
    case "minute":
      return `${number}ãµã`;
    case "second":
      return `${number}ã³ãã`;
    default:
      return `${number}`;
  }
};

(localize$F.localize = {
  ordinalNumber: ordinalNumber$F,

  era: (0, _index$2K.buildLocalizeFn)({
    values: eraValues$F,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2K.buildLocalizeFn)({
    values: quarterValues$F,
    defaultWidth: "wide",
    argumentCallback: (quarter) => Number(quarter) - 1,
  }),

  month: (0, _index$2K.buildLocalizeFn)({
    values: monthValues$F,
    defaultWidth: "wide",
  }),

  day: (0, _index$2K.buildLocalizeFn)({
    values: dayValues$F,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2K.buildLocalizeFn)({
    values: dayPeriodValues$F,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$x,
    defaultFormattingWidth: "wide",
  }),
});

var match$F = {};

match$F.match = void 0;

var _index$2J = buildMatchFn$1;
var _index2$1k = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$F =
  /^ã ?ã?\d+(ã­ã|ãã¯ãã|ãã¤|ããã|ã«ã¡|ã|ãµã|ã³ãã)?/i;
const parseOrdinalNumberPattern$F = /\d+/i;

const matchEraPatterns$F = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(ããã[åå¾]|ãããã)/i,
  wide: /^(ããã[åå¾]|ãããã)/i,
};
const parseEraPatterns$F = {
  narrow: [/^B/i, /^A/i],
  any: [/^(ããããã)/i, /^(ãããã|ãããã)/i],
};

const matchQuarterPatterns$F = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^ã ã[1234ä¸äºä¸åï¼ï¼ï¼ï¼]ãã¯ãã/i,
};
const parseQuarterPatterns$F = {
  any: [/(1|ä¸|ï¼)/i, /(2|äº|ï¼)/i, /(3|ä¸|ï¼)/i, /(4|å|ï¼)/i],
};

const matchMonthPatterns$F = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])ãã¤/i,
  wide: /^([123456789]|1[012])ãã¤/i,
};
const parseMonthPatterns$F = {
  any: [
    /^1\D/,
    /^2/,
    /^3/,
    /^4/,
    /^5/,
    /^6/,
    /^7/,
    /^8/,
    /^9/,
    /^10/,
    /^11/,
    /^12/,
  ],
};

const matchDayPatterns$F = {
  narrow: /^(ã«ã¡|ãã¤|ã|ãã|ãã|ãã|ã©)/,
  short: /^(ã«ã¡|ãã¤|ã|ãã|ãã|ãã|ã©)/,
  abbreviated: /^(ã«ã¡|ãã¤|ã|ãã|ãã|ãã|ã©)/,
  wide: /^(ã«ã¡|ãã¤|ã|ãã|ãã|ãã|ã©)ããã³/,
};
const parseDayPatterns$F = {
  any: [/^ã«ã¡/, /^ãã¤/, /^ã/, /^ãã/, /^ãã/, /^ãã/, /^ã©/],
};

const matchDayPeriodPatterns$F = {
  any: /^(AM|PM|ããã|ãã|ãããã|ããã|ã¾ããªã|ãã|ãã)/i,
};
const parseDayPeriodPatterns$F = {
  any: {
    am: /^(A|ããã)/i,
    pm: /^(P|ãã)/i,
    midnight: /^ããã|ã¾ããªã/i,
    noon: /^ãããã/i,
    morning: /^ãã/i,
    afternoon: /^ãã/i,
    evening: /^ãã/i,
    night: /^ããã/i,
  },
};

(match$F.match = {
  ordinalNumber: (0, _index2$1k.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$F,
    parsePattern: parseOrdinalNumberPattern$F,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index$2J.buildMatchFn)({
    matchPatterns: matchEraPatterns$F,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$F,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2J.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$F,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$F,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2J.buildMatchFn)({
    matchPatterns: matchMonthPatterns$F,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$F,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2J.buildMatchFn)({
    matchPatterns: matchDayPatterns$F,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$F,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2J.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$F,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$F,
    defaultParseWidth: "any",
  }),
});

jaHira.jaHira = void 0;
var _index$2I = formatDistance$1j;
var _index2$1j = formatLong$F;
var _index3$F = formatRelative$1j;
var _index4$F = localize$F;
var _index5$F = match$F;

/**
 * @category Locales
 * @summary Japanese (Hiragana) locale.
 * @language Japanese (Hiragana)
 * @iso-639-2 jpn
 * @author Eri Hiramatsu [@Eritutteo](https://github.com/Eritutteo)
 */
(jaHira.jaHira = {
  code: "ja-Hira",
  formatDistance: _index$2I.formatDistance,
  formatLong: _index2$1j.formatLong,
  formatRelative: _index3$F.formatRelative,
  localize: _index4$F.localize,
  match: _index5$F.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var ka = {};

var formatDistance$1h = {};

formatDistance$1h.formatDistance = void 0;

const formatDistanceLocale$E = {
  lessThanXSeconds: {
    past: "{{count}} á¬áááá ááááááá á®ááá¡ á¬áá",
    present: "{{count}} á¬áááá ááááááá",
    future: "{{count}} á¬áááá ááááááá¨á",
  },

  xSeconds: {
    past: "{{count}} á¬áááá¡ á¬áá",
    present: "{{count}} á¬ááá",
    future: "{{count}} á¬ááá¨á",
  },

  halfAMinute: {
    past: "ááá®áááá á á¬á£ááá¡ á¬áá",
    present: "ááá®áááá á á¬á£áá",
    future: "ááá®áááá á á¬á£áá¨á",
  },

  lessThanXMinutes: {
    past: "{{count}} á¬á£ááá ááááááá á®ááá¡ á¬áá",
    present: "{{count}} á¬á£ááá ááááááá",
    future: "{{count}} á¬á£ááá ááááááá¨á",
  },

  xMinutes: {
    past: "{{count}} á¬á£ááá¡ á¬áá",
    present: "{{count}} á¬á£áá",
    future: "{{count}} á¬á£áá¨á",
  },

  aboutXHours: {
    past: "áááá®áááááá {{count}} á¡ááááá¡ á¬áá",
    present: "áááá®áááááá {{count}} á¡áááá",
    future: "áááá®áááááá {{count}} á¡áááá¨á",
  },

  xHours: {
    past: "{{count}} á¡ááááá¡ á¬áá",
    present: "{{count}} á¡áááá",
    future: "{{count}} á¡áááá¨á",
  },

  xDays: {
    past: "{{count}} áá¦áá¡ á¬áá",
    present: "{{count}} áá¦á",
    future: "{{count}} áá¦áá¨á",
  },

  aboutXWeeks: {
    past: "áááá®áááááá {{count}} áááá áá¡ á¬áá",
    present: "áááá®áááááá {{count}} áááá á",
    future: "áááá®áááááá {{count}} áááá áá¨á",
  },

  xWeeks: {
    past: "{{count}} áááá áá¡ áááá á",
    present: "{{count}} áááá á",
    future: "{{count}} áááá áá¨á",
  },

  aboutXMonths: {
    past: "áááá®áááááá {{count}} áááá¡ á¬áá",
    present: "áááá®áááááá {{count}} ááá",
    future: "áááá®áááááá {{count}} áááá¨á",
  },

  xMonths: {
    past: "{{count}} áááá¡ á¬áá",
    present: "{{count}} ááá",
    future: "{{count}} áááá¨á",
  },

  aboutXYears: {
    past: "áááá®áááááá {{count}} á¬ááá¡ á¬áá",
    present: "áááá®áááááá {{count}} á¬ááá",
    future: "áááá®áááááá {{count}} á¬ááá¨á",
  },

  xYears: {
    past: "{{count}} á¬ááá¡ á¬áá",
    present: "{{count}} á¬ááá",
    future: "{{count}} á¬ááá¨á",
  },

  overXYears: {
    past: "{{count}} á¬áááá ááá¢á á®ááá¡ á¬áá",
    present: "{{count}} á¬áááá ááá¢á",
    future: "{{count}} á¬áááá ááá¢á á®ááá¡ á¨ááááá",
  },

  almostXYears: {
    past: "áááá¥ááá¡ {{count}} á¬ááá¡ á¬áá",
    present: "áááá¥ááá¡ {{count}} á¬ááá",
    future: "áááá¥ááá¡ {{count}} á¬ááá¨á",
  },
};

const formatDistance$1g = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$E[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (
    options?.addSuffix &&
    options.comparison &&
    options.comparison > 0
  ) {
    result = tokenValue.future.replace("{{count}}", String(count));
  } else if (options?.addSuffix) {
    result = tokenValue.past.replace("{{count}}", String(count));
  } else {
    result = tokenValue.present.replace("{{count}}", String(count));
  }

  return result;
};
formatDistance$1h.formatDistance = formatDistance$1g;

var formatLong$E = {};

formatLong$E.formatLong = void 0;
var _index$2H = buildFormatLongFn$1;

const dateFormats$E = {
  full: "EEEE, do MMMM, y",
  long: "do, MMMM, y",
  medium: "d, MMM, y",
  short: "dd/MM/yyyy",
};

const timeFormats$E = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$E = {
  full: "{{date}} {{time}}'-áá'",
  long: "{{date}} {{time}}'-áá'",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$E.formatLong = {
  date: (0, _index$2H.buildFormatLongFn)({
    formats: dateFormats$E,
    defaultWidth: "full",
  }),

  time: (0, _index$2H.buildFormatLongFn)({
    formats: timeFormats$E,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2H.buildFormatLongFn)({
    formats: dateTimeFormats$E,
    defaultWidth: "full",
  }),
});

var formatRelative$1h = {};

formatRelative$1h.formatRelative = void 0;

const formatRelativeLocale$E = {
  lastWeek: "'á¬ááá' eeee p'-áá'",
  yesterday: "'áá£á¨áá' p'-áá'",
  today: "'áá¦áá¡' p'-áá'",
  tomorrow: "'á®ááá' p'-áá'",
  nextWeek: "'á¨áááááá' eeee p'-áá'",
  other: "P",
};

const formatRelative$1g = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$E[token];
formatRelative$1h.formatRelative = formatRelative$1g;

var localize$E = {};

localize$E.localize = void 0;
var _index$2G = buildLocalizeFn$1;

const eraValues$E = {
  narrow: ["á©.á¬-ááá", "á©.á¬"],
  abbreviated: ["á©á.á¬-ááá", "á©á.á¬"],
  wide: ["á©áááá¡ á¬ááááá¦á ááªá®ááááá", "á©áááá á¬ááááá¦á ááªá®ááá"],
};

const quarterValues$E = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-áá áá", "2-á áá", "3-á áá", "4-á áá"],
  wide: ["1-áá áááá á¢ááá", "2-á áááá á¢ááá", "3-á áááá á¢ááá", "4-á áááá á¢ááá"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$E = {
  narrow: [
    "áá",
    "áá",
    "áá",
    "áá",
    "áá¡",
    "áá",
    "áá",
    "áá",
    "á¡á",
    "áá¥",
    "áá",
    "áá",
  ],

  abbreviated: [
    "ááá",
    "ááá",
    "ááá ",
    "ááá ",
    "ááá",
    "ááá",
    "ááá",
    "ááá",
    "á¡áá¥",
    "áá¥á¢",
    "ááá",
    "ááá",
  ],

  wide: [
    "áááááá á",
    "ááááá áááá",
    "ááá á¢á",
    "ááá ááá",
    "áááá¡á",
    "ááááá¡á",
    "ááááá¡á",
    "ááááá¡á¢á",
    "á¡áá¥á¢ááááá á",
    "áá¥á¢ááááá á",
    "ááááááá á",
    "áááááááá á",
  ],
};

const dayValues$E = {
  narrow: ["áá", "áá ", "á¡á", "áá", "á®á£", "áá", "á¨á"],
  short: ["ááá", "áá á¨", "á¡áá", "ááá®", "á®á£á", "ááá ", "á¨áá"],
  abbreviated: ["ááá", "áá á¨", "á¡áá", "ááá®", "á®á£á", "ááá ", "á¨áá"],
  wide: [
    "áááá á",
    "áá á¨ááááá",
    "á¡ááá¨ááááá",
    "ááá®á¨ááááá",
    "á®á£áá¨ááááá",
    "ááá áá¡áááá",
    "á¨ááááá",
  ],
};

const dayPeriodValues$E = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "á¨á£áá¦ááá",
    noon: "á¨á£ááá¦á",
    morning: "áááá",
    afternoon: "á¡áá¦ááá",
    evening: "á¡áá¦ááá",
    night: "á¦ááá",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "á¨á£áá¦ááá",
    noon: "á¨á£ááá¦á",
    morning: "áááá",
    afternoon: "á¡áá¦ááá",
    evening: "á¡áá¦ááá",
    night: "á¦ááá",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "á¨á£áá¦ááá",
    noon: "á¨á£ááá¦á",
    morning: "áááá",
    afternoon: "á¡áá¦ááá",
    evening: "á¡áá¦ááá",
    night: "á¦ááá",
  },
};

const formattingDayPeriodValues$w = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "á¨á£áá¦áááá",
    noon: "á¨á£ááá¦áá¡áá¡",
    morning: "ááááá",
    afternoon: "ááá¨á£ááá¦ááá¡",
    evening: "á¡áá¦áááá¡",
    night: "á¦áááá",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "á¨á£áá¦áááá",
    noon: "á¨á£ááá¦áá¡áá¡",
    morning: "ááááá",
    afternoon: "ááá¨á£ááá¦ááá¡",
    evening: "á¡áá¦áááá¡",
    night: "á¦áááá",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "á¨á£áá¦áááá",
    noon: "á¨á£ááá¦áá¡áá¡",
    morning: "ááááá",
    afternoon: "ááá¨á£ááá¦ááá¡",
    evening: "á¡áá¦áááá¡",
    night: "á¦áááá",
  },
};

const ordinalNumber$E = (dirtyNumber) => {
  const number = Number(dirtyNumber);

  if (number === 1) {
    return number + "-áá";
  }

  return number + "-á";
};

(localize$E.localize = {
  ordinalNumber: ordinalNumber$E,

  era: (0, _index$2G.buildLocalizeFn)({
    values: eraValues$E,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2G.buildLocalizeFn)({
    values: quarterValues$E,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2G.buildLocalizeFn)({
    values: monthValues$E,
    defaultWidth: "wide",
  }),

  day: (0, _index$2G.buildLocalizeFn)({
    values: dayValues$E,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2G.buildLocalizeFn)({
    values: dayPeriodValues$E,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$w,
    defaultFormattingWidth: "wide",
  }),
});

var match$E = {};

match$E.match = void 0;

var _index$2F = buildMatchFn$1;
var _index2$1i = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$E = /^(\d+)(-áá|-á)?/i;
const parseOrdinalNumberPattern$E = /\d+/i;

const matchEraPatterns$E = {
  narrow: /^(á©á?\.á¬)/i,
  abbreviated: /^(á©á?\.á¬)/i,
  wide: /^(á©áááá¡ á¬ááááá¦á ááªá®ááááá|á¥á áá¡á¢áá¨áááááá|á©áááá á¬ááááá¦á ááªá®ááá|á¥á áá¡á¢áá¨áááááá)/i,
};
const parseEraPatterns$E = {
  any: [
    /^(á©áááá¡ á¬ááááá¦á ááªá®ááááá|á¥á áá¡á¢áá¨áááááá)/i,
    /^(á©áááá á¬ááááá¦á ááªá®ááá|á¥á áá¡á¢áá¨áááááá)/i,
  ],
};

const matchQuarterPatterns$E = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-(áá|á)? áá/i,
  wide: /^[1234]-(áá|á)? áááá á¢ááá/i,
};
const parseQuarterPatterns$E = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$E = {
  any: /^(áá|áá|áá|áá|áá¡|áá|áá|áá|á¡á|áá¥|áá|áá)/i,
};
const parseMonthPatterns$E = {
  any: [
    /^áá/i,
    /^á/i,
    /^ááá /i,
    /^áá/i,
    /^ááá/i,
    /^á?áá/i,
    /^á?áá/i,
    /^áá/i,
    /^á¡/i,
    /^á/i,
    /^á/i,
    /^á/i,
  ],
};

const matchDayPatterns$E = {
  narrow: /^(áá|áá |á¡á|áá|á®á£|áá|á¨á)/i,
  short: /^(ááá|áá á¨|á¡áá|ááá®|á®á£á|ááá |á¨áá)/i,
  wide: /^(áááá á|áá á¨ááááá|á¡ááá¨ááááá|ááá®á¨ááááá|á®á£áá¨ááááá|ááá áá¡áááá|á¨ááááá)/i,
};
const parseDayPatterns$E = {
  any: [/^áá/i, /^áá /i, /^á¡á/i, /^áá/i, /^á®á£/i, /^áá/i, /^á¨á/i],
};

const matchDayPeriodPatterns$E = {
  any: /^([ap]\.?\s?m\.?|á¨á£áá¦|ááá)/i,
};
const parseDayPeriodPatterns$E = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^á¨á£áá¦/i,
    noon: /^á¨á£ááá¦/i,
    morning: /^ááá/i,
    afternoon: /ááá¨á£ááá¦ááá¡/i,
    evening: /á¡áá¦ááá/i,
    night: /á¦áá/i,
  },
};

(match$E.match = {
  ordinalNumber: (0, _index2$1i.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$E,
    parsePattern: parseOrdinalNumberPattern$E,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2F.buildMatchFn)({
    matchPatterns: matchEraPatterns$E,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$E,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2F.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$E,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$E,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2F.buildMatchFn)({
    matchPatterns: matchMonthPatterns$E,
    defaultMatchWidth: "any",
    parsePatterns: parseMonthPatterns$E,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2F.buildMatchFn)({
    matchPatterns: matchDayPatterns$E,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$E,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2F.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$E,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$E,
    defaultParseWidth: "any",
  }),
});

ka.ka = void 0;
var _index$2E = formatDistance$1h;
var _index2$1h = formatLong$E;
var _index3$E = formatRelative$1h;
var _index4$E = localize$E;
var _index5$E = match$E;

/**
 * @category Locales
 * @summary Georgian locale.
 * @language Georgian
 * @iso-639-2 geo
 * @author Lado Lomidze [@Landish](https://github.com/Landish)
 * @author Nick Shvelidze [@shvelo](https://github.com/shvelo)
 */
(ka.ka = {
  code: "ka",
  formatDistance: _index$2E.formatDistance,
  formatLong: _index2$1h.formatLong,
  formatRelative: _index3$E.formatRelative,
  localize: _index4$E.localize,
  match: _index5$E.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var kk = {};

var formatDistance$1f = {};

formatDistance$1f.formatDistance = void 0;

const formatDistanceLocale$D = {
  lessThanXSeconds: {
    regular: {
      one: "1 ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ Ð°Ð·",
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ Ð°Ð·",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ Ð°Ð·",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ Ð°Ð·",
    },
    future: {
      one: "Ð±ÑÑ ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  xSeconds: {
    regular: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´",
    },
    past: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´ Ð±Ò±ÑÑÐ½",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ Ð±Ò±ÑÑÐ½",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ Ð±Ò±ÑÑÐ½",
    },
    future: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  halfAMinute: (options) => {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "Ð¶Ð°ÑÑÑ Ð¼Ð¸Ð½ÑÑ ÑÑÑÐ½Ð´Ðµ";
      } else {
        return "Ð¶Ð°ÑÑÑ Ð¼Ð¸Ð½ÑÑ Ð±Ò±ÑÑÐ½";
      }
    }

    return "Ð¶Ð°ÑÑÑ Ð¼Ð¸Ð½ÑÑ";
  },

  lessThanXMinutes: {
    regular: {
      one: "1 Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ Ð°Ð·",
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ Ð°Ð·",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ Ð°Ð·",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ Ð°Ð·",
    },
    future: {
      one: "Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¼ ",
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¼",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¼",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¼",
    },
  },

  xMinutes: {
    regular: {
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑ",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑ",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑ",
    },
    past: {
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑ Ð±Ò±ÑÑÐ½",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑ Ð±Ò±ÑÑÐ½",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑ Ð±Ò±ÑÑÐ½",
    },
    future: {
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  aboutXHours: {
    regular: {
      singularNominative: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} ÑÐ°ÒÐ°Ñ",
      singularGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} ÑÐ°ÒÐ°Ñ",
      pluralGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} ÑÐ°ÒÐ°Ñ",
    },
    future: {
      singularNominative: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} ÑÐ°ÒÐ°ÑÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} ÑÐ°ÒÐ°ÑÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} ÑÐ°ÒÐ°ÑÑÐ°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  xHours: {
    regular: {
      singularNominative: "{{count}} ÑÐ°ÒÐ°Ñ",
      singularGenitive: "{{count}} ÑÐ°ÒÐ°Ñ",
      pluralGenitive: "{{count}} ÑÐ°ÒÐ°Ñ",
    },
  },

  xDays: {
    regular: {
      singularNominative: "{{count}} ÐºÒ¯Ð½",
      singularGenitive: "{{count}} ÐºÒ¯Ð½",
      pluralGenitive: "{{count}} ÐºÒ¯Ð½",
    },
    future: {
      singularNominative: "{{count}} ÐºÒ¯Ð½Ð½ÐµÐ½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "{{count}} ÐºÒ¯Ð½Ð½ÐµÐ½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "{{count}} ÐºÒ¯Ð½Ð½ÐµÐ½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  aboutXWeeks: {
    type: "weeks",
    one: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ 1 Ð°Ð¿ÑÐ°",
    other: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¿ÑÐ°",
  },

  xWeeks: {
    type: "weeks",
    one: "1 Ð°Ð¿ÑÐ°",
    other: "{{count}} Ð°Ð¿ÑÐ°",
  },

  aboutXMonths: {
    regular: {
      singularNominative: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¹",
      singularGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¹",
      pluralGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¹",
    },
    future: {
      singularNominative: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¹Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¹Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð°Ð¹Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  xMonths: {
    regular: {
      singularNominative: "{{count}} Ð°Ð¹",
      singularGenitive: "{{count}} Ð°Ð¹",
      pluralGenitive: "{{count}} Ð°Ð¹",
    },
  },

  aboutXYears: {
    regular: {
      singularNominative: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð¶ÑÐ»",
      singularGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð¶ÑÐ»",
      pluralGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð¶ÑÐ»",
    },
    future: {
      singularNominative: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "ÑÐ°Ð¼Ð°Ð¼ÐµÐ½ {{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  xYears: {
    regular: {
      singularNominative: "{{count}} Ð¶ÑÐ»",
      singularGenitive: "{{count}} Ð¶ÑÐ»",
      pluralGenitive: "{{count}} Ð¶ÑÐ»",
    },
    future: {
      singularNominative: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },

  overXYears: {
    regular: {
      singularNominative: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ Ð°ÑÑÐ°Ð¼",
      singularGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ Ð°ÑÑÐ°Ð¼",
      pluralGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ Ð°ÑÑÐ°Ð¼",
    },
    future: {
      singularNominative: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ Ð°ÑÑÐ°Ð¼",
      singularGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ Ð°ÑÑÐ°Ð¼",
      pluralGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ Ð°ÑÑÐ°Ð¼",
    },
  },

  almostXYears: {
    regular: {
      singularNominative: "{{count}} Ð¶ÑÐ»ÒÐ° Ð¶Ð°ÒÑÐ½",
      singularGenitive: "{{count}} Ð¶ÑÐ»ÒÐ° Ð¶Ð°ÒÑÐ½",
      pluralGenitive: "{{count}} Ð¶ÑÐ»ÒÐ° Ð¶Ð°ÒÑÐ½",
    },
    future: {
      singularNominative: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      singularGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
      pluralGenitive: "{{count}} Ð¶ÑÐ»Ð´Ð°Ð½ ÐºÐµÐ¹ÑÐ½",
    },
  },
};

function declension$4(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one && count === 1) return scheme.one;

  const rem10 = count % 10;
  const rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}

const formatDistance$1e = (token, count, options) => {
  const tokenValue = formatDistanceLocale$D[token];

  if (typeof tokenValue === "function") return tokenValue(options);

  if (tokenValue.type === "weeks") {
    return count === 1
      ? tokenValue.one
      : tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (tokenValue.future) {
        return declension$4(tokenValue.future, count);
      } else {
        return declension$4(tokenValue.regular, count) + " ÐºÐµÐ¹ÑÐ½";
      }
    } else {
      if (tokenValue.past) {
        return declension$4(tokenValue.past, count);
      } else {
        return declension$4(tokenValue.regular, count) + " Ð±Ò±ÑÑÐ½";
      }
    }
  } else {
    return declension$4(tokenValue.regular, count);
  }
};
formatDistance$1f.formatDistance = formatDistance$1e;

var formatLong$D = {};

formatLong$D.formatLong = void 0;
var _index$2D = buildFormatLongFn$1;

const dateFormats$D = {
  full: "EEEE, do MMMM y 'Ð¶.'",
  long: "do MMMM y 'Ð¶.'",
  medium: "d MMM y 'Ð¶.'",
  short: "dd.MM.yyyy",
};

const timeFormats$D = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$D = {
  any: "{{date}}, {{time}}",
};

(formatLong$D.formatLong = {
  date: (0, _index$2D.buildFormatLongFn)({
    formats: dateFormats$D,
    defaultWidth: "full",
  }),

  time: (0, _index$2D.buildFormatLongFn)({
    formats: timeFormats$D,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2D.buildFormatLongFn)({
    formats: dateTimeFormats$D,
    defaultWidth: "any",
  }),
});

var formatRelative$1f = {};

formatRelative$1f.formatRelative = void 0;
var _index$2C = isSameWeek$1;

const accusativeWeekdays$3 = [
  "Ð¶ÐµÐºÑÐµÐ½Ð±ÑÐ´Ðµ",
  "Ð´Ò¯Ð¹ÑÐµÐ½Ð±ÑÐ´Ðµ",
  "ÑÐµÐ¹ÑÐµÐ½Ð±ÑÐ´Ðµ",
  "ÑÓÑÑÐµÐ½Ð±ÑÐ´Ðµ",
  "Ð±ÐµÐ¹ÑÐµÐ½Ð±ÑÐ´Ðµ",
  "Ð¶Ò±Ð¼Ð°Ð´Ð°",
  "ÑÐµÐ½Ð±ÑÐ´Ðµ",
];

function lastWeek$4(day) {
  const weekday = accusativeWeekdays$3[day];

  return "'Ó©ÑÐºÐµÐ½ " + weekday + " ÑÐ°ÒÐ°Ñ' p'-Ð´Ðµ'";
}

function thisWeek$4(day) {
  const weekday = accusativeWeekdays$3[day];

  return "'" + weekday + " ÑÐ°ÒÐ°Ñ' p'-Ð´Ðµ'";
}

function nextWeek$4(day) {
  const weekday = accusativeWeekdays$3[day];

  return "'ÐºÐµÐ»ÐµÑÑ " + weekday + " ÑÐ°ÒÐ°Ñ' p'-Ð´Ðµ'";
}

const formatRelativeLocale$D = {
  lastWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$2C.isSameWeek)(date, baseDate, options)) {
      return thisWeek$4(day);
    } else {
      return lastWeek$4(day);
    }
  },
  yesterday: "'ÐºÐµÑÐµ ÑÐ°ÒÐ°Ñ' p'-Ð´Ðµ'",
  today: "'Ð±Ò¯Ð³ÑÐ½ ÑÐ°ÒÐ°Ñ' p'-Ð´Ðµ'",
  tomorrow: "'ÐµÑÑÐµÒ£ ÑÐ°ÒÐ°Ñ' p'-Ð´Ðµ'",
  nextWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$2C.isSameWeek)(date, baseDate, options)) {
      return thisWeek$4(day);
    } else {
      return nextWeek$4(day);
    }
  },
  other: "P",
};

const formatRelative$1e = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$D[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$1f.formatRelative = formatRelative$1e;

var localize$D = {};

localize$D.localize = void 0;
var _index$2B = buildLocalizeFn$1;

const eraValues$D = {
  narrow: ["Ð±.Ð·.Ð´.", "Ð±.Ð·."],
  abbreviated: ["Ð±.Ð·.Ð´.", "Ð±.Ð·."],
  wide: ["Ð±ÑÐ·Ð´ÑÒ£ Ð·Ð°Ð¼Ð°Ð½ÑÐ¼ÑÐ·ÒÐ° Ð´ÐµÐ¹ÑÐ½", "Ð±ÑÐ·Ð´ÑÒ£ Ð·Ð°Ð¼Ð°Ð½ÑÐ¼ÑÐ·"],
};

const quarterValues$D = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-ÑÑ ÑÐ¾Ò.", "2-ÑÑ ÑÐ¾Ò.", "3-ÑÑ ÑÐ¾Ò.", "4-ÑÑ ÑÐ¾Ò."],
  wide: ["1-ÑÑ ÑÐ¾ÒÑÐ°Ð½", "2-ÑÑ ÑÐ¾ÒÑÐ°Ð½", "3-ÑÑ ÑÐ¾ÒÑÐ°Ð½", "4-ÑÑ ÑÐ¾ÒÑÐ°Ð½"],
};

const monthValues$D = {
  narrow: ["Ò", "Ð", "Ð", "Ð¡", "Ð", "Ð", "Ð¨", "Ð¢", "Ò", "Ò", "Ò", "Ð"],
  abbreviated: [
    "ÒÐ°Ò£",
    "Ð°ÒÐ¿",
    "Ð½Ð°Ñ",
    "ÑÓÑ",
    "Ð¼Ð°Ð¼",
    "Ð¼Ð°Ñ",
    "ÑÑÐ»",
    "ÑÐ°Ð¼",
    "ÒÑÑ",
    "ÒÐ°Ð·",
    "ÒÐ°Ñ",
    "Ð¶ÐµÐ»",
  ],

  wide: [
    "ÒÐ°Ò£ÑÐ°Ñ",
    "Ð°ÒÐ¿Ð°Ð½",
    "Ð½Ð°ÑÑÑÐ·",
    "ÑÓÑÑÑ",
    "Ð¼Ð°Ð¼ÑÑ",
    "Ð¼Ð°ÑÑÑÐ¼",
    "ÑÑÐ»Ð´Ðµ",
    "ÑÐ°Ð¼ÑÐ·",
    "ÒÑÑÐºÒ¯Ð¹ÐµÐº",
    "ÒÐ°Ð·Ð°Ð½",
    "ÒÐ°ÑÐ°ÑÐ°",
    "Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½",
  ],
};
const formattingMonthValues$9 = {
  narrow: ["Ò", "Ð", "Ð", "Ð¡", "Ð", "Ð", "Ð¨", "Ð¢", "Ò", "Ò", "Ò", "Ð"],
  abbreviated: [
    "ÒÐ°Ò£",
    "Ð°ÒÐ¿",
    "Ð½Ð°Ñ",
    "ÑÓÑ",
    "Ð¼Ð°Ð¼",
    "Ð¼Ð°Ñ",
    "ÑÑÐ»",
    "ÑÐ°Ð¼",
    "ÒÑÑ",
    "ÒÐ°Ð·",
    "ÒÐ°Ñ",
    "Ð¶ÐµÐ»",
  ],

  wide: [
    "ÒÐ°Ò£ÑÐ°Ñ",
    "Ð°ÒÐ¿Ð°Ð½",
    "Ð½Ð°ÑÑÑÐ·",
    "ÑÓÑÑÑ",
    "Ð¼Ð°Ð¼ÑÑ",
    "Ð¼Ð°ÑÑÑÐ¼",
    "ÑÑÐ»Ð´Ðµ",
    "ÑÐ°Ð¼ÑÐ·",
    "ÒÑÑÐºÒ¯Ð¹ÐµÐº",
    "ÒÐ°Ð·Ð°Ð½",
    "ÒÐ°ÑÐ°ÑÐ°",
    "Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½",
  ],
};

const dayValues$D = {
  narrow: ["Ð", "Ð", "Ð¡", "Ð¡", "Ð", "Ð", "Ð¡"],
  short: ["Ð¶Ñ", "Ð´Ñ", "ÑÑ", "ÑÑ", "Ð±Ñ", "Ð¶Ð¼", "ÑÐ±"],
  abbreviated: ["Ð¶Ñ", "Ð´Ñ", "ÑÑ", "ÑÑ", "Ð±Ñ", "Ð¶Ð¼", "ÑÐ±"],
  wide: [
    "Ð¶ÐµÐºÑÐµÐ½Ð±Ñ",
    "Ð´Ò¯Ð¹ÑÐµÐ½Ð±Ñ",
    "ÑÐµÐ¹ÑÐµÐ½Ð±Ñ",
    "ÑÓÑÑÐµÐ½Ð±Ñ",
    "Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ",
    "Ð¶Ò±Ð¼Ð°",
    "ÑÐµÐ½Ð±Ñ",
  ],
};

const dayPeriodValues$D = {
  narrow: {
    am: "Ð¢Ð",
    pm: "Ð¢Ð",
    midnight: "ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑ",
    noon: "ÑÒ¯Ñ",
    morning: "ÑÐ°Ò£",
    afternoon: "ÐºÒ¯Ð½Ð´ÑÐ·",
    evening: "ÐºÐµÑ",
    night: "ÑÒ¯Ð½",
  },
  wide: {
    am: "Ð¢Ð",
    pm: "Ð¢Ð",
    midnight: "ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑ",
    noon: "ÑÒ¯Ñ",
    morning: "ÑÐ°Ò£",
    afternoon: "ÐºÒ¯Ð½Ð´ÑÐ·",
    evening: "ÐºÐµÑ",
    night: "ÑÒ¯Ð½",
  },
};

const formattingDayPeriodValues$v = {
  narrow: {
    am: "Ð¢Ð",
    pm: "Ð¢Ð",
    midnight: "ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑÐ½Ð´Ð°",
    noon: "ÑÒ¯Ñ",
    morning: "ÑÐ°Ò£",
    afternoon: "ÐºÒ¯Ð½",
    evening: "ÐºÐµÑ",
    night: "ÑÒ¯Ð½",
  },
  wide: {
    am: "Ð¢Ð",
    pm: "Ð¢Ð",
    midnight: "ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑÐ½Ð´Ð°",
    noon: "ÑÒ¯ÑÑÐµ",
    morning: "ÑÐ°Ò£ÐµÑÑÐµÒ£",
    afternoon: "ÐºÒ¯Ð½Ð´ÑÐ·",
    evening: "ÐºÐµÑÑÐµ",
    night: "ÑÒ¯Ð½Ð´Ðµ",
  },
};

const suffixes = {
  0: "-ÑÑ",
  1: "-ÑÑ",
  2: "-ÑÑ",
  3: "-ÑÑ",
  4: "-ÑÑ",
  5: "-ÑÑ",
  6: "-ÑÑ",
  7: "-ÑÑ",
  8: "-ÑÑ",
  9: "-ÑÑ",
  10: "-ÑÑ",
  20: "-ÑÑ",
  30: "-ÑÑ",
  40: "-ÑÑ",
  50: "-ÑÑ",
  60: "-ÑÑ",
  70: "-ÑÑ",
  80: "-ÑÑ",
  90: "-ÑÑ",
  100: "-ÑÑ",
};

const ordinalNumber$D = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const mod10 = number % 10;
  const b = number >= 100 ? 100 : null;
  const suffix =
    suffixes[number] || suffixes[mod10] || (b && suffixes[b]) || "";

  return number + suffix;
};

(localize$D.localize = {
  ordinalNumber: ordinalNumber$D,

  era: (0, _index$2B.buildLocalizeFn)({
    values: eraValues$D,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2B.buildLocalizeFn)({
    values: quarterValues$D,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2B.buildLocalizeFn)({
    values: monthValues$D,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$9,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$2B.buildLocalizeFn)({
    values: dayValues$D,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2B.buildLocalizeFn)({
    values: dayPeriodValues$D,
    defaultWidth: "any",
    formattingValues: formattingDayPeriodValues$v,
    defaultFormattingWidth: "wide",
  }),
});

var match$D = {};

match$D.match = void 0;

var _index$2A = buildMatchFn$1;
var _index2$1g = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$D = /^(\d+)(-?(ÑÑ|ÑÑ))?/i;
const parseOrdinalNumberPattern$D = /\d+/i;

const matchEraPatterns$D = {
  narrow: /^((Ð± )?Ð·\.?\s?Ð´\.?)/i,
  abbreviated: /^((Ð± )?Ð·\.?\s?Ð´\.?)/i,
  wide: /^(Ð±ÑÐ·Ð´ÑÒ£ Ð·Ð°Ð¼Ð°Ð½ÑÐ¼ÑÐ·ÒÐ° Ð´ÐµÐ¹ÑÐ½|Ð±ÑÐ·Ð´ÑÒ£ Ð·Ð°Ð¼Ð°Ð½ÑÐ¼ÑÐ·|Ð±ÑÐ·Ð´ÑÒ£ Ð·Ð°Ð¼Ð°Ð½ÑÐ¼ÑÐ·Ð´Ð°Ð½)/i,
};
const parseEraPatterns$D = {
  any: [/^Ð±/i, /^Ð·/i],
};

const matchQuarterPatterns$D = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?ÑÑ)? ÑÐ¾Ò.?/i,
  wide: /^[1234](-?ÑÑ)? ÑÐ¾ÒÑÐ°Ð½/i,
};
const parseQuarterPatterns$D = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$D = {
  narrow: /^(Ò|Ð°|Ð½|Ñ|Ð¼|Ð¼Ð°Ñ|Ñ|Ñ|ÒÑÑ|ÒÐ°Ð·|ÒÐ°Ñ|Ð¶)/i,
  abbreviated: /^(ÒÐ°Ò£|Ð°ÒÐ¿|Ð½Ð°Ñ|ÑÓÑ|Ð¼Ð°Ð¼|Ð¼Ð°Ñ|ÑÑÐ»|ÑÐ°Ð¼|ÒÑÑ|ÒÐ°Ð·|ÒÐ°Ñ|Ð¶ÐµÐ»)/i,
  wide: /^(ÒÐ°Ò£ÑÐ°Ñ|Ð°ÒÐ¿Ð°Ð½|Ð½Ð°ÑÑÑÐ·|ÑÓÑÑÑ|Ð¼Ð°Ð¼ÑÑ|Ð¼Ð°ÑÑÑÐ¼|ÑÑÐ»Ð´Ðµ|ÑÐ°Ð¼ÑÐ·|ÒÑÑÐºÒ¯Ð¹ÐµÐº|ÒÐ°Ð·Ð°Ð½|ÒÐ°ÑÐ°ÑÐ°|Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½)/i,
};
const parseMonthPatterns$D = {
  narrow: [
    /^Ò/i,
    /^Ð°/i,
    /^Ð½/i,
    /^Ñ/i,
    /^Ð¼/i,
    /^Ð¼/i,
    /^Ñ/i,
    /^Ñ/i,
    /^Ò/i,
    /^Ò/i,
    /^Ò/i,
    /^Ð¶/i,
  ],

  abbreviated: [
    /^ÒÐ°Ò£/i,
    /^Ð°ÒÐ¿/i,
    /^Ð½Ð°Ñ/i,
    /^ÑÓÑ/i,
    /^Ð¼Ð°Ð¼/i,
    /^Ð¼Ð°Ñ/i,
    /^ÑÑÐ»/i,
    /^ÑÐ°Ð¼/i,
    /^ÒÑÑ/i,
    /^ÒÐ°Ð·/i,
    /^ÒÐ°Ñ/i,
    /^Ð¶ÐµÐ»/i,
  ],

  any: [
    /^Ò/i,
    /^Ð°/i,
    /^Ð½/i,
    /^Ñ/i,
    /^Ð¼/i,
    /^Ð¼/i,
    /^Ñ/i,
    /^Ñ/i,
    /^Ò/i,
    /^Ò/i,
    /^Ò/i,
    /^Ð¶/i,
  ],
};

const matchDayPatterns$D = {
  narrow: /^(Ð¶|Ð´|Ñ|Ñ|Ð±|Ð¶|Ñ)/i,
  short: /^(Ð¶Ñ|Ð´Ñ|ÑÑ|ÑÑ|Ð±Ñ|Ð¶Ð¼|ÑÐ±)/i,
  wide: /^(Ð¶ÐµÐºÑÐµÐ½Ð±Ñ|Ð´Ò¯Ð¹ÑÐµÐ½Ð±Ñ|ÑÐµÐ¹ÑÐµÐ½Ð±Ñ|ÑÓÑÑÐµÐ½Ð±Ñ|Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ|Ð¶Ò±Ð¼Ð°|ÑÐµÐ½Ð±Ñ)/i,
};
const parseDayPatterns$D = {
  narrow: [/^Ð¶/i, /^Ð´/i, /^Ñ/i, /^Ñ/i, /^Ð±/i, /^Ð¶/i, /^Ñ/i],
  short: [/^Ð¶Ñ/i, /^Ð´Ñ/i, /^ÑÑ/i, /^ÑÑ/i, /^Ð±Ñ/i, /^Ð¶Ð¼/i, /^ÑÐ±/i],
  any: [
    /^Ð¶[ÐµÐº]/i,
    /^Ð´[Ò¯Ð¹]/i,
    /^Ñe[Ð¹]/i,
    /^ÑÓ[Ñ]/i,
    /^Ð±[ÐµÐ¹]/i,
    /^Ð¶[Ò±Ð¼]/i,
    /^ÑÐµ[Ð½]/i,
  ],
};

const matchDayPeriodPatterns$D = {
  narrow:
    /^Ð¢\.?\s?[ÐÐ]\.?|ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑÐ½Ð´Ð°|((ÑÒ¯ÑÑÐµ|ÑÐ°Ò£ÐµÑÑÐµÒ£|ÑÐ°Ò£Ð´Ð°|ÑÐ°Ò£ÐµÑÑÐµÒ£|ÑÐ°Ò£Ð¼ÐµÐ½|ÑÐ°Ò£|ÐºÒ¯Ð½Ð´ÑÐ·|ÐºÒ¯Ð½|ÐºÐµÑÑÐµ|ÐºÐµÑ|ÑÒ¯Ð½Ð´Ðµ|ÑÒ¯Ð½)\.?)/i,
  wide: /^Ð¢\.?\s?[ÐÐ]\.?|ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑÐ½Ð´Ð°|((ÑÒ¯ÑÑÐµ|ÑÐ°Ò£ÐµÑÑÐµÒ£|ÑÐ°Ò£Ð´Ð°|ÑÐ°Ò£ÐµÑÑÐµÒ£|ÑÐ°Ò£Ð¼ÐµÐ½|ÑÐ°Ò£|ÐºÒ¯Ð½Ð´ÑÐ·|ÐºÒ¯Ð½|ÐºÐµÑÑÐµ|ÐºÐµÑ|ÑÒ¯Ð½Ð´Ðµ|ÑÒ¯Ð½)\.?)/i,
  any: /^Ð¢\.?\s?[ÐÐ]\.?|ÑÒ¯Ð½ Ð¾ÑÑÐ°ÑÑÐ½Ð´Ð°|((ÑÒ¯ÑÑÐµ|ÑÐ°Ò£ÐµÑÑÐµÒ£|ÑÐ°Ò£Ð´Ð°|ÑÐ°Ò£ÐµÑÑÐµÒ£|ÑÐ°Ò£Ð¼ÐµÐ½|ÑÐ°Ò£|ÐºÒ¯Ð½Ð´ÑÐ·|ÐºÒ¯Ð½|ÐºÐµÑÑÐµ|ÐºÐµÑ|ÑÒ¯Ð½Ð´Ðµ|ÑÒ¯Ð½)\.?)/i,
};
const parseDayPeriodPatterns$D = {
  any: {
    am: /^Ð¢Ð/i,
    pm: /^Ð¢Ð/i,
    midnight: /^ÑÒ¯Ð½ Ð¾ÑÑÐ°/i,
    noon: /^ÐºÒ¯Ð½Ð´ÑÐ·/i,
    morning: /ÑÐ°Ò£/i,
    afternoon: /ÑÒ¯Ñ/i,
    evening: /ÐºÐµÑ/i,
    night: /ÑÒ¯Ð½/i,
  },
};

(match$D.match = {
  ordinalNumber: (0, _index2$1g.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$D,
    parsePattern: parseOrdinalNumberPattern$D,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2A.buildMatchFn)({
    matchPatterns: matchEraPatterns$D,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$D,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2A.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$D,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$D,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2A.buildMatchFn)({
    matchPatterns: matchMonthPatterns$D,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$D,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2A.buildMatchFn)({
    matchPatterns: matchDayPatterns$D,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$D,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2A.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$D,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$D,
    defaultParseWidth: "any",
  }),
});

kk.kk = void 0;
var _index$2z = formatDistance$1f;
var _index2$1f = formatLong$D;
var _index3$D = formatRelative$1f;
var _index4$D = localize$D;
var _index5$D = match$D;

/**
 * @category Locales
 * @summary Kazakh locale.
 * @language Kazakh
 * @iso-639-2 kaz
 * @author Nikita Bayev [@drugoi](https://github.com/drugoi)
 */
(kk.kk = {
  code: "kk",
  formatDistance: _index$2z.formatDistance,
  formatLong: _index2$1f.formatLong,
  formatRelative: _index3$D.formatRelative,
  localize: _index4$D.localize,
  match: _index5$D.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var km = {};

var formatDistance$1d = {};

formatDistance$1d.formatDistance = void 0;

const formatDistanceLocale$C = {
  lessThanXSeconds: "áá·ááá¶á {{count}} áá·áá¶áá¸",
  xSeconds: "{{count}} áá·áá¶áá¸",
  halfAMinute: "ááááááá¶áá¸",
  lessThanXMinutes: "áá·ááá¶á {{count}} áá¶áá¸",
  xMinutes: "{{count}} áá¶áá¸",
  aboutXHours: "áááá áá {{count}} áááá",
  xHours: "{{count}} áááá",
  xDays: "{{count}} áááá",
  aboutXWeeks: "áááá áá {{count}} ááááá¶á á",
  xWeeks: "{{count}} ááááá¶á á",
  aboutXMonths: "áááá áá {{count}} áá",
  xMonths: "{{count}} áá",
  aboutXYears: "áááá áá {{count}} áááá¶á",
  xYears: "{{count}} áááá¶á",
  overXYears: "áá¶á {{count}} áááá¶á",
  almostXYears: "áá·á {{count}} áááá¶á",
};

const formatDistance$1c = (token, count, options) => {
  const tokenValue = formatDistanceLocale$C[token];

  let result = tokenValue;

  if (typeof count === "number") {
    result = result.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "áááá»ááááááá " + result;
    } else {
      return result + "áá»á";
    }
  }

  return result;
};
formatDistance$1d.formatDistance = formatDistance$1c;

var formatLong$C = {};

formatLong$C.formatLong = void 0;
var _index$2y = buildFormatLongFn$1;

const dateFormats$C = {
  full: "EEEE do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy",
};

const timeFormats$C = {
  full: "h:mm:ss a",
  long: "h:mm:ss a",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$C = {
  full: "{{date}} 'áááá' {{time}}",
  long: "{{date}} 'áááá' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$C.formatLong = {
  date: (0, _index$2y.buildFormatLongFn)({
    formats: dateFormats$C,
    defaultWidth: "full",
  }),

  time: (0, _index$2y.buildFormatLongFn)({
    formats: timeFormats$C,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2y.buildFormatLongFn)({
    formats: dateTimeFormats$C,
    defaultWidth: "full",
  }),
});

var formatRelative$1d = {};

formatRelative$1d.formatRelative = void 0;

const formatRelativeLocale$C = {
  lastWeek: "'áááá'eeee'áâáááá¶âá áâáá»ááááá' p",
  yesterday: "'áááá·ááá·ááááááá' p",
  today: "'ááááááááááá' p",
  tomorrow: "'ááááááá¢áááááá' p",
  nextWeek: "'áááá'eeee'áâáááá¶âá áâááááááááá' p",
  other: "P",
};

const formatRelative$1c = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$C[token];
formatRelative$1d.formatRelative = formatRelative$1c;

var localize$C = {};

localize$C.localize = void 0;
var _index$2x = buildLocalizeFn$1;

const eraValues$C = {
  narrow: ["á.áá", "áá"],
  abbreviated: ["áá»áá.á", "á.á"],
  wide: ["áá»ááááá·ááááááá¶á", "áááááá·ááááááá¶á"],
};

const quarterValues$C = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["áááá¸áá¶ááá¸ 1", "áááá¸áá¶ááá¸ 2", "áááá¸áá¶ááá¸ 3", "áááá¸áá¶ááá¸ 4"],
};

const monthValues$C = {
  narrow: [
    "á.á",
    "á.á",
    "áá·",
    "á.á",
    "á§.á",
    "á.á",
    "á.á",
    "áá¸",
    "áá",
    "áá»",
    "áá·",
    "á",
  ],

  abbreviated: [
    "áááá¶",
    "áá»áááá",
    "áá¸áá¶",
    "áááá¶",
    "á§ááá¶",
    "áá·áá»áá¶",
    "áááááá¶",
    "áá¸á á¶",
    "ááááá¶",
    "áá»áá¶",
    "áá·áááá·áá¶",
    "áááá¼",
  ],

  wide: [
    "áááá¶",
    "áá»áááá",
    "áá¸áá¶",
    "áááá¶",
    "á§ááá¶",
    "áá·áá»áá¶",
    "áááááá¶",
    "áá¸á á¶",
    "ááááá¶",
    "áá»áá¶",
    "áá·áááá·áá¶",
    "áááá¼",
  ],
};

const dayValues$C = {
  narrow: ["á¢á¶", "á", "á¢", "á", "ááá", "áá»", "á"],
  short: ["á¢á¶", "á", "á¢", "á", "ááá", "áá»", "á"],
  abbreviated: ["á¢á¶", "á", "á¢", "á", "ááá", "áá»", "á"],
  wide: ["á¢á¶áá·ááá", "áááá", "á¢áááá¶á", "áá»á", "áááá ááááá·á", "áá»ááá", "áááá"],
};

const dayPeriodValues$C = {
  narrow: {
    am: "áááá¹á",
    pm: "áááá¶á",
    midnight: "âáááááááá¶áá¢áááá¶ááá",
    noon: "áááááááááááá",
    morning: "ááááááá¹á",
    afternoon: "ááááááá",
    evening: "ááááááá¶á",
    night: "áááááá",
  },
  abbreviated: {
    am: "áááá¹á",
    pm: "áááá¶á",
    midnight: "âáááááááá¶áá¢áááá¶ááá",
    noon: "áááááááááááá",
    morning: "ááááááá¹á",
    afternoon: "ááááááá",
    evening: "ááááááá¶á",
    night: "áááááá",
  },
  wide: {
    am: "áááá¹á",
    pm: "áááá¶á",
    midnight: "âáááááááá¶áá¢áááá¶ááá",
    noon: "áááááááááááá",
    morning: "ááááááá¹á",
    afternoon: "ááááááá",
    evening: "ááááááá¶á",
    night: "áááááá",
  },
};

const formattingDayPeriodValues$u = {
  narrow: {
    am: "áááá¹á",
    pm: "áááá¶á",
    midnight: "âáááááááá¶áá¢áááá¶ááá",
    noon: "áááááááááááá",
    morning: "ááááááá¹á",
    afternoon: "ááááááá",
    evening: "ááááááá¶á",
    night: "áááááá",
  },
  abbreviated: {
    am: "áááá¹á",
    pm: "áááá¶á",
    midnight: "âáááááááá¶áá¢áááá¶ááá",
    noon: "áááááááááááá",
    morning: "ááááááá¹á",
    afternoon: "ááááááá",
    evening: "ááááááá¶á",
    night: "áááááá",
  },
  wide: {
    am: "áááá¹á",
    pm: "áááá¶á",
    midnight: "âáááááááá¶áá¢áááá¶ááá",
    noon: "áááááááááááá",
    morning: "ááááááá¹á",
    afternoon: "ááááááá",
    evening: "ááááááá¶á",
    night: "áááááá",
  },
};

const ordinalNumber$C = (dirtyNumber, _) => {
  const number = Number(dirtyNumber);
  return number.toString();
};

(localize$C.localize = {
  ordinalNumber: ordinalNumber$C,

  era: (0, _index$2x.buildLocalizeFn)({
    values: eraValues$C,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2x.buildLocalizeFn)({
    values: quarterValues$C,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2x.buildLocalizeFn)({
    values: monthValues$C,
    defaultWidth: "wide",
  }),

  day: (0, _index$2x.buildLocalizeFn)({
    values: dayValues$C,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2x.buildLocalizeFn)({
    values: dayPeriodValues$C,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$u,
    defaultFormattingWidth: "wide",
  }),
});

var match$C = {};

match$C.match = void 0;

var _index$2w = buildMatchFn$1;
var _index2$1e = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$C = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$C = /\d+/i;

const matchEraPatterns$C = {
  narrow: /^(á\.)?áá/i,
  abbreviated: /^(áá»á)?á\.á/i,
  wide: /^(áá»á|áá)áááá·ááááááá¶á/i,
};
const parseEraPatterns$C = {
  any: [/^(á|áá»á)á\.?á/i, /^(áá)?á\.?á/i],
};

const matchQuarterPatterns$C = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^(áááá¸áá¶á)(áá¸)?\s?[1234]/i,
};
const parseQuarterPatterns$C = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$C = {
  narrow: /^(á\.á|á\.á|áá·|á\.á|á§\.á|á\.á|á\.á|áá¸|áá|áá»|áá·|á)/i,
  abbreviated:
    /^(áááá¶|áá»áááá|áá¸áá¶|áááá¶|á§ááá¶|áá·áá»áá¶|áááááá¶|áá¸á á¶|ááááá¶|áá»áá¶|áá·áááá·áá¶|áááá¼)/i,
  wide: /^(áááá¶|áá»áááá|áá¸áá¶|áááá¶|á§ááá¶|áá·áá»áá¶|áááááá¶|áá¸á á¶|ááááá¶|áá»áá¶|áá·áááá·áá¶|áááá¼)/i,
};
const parseMonthPatterns$C = {
  narrow: [
    /^á\.á/i,
    /^á\.á/i,
    /^áá·/i,
    /^á\.á/i,
    /^á§\.á/i,
    /^á\.á/i,
    /^á\.á/i,
    /^áá¸/i,
    /^áá/i,
    /^áá»/i,
    /^áá·/i,
    /^á/i,
  ],

  any: [
    /^áá/i,
    /^áá»/i,
    /^áá¸á/i,
    /^áá/i,
    /^á§á/i,
    /^áá·á/i,
    /^áá/i,
    /^áá¸/i,
    /^áá/i,
    /^áá»/i,
    /^áá·á/i,
    /^á/i,
  ],
};

const matchDayPatterns$C = {
  narrow: /^(á¢á¶|á|á¢|á|ááá|áá»|á)/i,
  short: /^(á¢á¶|á|á¢|á|ááá|áá»|á)/i,
  abbreviated: /^(á¢á¶|á|á¢|á|ááá|áá»|á)/i,
  wide: /^(á¢á¶áá·ááá|áááá|á¢áááá¶á|áá»á|áááá ááááá·á|áá»ááá|áááá)/i,
};
const parseDayPatterns$C = {
  narrow: [/^á¢á¶/i, /^á/i, /^á¢/i, /^á/i, /^ááá/i, /^áá»/i, /^á/i],
  any: [/^á¢á¶/i, /^á/i, /^á¢/i, /^á/i, /^ááá/i, /^áá»/i, /^áá/i],
};

const matchDayPeriodPatterns$C = {
  narrow:
    /^(áááá¹á|áááá¶á|ááááááá¹á|áááááááááááá|ááááááá¶á|ááááááá|áááááá|áááááááá¶áá¢áááá¶ááá)/i,
  any: /^(áááá¹á|áááá¶á|ááááááá¹á|áááááááááááá|ááááááá¶á|ááááááá|áááááá|áááááááá¶áá¢áááá¶ááá)/i,
};

const parseDayPeriodPatterns$C = {
  any: {
    am: /^áááá¹á/i,
    pm: /^áááá¶á/i,
    midnight: /^áááááááá¶áá¢áááá¶ááá/i,
    noon: /^áááááááááááá/i,
    morning: /ááááááá¹á/i,
    afternoon: /ááááááá/i,
    evening: /ááááááá¶á/i,
    night: /áááááá/i,
  },
};

(match$C.match = {
  ordinalNumber: (0, _index2$1e.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$C,
    parsePattern: parseOrdinalNumberPattern$C,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index$2w.buildMatchFn)({
    matchPatterns: matchEraPatterns$C,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$C,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2w.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$C,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$C,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2w.buildMatchFn)({
    matchPatterns: matchMonthPatterns$C,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$C,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2w.buildMatchFn)({
    matchPatterns: matchDayPatterns$C,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$C,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2w.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$C,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$C,
    defaultParseWidth: "any",
  }),
});

km.km = void 0;
var _index$2v = formatDistance$1d;
var _index2$1d = formatLong$C;
var _index3$C = formatRelative$1d;
var _index4$C = localize$C;
var _index5$C = match$C;

/**
 * @category Locales
 * @summary Khmer locale (Cambodian).
 * @language Khmer
 * @iso-639-2 khm
 * @author Seanghay Yath [@seanghay](https://github.com/seanghay)
 */
(km.km = {
  code: "km",
  formatDistance: _index$2v.formatDistance,
  formatLong: _index2$1d.formatLong,
  formatRelative: _index3$C.formatRelative,
  localize: _index4$C.localize,
  match: _index5$C.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var kn = {};

var formatDistance$1b = {};

formatDistance$1b.formatDistance = void 0;

// note: no implementation for weeks

const formatDistanceLocale$B = {
  lessThanXSeconds: {
    one: {
      default: "1 à²¸à³à²à³à²à²¡à³âà²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      future: "1 à²¸à³à²à³à²à²¡à³âà²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      past: "1 à²¸à³à²à³à²à²¡à³âà²à²¿à²à²¤ à²à²¡à²¿à²®à³",
    },
    other: {
      default: "{{count}} à²¸à³à²à³à²à²¡à³âà²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      future: "{{count}} à²¸à³à²à³à²à²¡à³âà²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      past: "{{count}} à²¸à³à²à³à²à²¡à³âà²à²¿à²à²¤ à²à²¡à²¿à²®à³",
    },
  },

  xSeconds: {
    one: {
      default: "1 à²¸à³à²à³à²à²¡à³",
      future: "1 à²¸à³à²à³à²à²¡à³âà²¨à²²à³à²²à²¿",
      past: "1 à²¸à³à²à³à²à²¡à³ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "{{count}} à²¸à³à²à³à²à²¡à³à²à²³à³",
      future: "{{count}} à²¸à³à²à³à²à²¡à³âà²à²³à²²à³à²²à²¿",
      past: "{{count}} à²¸à³à²à³à²à²¡à³ à²¹à²¿à²à²¦à³",
    },
  },

  halfAMinute: {
    other: {
      default: "à²à²°à³à²§ à²¨à²¿à²®à²¿à²·",
      future: "à²à²°à³à²§ à²¨à²¿à²®à²¿à²·à²¦à²²à³à²²à²¿",
      past: "à²à²°à³à²§ à²¨à²¿à²®à²¿à²·à²¦ à²¹à²¿à²à²¦à³",
    },
  },

  lessThanXMinutes: {
    one: {
      default: "1 à²¨à²¿à²®à²¿à²·à²à³à²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      future: "1 à²¨à²¿à²®à²¿à²·à²à³à²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      past: "1 à²¨à²¿à²®à²¿à²·à²à³à²à²¿à²à²¤ à²à²¡à²¿à²®à³",
    },
    other: {
      default: "{{count}} à²¨à²¿à²®à²¿à²·à²à³à²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      future: "{{count}} à²¨à²¿à²®à²¿à²·à²à³à²à²¿à²à²¤ à²à²¡à²¿à²®à³",
      past: "{{count}} à²¨à²¿à²®à²¿à²·à²à³à²à²¿à²à²¤ à²à²¡à²¿à²®à³",
    },
  },

  xMinutes: {
    one: {
      default: "1 à²¨à²¿à²®à²¿à²·",
      future: "1 à²¨à²¿à²®à²¿à²·à²¦à²²à³à²²à²¿",
      past: "1 à²¨à²¿à²®à²¿à²·à²¦ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "{{count}} à²¨à²¿à²®à²¿à²·à²à²³à³",
      future: "{{count}} à²¨à²¿à²®à²¿à²·à²à²³à²²à³à²²à²¿",
      past: "{{count}} à²¨à²¿à²®à²¿à²·à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  aboutXHours: {
    one: {
      default: "à²¸à³à²®à²¾à²°à³ 1 à²à²à²à³",
      future: "à²¸à³à²®à²¾à²°à³ 1 à²à²à²à³à²¯à²²à³à²²à²¿",
      past: "à²¸à³à²®à²¾à²°à³ 1 à²à²à²à³ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "à²¸à³à²®à²¾à²°à³ {{count}} à²à²à²à³à²à²³à³",
      future: "à²¸à³à²®à²¾à²°à³ {{count}} à²à²à²à³à²à²³à²²à³à²²à²¿",
      past: "à²¸à³à²®à²¾à²°à³ {{count}} à²à²à²à³à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  xHours: {
    one: {
      default: "1 à²à²à²à³",
      future: "1 à²à²à²à³à²¯à²²à³à²²à²¿",
      past: "1 à²à²à²à³ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "{{count}} à²à²à²à³à²à²³à³",
      future: "{{count}} à²à²à²à³à²à²³à²²à³à²²à²¿",
      past: "{{count}} à²à²à²à³à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  xDays: {
    one: {
      default: "1 à²¦à²¿à²¨",
      future: "1 à²¦à²¿à²¨à²¦à²²à³à²²à²¿",
      past: "1 à²¦à²¿à²¨à²¦ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "{{count}} à²¦à²¿à²¨à²à²³à³",
      future: "{{count}} à²¦à²¿à²¨à²à²³à²²à³à²²à²¿",
      past: "{{count}} à²¦à²¿à²¨à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  // TODO
  // aboutXWeeks: {},

  // TODO
  // xWeeks: {},

  aboutXMonths: {
    one: {
      default: "à²¸à³à²®à²¾à²°à³ 1 à²¤à²¿à²à²à²³à³",
      future: "à²¸à³à²®à²¾à²°à³ 1 à²¤à²¿à²à²à²³à²²à³à²²à²¿",
      past: "à²¸à³à²®à²¾à²°à³ 1 à²¤à²¿à²à²à²³ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "à²¸à³à²®à²¾à²°à³ {{count}} à²¤à²¿à²à²à²³à³",
      future: "à²¸à³à²®à²¾à²°à³ {{count}} à²¤à²¿à²à²à²³à³à²à²³à²²à³à²²à²¿",
      past: "à²¸à³à²®à²¾à²°à³ {{count}} à²¤à²¿à²à²à²³à³à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  xMonths: {
    one: {
      default: "1 à²¤à²¿à²à²à²³à³",
      future: "1 à²¤à²¿à²à²à²³à²²à³à²²à²¿",
      past: "1 à²¤à²¿à²à²à²³ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "{{count}} à²¤à²¿à²à²à²³à³",
      future: "{{count}} à²¤à²¿à²à²à²³à³à²à²³à²²à³à²²à²¿",
      past: "{{count}} à²¤à²¿à²à²à²³à³à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  aboutXYears: {
    one: {
      default: "à²¸à³à²®à²¾à²°à³ 1 à²µà²°à³à²·",
      future: "à²¸à³à²®à²¾à²°à³ 1 à²µà²°à³à²·à²¦à²²à³à²²à²¿",
      past: "à²¸à³à²®à²¾à²°à³ 1 à²µà²°à³à²·à²¦ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "à²¸à³à²®à²¾à²°à³ {{count}} à²µà²°à³à²·à²à²³à³",
      future: "à²¸à³à²®à²¾à²°à³ {{count}} à²µà²°à³à²·à²à²³à²²à³à²²à²¿",
      past: "à²¸à³à²®à²¾à²°à³ {{count}} à²µà²°à³à²·à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  xYears: {
    one: {
      default: "1 à²µà²°à³à²·",
      future: "1 à²µà²°à³à²·à²¦à²²à³à²²à²¿",
      past: "1 à²µà²°à³à²·à²¦ à²¹à²¿à²à²¦à³",
    },
    other: {
      default: "{{count}} à²µà²°à³à²·à²à²³à³",
      future: "{{count}} à²µà²°à³à²·à²à²³à²²à³à²²à²¿",
      past: "{{count}} à²µà²°à³à²·à²à²³ à²¹à²¿à²à²¦à³",
    },
  },

  overXYears: {
    one: {
      default: "1 à²µà²°à³à²·à²¦ à²®à³à²²à³",
      future: "1 à²µà²°à³à²·à²¦ à²®à³à²²à³",
      past: "1 à²µà²°à³à²·à²¦ à²®à³à²²à³",
    },
    other: {
      default: "{{count}} à²µà²°à³à²·à²à²³ à²®à³à²²à³",
      future: "{{count}} à²µà²°à³à²·à²à²³ à²®à³à²²à³",
      past: "{{count}} à²µà²°à³à²·à²à²³ à²®à³à²²à³",
    },
  },

  almostXYears: {
    one: {
      default: "à²¬à²¹à³à²¤à³à² 1 à²µà²°à³à²·à²¦à²²à³à²²à²¿",
      future: "à²¬à²¹à³à²¤à³à² 1 à²µà²°à³à²·à²¦à²²à³à²²à²¿",
      past: "à²¬à²¹à³à²¤à³à² 1 à²µà²°à³à²·à²¦à²²à³à²²à²¿",
    },
    other: {
      default: "à²¬à²¹à³à²¤à³à² {{count}} à²µà²°à³à²·à²à²³à²²à³à²²à²¿",
      future: "à²¬à²¹à³à²¤à³à² {{count}} à²µà²°à³à²·à²à²³à²²à³à²²à²¿",
      past: "à²¬à²¹à³à²¤à³à² {{count}} à²µà²°à³à²·à²à²³à²²à³à²²à²¿",
    },
  },
};

function getResultByTense(parentToken, options) {
  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return parentToken.future;
    } else {
      return parentToken.past;
    }
  }
  return parentToken.default;
}

const formatDistance$1a = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$B[token];

  if (tokenValue.one && count === 1) {
    result = getResultByTense(tokenValue.one, options);
  } else {
    result = getResultByTense(tokenValue.other, options);
  }

  return result.replace("{{count}}", String(count));
};
formatDistance$1b.formatDistance = formatDistance$1a;

var formatLong$B = {};

formatLong$B.formatLong = void 0;
var _index$2u = buildFormatLongFn$1;

// Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html

const dateFormats$B = {
  full: "EEEE, MMMM d, y", // CLDR 1816
  long: "MMMM d, y", // CLDR 1817
  medium: "MMM d, y", // CLDR 1818
  short: "d/M/yy", // CLDR 1819
};

const timeFormats$B = {
  full: "hh:mm:ss a zzzz", // CLDR 1820
  long: "hh:mm:ss a z", // CLDR 1821
  medium: "hh:mm:ss a", // CLDR 1822
  short: "hh:mm a", // CLDR 1823
};

const dateTimeFormats$B = {
  full: "{{date}} {{time}}", // CLDR 1824
  long: "{{date}} {{time}}", // CLDR 1825
  medium: "{{date}} {{time}}", // CLDR 1826
  short: "{{date}} {{time}}", // CLDR 1827
};

(formatLong$B.formatLong = {
  date: (0, _index$2u.buildFormatLongFn)({
    formats: dateFormats$B,
    defaultWidth: "full",
  }),

  time: (0, _index$2u.buildFormatLongFn)({
    formats: timeFormats$B,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2u.buildFormatLongFn)({
    formats: dateTimeFormats$B,
    defaultWidth: "full",
  }),
});

var formatRelative$1b = {};

formatRelative$1b.formatRelative = void 0;

const formatRelativeLocale$B = {
  lastWeek: "'à²à²³à³à²¦' eeee p 'à²à³à²à³'",
  yesterday: "'à²¨à²¿à²¨à³à²¨à³' p 'à²à³à²à³'",
  today: "'à²à²à²¦à³' p 'à²à³à²à³'",
  tomorrow: "'à²¨à²¾à²³à³' p 'à²à³à²à³'",
  nextWeek: "eeee p 'à²à³à²à³'",
  other: "P",
};

const formatRelative$1a = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$B[token];
formatRelative$1b.formatRelative = formatRelative$1a;

var localize$B = {};

localize$B.localize = void 0;
var _index$2t = buildLocalizeFn$1;

// Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html

const eraValues$B = {
  narrow: ["à²à³à²°à²¿.à²ªà³", "à²à³à²°à²¿.à²¶"],
  abbreviated: ["à²à³à²°à²¿.à²ªà³", "à²à³à²°à²¿.à²¶"], // CLDR #1618, #1620
  wide: ["à²à³à²°à²¿à²¸à³à²¤ à²ªà³à²°à³à²µ", "à²à³à²°à²¿à²¸à³à²¤ à²¶à²"], // CLDR #1614, #1616
};

const quarterValues$B = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["à²¤à³à²°à³ 1", "à²¤à³à²°à³ 2", "à²¤à³à²°à³ 3", "à²¤à³à²°à³ 4"], // CLDR #1630 - #1638
  wide: ["1à²¨à³ à²¤à³à²°à³à²®à²¾à²¸à²¿à²", "2à²¨à³ à²¤à³à²°à³à²®à²¾à²¸à²¿à²", "3à²¨à³ à²¤à³à²°à³à²®à²¾à²¸à²¿à²", "4à²¨à³ à²¤à³à²°à³à²®à²¾à²¸à²¿à²"],
  // CLDR #1622 - #1629
};

// CLDR #1646 - #1717
const monthValues$B = {
  narrow: ["à²", "à²«à³", "à²®à²¾", "à²", "à²®à³", "à²à³", "à²à³", "à²", "à²¸à³", "à²", "à²¨", "à²¡à²¿"],

  abbreviated: [
    "à²à²¨",
    "à²«à³à²¬à³à²°",
    "à²®à²¾à²°à³à²à³",
    "à²à²ªà³à²°à²¿",
    "à²®à³",
    "à²à³à²¨à³",
    "à²à³à²²à³",
    "à²à²",
    "à²¸à³à²ªà³à²à³à²",
    "à²à²à³à²à³",
    "à²¨à²µà³à²",
    "à²¡à²¿à²¸à³à²",
  ],

  wide: [
    "à²à²¨à²µà²°à²¿",
    "à²«à³à²¬à³à²°à²µà²°à²¿",
    "à²®à²¾à²°à³à²à³",
    "à²à²ªà³à²°à²¿à²²à³",
    "à²®à³",
    "à²à³à²¨à³",
    "à²à³à²²à³",
    "à²à²à²¸à³à²à³",
    "à²¸à³à²ªà³à²à³à²à²¬à²°à³",
    "à²à²à³à²à³à²¬à²°à³",
    "à²¨à²µà³à²à²¬à²°à³",
    "à²¡à²¿à²¸à³à²à²¬à²°à³",
  ],
};

// CLDR #1718 - #1773
const dayValues$B = {
  narrow: ["à²­à²¾", "à²¸à³", "à²®à²", "à²¬à³", "à²à³", "à²¶à³", "à²¶"],
  short: ["à²­à²¾à²¨à³", "à²¸à³à²®", "à²®à²à²à²³", "à²¬à³à²§", "à²à³à²°à³", "à²¶à³à²à³à²°", "à²¶à²¨à²¿"],
  abbreviated: ["à²­à²¾à²¨à³", "à²¸à³à²®", "à²®à²à²à²³", "à²¬à³à²§", "à²à³à²°à³", "à²¶à³à²à³à²°", "à²¶à²¨à²¿"],
  wide: [
    "à²­à²¾à²¨à³à²µà²¾à²°",
    "à²¸à³à²®à²µà²¾à²°",
    "à²®à²à²à²³à²µà²¾à²°",
    "à²¬à³à²§à²µà²¾à²°",
    "à²à³à²°à³à²µà²¾à²°",
    "à²¶à³à²à³à²°à²µà²¾à²°",
    "à²¶à²¨à²¿à²µà²¾à²°",
  ],
};

// CLDR #1774 - #1815
const dayPeriodValues$B = {
  narrow: {
    am: "à²ªà³à²°à³à²µà²¾à²¹à³à²¨",
    pm: "à²à²ªà²°à²¾à²¹à³à²¨",
    midnight: "à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿",
    noon: "à²®à²§à³à²¯à²¾à²¹à³à²¨",
    morning: "à²¬à³à²³à²à³à²à³",
    afternoon: "à²®à²§à³à²¯à²¾à²¹à³à²¨",
    evening: "à²¸à²à²à³",
    night: "à²°à²¾à²¤à³à²°à²¿",
  },
  abbreviated: {
    am: "à²ªà³à²°à³à²µà²¾à²¹à³à²¨",
    pm: "à²à²ªà²°à²¾à²¹à³à²¨",
    midnight: "à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿",
    noon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    morning: "à²¬à³à²³à²à³à²à³",
    afternoon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    evening: "à²¸à²à²à³",
    night: "à²°à²¾à²¤à³à²°à²¿",
  },
  wide: {
    am: "à²ªà³à²°à³à²µà²¾à²¹à³à²¨",
    pm: "à²à²ªà²°à²¾à²¹à³à²¨",
    midnight: "à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿",
    noon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    morning: "à²¬à³à²³à²à³à²à³",
    afternoon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    evening: "à²¸à²à²à³",
    night: "à²°à²¾à²¤à³à²°à²¿",
  },
};

const formattingDayPeriodValues$t = {
  narrow: {
    am: "à²ªà³",
    pm: "à²",
    midnight: "à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿",
    noon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    morning: "à²¬à³à²³à²à³à²à³",
    afternoon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    evening: "à²¸à²à²à³",
    night: "à²°à²¾à²¤à³à²°à²¿",
  },
  abbreviated: {
    am: "à²ªà³à²°à³à²µà²¾à²¹à³à²¨",
    pm: "à²à²ªà²°à²¾à²¹à³à²¨",
    midnight: "à²®à²§à³à²¯ à²°à²¾à²¤à³à²°à²¿",
    noon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    morning: "à²¬à³à²³à²à³à²à³",
    afternoon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    evening: "à²¸à²à²à³",
    night: "à²°à²¾à²¤à³à²°à²¿",
  },
  wide: {
    am: "à²ªà³à²°à³à²µà²¾à²¹à³à²¨",
    pm: "à²à²ªà²°à²¾à²¹à³à²¨",
    midnight: "à²®à²§à³à²¯ à²°à²¾à²¤à³à²°à²¿",
    noon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    morning: "à²¬à³à²³à²à³à²à³",
    afternoon: "à²®à²§à³à²¯à²¾à²¨à³à²¹",
    evening: "à²¸à²à²à³",
    night: "à²°à²¾à²¤à³à²°à²¿",
  },
};

const ordinalNumber$B = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "à²¨à³";
};

(localize$B.localize = {
  ordinalNumber: ordinalNumber$B,

  era: (0, _index$2t.buildLocalizeFn)({
    values: eraValues$B,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2t.buildLocalizeFn)({
    values: quarterValues$B,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2t.buildLocalizeFn)({
    values: monthValues$B,
    defaultWidth: "wide",
  }),

  day: (0, _index$2t.buildLocalizeFn)({
    values: dayValues$B,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2t.buildLocalizeFn)({
    values: dayPeriodValues$B,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$t,
    defaultFormattingWidth: "wide",
  }),
});

var match$B = {};

match$B.match = void 0;

var _index$2s = buildMatchFn$1;
var _index2$1c = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$B = /^(\d+)(à²¨à³|à²¨à³)?/i;
const parseOrdinalNumberPattern$B = /\d+/i;

const matchEraPatterns$B = {
  narrow: /^(à²à³à²°à²¿.à²ªà³|à²à³à²°à²¿.à²¶)/i,
  abbreviated: /^(à²à³à²°à²¿\.?\s?à²ªà³\.?|à²à³à²°à²¿\.?\s?à²¶\.?|à²ªà³à²°\.?\s?à²¶\.?)/i,
  wide: /^(à²à³à²°à²¿à²¸à³à²¤ à²ªà³à²°à³à²µ|à²à³à²°à²¿à²¸à³à²¤ à²¶à²|à²ªà³à²°à²¸à²à³à²¤ à²¶à²)/i,
};
const parseEraPatterns$B = {
  any: [/^à²ªà³/i, /^(à²¶|à²ªà³à²°)/i],
};

const matchQuarterPatterns$B = {
  narrow: /^[1234]/i,
  abbreviated: /^à²¤à³à²°à³[1234]|à²¤à³à²°à³ [1234]| [1234]à²¤à³à²°à³/i,
  wide: /^[1234](à²¨à³)? à²¤à³à²°à³à²®à²¾à²¸à²¿à²/i,
};
const parseQuarterPatterns$B = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$B = {
  narrow: /^(à²à³|à²à³|à²|à²«à³|à²®à²¾|à²|à²®à³|à²|à²¸à³|à²|à²¨|à²¡à²¿)/i,
  abbreviated:
    /^(à²à²¨|à²«à³à²¬à³à²°|à²®à²¾à²°à³à²à³|à²à²ªà³à²°à²¿|à²®à³|à²à³à²¨à³|à²à³à²²à³|à²à²|à²¸à³à²ªà³à²à³à²|à²à²à³à²à³|à²¨à²µà³à²|à²¡à²¿à²¸à³à²)/i,
  wide: /^(à²à²¨à²µà²°à²¿|à²«à³à²¬à³à²°à²µà²°à²¿|à²®à²¾à²°à³à²à³|à²à²ªà³à²°à²¿à²²à³|à²®à³|à²à³à²¨à³|à²à³à²²à³|à²à²à²¸à³à²à³|à²¸à³à²ªà³à²à³à²à²¬à²°à³|à²à²à³à²à³à²¬à²°à³|à²¨à²µà³à²à²¬à²°à³|à²¡à²¿à²¸à³à²à²¬à²°à³)/i,
};
const parseMonthPatterns$B = {
  narrow: [
    /^à²$/i,
    /^à²«à³/i,
    /^à²®à²¾/i,
    /^à²/i,
    /^à²®à³/i,
    /^à²à³/i,
    /^à²à³$/i,
    /^à²/i,
    /^à²¸à³/i,
    /^à²/i,
    /^à²¨/i,
    /^à²¡à²¿/i,
  ],

  any: [
    /^à²à²¨/i,
    /^à²«à³/i,
    /^à²®à²¾/i,
    /^à²/i,
    /^à²®à³/i,
    /^à²à³à²¨à³/i,
    /^à²à³à²²à³/i,
    /^à²/i,
    /^à²¸à³/i,
    /^à²/i,
    /^à²¨/i,
    /^à²¡à²¿/i,
  ],
};

const matchDayPatterns$B = {
  narrow: /^(à²­à²¾|à²¸à³|à²®|à²¬à³|à²à³|à²¶à³|à²¶)/i,
  short: /^(à²­à²¾à²¨à³|à²¸à³à²®|à²®à²à²à²³|à²¬à³à²§|à²à³à²°à³|à²¶à³à²à³à²°|à²¶à²¨à²¿)/i,
  abbreviated: /^(à²­à²¾à²¨à³|à²¸à³à²®|à²®à²à²à²³|à²¬à³à²§|à²à³à²°à³|à²¶à³à²à³à²°|à²¶à²¨à²¿)/i,
  wide: /^(à²­à²¾à²¨à³à²µà²¾à²°|à²¸à³à²®à²µà²¾à²°|à²®à²à²à²³à²µà²¾à²°|à²¬à³à²§à²µà²¾à²°|à²à³à²°à³à²µà²¾à²°|à²¶à³à²à³à²°à²µà²¾à²°|à²¶à²¨à²¿à²µà²¾à²°)/i,
};
const parseDayPatterns$B = {
  narrow: [/^à²­à²¾/i, /^à²¸à³/i, /^à²®/i, /^à²¬à³/i, /^à²à³/i, /^à²¶à³/i, /^à²¶/i],
  any: [/^à²­à²¾/i, /^à²¸à³/i, /^à²®/i, /^à²¬à³/i, /^à²à³/i, /^à²¶à³/i, /^à²¶/i],
};

const matchDayPeriodPatterns$B = {
  narrow: /^(à²ªà³|à²|à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿|à²®à²§à³à²¯à²¾à²¨à³à²¹|à²¬à³à²³à²à³à²à³|à²¸à²à²à³|à²°à²¾à²¤à³à²°à²¿)/i,
  any: /^(à²ªà³à²°à³à²µà²¾à²¹à³à²¨|à²à²ªà²°à²¾à²¹à³à²¨|à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿|à²®à²§à³à²¯à²¾à²¨à³à²¹|à²¬à³à²³à²à³à²à³|à²¸à²à²à³|à²°à²¾à²¤à³à²°à²¿)/i,
};
const parseDayPeriodPatterns$B = {
  any: {
    am: /^à²ªà³/i,
    pm: /^à²/i,
    midnight: /à²®à²§à³à²¯à²°à²¾à²¤à³à²°à²¿/i,
    noon: /à²®à²§à³à²¯à²¾à²¨à³à²¹/i,
    morning: /à²¬à³à²³à²à³à²à³/i,
    afternoon: /à²®à²§à³à²¯à²¾à²¨à³à²¹/i,
    evening: /à²¸à²à²à³/i,
    night: /à²°à²¾à²¤à³à²°à²¿/i,
  },
};

(match$B.match = {
  ordinalNumber: (0, _index2$1c.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$B,
    parsePattern: parseOrdinalNumberPattern$B,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2s.buildMatchFn)({
    matchPatterns: matchEraPatterns$B,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$B,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2s.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$B,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$B,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2s.buildMatchFn)({
    matchPatterns: matchMonthPatterns$B,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$B,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2s.buildMatchFn)({
    matchPatterns: matchDayPatterns$B,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$B,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2s.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$B,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$B,
    defaultParseWidth: "any",
  }),
});

kn.kn = void 0;
var _index$2r = formatDistance$1b;
var _index2$1b = formatLong$B;
var _index3$B = formatRelative$1b;
var _index4$B = localize$B;
var _index5$B = match$B;

/**
 * @category Locales
 * @summary Kannada locale (India).
 * @language Kannada
 * @iso-639-2 kan
 * @author Manjunatha Gouli [@developergouli](https://github.com/developergouli)
 */
(kn.kn = {
  code: "kn",
  formatDistance: _index$2r.formatDistance,
  formatLong: _index2$1b.formatLong,
  formatRelative: _index3$B.formatRelative,
  localize: _index4$B.localize,
  match: _index5$B.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var ko = {};

var formatDistance$19 = {};

formatDistance$19.formatDistance = void 0;

const formatDistanceLocale$A = {
  lessThanXSeconds: {
    one: "1ì´ ë¯¸ë§",
    other: "{{count}}ì´ ë¯¸ë§",
  },

  xSeconds: {
    one: "1ì´",
    other: "{{count}}ì´",
  },

  halfAMinute: "30ì´",

  lessThanXMinutes: {
    one: "1ë¶ ë¯¸ë§",
    other: "{{count}}ë¶ ë¯¸ë§",
  },

  xMinutes: {
    one: "1ë¶",
    other: "{{count}}ë¶",
  },

  aboutXHours: {
    one: "ì½ 1ìê°",
    other: "ì½ {{count}}ìê°",
  },

  xHours: {
    one: "1ìê°",
    other: "{{count}}ìê°",
  },

  xDays: {
    one: "1ì¼",
    other: "{{count}}ì¼",
  },

  aboutXWeeks: {
    one: "ì½ 1ì£¼",
    other: "ì½ {{count}}ì£¼",
  },

  xWeeks: {
    one: "1ì£¼",
    other: "{{count}}ì£¼",
  },

  aboutXMonths: {
    one: "ì½ 1ê°ì",
    other: "ì½ {{count}}ê°ì",
  },

  xMonths: {
    one: "1ê°ì",
    other: "{{count}}ê°ì",
  },

  aboutXYears: {
    one: "ì½ 1ë",
    other: "ì½ {{count}}ë",
  },

  xYears: {
    one: "1ë",
    other: "{{count}}ë",
  },

  overXYears: {
    one: "1ë ì´ì",
    other: "{{count}}ë ì´ì",
  },

  almostXYears: {
    one: "ê±°ì 1ë",
    other: "ê±°ì {{count}}ë",
  },
};

const formatDistance$18 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$A[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " í";
    } else {
      return result + " ì ";
    }
  }

  return result;
};
formatDistance$19.formatDistance = formatDistance$18;

var formatLong$A = {};

formatLong$A.formatLong = void 0;
var _index$2q = buildFormatLongFn$1;

const dateFormats$A = {
  full: "yë Mì dì¼ EEEE",
  long: "yë Mì dì¼",
  medium: "y.MM.dd",
  short: "y.MM.dd",
};

const timeFormats$A = {
  full: "a Hì mmë¶ ssì´ zzzz",
  long: "a H:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$A = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$A.formatLong = {
  date: (0, _index$2q.buildFormatLongFn)({
    formats: dateFormats$A,
    defaultWidth: "full",
  }),

  time: (0, _index$2q.buildFormatLongFn)({
    formats: timeFormats$A,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2q.buildFormatLongFn)({
    formats: dateTimeFormats$A,
    defaultWidth: "full",
  }),
});

var formatRelative$19 = {};

formatRelative$19.formatRelative = void 0;

const formatRelativeLocale$A = {
  lastWeek: "'ì§ë' eeee p",
  yesterday: "'ì´ì ' p",
  today: "'ì¤ë' p",
  tomorrow: "'ë´ì¼' p",
  nextWeek: "'ë¤ì' eeee p",
  other: "P",
};

const formatRelative$18 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$A[token];
formatRelative$19.formatRelative = formatRelative$18;

var localize$A = {};

localize$A.localize = void 0;
var _index$2p = buildLocalizeFn$1;

const eraValues$A = {
  narrow: ["BC", "AD"],
  abbreviated: ["BC", "AD"],
  wide: ["ê¸°ìì ", "ìê¸°"],
};

const quarterValues$A = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1ë¶ê¸°", "2ë¶ê¸°", "3ë¶ê¸°", "4ë¶ê¸°"],
};

const monthValues$A = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],

  abbreviated: [
    "1ì",
    "2ì",
    "3ì",
    "4ì",
    "5ì",
    "6ì",
    "7ì",
    "8ì",
    "9ì",
    "10ì",
    "11ì",
    "12ì",
  ],

  wide: [
    "1ì",
    "2ì",
    "3ì",
    "4ì",
    "5ì",
    "6ì",
    "7ì",
    "8ì",
    "9ì",
    "10ì",
    "11ì",
    "12ì",
  ],
};

const dayValues$A = {
  narrow: ["ì¼", "ì", "í", "ì", "ëª©", "ê¸", "í "],
  short: ["ì¼", "ì", "í", "ì", "ëª©", "ê¸", "í "],
  abbreviated: ["ì¼", "ì", "í", "ì", "ëª©", "ê¸", "í "],
  wide: ["ì¼ìì¼", "ììì¼", "íìì¼", "ììì¼", "ëª©ìì¼", "ê¸ìì¼", "í ìì¼"],
};

const dayPeriodValues$A = {
  narrow: {
    am: "ì¤ì ",
    pm: "ì¤í",
    midnight: "ìì ",
    noon: "ì ì¤",
    morning: "ìì¹¨",
    afternoon: "ì¤í",
    evening: "ì ë",
    night: "ë°¤",
  },
  abbreviated: {
    am: "ì¤ì ",
    pm: "ì¤í",
    midnight: "ìì ",
    noon: "ì ì¤",
    morning: "ìì¹¨",
    afternoon: "ì¤í",
    evening: "ì ë",
    night: "ë°¤",
  },
  wide: {
    am: "ì¤ì ",
    pm: "ì¤í",
    midnight: "ìì ",
    noon: "ì ì¤",
    morning: "ìì¹¨",
    afternoon: "ì¤í",
    evening: "ì ë",
    night: "ë°¤",
  },
};

const formattingDayPeriodValues$s = {
  narrow: {
    am: "ì¤ì ",
    pm: "ì¤í",
    midnight: "ìì ",
    noon: "ì ì¤",
    morning: "ìì¹¨",
    afternoon: "ì¤í",
    evening: "ì ë",
    night: "ë°¤",
  },
  abbreviated: {
    am: "ì¤ì ",
    pm: "ì¤í",
    midnight: "ìì ",
    noon: "ì ì¤",
    morning: "ìì¹¨",
    afternoon: "ì¤í",
    evening: "ì ë",
    night: "ë°¤",
  },
  wide: {
    am: "ì¤ì ",
    pm: "ì¤í",
    midnight: "ìì ",
    noon: "ì ì¤",
    morning: "ìì¹¨",
    afternoon: "ì¤í",
    evening: "ì ë",
    night: "ë°¤",
  },
};

const ordinalNumber$A = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = String(options?.unit);

  switch (unit) {
    case "minute":
    case "second":
      return String(number);
    case "date":
      return number + "ì¼";
    default:
      return number + "ë²ì§¸";
  }
};

(localize$A.localize = {
  ordinalNumber: ordinalNumber$A,

  era: (0, _index$2p.buildLocalizeFn)({
    values: eraValues$A,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2p.buildLocalizeFn)({
    values: quarterValues$A,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2p.buildLocalizeFn)({
    values: monthValues$A,
    defaultWidth: "wide",
  }),

  day: (0, _index$2p.buildLocalizeFn)({
    values: dayValues$A,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2p.buildLocalizeFn)({
    values: dayPeriodValues$A,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$s,
    defaultFormattingWidth: "wide",
  }),
});

var match$A = {};

match$A.match = void 0;

var _index$2o = buildMatchFn$1;
var _index2$1a = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$A = /^(\d+)(ì¼|ë²ì§¸)?/i;
const parseOrdinalNumberPattern$A = /\d+/i;

const matchEraPatterns$A = {
  narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(ê¸°ìì |ìê¸°)/i,
};
const parseEraPatterns$A = {
  any: [/^(bc|ê¸°ìì )/i, /^(ad|ìê¸°)/i],
};

const matchQuarterPatterns$A = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]ì¬?ë¶ê¸°/i,
};
const parseQuarterPatterns$A = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$A = {
  narrow: /^(1[012]|[123456789])/,
  abbreviated: /^(1[012]|[123456789])ì/i,
  wide: /^(1[012]|[123456789])ì/i,
};
const parseMonthPatterns$A = {
  any: [
    /^1ì?$/,
    /^2/,
    /^3/,
    /^4/,
    /^5/,
    /^6/,
    /^7/,
    /^8/,
    /^9/,
    /^10/,
    /^11/,
    /^12/,
  ],
};

const matchDayPatterns$A = {
  narrow: /^[ì¼ìíìëª©ê¸í ]/,
  short: /^[ì¼ìíìëª©ê¸í ]/,
  abbreviated: /^[ì¼ìíìëª©ê¸í ]/,
  wide: /^[ì¼ìíìëª©ê¸í ]ìì¼/,
};
const parseDayPatterns$A = {
  any: [/^ì¼/, /^ì/, /^í/, /^ì/, /^ëª©/, /^ê¸/, /^í /],
};

const matchDayPeriodPatterns$A = {
  any: /^(am|pm|ì¤ì |ì¤í|ìì |ì ì¤|ìì¹¨|ì ë|ë°¤)/i,
};
const parseDayPeriodPatterns$A = {
  any: {
    am: /^(am|ì¤ì )/i,
    pm: /^(pm|ì¤í)/i,
    midnight: /^ìì /i,
    noon: /^ì ì¤/i,
    morning: /^ìì¹¨/i,
    afternoon: /^ì¤í/i,
    evening: /^ì ë/i,
    night: /^ë°¤/i,
  },
};

(match$A.match = {
  ordinalNumber: (0, _index2$1a.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$A,
    parsePattern: parseOrdinalNumberPattern$A,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2o.buildMatchFn)({
    matchPatterns: matchEraPatterns$A,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$A,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2o.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$A,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$A,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2o.buildMatchFn)({
    matchPatterns: matchMonthPatterns$A,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$A,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2o.buildMatchFn)({
    matchPatterns: matchDayPatterns$A,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$A,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2o.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$A,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$A,
    defaultParseWidth: "any",
  }),
});

ko.ko = void 0;
var _index$2n = formatDistance$19;
var _index2$19 = formatLong$A;
var _index3$A = formatRelative$19;
var _index4$A = localize$A;
var _index5$A = match$A;

/**
 * @category Locales
 * @summary Korean locale.
 * @language Korean
 * @iso-639-2 kor
 * @author Hong Chulju [@angdev](https://github.com/angdev)
 * @author Lee Seoyoen [@iamssen](https://github.com/iamssen)
 * @author Taiki IKeda [@so99ynoodles](https://github.com/so99ynoodles)
 */
(ko.ko = {
  code: "ko",
  formatDistance: _index$2n.formatDistance,
  formatLong: _index2$19.formatLong,
  formatRelative: _index3$A.formatRelative,
  localize: _index4$A.localize,
  match: _index5$A.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var lb = {};

var formatDistance$17 = {};

formatDistance$17.formatDistance = void 0;

const formatDistanceLocale$z = {
  lessThanXSeconds: {
    standalone: {
      one: "manner wÃ©i eng Sekonn",
      other: "manner wÃ©i {{count}} Sekonnen",
    },
    withPreposition: {
      one: "manner wÃ©i enger Sekonn",
      other: "manner wÃ©i {{count}} Sekonnen",
    },
  },

  xSeconds: {
    standalone: {
      one: "eng Sekonn",
      other: "{{count}} Sekonnen",
    },
    withPreposition: {
      one: "enger Sekonn",
      other: "{{count}} Sekonnen",
    },
  },

  halfAMinute: {
    standalone: "eng hallef Minutt",
    withPreposition: "enger hallwer Minutt",
  },

  lessThanXMinutes: {
    standalone: {
      one: "manner wÃ©i eng Minutt",
      other: "manner wÃ©i {{count}} Minutten",
    },
    withPreposition: {
      one: "manner wÃ©i enger Minutt",
      other: "manner wÃ©i {{count}} Minutten",
    },
  },

  xMinutes: {
    standalone: {
      one: "eng Minutt",
      other: "{{count}} Minutten",
    },
    withPreposition: {
      one: "enger Minutt",
      other: "{{count}} Minutten",
    },
  },

  aboutXHours: {
    standalone: {
      one: "ongefÃ©ier eng Stonn",
      other: "ongefÃ©ier {{count}} Stonnen",
    },
    withPreposition: {
      one: "ongefÃ©ier enger Stonn",
      other: "ongefÃ©ier {{count}} Stonnen",
    },
  },

  xHours: {
    standalone: {
      one: "eng Stonn",
      other: "{{count}} Stonnen",
    },
    withPreposition: {
      one: "enger Stonn",
      other: "{{count}} Stonnen",
    },
  },

  xDays: {
    standalone: {
      one: "een Dag",
      other: "{{count}} Deeg",
    },
    withPreposition: {
      one: "engem Dag",
      other: "{{count}} Deeg",
    },
  },

  aboutXWeeks: {
    standalone: {
      one: "ongefÃ©ier eng Woch",
      other: "ongefÃ©ier {{count}} Wochen",
    },
    withPreposition: {
      one: "ongefÃ©ier enger Woche",
      other: "ongefÃ©ier {{count}} Wochen",
    },
  },

  xWeeks: {
    standalone: {
      one: "eng Woch",
      other: "{{count}} Wochen",
    },
    withPreposition: {
      one: "enger Woch",
      other: "{{count}} Wochen",
    },
  },

  aboutXMonths: {
    standalone: {
      one: "ongefÃ©ier ee Mount",
      other: "ongefÃ©ier {{count}} MÃ©int",
    },
    withPreposition: {
      one: "ongefÃ©ier engem Mount",
      other: "ongefÃ©ier {{count}} MÃ©int",
    },
  },

  xMonths: {
    standalone: {
      one: "ee Mount",
      other: "{{count}} MÃ©int",
    },
    withPreposition: {
      one: "engem Mount",
      other: "{{count}} MÃ©int",
    },
  },

  aboutXYears: {
    standalone: {
      one: "ongefÃ©ier ee Joer",
      other: "ongefÃ©ier {{count}} Joer",
    },
    withPreposition: {
      one: "ongefÃ©ier engem Joer",
      other: "ongefÃ©ier {{count}} Joer",
    },
  },

  xYears: {
    standalone: {
      one: "ee Joer",
      other: "{{count}} Joer",
    },
    withPreposition: {
      one: "engem Joer",
      other: "{{count}} Joer",
    },
  },

  overXYears: {
    standalone: {
      one: "mÃ©i wÃ©i ee Joer",
      other: "mÃ©i wÃ©i {{count}} Joer",
    },
    withPreposition: {
      one: "mÃ©i wÃ©i engem Joer",
      other: "mÃ©i wÃ©i {{count}} Joer",
    },
  },

  almostXYears: {
    standalone: {
      one: "bal ee Joer",
      other: "bal {{count}} Joer",
    },
    withPreposition: {
      one: "bal engem Joer",
      other: "bal {{count}} Joer",
    },
  },
};

const EXCEPTION_CONSONANTS = ["d", "h", "n", "t", "z"];
const VOWELS = ["a,", "e", "i", "o", "u"];
const DIGITS_SPOKEN_N_NEEDED = [0, 1, 2, 3, 8, 9];
const FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [40, 50, 60, 70];

// Eifeler Regel
function isFinalNNeeded(nextWords) {
  const firstLetter = nextWords.charAt(0).toLowerCase();
  if (
    VOWELS.indexOf(firstLetter) != -1 ||
    EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1
  ) {
    return true;
  }

  // Numbers would need to converted into words for checking.
  // Therefore, I have listed the digits that require a preceeding n with a few exceptions.
  const firstWord = nextWords.split(" ")[0];
  const number = parseInt(firstWord);
  if (
    !isNaN(number) &&
    DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 &&
    FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(
      parseInt(firstWord.substring(0, 2)),
    ) == -1
  ) {
    return true;
  }

  // Omit other checks as they are not expected here.
  return false;
}

const formatDistance$16 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$z[token];

  const usageGroup = options?.addSuffix
    ? tokenValue.withPreposition
    : tokenValue.standalone;

  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "a" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
    } else {
      return "viru" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
    }
  }

  return result;
};
formatDistance$17.formatDistance = formatDistance$16;

var formatLong$z = {};

formatLong$z.formatLong = void 0;
var _index$2m = buildFormatLongFn$1;

// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008

const dateFormats$z = {
  full: "EEEE, do MMMM y", // MÃ©indeg, 7. Januar 2018
  long: "do MMMM y", // 7. Januar 2018
  medium: "do MMM y", // 7. Jan 2018
  short: "dd.MM.yy", // 07.01.18
};

const timeFormats$z = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$z = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$z.formatLong = {
  date: (0, _index$2m.buildFormatLongFn)({
    formats: dateFormats$z,
    defaultWidth: "full",
  }),

  time: (0, _index$2m.buildFormatLongFn)({
    formats: timeFormats$z,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2m.buildFormatLongFn)({
    formats: dateTimeFormats$z,
    defaultWidth: "full",
  }),
});

var formatRelative$17 = {};

formatRelative$17.formatRelative = void 0;

const formatRelativeLocale$z = {
  lastWeek: (date) => {
    const day = date.getDay();
    let result = "'lÃ¤schte";
    if (day === 2 || day === 4) {
      // Eifeler Regel: Add an n before the consonant d; Here "DÃ«nschdeg" "and Donneschde".
      result += "n";
    }
    result += "' eeee 'um' p";
    return result;
  },
  yesterday: "'gÃ«schter um' p",
  today: "'haut um' p",
  tomorrow: "'moien um' p",
  nextWeek: "eeee 'um' p",
  other: "P",
};

const formatRelative$16 = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$z[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$17.formatRelative = formatRelative$16;

var localize$z = {};

localize$z.localize = void 0;
var _index$2l = buildLocalizeFn$1;

const eraValues$z = {
  narrow: ["v.Chr.", "n.Chr."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["viru Christus", "no Christus"],
};

const quarterValues$z = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"],
};

const monthValues$z = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "MÃ¤e",
    "Abr",
    "Mee",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Okt",
    "Nov",
    "Dez",
  ],

  wide: [
    "Januar",
    "Februar",
    "MÃ¤erz",
    "AbrÃ«ll",
    "Mee",
    "Juni",
    "Juli",
    "August",
    "September",
    "Oktober",
    "November",
    "Dezember",
  ],
};

const dayValues$z = {
  narrow: ["S", "M", "D", "M", "D", "F", "S"],
  short: ["So", "MÃ©", "DÃ«", "MÃ«", "Do", "Fr", "Sa"],
  abbreviated: ["So.", "MÃ©.", "DÃ«.", "MÃ«.", "Do.", "Fr.", "Sa."],
  wide: [
    "Sonndeg",
    "MÃ©indeg",
    "DÃ«nschdeg",
    "MÃ«ttwoch",
    "Donneschdeg",
    "Freideg",
    "Samschdeg",
  ],
};

const dayPeriodValues$z = {
  narrow: {
    am: "mo.",
    pm: "nomÃ«.",
    midnight: "MÃ«tternuecht",
    noon: "MÃ«tteg",
    morning: "Moien",
    afternoon: "NomÃ«tteg",
    evening: "Owend",
    night: "Nuecht",
  },
  abbreviated: {
    am: "moies",
    pm: "nomÃ«ttes",
    midnight: "MÃ«tternuecht",
    noon: "MÃ«tteg",
    morning: "Moien",
    afternoon: "NomÃ«tteg",
    evening: "Owend",
    night: "Nuecht",
  },
  wide: {
    am: "moies",
    pm: "nomÃ«ttes",
    midnight: "MÃ«tternuecht",
    noon: "MÃ«tteg",
    morning: "Moien",
    afternoon: "NomÃ«tteg",
    evening: "Owend",
    night: "Nuecht",
  },
};

const formattingDayPeriodValues$r = {
  narrow: {
    am: "mo.",
    pm: "nom.",
    midnight: "MÃ«tternuecht",
    noon: "mÃ«ttes",
    morning: "moies",
    afternoon: "nomÃ«ttes",
    evening: "owes",
    night: "nuets",
  },
  abbreviated: {
    am: "moies",
    pm: "nomÃ«ttes",
    midnight: "MÃ«tternuecht",
    noon: "mÃ«ttes",
    morning: "moies",
    afternoon: "nomÃ«ttes",
    evening: "owes",
    night: "nuets",
  },
  wide: {
    am: "moies",
    pm: "nomÃ«ttes",
    midnight: "MÃ«tternuecht",
    noon: "mÃ«ttes",
    morning: "moies",
    afternoon: "nomÃ«ttes",
    evening: "owes",
    night: "nuets",
  },
};

const ordinalNumber$z = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$z.localize = {
  ordinalNumber: ordinalNumber$z,

  era: (0, _index$2l.buildLocalizeFn)({
    values: eraValues$z,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2l.buildLocalizeFn)({
    values: quarterValues$z,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2l.buildLocalizeFn)({
    values: monthValues$z,
    defaultWidth: "wide",
  }),

  day: (0, _index$2l.buildLocalizeFn)({
    values: dayValues$z,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2l.buildLocalizeFn)({
    values: dayPeriodValues$z,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$r,
    defaultFormattingWidth: "wide",
  }),
});

var match$z = {};

match$z.match = void 0;

var _index$2k = buildMatchFn$1;
var _index2$18 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$z = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern$z = /\d+/i;

const matchEraPatterns$z = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(viru Christus|virun eiser ZÃ¤itrechnung|no Christus|eiser ZÃ¤itrechnung)/i,
};
const parseEraPatterns$z = {
  any: [/^v/i, /^n/i],
};

const matchQuarterPatterns$z = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i,
};
const parseQuarterPatterns$z = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$z = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mÃ¤e|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
  wide: /^(januar|februar|mÃ¤erz|abrÃ«ll|mee|juni|juli|august|september|oktober|november|dezember)/i,
};
const parseMonthPatterns$z = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mÃ¤/i,
    /^ab/i,
    /^me/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$z = {
  narrow: /^[smdf]/i,
  short: /^(so|mÃ©|dÃ«|mÃ«|do|fr|sa)/i,
  abbreviated: /^(son?|mÃ©i?|dÃ«n?|mÃ«t?|don?|fre?|sam?)\.?/i,
  wide: /^(sonndeg|mÃ©indeg|dÃ«nschdeg|mÃ«ttwoch|donneschdeg|freideg|samschdeg)/i,
};
const parseDayPatterns$z = {
  any: [/^so/i, /^mÃ©/i, /^dÃ«/i, /^mÃ«/i, /^do/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$z = {
  narrow: /^(mo\.?|nomÃ«\.?|MÃ«tternuecht|mÃ«ttes|moies|nomÃ«ttes|owes|nuets)/i,
  abbreviated:
    /^(moi\.?|nomÃ«t\.?|MÃ«tternuecht|mÃ«ttes|moies|nomÃ«ttes|owes|nuets)/i,
  wide: /^(moies|nomÃ«ttes|MÃ«tternuecht|mÃ«ttes|moies|nomÃ«ttes|owes|nuets)/i,
};
const parseDayPeriodPatterns$z = {
  any: {
    am: /^m/i,
    pm: /^n/i,
    midnight: /^MÃ«tter/i,
    noon: /^mÃ«ttes/i,
    morning: /moies/i,
    afternoon: /nomÃ«ttes/i, // will never be matched. Afternoon is matched by `pm`
    evening: /owes/i,
    night: /nuets/i, // will never be matched. Night is matched by `pm`
  },
};

(match$z.match = {
  ordinalNumber: (0, _index2$18.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$z,
    parsePattern: parseOrdinalNumberPattern$z,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2k.buildMatchFn)({
    matchPatterns: matchEraPatterns$z,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$z,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2k.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$z,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$z,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2k.buildMatchFn)({
    matchPatterns: matchMonthPatterns$z,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$z,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2k.buildMatchFn)({
    matchPatterns: matchDayPatterns$z,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$z,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2k.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$z,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$z,
    defaultParseWidth: "any",
  }),
});

lb.lb = void 0;
var _index$2j = formatDistance$17;
var _index2$17 = formatLong$z;
var _index3$z = formatRelative$17;
var _index4$z = localize$z;
var _index5$z = match$z;

/**
 * @category Locales
 * @summary Luxembourgish locale.
 * @language Luxembourgish
 * @iso-639-2 ltz
 * @author Daniel Waxweiler [@dwaxweiler](https://github.com/dwaxweiler)
 */
(lb.lb = {
  code: "lb",
  formatDistance: _index$2j.formatDistance,
  formatLong: _index2$17.formatLong,
  formatRelative: _index3$z.formatRelative,
  localize: _index4$z.localize,
  match: _index5$z.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var lt = {};

var formatDistance$15 = {};

formatDistance$15.formatDistance = void 0;

const translations = {
  xseconds_other: "sekundÄ_sekundÅ¾iÅ³_sekundes",
  xminutes_one: "minutÄ_minutÄs_minutÄ",
  xminutes_other: "minutÄs_minuÄiÅ³_minutes",
  xhours_one: "valanda_valandos_valandÄ",
  xhours_other: "valandos_valandÅ³_valandas",
  xdays_one: "diena_dienos_dienÄ",
  xdays_other: "dienos_dienÅ³_dienas",
  xweeks_one: "savaitÄ_savaitÄs_savaitÄ",
  xweeks_other: "savaitÄs_savaiÄiÅ³_savaites",
  xmonths_one: "mÄnuo_mÄnesio_mÄnesÄ¯",
  xmonths_other: "mÄnesiai_mÄnesiÅ³_mÄnesius",
  xyears_one: "metai_metÅ³_metus",
  xyears_other: "metai_metÅ³_metus",
  about: "apie",
  over: "daugiau nei",
  almost: "beveik",
  lessthan: "maÅ¾iau nei",
};

const translateSeconds = (_number, addSuffix, _key, isFuture) => {
  if (!addSuffix) {
    return "kelios sekundÄs";
  } else {
    return isFuture ? "keliÅ³ sekundÅ¾iÅ³" : "kelias sekundes";
  }
};

const translateSingular = (_number, addSuffix, key, isFuture) => {
  return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
};

const translate = (number, addSuffix, key, isFuture) => {
  const result = number + " ";
  if (number === 1) {
    return result + translateSingular(number, addSuffix, key, isFuture);
  } else if (!addSuffix) {
    return result + (special(number) ? forms(key)[1] : forms(key)[0]);
  } else {
    if (isFuture) {
      return result + forms(key)[1];
    } else {
      return result + (special(number) ? forms(key)[1] : forms(key)[2]);
    }
  }
};

function special(number) {
  return number % 10 === 0 || (number > 10 && number < 20);
}

function forms(key) {
  return translations[key].split("_");
}

const formatDistanceLocale$y = {
  lessThanXSeconds: {
    one: translateSeconds,
    other: translate,
  },

  xSeconds: {
    one: translateSeconds,
    other: translate,
  },

  halfAMinute: "pusÄ minutÄs",

  lessThanXMinutes: {
    one: translateSingular,
    other: translate,
  },

  xMinutes: {
    one: translateSingular,
    other: translate,
  },

  aboutXHours: {
    one: translateSingular,
    other: translate,
  },

  xHours: {
    one: translateSingular,
    other: translate,
  },

  xDays: {
    one: translateSingular,
    other: translate,
  },

  aboutXWeeks: {
    one: translateSingular,
    other: translate,
  },

  xWeeks: {
    one: translateSingular,
    other: translate,
  },

  aboutXMonths: {
    one: translateSingular,
    other: translate,
  },

  xMonths: {
    one: translateSingular,
    other: translate,
  },

  aboutXYears: {
    one: translateSingular,
    other: translate,
  },

  xYears: {
    one: translateSingular,
    other: translate,
  },

  overXYears: {
    one: translateSingular,
    other: translate,
  },

  almostXYears: {
    one: translateSingular,
    other: translate,
  },
};

const formatDistance$14 = (token, count, options) => {
  const adverb = token.match(/about|over|almost|lessthan/i);
  const unit = adverb ? token.replace(adverb[0], "") : token;

  const isFuture = options?.comparison !== undefined && options.comparison > 0;

  let result;

  const tokenValue = formatDistanceLocale$y[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one(
      count,
      options?.addSuffix === true,
      unit.toLowerCase() + "_one",
      isFuture,
    );
  } else {
    result = tokenValue.other(
      count,
      options?.addSuffix === true,
      unit.toLowerCase() + "_other",
      isFuture,
    );
  }

  if (adverb) {
    const key = adverb[0].toLowerCase();
    result = translations[key] + " " + result;
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "po " + result;
    } else {
      return "prieÅ¡ " + result;
    }
  }

  return result;
};
formatDistance$15.formatDistance = formatDistance$14;

var formatLong$y = {};

formatLong$y.formatLong = void 0;
var _index$2i = buildFormatLongFn$1;

const dateFormats$y = {
  full: "y 'm'. MMMM d 'd'., EEEE",
  long: "y 'm'. MMMM d 'd'.",
  medium: "y-MM-dd",
  short: "y-MM-dd",
};

const timeFormats$y = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$y = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$y.formatLong = {
  date: (0, _index$2i.buildFormatLongFn)({
    formats: dateFormats$y,
    defaultWidth: "full",
  }),

  time: (0, _index$2i.buildFormatLongFn)({
    formats: timeFormats$y,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2i.buildFormatLongFn)({
    formats: dateTimeFormats$y,
    defaultWidth: "full",
  }),
});

var formatRelative$15 = {};

formatRelative$15.formatRelative = void 0;

const formatRelativeLocale$y = {
  lastWeek: "'PraÄjusÄ¯' eeee p",
  yesterday: "'Vakar' p",
  today: "'Å iandien' p",
  tomorrow: "'Rytoj' p",
  nextWeek: "eeee p",
  other: "P",
};

const formatRelative$14 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$y[token];
formatRelative$15.formatRelative = formatRelative$14;

var localize$y = {};

localize$y.localize = void 0;
var _index$2h = buildLocalizeFn$1;

const eraValues$y = {
  narrow: ["pr. Kr.", "po Kr."],
  abbreviated: ["pr. Kr.", "po Kr."],
  wide: ["prieÅ¡ KristÅ³", "po Kristaus"],
};

const quarterValues$y = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["I ketv.", "II ketv.", "III ketv.", "IV ketv."],
  wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"],
};

const formattingQuarterValues$2 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["I k.", "II k.", "III k.", "IV k."],
  wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"],
};

const monthValues$y = {
  narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
  abbreviated: [
    "saus.",
    "vas.",
    "kov.",
    "bal.",
    "geg.",
    "birÅ¾.",
    "liep.",
    "rugp.",
    "rugs.",
    "spal.",
    "lapkr.",
    "gruod.",
  ],

  wide: [
    "sausis",
    "vasaris",
    "kovas",
    "balandis",
    "geguÅ¾Ä",
    "birÅ¾elis",
    "liepa",
    "rugpjÅ«tis",
    "rugsÄjis",
    "spalis",
    "lapkritis",
    "gruodis",
  ],
};

const formattingMonthValues$8 = {
  narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
  abbreviated: [
    "saus.",
    "vas.",
    "kov.",
    "bal.",
    "geg.",
    "birÅ¾.",
    "liep.",
    "rugp.",
    "rugs.",
    "spal.",
    "lapkr.",
    "gruod.",
  ],

  wide: [
    "sausio",
    "vasario",
    "kovo",
    "balandÅ¾io",
    "geguÅ¾Äs",
    "birÅ¾elio",
    "liepos",
    "rugpjÅ«Äio",
    "rugsÄjo",
    "spalio",
    "lapkriÄio",
    "gruodÅ¾io",
  ],
};

const dayValues$y = {
  narrow: ["S", "P", "A", "T", "K", "P", "Å "],
  short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Å t"],
  abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "Å¡t"],
  wide: [
    "sekmadienis",
    "pirmadienis",
    "antradienis",
    "treÄiadienis",
    "ketvirtadienis",
    "penktadienis",
    "Å¡eÅ¡tadienis",
  ],
};

const formattingDayValues$2 = {
  narrow: ["S", "P", "A", "T", "K", "P", "Å "],
  short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "Å t"],
  abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "Å¡t"],
  wide: [
    "sekmadienÄ¯",
    "pirmadienÄ¯",
    "antradienÄ¯",
    "treÄiadienÄ¯",
    "ketvirtadienÄ¯",
    "penktadienÄ¯",
    "Å¡eÅ¡tadienÄ¯",
  ],
};

const dayPeriodValues$y = {
  narrow: {
    am: "pr. p.",
    pm: "pop.",
    midnight: "vidurnaktis",
    noon: "vidurdienis",
    morning: "rytas",
    afternoon: "diena",
    evening: "vakaras",
    night: "naktis",
  },
  abbreviated: {
    am: "prieÅ¡piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "vidurdienis",
    morning: "rytas",
    afternoon: "diena",
    evening: "vakaras",
    night: "naktis",
  },
  wide: {
    am: "prieÅ¡piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "vidurdienis",
    morning: "rytas",
    afternoon: "diena",
    evening: "vakaras",
    night: "naktis",
  },
};

const formattingDayPeriodValues$q = {
  narrow: {
    am: "pr. p.",
    pm: "pop.",
    midnight: "vidurnaktis",
    noon: "perpiet",
    morning: "rytas",
    afternoon: "popietÄ",
    evening: "vakaras",
    night: "naktis",
  },
  abbreviated: {
    am: "prieÅ¡piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "perpiet",
    morning: "rytas",
    afternoon: "popietÄ",
    evening: "vakaras",
    night: "naktis",
  },
  wide: {
    am: "prieÅ¡piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "perpiet",
    morning: "rytas",
    afternoon: "popietÄ",
    evening: "vakaras",
    night: "naktis",
  },
};

const ordinalNumber$y = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "-oji";
};

(localize$y.localize = {
  ordinalNumber: ordinalNumber$y,

  era: (0, _index$2h.buildLocalizeFn)({
    values: eraValues$y,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2h.buildLocalizeFn)({
    values: quarterValues$y,
    defaultWidth: "wide",
    formattingValues: formattingQuarterValues$2,
    defaultFormattingWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2h.buildLocalizeFn)({
    values: monthValues$y,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$8,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$2h.buildLocalizeFn)({
    values: dayValues$y,
    defaultWidth: "wide",
    formattingValues: formattingDayValues$2,
    defaultFormattingWidth: "wide",
  }),

  dayPeriod: (0, _index$2h.buildLocalizeFn)({
    values: dayPeriodValues$y,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$q,
    defaultFormattingWidth: "wide",
  }),
});

var match$y = {};

match$y.match = void 0;

var _index$2g = buildMatchFn$1;
var _index2$16 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$y = /^(\d+)(-oji)?/i;
const parseOrdinalNumberPattern$y = /\d+/i;

const matchEraPatterns$y = {
  narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
  abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|mÅ«sÅ³ eroje)/i,
  wide: /^(prieÅ¡ KristÅ³|prieÅ¡ mÅ«sÅ³ erÄ|po Kristaus|mÅ«sÅ³ eroje)/i,
};
const parseEraPatterns$y = {
  wide: [/prieÅ¡/i, /(po|mÅ«sÅ³)/i],
  any: [/^pr/i, /^(po|m)/i],
};

const matchQuarterPatterns$y = {
  narrow: /^([1234])/i,
  abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
  wide: /^(I|II|III|IV)\s?ketvirtis/i,
};
const parseQuarterPatterns$y = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/I$/i, /II$/i, /III/i, /IV/i],
};

const matchMonthPatterns$y = {
  narrow: /^[svkbglr]/i,
  abbreviated:
    /^(saus\.|vas\.|kov\.|bal\.|geg\.|birÅ¾\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
  wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|balandÅ¾?i(s|o)|geguÅ¾Äs?|birÅ¾eli(s|o)|liep(a|os)|rugpjÅ«(t|Ä)i(s|o)|rugsÄj(is|o)|spali(s|o)|lapkri(t|Ä)i(s|o)|gruodÅ¾?i(s|o))/i,
};
const parseMonthPatterns$y = {
  narrow: [
    /^s/i,
    /^v/i,
    /^k/i,
    /^b/i,
    /^g/i,
    /^b/i,
    /^l/i,
    /^r/i,
    /^r/i,
    /^s/i,
    /^l/i,
    /^g/i,
  ],

  any: [
    /^saus/i,
    /^vas/i,
    /^kov/i,
    /^bal/i,
    /^geg/i,
    /^birÅ¾/i,
    /^liep/i,
    /^rugp/i,
    /^rugs/i,
    /^spal/i,
    /^lapkr/i,
    /^gruod/i,
  ],
};

const matchDayPatterns$y = {
  narrow: /^[spatkÅ¡]/i,
  short: /^(sk|pr|an|tr|kt|pn|Å¡t)/i,
  abbreviated: /^(sk|pr|an|tr|kt|pn|Å¡t)/i,
  wide: /^(sekmadien(is|Ä¯)|pirmadien(is|Ä¯)|antradien(is|Ä¯)|treÄiadien(is|Ä¯)|ketvirtadien(is|Ä¯)|penktadien(is|Ä¯)|Å¡eÅ¡tadien(is|Ä¯))/i,
};
const parseDayPatterns$y = {
  narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^Å¡/i],
  wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^Å¡e/i],
  any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^Å¡t/i],
};

const matchDayPeriodPatterns$y = {
  narrow:
    /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietÄ)|vakaras|naktis)/i,
  any: /^(prieÅ¡piet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietÄ)|vakaras|naktis)/i,
};
const parseDayPeriodPatterns$y = {
  narrow: {
    am: /^pr/i,
    pm: /^pop./i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietÄ)/i,
    evening: /vakaras/i,
    night: /naktis/i,
  },
  any: {
    am: /^pr/i,
    pm: /^popiet$/i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietÄ)/i,
    evening: /vakaras/i,
    night: /naktis/i,
  },
};

(match$y.match = {
  ordinalNumber: (0, _index2$16.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$y,
    parsePattern: parseOrdinalNumberPattern$y,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2g.buildMatchFn)({
    matchPatterns: matchEraPatterns$y,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$y,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2g.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$y,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$y,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2g.buildMatchFn)({
    matchPatterns: matchMonthPatterns$y,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$y,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2g.buildMatchFn)({
    matchPatterns: matchDayPatterns$y,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$y,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2g.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$y,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$y,
    defaultParseWidth: "any",
  }),
});

lt.lt = void 0;
var _index$2f = formatDistance$15;
var _index2$15 = formatLong$y;
var _index3$y = formatRelative$15;
var _index4$y = localize$y;
var _index5$y = match$y;

/**
 * @category Locales
 * @summary Lithuanian locale.
 * @language Lithuanian
 * @iso-639-2 lit
 * @author Pavlo Shpak [@pshpak](https://github.com/pshpak)
 * @author Eduardo Pardo [@eduardopsll](https://github.com/eduardopsll)
 */
(lt.lt = {
  code: "lt",
  formatDistance: _index$2f.formatDistance,
  formatLong: _index2$15.formatLong,
  formatRelative: _index3$y.formatRelative,
  localize: _index4$y.localize,
  match: _index5$y.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var lv = {};

var formatDistance$13 = {};

formatDistance$13.formatDistance = void 0;

function buildLocalizeTokenFn$2(schema) {
  return (count, options) => {
    if (count === 1) {
      if (options?.addSuffix) {
        return schema.one[0].replace("{{time}}", schema.one[2]);
      } else {
        return schema.one[0].replace("{{time}}", schema.one[1]);
      }
    } else {
      const rem = count % 10 === 1 && count % 100 !== 11;
      if (options?.addSuffix) {
        return schema.other[0]
          .replace("{{time}}", rem ? schema.other[3] : schema.other[4])
          .replace("{{count}}", String(count));
      } else {
        return schema.other[0]
          .replace("{{time}}", rem ? schema.other[1] : schema.other[2])
          .replace("{{count}}", String(count));
      }
    }
  };
}

const formatDistanceLocale$x = {
  lessThanXSeconds: buildLocalizeTokenFn$2({
    one: ["mazÄk par {{time}}", "sekundi", "sekundi"],
    other: [
      "mazÄk nekÄ {{count}} {{time}}",
      "sekunde",
      "sekundes",
      "sekundes",
      "sekundÄm",
    ],
  }),

  xSeconds: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "sekunde", "sekundes"],
    other: [
      "{{count}} {{time}}",
      "sekunde",
      "sekundes",
      "sekundes",
      "sekundÄm",
    ],
  }),

  halfAMinute: (_count, options) => {
    if (options?.addSuffix) {
      return "pusminÅ«tes";
    } else {
      return "pusminÅ«te";
    }
  },

  lessThanXMinutes: buildLocalizeTokenFn$2({
    one: ["mazÄk par {{time}}", "minÅ«ti", "minÅ«ti"],
    other: [
      "mazÄk nekÄ {{count}} {{time}}",
      "minÅ«te",
      "minÅ«tes",
      "minÅ«tes",
      "minÅ«tÄm",
    ],
  }),

  xMinutes: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "minÅ«te", "minÅ«tes"],
    other: ["{{count}} {{time}}", "minÅ«te", "minÅ«tes", "minÅ«tes", "minÅ«tÄm"],
  }),

  aboutXHours: buildLocalizeTokenFn$2({
    one: ["apmÄram 1 {{time}}", "stunda", "stundas"],
    other: [
      "apmÄram {{count}} {{time}}",
      "stunda",
      "stundas",
      "stundas",
      "stundÄm",
    ],
  }),

  xHours: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "stunda", "stundas"],
    other: ["{{count}} {{time}}", "stunda", "stundas", "stundas", "stundÄm"],
  }),

  xDays: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "diena", "dienas"],
    other: ["{{count}} {{time}}", "diena", "dienas", "dienas", "dienÄm"],
  }),

  aboutXWeeks: buildLocalizeTokenFn$2({
    one: ["apmÄram 1 {{time}}", "nedÄÄ¼a", "nedÄÄ¼as"],
    other: [
      "apmÄram {{count}} {{time}}",
      "nedÄÄ¼a",
      "nedÄÄ¼u",
      "nedÄÄ¼as",
      "nedÄÄ¼Äm",
    ],
  }),

  xWeeks: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "nedÄÄ¼a", "nedÄÄ¼as"],
    other: [
      "{{count}} {{time}}", // TODO
      "nedÄÄ¼a",
      "nedÄÄ¼u",
      "nedÄÄ¼as",
      "nedÄÄ¼Äm",
    ],
  }),

  aboutXMonths: buildLocalizeTokenFn$2({
    one: ["apmÄram 1 {{time}}", "mÄnesis", "mÄneÅ¡a"],
    other: [
      "apmÄram {{count}} {{time}}",
      "mÄnesis",
      "mÄneÅ¡i",
      "mÄneÅ¡a",
      "mÄneÅ¡iem",
    ],
  }),

  xMonths: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "mÄnesis", "mÄneÅ¡a"],
    other: ["{{count}} {{time}}", "mÄnesis", "mÄneÅ¡i", "mÄneÅ¡a", "mÄneÅ¡iem"],
  }),

  aboutXYears: buildLocalizeTokenFn$2({
    one: ["apmÄram 1 {{time}}", "gads", "gada"],
    other: ["apmÄram {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"],
  }),

  xYears: buildLocalizeTokenFn$2({
    one: ["1 {{time}}", "gads", "gada"],
    other: ["{{count}} {{time}}", "gads", "gadi", "gada", "gadiem"],
  }),

  overXYears: buildLocalizeTokenFn$2({
    one: ["ilgÄk par 1 {{time}}", "gadu", "gadu"],
    other: ["vairÄk nekÄ {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"],
  }),

  almostXYears: buildLocalizeTokenFn$2({
    one: ["gandrÄ«z 1 {{time}}", "gads", "gada"],
    other: ["vairÄk nekÄ {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"],
  }),
};

const formatDistance$12 = (token, count, options) => {
  const result = formatDistanceLocale$x[token](count, options);

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "pÄc " + result;
    } else {
      return "pirms " + result;
    }
  }

  return result;
};
formatDistance$13.formatDistance = formatDistance$12;

var formatLong$x = {};

formatLong$x.formatLong = void 0;
var _index$2e = buildFormatLongFn$1;

const dateFormats$x = {
  full: "EEEE, y. 'gada' d. MMMM",
  long: "y. 'gada' d. MMMM",
  medium: "dd.MM.y.",
  short: "dd.MM.y.",
};

const timeFormats$x = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$x = {
  full: "{{date}} 'plkst.' {{time}}",
  long: "{{date}} 'plkst.' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$x.formatLong = {
  date: (0, _index$2e.buildFormatLongFn)({
    formats: dateFormats$x,
    defaultWidth: "full",
  }),

  time: (0, _index$2e.buildFormatLongFn)({
    formats: timeFormats$x,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$2e.buildFormatLongFn)({
    formats: dateTimeFormats$x,
    defaultWidth: "full",
  }),
});

var formatRelative$13 = {};

formatRelative$13.formatRelative = void 0;
var _index$2d = isSameWeek$1;

const weekdays$1 = [
  "svÄtdienÄ",
  "pirmdienÄ",
  "otrdienÄ",
  "treÅ¡dienÄ",
  "ceturtdienÄ",
  "piektdienÄ",
  "sestdienÄ",
];

const formatRelativeLocale$x = {
  lastWeek: (date, baseDate, options) => {
    if ((0, _index$2d.isSameWeek)(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }

    const weekday = weekdays$1[date.getDay()];
    return "'PagÄjuÅ¡Ä " + weekday + " plkst.' p";
  },
  yesterday: "'Vakar plkst.' p",
  today: "'Å odien plkst.' p",
  tomorrow: "'RÄ«t plkst.' p",
  nextWeek: (date, baseDate, options) => {
    if ((0, _index$2d.isSameWeek)(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }

    const weekday = weekdays$1[date.getDay()];
    return "'NÄkamajÄ " + weekday + " plkst.' p";
  },
  other: "P",
};

const formatRelative$12 = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$x[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$13.formatRelative = formatRelative$12;

var localize$x = {};

localize$x.localize = void 0;
var _index$2c = buildLocalizeFn$1;

const eraValues$x = {
  narrow: ["p.m.Ä", "m.Ä"],
  abbreviated: ["p. m. Ä.", "m. Ä."],
  wide: ["pirms mÅ«su Äras", "mÅ«su ÄrÄ"],
};

const quarterValues$x = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
  wide: [
    "pirmais ceturksnis",
    "otrais ceturksnis",
    "treÅ¡ais ceturksnis",
    "ceturtais ceturksnis",
  ],
};

const formattingQuarterValues$1 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
  wide: [
    "pirmajÄ ceturksnÄ«",
    "otrajÄ ceturksnÄ«",
    "treÅ¡ajÄ ceturksnÄ«",
    "ceturtajÄ ceturksnÄ«",
  ],
};

const monthValues$x = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "janv.",
    "febr.",
    "marts",
    "apr.",
    "maijs",
    "jÅ«n.",
    "jÅ«l.",
    "aug.",
    "sept.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "janvÄris",
    "februÄris",
    "marts",
    "aprÄ«lis",
    "maijs",
    "jÅ«nijs",
    "jÅ«lijs",
    "augusts",
    "septembris",
    "oktobris",
    "novembris",
    "decembris",
  ],
};

const formattingMonthValues$7 = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "janv.",
    "febr.",
    "martÄ",
    "apr.",
    "maijs",
    "jÅ«n.",
    "jÅ«l.",
    "aug.",
    "sept.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "janvÄrÄ«",
    "februÄrÄ«",
    "martÄ",
    "aprÄ«lÄ«",
    "maijÄ",
    "jÅ«nijÄ",
    "jÅ«lijÄ",
    "augustÄ",
    "septembrÄ«",
    "oktobrÄ«",
    "novembrÄ«",
    "decembrÄ«",
  ],
};

const dayValues$x = {
  narrow: ["S", "P", "O", "T", "C", "P", "S"],
  short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
  abbreviated: [
    "svÄtd.",
    "pirmd.",
    "otrd.",
    "treÅ¡d.",
    "ceturtd.",
    "piektd.",
    "sestd.",
  ],

  wide: [
    "svÄtdiena",
    "pirmdiena",
    "otrdiena",
    "treÅ¡diena",
    "ceturtdiena",
    "piektdiena",
    "sestdiena",
  ],
};

const formattingDayValues$1 = {
  narrow: ["S", "P", "O", "T", "C", "P", "S"],
  short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
  abbreviated: [
    "svÄtd.",
    "pirmd.",
    "otrd.",
    "treÅ¡d.",
    "ceturtd.",
    "piektd.",
    "sestd.",
  ],

  wide: [
    "svÄtdienÄ",
    "pirmdienÄ",
    "otrdienÄ",
    "treÅ¡dienÄ",
    "ceturtdienÄ",
    "piektdienÄ",
    "sestdienÄ",
  ],
};

const dayPeriodValues$x = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "rÄ«ts",
    afternoon: "diena",
    evening: "vakars",
    night: "nakts",
  },
  abbreviated: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "rÄ«ts",
    afternoon: "pÄcpusd.",
    evening: "vakars",
    night: "nakts",
  },
  wide: {
    am: "am",
    pm: "pm",
    midnight: "pusnakts",
    noon: "pusdienlaiks",
    morning: "rÄ«ts",
    afternoon: "pÄcpusdiena",
    evening: "vakars",
    night: "nakts",
  },
};

const formattingDayPeriodValues$p = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "rÄ«tÄ",
    afternoon: "dienÄ",
    evening: "vakarÄ",
    night: "naktÄ«",
  },
  abbreviated: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "rÄ«tÄ",
    afternoon: "pÄcpusd.",
    evening: "vakarÄ",
    night: "naktÄ«",
  },
  wide: {
    am: "am",
    pm: "pm",
    midnight: "pusnaktÄ«",
    noon: "pusdienlaikÄ",
    morning: "rÄ«tÄ",
    afternoon: "pÄcpusdienÄ",
    evening: "vakarÄ",
    night: "naktÄ«",
  },
};

const ordinalNumber$x = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$x.localize = {
  ordinalNumber: ordinalNumber$x,

  era: (0, _index$2c.buildLocalizeFn)({
    values: eraValues$x,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2c.buildLocalizeFn)({
    values: quarterValues$x,
    defaultWidth: "wide",
    formattingValues: formattingQuarterValues$1,
    defaultFormattingWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2c.buildLocalizeFn)({
    values: monthValues$x,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$7,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$2c.buildLocalizeFn)({
    values: dayValues$x,
    defaultWidth: "wide",
    formattingValues: formattingDayValues$1,
    defaultFormattingWidth: "wide",
  }),

  dayPeriod: (0, _index$2c.buildLocalizeFn)({
    values: dayPeriodValues$x,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$p,
    defaultFormattingWidth: "wide",
  }),
});

var match$x = {};

match$x.match = void 0;

var _index$2b = buildMatchFn$1;
var _index2$14 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$x = /^(\d+)\./i;
const parseOrdinalNumberPattern$x = /\d+/i;

const matchEraPatterns$x = {
  narrow: /^(p\.m\.Ä|m\.Ä)/i,
  abbreviated: /^(p\. m\. Ä\.|m\. Ä\.)/i,
  wide: /^(pirms mÅ«su Äras|mÅ«su ÄrÄ)/i,
};
const parseEraPatterns$x = {
  any: [/^p/i, /^m/i],
};

const matchQuarterPatterns$x = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](\. cet\.)/i,
  wide: /^(pirma(is|jÄ)|otra(is|jÄ)|treÅ¡a(is|jÄ)|ceturta(is|jÄ)) ceturksn(is|Ä«)/i,
};
const parseQuarterPatterns$x = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
  abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
  wide: [/^p/i, /^o/i, /^t/i, /^c/i],
};

const matchMonthPatterns$x = {
  narrow: /^[jfmasond]/i,
  abbreviated:
    /^(janv\.|febr\.|marts|apr\.|maijs|jÅ«n\.|jÅ«l\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
  wide: /^(janvÄr(is|Ä«)|februÄr(is|Ä«)|mart[sÄ]|aprÄ«l(is|Ä«)|maij[sÄ]|jÅ«nij[sÄ]|jÅ«lij[sÄ]|august[sÄ]|septembr(is|Ä«)|oktobr(is|Ä«)|novembr(is|Ä«)|decembr(is|Ä«))/i,
};
const parseMonthPatterns$x = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mai/i,
    /^jÅ«n/i,
    /^jÅ«l/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$x = {
  narrow: /^[spotc]/i,
  short: /^(sv|pi|o|t|c|pk|s)/i,
  abbreviated: /^(svÄtd\.|pirmd\.|otrd.\|treÅ¡d\.|ceturtd\.|piektd\.|sestd\.)/i,
  wide: /^(svÄtdien(a|Ä)|pirmdien(a|Ä)|otrdien(a|Ä)|treÅ¡dien(a|Ä)|ceturtdien(a|Ä)|piektdien(a|Ä)|sestdien(a|Ä))/i,
};
const parseDayPatterns$x = {
  narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
  any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i],
};

const matchDayPeriodPatterns$x = {
  narrow: /^(am|pm|pusn\.|pusd\.|rÄ«t(s|Ä)|dien(a|Ä)|vakar(s|Ä)|nakt(s|Ä«))/,
  abbreviated: /^(am|pm|pusn\.|pusd\.|rÄ«t(s|Ä)|pÄcpusd\.|vakar(s|Ä)|nakt(s|Ä«))/,
  wide: /^(am|pm|pusnakt(s|Ä«)|pusdienlaik(s|Ä)|rÄ«t(s|Ä)|pÄcpusdien(a|Ä)|vakar(s|Ä)|nakt(s|Ä«))/i,
};
const parseDayPeriodPatterns$x = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^pusn/i,
    noon: /^pusd/i,
    morning: /^r/i,
    afternoon: /^(d|pÄc)/i,
    evening: /^v/i,
    night: /^n/i,
  },
};

(match$x.match = {
  ordinalNumber: (0, _index2$14.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$x,
    parsePattern: parseOrdinalNumberPattern$x,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$2b.buildMatchFn)({
    matchPatterns: matchEraPatterns$x,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$x,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$2b.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$x,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$x,
    defaultParseWidth: "wide",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$2b.buildMatchFn)({
    matchPatterns: matchMonthPatterns$x,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$x,
    defaultParseWidth: "any",
  }),

  day: (0, _index$2b.buildMatchFn)({
    matchPatterns: matchDayPatterns$x,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$x,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$2b.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$x,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$x,
    defaultParseWidth: "any",
  }),
});

lv.lv = void 0;
var _index$2a = formatDistance$13;
var _index2$13 = formatLong$x;
var _index3$x = formatRelative$13;
var _index4$x = localize$x;
var _index5$x = match$x;

/**
 * @category Locales
 * @summary Latvian locale (Latvia).
 * @language Latvian
 * @iso-639-2 lav
 * @author RÅ«dolfs PuÄ·Ä«tis [@prudolfs](https://github.com/prudolfs)
 */
(lv.lv = {
  code: "lv",
  formatDistance: _index$2a.formatDistance,
  formatLong: _index2$13.formatLong,
  formatRelative: _index3$x.formatRelative,
  localize: _index4$x.localize,
  match: _index5$x.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var mk = {};

var formatDistance$11 = {};

formatDistance$11.formatDistance = void 0;

const formatDistanceLocale$w = {
  lessThanXSeconds: {
    one: "Ð¿Ð¾Ð¼Ð°Ð»ÐºÑ Ð¾Ð´ ÑÐµÐºÑÐ½Ð´Ð°",
    other: "Ð¿Ð¾Ð¼Ð°Ð»ÐºÑ Ð¾Ð´ {{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
  },

  xSeconds: {
    one: "1 ÑÐµÐºÑÐ½Ð´Ð°",
    other: "{{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
  },

  halfAMinute: "Ð¿Ð¾Ð»Ð¾Ð²Ð¸Ð½Ð° Ð¼Ð¸Ð½ÑÑÐ°",

  lessThanXMinutes: {
    one: "Ð¿Ð¾Ð¼Ð°Ð»ÐºÑ Ð¾Ð´ Ð¼Ð¸Ð½ÑÑÐ°",
    other: "Ð¿Ð¾Ð¼Ð°Ð»ÐºÑ Ð¾Ð´ {{count}} Ð¼Ð¸Ð½ÑÑÐ¸",
  },

  xMinutes: {
    one: "1 Ð¼Ð¸Ð½ÑÑÐ°",
    other: "{{count}} Ð¼Ð¸Ð½ÑÑÐ¸",
  },

  aboutXHours: {
    one: "Ð¾ÐºÐ¾Ð»Ñ 1 ÑÐ°Ñ",
    other: "Ð¾ÐºÐ¾Ð»Ñ {{count}} ÑÐ°ÑÐ°",
  },

  xHours: {
    one: "1 ÑÐ°Ñ",
    other: "{{count}} ÑÐ°ÑÐ°",
  },

  xDays: {
    one: "1 Ð´ÐµÐ½",
    other: "{{count}} Ð´ÐµÐ½Ð°",
  },

  aboutXWeeks: {
    one: "Ð¾ÐºÐ¾Ð»Ñ 1 Ð½ÐµÐ´ÐµÐ»Ð°",
    other: "Ð¾ÐºÐ¾Ð»Ñ {{count}} Ð¼ÐµÑÐµÑÐ¸",
  },

  xWeeks: {
    one: "1 Ð½ÐµÐ´ÐµÐ»Ð°",
    other: "{{count}} Ð½ÐµÐ´ÐµÐ»Ð¸",
  },

  aboutXMonths: {
    one: "Ð¾ÐºÐ¾Ð»Ñ 1 Ð¼ÐµÑÐµÑ",
    other: "Ð¾ÐºÐ¾Ð»Ñ {{count}} Ð½ÐµÐ´ÐµÐ»Ð¸",
  },

  xMonths: {
    one: "1 Ð¼ÐµÑÐµÑ",
    other: "{{count}} Ð¼ÐµÑÐµÑÐ¸",
  },

  aboutXYears: {
    one: "Ð¾ÐºÐ¾Ð»Ñ 1 Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "Ð¾ÐºÐ¾Ð»Ñ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },

  xYears: {
    one: "1 Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "{{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },

  overXYears: {
    one: "Ð¿Ð¾Ð²ÐµÑÐµ Ð¾Ð´ 1 Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "Ð¿Ð¾Ð²ÐµÑÐµ Ð¾Ð´ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },

  almostXYears: {
    one: "Ð±ÐµÐ·Ð¼Ð°Ð»ÐºÑ 1 Ð³Ð¾Ð´Ð¸Ð½Ð°",
    other: "Ð±ÐµÐ·Ð¼Ð°Ð»ÐºÑ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
  },
};

const formatDistance$10 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$w[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ð·Ð° " + result;
    } else {
      return "Ð¿ÑÐµÐ´ " + result;
    }
  }

  return result;
};
formatDistance$11.formatDistance = formatDistance$10;

var formatLong$w = {};

formatLong$w.formatLong = void 0;
var _index$29 = buildFormatLongFn$1;

const dateFormats$w = {
  full: "EEEE, dd MMMM yyyy",
  long: "dd MMMM yyyy",
  medium: "dd MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$w = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$w = {
  any: "{{date}} {{time}}",
};

(formatLong$w.formatLong = {
  date: (0, _index$29.buildFormatLongFn)({
    formats: dateFormats$w,
    defaultWidth: "full",
  }),

  time: (0, _index$29.buildFormatLongFn)({
    formats: timeFormats$w,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$29.buildFormatLongFn)({
    formats: dateTimeFormats$w,
    defaultWidth: "any",
  }),
});

var formatRelative$11 = {};

formatRelative$11.formatRelative = void 0;
var _index$28 = isSameWeek$1;

const weekdays = [
  "Ð½ÐµÐ´ÐµÐ»Ð°",
  "Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº",
  "Ð²ÑÐ¾ÑÐ½Ð¸Ðº",
  "ÑÑÐµÐ´Ð°",
  "ÑÐµÑÐ²ÑÑÐ¾Ðº",
  "Ð¿ÐµÑÐ¾Ðº",
  "ÑÐ°Ð±Ð¾ÑÐ°",
];

function lastWeek$3(day) {
  const weekday = weekdays[day];

  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'Ð¼Ð¸Ð½Ð°ÑÐ°ÑÐ° " + weekday + " Ð²Ð¾' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'Ð¼Ð¸Ð½Ð°ÑÐ¸Ð¾Ñ " + weekday + " Ð²Ð¾' p";
  }
}

function thisWeek$3(day) {
  const weekday = weekdays[day];

  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'Ð¾Ð²Ð° " + weekday + " Ð²o' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'Ð¾Ð²Ð¾Ñ " + weekday + " Ð²o' p";
  }
}

function nextWeek$3(day) {
  const weekday = weekdays[day];

  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'ÑÐ»ÐµÐ´Ð½Ð°ÑÐ° " + weekday + " Ð²o' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'ÑÐ»ÐµÐ´Ð½Ð¸Ð¾Ñ " + weekday + " Ð²o' p";
  }
}

const formatRelativeLocale$w = {
  lastWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$28.isSameWeek)(date, baseDate, options)) {
      return thisWeek$3(day);
    } else {
      return lastWeek$3(day);
    }
  },
  yesterday: "'Ð²ÑÐµÑÐ° Ð²Ð¾' p",
  today: "'Ð´ÐµÐ½ÐµÑ Ð²Ð¾' p",
  tomorrow: "'ÑÑÑÐµ Ð²Ð¾' p",
  nextWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$28.isSameWeek)(date, baseDate, options)) {
      return thisWeek$3(day);
    } else {
      return nextWeek$3(day);
    }
  },
  other: "P",
};

const formatRelative$10 = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$w[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$11.formatRelative = formatRelative$10;

var localize$w = {};

localize$w.localize = void 0;
var _index$27 = buildLocalizeFn$1;

const eraValues$w = {
  narrow: ["Ð¿Ñ.Ð½.Ðµ.", "Ð½.Ðµ."],
  abbreviated: ["Ð¿ÑÐµÐ´ Ð½. Ðµ.", "Ð½. Ðµ."],
  wide: ["Ð¿ÑÐµÐ´ Ð½Ð°ÑÐ°ÑÐ° ÐµÑÐ°", "Ð½Ð°ÑÐ°ÑÐ° ÐµÑÐ°"],
};

const quarterValues$w = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-Ð²Ð¸ ÐºÐ².", "2-ÑÐ¸ ÐºÐ².", "3-ÑÐ¸ ÐºÐ².", "4-ÑÐ¸ ÐºÐ²."],
  wide: ["1-Ð²Ð¸ ÐºÐ²Ð°ÑÑÐ°Ð»", "2-ÑÐ¸ ÐºÐ²Ð°ÑÑÐ°Ð»", "3-ÑÐ¸ ÐºÐ²Ð°ÑÑÐ°Ð»", "4-ÑÐ¸ ÐºÐ²Ð°ÑÑÐ°Ð»"],
};

const monthValues$w = {
  abbreviated: [
    "ÑÐ°Ð½",
    "ÑÐµÐ²",
    "Ð¼Ð°Ñ",
    "Ð°Ð¿Ñ",
    "Ð¼Ð°Ñ",
    "ÑÑÐ½",
    "ÑÑÐ»",
    "Ð°Ð²Ð³",
    "ÑÐµÐ¿Ñ",
    "Ð¾ÐºÑ",
    "Ð½Ð¾ÐµÐ¼",
    "Ð´ÐµÐº",
  ],

  wide: [
    "ÑÐ°Ð½ÑÐ°ÑÐ¸",
    "ÑÐµÐ²ÑÑÐ°ÑÐ¸",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿ÑÐ¸Ð»",
    "Ð¼Ð°Ñ",
    "ÑÑÐ½Ð¸",
    "ÑÑÐ»Ð¸",
    "Ð°Ð²Ð³ÑÑÑ",
    "ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸",
    "Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸",
    "Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸",
    "Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸",
  ],
};

const dayValues$w = {
  narrow: ["Ð", "Ð", "Ð", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð½Ðµ", "Ð¿Ð¾", "Ð²Ñ", "ÑÑ", "ÑÐµ", "Ð¿Ðµ", "ÑÐ°"],
  abbreviated: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "Ð²ÑÐ¾", "ÑÑÐµ", "ÑÐµÑ", "Ð¿ÐµÑ", "ÑÐ°Ð±"],
  wide: [
    "Ð½ÐµÐ´ÐµÐ»Ð°",
    "Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº",
    "Ð²ÑÐ¾ÑÐ½Ð¸Ðº",
    "ÑÑÐµÐ´Ð°",
    "ÑÐµÑÐ²ÑÑÐ¾Ðº",
    "Ð¿ÐµÑÐ¾Ðº",
    "ÑÐ°Ð±Ð¾ÑÐ°",
  ],
};

const dayPeriodValues$w = {
  wide: {
    am: "Ð¿ÑÐµÑÐ¿Ð»Ð°Ð´Ð½Ðµ",
    pm: "Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ",
    midnight: "Ð¿Ð¾Ð»Ð½Ð¾Ñ",
    noon: "Ð½Ð°Ð¿Ð»Ð°Ð´Ð½Ðµ",
    morning: "Ð½Ð°ÑÑÑÐ¾",
    afternoon: "Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ",
    evening: "Ð½Ð°Ð²ÐµÑÐµÑ",
    night: "Ð½Ð¾ÑÐµ",
  },
};

const ordinalNumber$w = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "-Ð²Ð¸";
      case 2:
        return number + "-ÑÐ¸";
      case 7:
      case 8:
        return number + "-Ð¼Ð¸";
    }
  }
  return number + "-ÑÐ¸";
};

(localize$w.localize = {
  ordinalNumber: ordinalNumber$w,

  era: (0, _index$27.buildLocalizeFn)({
    values: eraValues$w,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$27.buildLocalizeFn)({
    values: quarterValues$w,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$27.buildLocalizeFn)({
    values: monthValues$w,
    defaultWidth: "wide",
  }),

  day: (0, _index$27.buildLocalizeFn)({
    values: dayValues$w,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$27.buildLocalizeFn)({
    values: dayPeriodValues$w,
    defaultWidth: "wide",
  }),
});

var match$w = {};

match$w.match = void 0;

var _index$26 = buildMatchFn$1;
var _index2$12 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$w = /^(\d+)(-?[Ð²ÑÐ¼Ñ][Ð¸])?/i;
const parseOrdinalNumberPattern$w = /\d+/i;

const matchEraPatterns$w = {
  narrow: /^((Ð¿Ñ)?Ð½\.?\s?Ðµ\.?)/i,
  abbreviated: /^((Ð¿Ñ)?Ð½\.?\s?Ðµ\.?)/i,
  wide: /^(Ð¿ÑÐµÐ´ Ð½Ð°ÑÐ°ÑÐ° ÐµÑÐ°|Ð½Ð°ÑÐ°ÑÐ° ÐµÑÐ°)/i,
};
const parseEraPatterns$w = {
  any: [/^Ð¿/i, /^Ð½/i],
};

const matchQuarterPatterns$w = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[Ð²ÑÑ]?Ð¸?)? ÐºÐ².?/i,
  wide: /^[1234](-?[Ð²ÑÑ]?Ð¸?)? ÐºÐ²Ð°ÑÑÐ°Ð»/i,
};
const parseQuarterPatterns$w = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchDayPatterns$w = {
  narrow: /^[Ð½Ð¿Ð²ÑÑ]/i,
  short: /^(Ð½Ðµ|Ð¿Ð¾|Ð²Ñ|ÑÑ|ÑÐµ|Ð¿Ðµ|ÑÐ°)/i,
  abbreviated: /^(Ð½ÐµÐ´|Ð¿Ð¾Ð½|Ð²ÑÐ¾|ÑÑÐµ|ÑÐµÑ|Ð¿ÐµÑ|ÑÐ°Ð±)/i,
  wide: /^(Ð½ÐµÐ´ÐµÐ»Ð°|Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº|Ð²ÑÐ¾ÑÐ½Ð¸Ðº|ÑÑÐµÐ´Ð°|ÑÐµÑÐ²ÑÑÐ¾Ðº|Ð¿ÐµÑÐ¾Ðº|ÑÐ°Ð±Ð¾ÑÐ°)/i,
};

const parseDayPatterns$w = {
  narrow: [/^Ð½/i, /^Ð¿/i, /^Ð²/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i],
  any: [/^Ð½[ÐµÐ´]/i, /^Ð¿[Ð¾Ð½]/i, /^Ð²Ñ/i, /^ÑÑ/i, /^Ñ[ÐµÑ]/i, /^Ð¿[ÐµÑ]/i, /^Ñ[Ð°Ð±]/i],
};

const matchMonthPatterns$w = {
  abbreviated: /^(ÑÐ°Ð½|ÑÐµÐ²|Ð¼Ð°Ñ|Ð°Ð¿Ñ|Ð¼Ð°Ñ|ÑÑÐ½|ÑÑÐ»|Ð°Ð²Ð³|ÑÐµÐ¿|Ð¾ÐºÑ|Ð½Ð¾ÐµÐ¼|Ð´ÐµÐº)/i,
  wide: /^(ÑÐ°Ð½ÑÐ°ÑÐ¸|ÑÐµÐ²ÑÑÐ°ÑÐ¸|Ð¼Ð°ÑÑ|Ð°Ð¿ÑÐ¸Ð»|Ð¼Ð°Ñ|ÑÑÐ½Ð¸|ÑÑÐ»Ð¸|Ð°Ð²Ð³ÑÑÑ|ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸|Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸|Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸|Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸)/i,
};
const parseMonthPatterns$w = {
  any: [
    /^ÑÐ°/i,
    /^Ð¤/i,
    /^Ð¼Ð°Ñ/i,
    /^Ð°Ð¿/i,
    /^Ð¼Ð°Ñ/i,
    /^ÑÑÐ½/i,
    /^ÑÑÐ»/i,
    /^Ð°Ð²/i,
    /^ÑÐµ/i,
    /^Ð¾ÐºÑ/i,
    /^Ð½Ð¾/i,
    /^Ð´Ðµ/i,
  ],
};

const matchDayPeriodPatterns$w = {
  any: /^(Ð¿ÑÐµÑÐ¿|Ð¿Ð¾Ð¿Ð»|Ð¿Ð¾Ð»Ð½Ð¾Ñ|ÑÑÑÐ¾|Ð¿Ð»Ð°Ð´Ð½Ðµ|Ð²ÐµÑÐµÑ|Ð½Ð¾Ñ)/i,
};
const parseDayPeriodPatterns$w = {
  any: {
    am: /Ð¿ÑÐµÑÐ¿Ð»Ð°Ð´Ð½Ðµ/i,
    pm: /Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ/i,
    midnight: /Ð¿Ð¾Ð»Ð½Ð¾Ñ/i,
    noon: /Ð½Ð°Ð¿Ð»Ð°Ð´Ð½Ðµ/i,
    morning: /Ð½Ð°ÑÑÑÐ¾/i,
    afternoon: /Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ/i,
    evening: /Ð½Ð°Ð²ÐµÑÐµÑ/i,
    night: /Ð½Ð¾ÑÐµ/i,
  },
};

(match$w.match = {
  ordinalNumber: (0, _index2$12.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$w,
    parsePattern: parseOrdinalNumberPattern$w,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$26.buildMatchFn)({
    matchPatterns: matchEraPatterns$w,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$w,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$26.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$w,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$w,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$26.buildMatchFn)({
    matchPatterns: matchMonthPatterns$w,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$w,
    defaultParseWidth: "any",
  }),

  day: (0, _index$26.buildMatchFn)({
    matchPatterns: matchDayPatterns$w,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$w,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$26.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$w,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$w,
    defaultParseWidth: "any",
  }),
});

mk.mk = void 0;
var _index$25 = formatDistance$11;
var _index2$11 = formatLong$w;
var _index3$w = formatRelative$11;
var _index4$w = localize$w;
var _index5$w = match$w;

/**
 * @category Locales
 * @summary Macedonian locale.
 * @language Macedonian
 * @iso-639-2 mkd
 * @author Petar Vlahu [@vlahupetar](https://github.com/vlahupetar)
 * @author Altrim Beqiri [@altrim](https://github.com/altrim)
 */
(mk.mk = {
  code: "mk",
  formatDistance: _index$25.formatDistance,
  formatLong: _index2$11.formatLong,
  formatRelative: _index3$w.formatRelative,
  localize: _index4$w.localize,
  match: _index5$w.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var mn = {};

var formatDistance$$ = {};

formatDistance$$.formatDistance = void 0;

const formatDistanceLocale$v = {
  lessThanXSeconds: {
    one: "ÑÐµÐºÑÐ½Ð´ ÑÒ¯ÑÑÑÐ³Ò¯Ð¹",
    other: "{{count}} ÑÐµÐºÑÐ½Ð´ ÑÒ¯ÑÑÑÐ³Ò¯Ð¹",
  },

  xSeconds: {
    one: "1 ÑÐµÐºÑÐ½Ð´",
    other: "{{count}} ÑÐµÐºÑÐ½Ð´",
  },

  halfAMinute: "ÑÐ°Ð³Ð°Ñ Ð¼Ð¸Ð½ÑÑ",

  lessThanXMinutes: {
    one: "Ð¼Ð¸Ð½ÑÑ ÑÒ¯ÑÑÑÐ³Ò¯Ð¹",
    other: "{{count}} Ð¼Ð¸Ð½ÑÑ ÑÒ¯ÑÑÑÐ³Ò¯Ð¹",
  },

  xMinutes: {
    one: "1 Ð¼Ð¸Ð½ÑÑ",
    other: "{{count}} Ð¼Ð¸Ð½ÑÑ",
  },

  aboutXHours: {
    one: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ 1 ÑÐ°Ð³",
    other: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ {{count}} ÑÐ°Ð³",
  },

  xHours: {
    one: "1 ÑÐ°Ð³",
    other: "{{count}} ÑÐ°Ð³",
  },

  xDays: {
    one: "1 Ó©Ð´Ó©Ñ",
    other: "{{count}} Ó©Ð´Ó©Ñ",
  },

  aboutXWeeks: {
    one: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ 1 Ð´Ð¾Ð»Ð¾Ð¾ ÑÐ¾Ð½Ð¾Ð³",
    other: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ {{count}} Ð´Ð¾Ð»Ð¾Ð¾ ÑÐ¾Ð½Ð¾Ð³",
  },

  xWeeks: {
    one: "1 Ð´Ð¾Ð»Ð¾Ð¾ ÑÐ¾Ð½Ð¾Ð³",
    other: "{{count}} Ð´Ð¾Ð»Ð¾Ð¾ ÑÐ¾Ð½Ð¾Ð³",
  },

  aboutXMonths: {
    one: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ 1 ÑÐ°Ñ",
    other: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ {{count}} ÑÐ°Ñ",
  },

  xMonths: {
    one: "1 ÑÐ°Ñ",
    other: "{{count}} ÑÐ°Ñ",
  },

  aboutXYears: {
    one: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ 1 Ð¶Ð¸Ð»",
    other: "Ð¾Ð¹ÑÐ¾Ð»ÑÐ¾Ð¾Ð³Ð¾Ð¾Ñ {{count}} Ð¶Ð¸Ð»",
  },

  xYears: {
    one: "1 Ð¶Ð¸Ð»",
    other: "{{count}} Ð¶Ð¸Ð»",
  },

  overXYears: {
    one: "1 Ð¶Ð¸Ð» Ð³Ð°ÑÐ°Ð½",
    other: "{{count}} Ð¶Ð¸Ð» Ð³Ð°ÑÐ°Ð½",
  },

  almostXYears: {
    one: "Ð±Ð°ÑÐ°Ð³ 1 Ð¶Ð¸Ð»",
    other: "Ð±Ð°ÑÐ°Ð³ {{count}} Ð¶Ð¸Ð»",
  },
};

const formatDistance$_ = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$v[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    /**
     * Append genitive case
     */
    const words = result.split(" ");
    const lastword = words.pop();
    result = words.join(" ");
    switch (lastword) {
      case "ÑÐµÐºÑÐ½Ð´":
        result += " ÑÐµÐºÑÐ½Ð´Ð¸Ð¹Ð½";
        break;
      case "Ð¼Ð¸Ð½ÑÑ":
        result += " Ð¼Ð¸Ð½ÑÑÑÐ½";
        break;
      case "ÑÐ°Ð³":
        result += " ÑÐ°Ð³Ð¸Ð¹Ð½";
        break;
      case "Ó©Ð´Ó©Ñ":
        result += " Ó©Ð´ÑÐ¸Ð¹Ð½";
        break;
      case "ÑÐ°Ñ":
        result += " ÑÐ°ÑÑÐ½";
        break;
      case "Ð¶Ð¸Ð»":
        result += " Ð¶Ð¸Ð»Ð¸Ð¹Ð½";
        break;
      case "ÑÐ¾Ð½Ð¾Ð³":
        result += " ÑÐ¾Ð½Ð¾Ð³Ð¸Ð¹Ð½";
        break;
      case "Ð³Ð°ÑÐ°Ð½":
        result += " Ð³Ð°ÑÐ°Ð½Ñ";
        break;
      case "ÑÒ¯ÑÑÑÐ³Ò¯Ð¹":
        result += " ÑÒ¯ÑÑÑÐ³Ò¯Ð¹ ÑÑÐ³Ð°ÑÐ°Ð°Ð½Ñ";
        break;
      default:
        result += lastword + "-Ð½";
    }

    if (options.comparison && options.comparison > 0) {
      return result + " Ð´Ð°ÑÐ°Ð°";
    } else {
      return result + " Ó©Ð¼Ð½Ó©";
    }
  }

  return result;
};
formatDistance$$.formatDistance = formatDistance$_;

var formatLong$v = {};

formatLong$v.formatLong = void 0;
var _index$24 = buildFormatLongFn$1;

const dateFormats$v = {
  full: "y 'Ð¾Ð½Ñ' MMMM'ÑÐ½' d, EEEE 'Ð³Ð°ÑÐ°Ð³'",
  long: "y 'Ð¾Ð½Ñ' MMMM'ÑÐ½' d",
  medium: "y 'Ð¾Ð½Ñ' MMM'ÑÐ½' d",
  short: "y.MM.dd",
};

const timeFormats$v = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$v = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$v.formatLong = {
  date: (0, _index$24.buildFormatLongFn)({
    formats: dateFormats$v,
    defaultWidth: "full",
  }),

  time: (0, _index$24.buildFormatLongFn)({
    formats: timeFormats$v,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$24.buildFormatLongFn)({
    formats: dateTimeFormats$v,
    defaultWidth: "full",
  }),
});

var formatRelative$$ = {};

formatRelative$$.formatRelative = void 0;

const formatRelativeLocale$v = {
  lastWeek: "'Ó©Ð½Ð³Ó©ÑÑÓ©Ð½' eeee 'Ð³Ð°ÑÐ°Ð³Ð¸Ð¹Ð½' p 'ÑÐ°Ð³Ñ'",
  yesterday: "'Ó©ÑÐ¸Ð³Ð´Ó©Ñ' p 'ÑÐ°Ð³Ñ'",
  today: "'Ó©Ð½Ó©Ó©Ð´Ó©Ñ' p 'ÑÐ°Ð³Ñ'",
  tomorrow: "'Ð¼Ð°ÑÐ³Ð°Ð°Ñ' p 'ÑÐ°Ð³Ñ'",
  nextWeek: "'Ð¸ÑÑÑ' eeee 'Ð³Ð°ÑÐ°Ð³Ð¸Ð¹Ð½' p 'ÑÐ°Ð³Ñ'",
  other: "P",
};

const formatRelative$_ = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$v[token];
formatRelative$$.formatRelative = formatRelative$_;

var localize$v = {};

localize$v.localize = void 0;
var _index$23 = buildLocalizeFn$1;

const eraValues$v = {
  narrow: ["ÐÐ¢Ó¨", "ÐÐ¢"],
  abbreviated: ["ÐÐ¢Ó¨", "ÐÐ¢"],
  wide: ["Ð½Ð¸Ð¹ÑÐ¸Ð¹Ð½ ÑÐ¾Ð¾Ð»Ð»ÑÐ½ Ó©Ð¼Ð½Ó©Ñ", "Ð½Ð¸Ð¹ÑÐ¸Ð¹Ð½ ÑÐ¾Ð¾Ð»Ð»ÑÐ½"],
};

const quarterValues$v = {
  narrow: ["I", "II", "III", "IV"],
  abbreviated: ["I ÑÐ»Ð¸ÑÐ°Ð»", "II ÑÐ»Ð¸ÑÐ°Ð»", "III ÑÐ»Ð¸ÑÐ°Ð»", "IV ÑÐ»Ð¸ÑÐ°Ð»"],
  wide: ["1-Ñ ÑÐ»Ð¸ÑÐ°Ð»", "2-Ñ ÑÐ»Ð¸ÑÐ°Ð»", "3-Ñ ÑÐ»Ð¸ÑÐ°Ð»", "4-Ñ ÑÐ»Ð¸ÑÐ°Ð»"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$v = {
  narrow: [
    "I",
    "II",
    "III",
    "IV",
    "V",
    "VI",
    "VII",
    "VIII",
    "IX",
    "X",
    "XI",
    "XII",
  ],

  abbreviated: [
    "1-Ñ ÑÐ°Ñ",
    "2-Ñ ÑÐ°Ñ",
    "3-Ñ ÑÐ°Ñ",
    "4-Ñ ÑÐ°Ñ",
    "5-Ñ ÑÐ°Ñ",
    "6-Ñ ÑÐ°Ñ",
    "7-Ñ ÑÐ°Ñ",
    "8-Ñ ÑÐ°Ñ",
    "9-Ñ ÑÐ°Ñ",
    "10-Ñ ÑÐ°Ñ",
    "11-Ñ ÑÐ°Ñ",
    "12-Ñ ÑÐ°Ñ",
  ],

  wide: [
    "ÐÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "Ð¥Ð¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÑÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÓ©ÑÓ©Ð²Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "Ð¢Ð°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÑÑÐ³Ð°Ð°Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÐ¾Ð»Ð¾Ð¾Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÐ°Ð¹Ð¼Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÑÐ´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "ÐÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐÑÐ²Ð°Ð½Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "ÐÑÐ²Ð°Ð½ ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
  ],
};

const formattingMonthValues$6 = {
  narrow: [
    "I",
    "II",
    "III",
    "IV",
    "V",
    "VI",
    "VII",
    "VIII",
    "IX",
    "X",
    "XI",
    "XII",
  ],

  abbreviated: [
    "1-Ñ ÑÐ°Ñ",
    "2-Ñ ÑÐ°Ñ",
    "3-Ñ ÑÐ°Ñ",
    "4-Ñ ÑÐ°Ñ",
    "5-Ñ ÑÐ°Ñ",
    "6-Ñ ÑÐ°Ñ",
    "7-Ñ ÑÐ°Ñ",
    "8-Ñ ÑÐ°Ñ",
    "9-Ñ ÑÐ°Ñ",
    "10-Ñ ÑÐ°Ñ",
    "11-Ñ ÑÐ°Ñ",
    "12-Ñ ÑÐ°Ñ",
  ],

  wide: [
    "Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "Ð³ÑÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "Ð´Ó©ÑÓ©Ð²Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "ÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "Ð·ÑÑÐ³Ð°Ð°Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "Ð´Ð¾Ð»Ð¾Ð¾Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "Ð½Ð°Ð¹Ð¼Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "ÐµÑÐ´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "Ð°ÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
    "Ð°ÑÐ²Ð°Ð½Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ",
    "Ð°ÑÐ²Ð°Ð½ ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ",
  ],
};

const dayValues$v = {
  narrow: ["Ð", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð"],
  short: ["ÐÑ", "ÐÐ°", "ÐÑ", "ÐÑ", "ÐÒ¯", "ÐÐ°", "ÐÑ"],
  abbreviated: ["ÐÑÐ¼", "ÐÐ°Ð²", "ÐÑÐ³", "ÐÑÐ°", "ÐÒ¯Ñ", "ÐÐ°Ð°", "ÐÑÐ¼"],
  wide: ["ÐÑÐ¼", "ÐÐ°Ð²Ð°Ð°", "ÐÑÐ³Ð¼Ð°Ñ", "ÐÑÐ°Ð³Ð²Ð°", "ÐÒ¯ÑÑÐ²", "ÐÐ°Ð°ÑÐ°Ð½", "ÐÑÐ¼Ð±Ð°"],
};

const formattingDayValues = {
  narrow: ["Ð", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð"],
  short: ["ÐÑ", "ÐÐ°", "ÐÑ", "ÐÑ", "ÐÒ¯", "ÐÐ°", "ÐÑ"],
  abbreviated: ["ÐÑÐ¼", "ÐÐ°Ð²", "ÐÑÐ³", "ÐÑÐ°", "ÐÒ¯Ñ", "ÐÐ°Ð°", "ÐÑÐ¼"],
  wide: ["Ð½ÑÐ¼", "Ð´Ð°Ð²Ð°Ð°", "Ð¼ÑÐ³Ð¼Ð°Ñ", "Ð»ÑÐ°Ð³Ð²Ð°", "Ð¿Ò¯ÑÑÐ²", "Ð±Ð°Ð°ÑÐ°Ð½", "Ð±ÑÐ¼Ð±Ð°"],
};

const dayPeriodValues$v = {
  narrow: {
    am: "Ò¯.Ó©.",
    pm: "Ò¯.Ñ.",
    midnight: "ÑÓ©Ð½Ó© Ð´ÑÐ½Ð´",
    noon: "Ò¯Ð´ Ð´ÑÐ½Ð´",
    morning: "Ó©Ð³Ð»Ó©Ó©",
    afternoon: "Ó©Ð´Ó©Ñ",
    evening: "Ð¾ÑÐ¾Ð¹",
    night: "ÑÓ©Ð½Ó©",
  },
  abbreviated: {
    am: "Ò¯.Ó©.",
    pm: "Ò¯.Ñ.",
    midnight: "ÑÓ©Ð½Ó© Ð´ÑÐ½Ð´",
    noon: "Ò¯Ð´ Ð´ÑÐ½Ð´",
    morning: "Ó©Ð³Ð»Ó©Ó©",
    afternoon: "Ó©Ð´Ó©Ñ",
    evening: "Ð¾ÑÐ¾Ð¹",
    night: "ÑÓ©Ð½Ó©",
  },
  wide: {
    am: "Ò¯.Ó©.",
    pm: "Ò¯.Ñ.",
    midnight: "ÑÓ©Ð½Ó© Ð´ÑÐ½Ð´",
    noon: "Ò¯Ð´ Ð´ÑÐ½Ð´",
    morning: "Ó©Ð³Ð»Ó©Ó©",
    afternoon: "Ó©Ð´Ó©Ñ",
    evening: "Ð¾ÑÐ¾Ð¹",
    night: "ÑÓ©Ð½Ó©",
  },
};

const ordinalNumber$v = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$v.localize = {
  ordinalNumber: ordinalNumber$v,

  era: (0, _index$23.buildLocalizeFn)({
    values: eraValues$v,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$23.buildLocalizeFn)({
    values: quarterValues$v,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$23.buildLocalizeFn)({
    values: monthValues$v,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$6,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$23.buildLocalizeFn)({
    values: dayValues$v,
    defaultWidth: "wide",
    formattingValues: formattingDayValues,
    defaultFormattingWidth: "wide",
  }),

  dayPeriod: (0, _index$23.buildLocalizeFn)({
    values: dayPeriodValues$v,
    defaultWidth: "wide",
  }),
});

var match$v = {};

match$v.match = void 0;

var _index$22 = buildMatchFn$1;
var _index2$10 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$v = /\d+/i;
const parseOrdinalNumberPattern$v = /\d+/i;

const matchEraPatterns$v = {
  narrow: /^(Ð½ÑÓ©|Ð½Ñ)/i,
  abbreviated: /^(Ð½ÑÓ©|Ð½Ñ)/i,
  wide: /^(Ð½Ð¸Ð¹ÑÐ¸Ð¹Ð½ ÑÐ¾Ð¾Ð»Ð»ÑÐ½ Ó©Ð¼Ð½Ó©|Ð½Ð¸Ð¹ÑÐ¸Ð¹Ð½ ÑÐ¾Ð¾Ð»Ð»ÑÐ½)/i,
};
const parseEraPatterns$v = {
  any: [/^(Ð½ÑÓ©|Ð½Ð¸Ð¹ÑÐ¸Ð¹Ð½ ÑÐ¾Ð¾Ð»Ð»ÑÐ½ Ó©Ð¼Ð½Ó©)/i, /^(Ð½Ñ|Ð½Ð¸Ð¹ÑÐ¸Ð¹Ð½ ÑÐ¾Ð¾Ð»Ð»ÑÐ½)/i],
};

const matchQuarterPatterns$v = {
  narrow: /^(iv|iii|ii|i)/i,
  abbreviated: /^(iv|iii|ii|i) ÑÐ»Ð¸ÑÐ°Ð»/i,
  wide: /^[1-4]-Ñ ÑÐ»Ð¸ÑÐ°Ð»/i,
};
const parseQuarterPatterns$v = {
  any: [/^(i(\s|$)|1)/i, /^(ii(\s|$)|2)/i, /^(iii(\s|$)|3)/i, /^(iv(\s|$)|4)/i],
};

const matchMonthPatterns$v = {
  narrow: /^(xii|xi|x|ix|viii|vii|vi|v|iv|iii|ii|i)/i,
  abbreviated:
    /^(1-Ñ ÑÐ°Ñ|2-Ñ ÑÐ°Ñ|3-Ñ ÑÐ°Ñ|4-Ñ ÑÐ°Ñ|5-Ñ ÑÐ°Ñ|6-Ñ ÑÐ°Ñ|7-Ñ ÑÐ°Ñ|8-Ñ ÑÐ°Ñ|9-Ñ ÑÐ°Ñ|10-Ñ ÑÐ°Ñ|11-Ñ ÑÐ°Ñ|12-Ñ ÑÐ°Ñ)/i,
  wide: /^(Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ|ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|Ð³ÑÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|Ð´Ó©ÑÓ©Ð²Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ|ÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|Ð·ÑÑÐ³Ð°Ð°Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|Ð´Ð¾Ð»Ð¾Ð¾Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|Ð½Ð°Ð¹Ð¼Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|ÐµÑÐ´Ò¯Ð³ÑÑÑ ÑÐ°Ñ|Ð°ÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ|Ð°ÑÐ²Ð°Ð½ Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ|Ð°ÑÐ²Ð°Ð½ ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ)/i,
};
const parseMonthPatterns$v = {
  narrow: [
    /^i$/i,
    /^ii$/i,
    /^iii$/i,
    /^iv$/i,
    /^v$/i,
    /^vi$/i,
    /^vii$/i,
    /^viii$/i,
    /^ix$/i,
    /^x$/i,
    /^xi$/i,
    /^xii$/i,
  ],

  any: [
    /^(1|Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ)/i,
    /^(2|ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ)/i,
    /^(3|Ð³ÑÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ)/i,
    /^(4|Ð´Ó©ÑÓ©Ð²Ð´Ò¯Ð³ÑÑÑ)/i,
    /^(5|ÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ)/i,
    /^(6|Ð·ÑÑÐ³Ð°Ð°Ð´ÑÐ³Ð°Ð°Ñ)/i,
    /^(7|Ð´Ð¾Ð»Ð¾Ð¾Ð´ÑÐ³Ð°Ð°Ñ)/i,
    /^(8|Ð½Ð°Ð¹Ð¼Ð´ÑÐ³Ð°Ð°Ñ)/i,
    /^(9|ÐµÑÐ´Ò¯Ð³ÑÑÑ)/i,
    /^(10|Ð°ÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ)/i,
    /^(11|Ð°ÑÐ²Ð°Ð½ Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ)/i,
    /^(12|Ð°ÑÐ²Ð°Ð½ ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ)/i,
  ],
};

const matchDayPatterns$v = {
  narrow: /^[Ð½Ð´Ð¼Ð»Ð¿Ð±Ð±]/i,
  short: /^(Ð½Ñ|Ð´Ð°|Ð¼Ñ|Ð»Ñ|Ð¿Ò¯|Ð±Ð°|Ð±Ñ)/i,
  abbreviated: /^(Ð½ÑÐ¼|Ð´Ð°Ð²|Ð¼ÑÐ³|Ð»ÑÐ°|Ð¿Ò¯Ñ|Ð±Ð°Ð°|Ð±ÑÐ¼)/i,
  wide: /^(Ð½ÑÐ¼|Ð´Ð°Ð²Ð°Ð°|Ð¼ÑÐ³Ð¼Ð°Ñ|Ð»ÑÐ°Ð³Ð²Ð°|Ð¿Ò¯ÑÑÐ²|Ð±Ð°Ð°ÑÐ°Ð½|Ð±ÑÐ¼Ð±Ð°)/i,
};
const parseDayPatterns$v = {
  narrow: [/^Ð½/i, /^Ð´/i, /^Ð¼/i, /^Ð»/i, /^Ð¿/i, /^Ð±/i, /^Ð±/i],
  any: [/^Ð½Ñ/i, /^Ð´Ð°/i, /^Ð¼Ñ/i, /^Ð»Ñ/i, /^Ð¿Ò¯/i, /^Ð±Ð°/i, /^Ð±Ñ/i],
};

const matchDayPeriodPatterns$v = {
  narrow: /^(Ò¯\.Ó©\.|Ò¯\.Ñ\.|ÑÓ©Ð½Ó© Ð´ÑÐ½Ð´|Ò¯Ð´ Ð´ÑÐ½Ð´|Ó©Ð³Ð»Ó©Ó©|Ó©Ð´Ó©Ñ|Ð¾ÑÐ¾Ð¹|ÑÓ©Ð½Ó©)/i,
  any: /^(Ò¯\.Ó©\.|Ò¯\.Ñ\.|ÑÓ©Ð½Ó© Ð´ÑÐ½Ð´|Ò¯Ð´ Ð´ÑÐ½Ð´|Ó©Ð³Ð»Ó©Ó©|Ó©Ð´Ó©Ñ|Ð¾ÑÐ¾Ð¹|ÑÓ©Ð½Ó©)/i,
};
const parseDayPeriodPatterns$v = {
  any: {
    am: /^Ò¯\.Ó©\./i,
    pm: /^Ò¯\.Ñ\./i,
    midnight: /^ÑÓ©Ð½Ó© Ð´ÑÐ½Ð´/i,
    noon: /^Ò¯Ð´ Ð´ÑÐ½Ð´/i,
    morning: /Ó©Ð³Ð»Ó©Ó©/i,
    afternoon: /Ó©Ð´Ó©Ñ/i,
    evening: /Ð¾ÑÐ¾Ð¹/i,
    night: /ÑÓ©Ð½Ó©/i,
  },
};

(match$v.match = {
  ordinalNumber: (0, _index2$10.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$v,
    parsePattern: parseOrdinalNumberPattern$v,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$22.buildMatchFn)({
    matchPatterns: matchEraPatterns$v,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$v,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$22.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$v,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$v,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$22.buildMatchFn)({
    matchPatterns: matchMonthPatterns$v,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$v,
    defaultParseWidth: "any",
  }),

  day: (0, _index$22.buildMatchFn)({
    matchPatterns: matchDayPatterns$v,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$v,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$22.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$v,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$v,
    defaultParseWidth: "any",
  }),
});

mn.mn = void 0;
var _index$21 = formatDistance$$;
var _index2$$ = formatLong$v;
var _index3$v = formatRelative$$;
var _index4$v = localize$v;
var _index5$v = match$v;

/**
 * @category Locales
 * @summary Mongolian locale.
 * @language Mongolian
 * @iso-639-2 mon
 * @author Bilguun Ochirbat [@bilguun0203](https://github.com/bilguun0203)
 */
(mn.mn = {
  code: "mn",
  formatDistance: _index$21.formatDistance,
  formatLong: _index2$$.formatLong,
  formatRelative: _index3$v.formatRelative,
  localize: _index4$v.localize,
  match: _index5$v.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var ms = {};

var formatDistance$Z = {};

formatDistance$Z.formatDistance = void 0;

const formatDistanceLocale$u = {
  lessThanXSeconds: {
    one: "kurang dari 1 saat",
    other: "kurang dari {{count}} saat",
  },

  xSeconds: {
    one: "1 saat",
    other: "{{count}} saat",
  },

  halfAMinute: "setengah minit",

  lessThanXMinutes: {
    one: "kurang dari 1 minit",
    other: "kurang dari {{count}} minit",
  },

  xMinutes: {
    one: "1 minit",
    other: "{{count}} minit",
  },

  aboutXHours: {
    one: "sekitar 1 jam",
    other: "sekitar {{count}} jam",
  },

  xHours: {
    one: "1 jam",
    other: "{{count}} jam",
  },

  xDays: {
    one: "1 hari",
    other: "{{count}} hari",
  },

  aboutXWeeks: {
    one: "sekitar 1 minggu",
    other: "sekitar {{count}} minggu",
  },

  xWeeks: {
    one: "1 minggu",
    other: "{{count}} minggu",
  },

  aboutXMonths: {
    one: "sekitar 1 bulan",
    other: "sekitar {{count}} bulan",
  },

  xMonths: {
    one: "1 bulan",
    other: "{{count}} bulan",
  },

  aboutXYears: {
    one: "sekitar 1 tahun",
    other: "sekitar {{count}} tahun",
  },

  xYears: {
    one: "1 tahun",
    other: "{{count}} tahun",
  },

  overXYears: {
    one: "lebih dari 1 tahun",
    other: "lebih dari {{count}} tahun",
  },

  almostXYears: {
    one: "hampir 1 tahun",
    other: "hampir {{count}} tahun",
  },
};

const formatDistance$Y = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$u[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dalam masa " + result;
    } else {
      return result + " yang lalu";
    }
  }

  return result;
};
formatDistance$Z.formatDistance = formatDistance$Y;

var formatLong$u = {};

formatLong$u.formatLong = void 0;
var _index$20 = buildFormatLongFn$1;

const dateFormats$u = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "d/M/yyyy",
};

const timeFormats$u = {
  full: "HH.mm.ss",
  long: "HH.mm.ss",
  medium: "HH.mm",
  short: "HH.mm",
};

const dateTimeFormats$u = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$u.formatLong = {
  date: (0, _index$20.buildFormatLongFn)({
    formats: dateFormats$u,
    defaultWidth: "full",
  }),

  time: (0, _index$20.buildFormatLongFn)({
    formats: timeFormats$u,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$20.buildFormatLongFn)({
    formats: dateTimeFormats$u,
    defaultWidth: "full",
  }),
});

var formatRelative$Z = {};

formatRelative$Z.formatRelative = void 0;

const formatRelativeLocale$u = {
  lastWeek: "eeee 'lepas pada jam' p",
  yesterday: "'Semalam pada jam' p",
  today: "'Hari ini pada jam' p",
  tomorrow: "'Esok pada jam' p",
  nextWeek: "eeee 'pada jam' p",
  other: "P",
};

const formatRelative$Y = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$u[token];
formatRelative$Z.formatRelative = formatRelative$Y;

var localize$u = {};

localize$u.localize = void 0;
var _index$1$ = buildLocalizeFn$1;

// Most data for localization are taken from this page
// https://www.unicode.org/cldr/charts/32/summary/ms.html
const eraValues$u = {
  narrow: ["SM", "M"],
  abbreviated: ["SM", "M"],
  wide: ["Sebelum Masihi", "Masihi"],
};

const quarterValues$u = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["S1", "S2", "S3", "S4"],
  wide: ["Suku pertama", "Suku kedua", "Suku ketiga", "Suku keempat"],
};

// Note: in Malay, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$u = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mac",
    "Apr",
    "Mei",
    "Jun",
    "Jul",
    "Ogo",
    "Sep",
    "Okt",
    "Nov",
    "Dis",
  ],

  wide: [
    "Januari",
    "Februari",
    "Mac",
    "April",
    "Mei",
    "Jun",
    "Julai",
    "Ogos",
    "September",
    "Oktober",
    "November",
    "Disember",
  ],
};

const dayValues$u = {
  narrow: ["A", "I", "S", "R", "K", "J", "S"],
  short: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
  abbreviated: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
  wide: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"],
};

const dayPeriodValues$u = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "tgh malam",
    noon: "tgh hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam",
  },
};

const formattingDayPeriodValues$o = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam",
  },
};

const ordinalNumber$u = (dirtyNumber, _options) => {
  // Can't use "pertama", "kedua" because can't be parsed
  return "ke-" + Number(dirtyNumber);
};

(localize$u.localize = {
  ordinalNumber: ordinalNumber$u,

  era: (0, _index$1$.buildLocalizeFn)({
    values: eraValues$u,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1$.buildLocalizeFn)({
    values: quarterValues$u,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1$.buildLocalizeFn)({
    values: monthValues$u,
    defaultWidth: "wide",
  }),

  day: (0, _index$1$.buildLocalizeFn)({
    values: dayValues$u,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1$.buildLocalizeFn)({
    values: dayPeriodValues$u,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$o,
    defaultFormattingWidth: "wide",
  }),
});

var match$u = {};

match$u.match = void 0;

var _index$1_ = buildMatchFn$1;
var _index2$_ = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$u = /^ke-(\d+)?/i;
const parseOrdinalNumberPattern$u = /petama|\d+/i;

const matchEraPatterns$u = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
  wide: /^(sebelum masihi|masihi)/i,
};
const parseEraPatterns$u = {
  any: [/^s/i, /^(m)/i],
};

const matchQuarterPatterns$u = {
  narrow: /^[1234]/i,
  abbreviated: /^S[1234]/i,
  wide: /Suku (pertama|kedua|ketiga|keempat)/i,
};
const parseQuarterPatterns$u = {
  any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i],
};

const matchMonthPatterns$u = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
  wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i,
};
const parseMonthPatterns$u = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^o/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^ma/i,
    /^ap/i,
    /^me/i,
    /^jun/i,
    /^jul/i,
    /^og/i,
    /^s/i,
    /^ok/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$u = {
  narrow: /^[aisrkj]/i,
  short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i,
};
const parseDayPatterns$u = {
  narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i],
};

const matchDayPeriodPatterns$u = {
  narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i,
};
const parseDayPeriodPatterns$u = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pa/i,
    afternoon: /tengah h/i,
    evening: /pe/i,
    night: /m/i,
  },
};

(match$u.match = {
  ordinalNumber: (0, _index2$_.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$u,
    parsePattern: parseOrdinalNumberPattern$u,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1_.buildMatchFn)({
    matchPatterns: matchEraPatterns$u,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$u,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1_.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$u,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$u,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1_.buildMatchFn)({
    matchPatterns: matchMonthPatterns$u,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$u,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1_.buildMatchFn)({
    matchPatterns: matchDayPatterns$u,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$u,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1_.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$u,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$u,
    defaultParseWidth: "any",
  }),
});

ms.ms = void 0;
var _index$1Z = formatDistance$Z;
var _index2$Z = formatLong$u;
var _index3$u = formatRelative$Z;
var _index4$u = localize$u;
var _index5$u = match$u;

/**
 * @category Locales
 * @summary Malay locale.
 * @language Malay
 * @iso-639-2 msa
 * @author Ruban Selvarajah [@Zyten](https://github.com/Zyten)
 */
(ms.ms = {
  code: "ms",
  formatDistance: _index$1Z.formatDistance,
  formatLong: _index2$Z.formatLong,
  formatRelative: _index3$u.formatRelative,
  localize: _index4$u.localize,
  match: _index5$u.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var mt = {};

var formatDistance$X = {};

formatDistance$X.formatDistance = void 0;

const formatDistanceLocale$t = {
  lessThanXSeconds: {
    one: "inqas minn sekonda",
    other: "inqas minn {{count}} sekondi",
  },

  xSeconds: {
    one: "sekonda",
    other: "{{count}} sekondi",
  },

  halfAMinute: "nofs minuta",

  lessThanXMinutes: {
    one: "inqas minn minuta",
    other: "inqas minn {{count}} minuti",
  },

  xMinutes: {
    one: "minuta",
    other: "{{count}} minuti",
  },

  aboutXHours: {
    one: "madwar siegÄ§a",
    other: "madwar {{count}} siegÄ§at",
  },

  xHours: {
    one: "siegÄ§a",
    other: "{{count}} siegÄ§at",
  },

  xDays: {
    one: "Ä¡urnata",
    other: "{{count}} Ä¡ranet",
  },

  aboutXWeeks: {
    one: "madwar Ä¡imgÄ§a",
    other: "madwar {{count}} Ä¡imgÄ§at",
  },

  xWeeks: {
    one: "Ä¡imgÄ§a",
    other: "{{count}} Ä¡imgÄ§at",
  },

  aboutXMonths: {
    one: "madwar xahar",
    other: "madwar {{count}} xhur",
  },

  xMonths: {
    one: "xahar",
    other: "{{count}} xhur",
  },

  aboutXYears: {
    one: "madwar sena",
    two: "madwar sentejn",
    other: "madwar {{count}} snin",
  },

  xYears: {
    one: "sena",
    two: "sentejn",
    other: "{{count}} snin",
  },

  overXYears: {
    one: "aktar minn sena",
    two: "aktar minn sentejn",
    other: "aktar minn {{count}} snin",
  },

  almostXYears: {
    one: "kwaÅ¼i sena",
    two: "kwaÅ¼i sentejn",
    other: "kwaÅ¼i {{count}} snin",
  },
};

const formatDistance$W = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$t[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "f'" + result;
    } else {
      return result + " ilu";
    }
  }

  return result;
};
formatDistance$X.formatDistance = formatDistance$W;

var formatLong$t = {};

formatLong$t.formatLong = void 0;
var _index$1Y = buildFormatLongFn$1;

const dateFormats$t = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy",
};

const timeFormats$t = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$t = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$t.formatLong = {
  date: (0, _index$1Y.buildFormatLongFn)({
    formats: dateFormats$t,
    defaultWidth: "full",
  }),

  time: (0, _index$1Y.buildFormatLongFn)({
    formats: timeFormats$t,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1Y.buildFormatLongFn)({
    formats: dateTimeFormats$t,
    defaultWidth: "full",
  }),
});

var formatRelative$X = {};

formatRelative$X.formatRelative = void 0;

const formatRelativeLocale$t = {
  lastWeek: "eeee 'li gÄ§adda' 'fil-'p",
  yesterday: "'Il-bieraÄ§ fil-'p",
  today: "'Illum fil-'p",
  tomorrow: "'GÄ§ada fil-'p",
  nextWeek: "eeee 'fil-'p",
  other: "P",
};

const formatRelative$W = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$t[token];
formatRelative$X.formatRelative = formatRelative$W;

var localize$t = {};

localize$t.localize = void 0;
var _index$1X = buildLocalizeFn$1;

const eraValues$t = {
  narrow: ["Q", "W"],
  abbreviated: ["QK", "WK"],
  wide: ["qabel Kristu", "wara Kristu"],
};

const quarterValues$t = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1. kwart", "2. kwart", "3. kwart", "4. kwart"],
};

const monthValues$t = {
  narrow: ["J", "F", "M", "A", "M", "Ä ", "L", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Fra",
    "Mar",
    "Apr",
    "Mej",
    "Ä un",
    "Lul",
    "Aww",
    "Set",
    "Ott",
    "Nov",
    "DiÄ",
  ],

  wide: [
    "Jannar",
    "Frar",
    "Marzu",
    "April",
    "Mejju",
    "Ä unju",
    "Lulju",
    "Awwissu",
    "Settembru",
    "Ottubru",
    "Novembru",
    "DiÄembru",
  ],
};

const dayValues$t = {
  narrow: ["Ä¦", "T", "T", "E", "Ä¦", "Ä ", "S"],
  short: ["Ä¦a", "Tn", "Tl", "Er", "Ä¦a", "Ä i", "Si"],
  abbreviated: ["Ä¦ad", "Tne", "Tli", "Erb", "Ä¦am", "Ä im", "Sib"],
  wide: [
    "Il-Ä¦add",
    "It-Tnejn",
    "It-Tlieta",
    "L-ErbgÄ§a",
    "Il-Ä¦amis",
    "Il-Ä imgÄ§a",
    "Is-Sibt",
  ],
};

const dayPeriodValues$t = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "nofsillejl",
    noon: "nofsinhar",
    morning: "gÄ§odwa",
    afternoon: "wara nofsinhar",
    evening: "filgÄ§axija",
    night: "lejl",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "nofsillejl",
    noon: "nofsinhar",
    morning: "gÄ§odwa",
    afternoon: "wara nofsinhar",
    evening: "filgÄ§axija",
    night: "lejl",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "nofsillejl",
    noon: "nofsinhar",
    morning: "gÄ§odwa",
    afternoon: "wara nofsinhar",
    evening: "filgÄ§axija",
    night: "lejl",
  },
};

const formattingDayPeriodValues$n = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: "filgÄ§odu",
    afternoon: "wara nofsinhar",
    evening: "filgÄ§axija",
    night: "billejl",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: "filgÄ§odu",
    afternoon: "wara nofsinhar",
    evening: "filgÄ§axija",
    night: "billejl",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: "filgÄ§odu",
    afternoon: "wara nofsinhar",
    evening: "filgÄ§axija",
    night: "billejl",
  },
};

const ordinalNumber$t = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "Âº";
};

(localize$t.localize = {
  ordinalNumber: ordinalNumber$t,

  era: (0, _index$1X.buildLocalizeFn)({
    values: eraValues$t,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1X.buildLocalizeFn)({
    values: quarterValues$t,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1X.buildLocalizeFn)({
    values: monthValues$t,
    defaultWidth: "wide",
  }),

  day: (0, _index$1X.buildLocalizeFn)({
    values: dayValues$t,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1X.buildLocalizeFn)({
    values: dayPeriodValues$t,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$n,
    defaultFormattingWidth: "wide",
  }),
});

var match$t = {};

match$t.match = void 0;

var _index$1W = buildMatchFn$1;
var _index2$Y = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$t = /^(\d+)(Âº)?/i;
const parseOrdinalNumberPattern$t = /\d+/i;

const matchEraPatterns$t = {
  narrow: /^(q|w)/i,
  abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
  wide: /^(qabel kristu|before common era|wara kristu|common era)/i,
};
const parseEraPatterns$t = {
  any: [/^(q|b)/i, /^(w|c)/i],
};

const matchQuarterPatterns$t = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](\.)? kwart/i,
};
const parseQuarterPatterns$t = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$t = {
  narrow: /^[jfmaglsond]/i,
  abbreviated: /^(jan|fra|mar|apr|mej|Ä¡un|lul|aww|set|ott|nov|diÄ)/i,
  wide: /^(jannar|frar|marzu|april|mejju|Ä¡unju|lulju|awwissu|settembru|ottubru|novembru|diÄembru)/i,
};
const parseMonthPatterns$t = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^Ä¡/i,
    /^l/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mej/i,
    /^Ä¡/i,
    /^l/i,
    /^aw/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$t = {
  narrow: /^[Ä§teÄ¡s]/i,
  short: /^(Ä§a|tn|tl|er|Ä§a|Ä¡i|si)/i,
  abbreviated: /^(Ä§ad|tne|tli|erb|Ä§am|Ä¡im|sib)/i,
  wide: /^(il-Ä§add|it-tnejn|it-tlieta|l-erbgÄ§a|il-Ä§amis|il-Ä¡imgÄ§a|is-sibt)/i,
};
const parseDayPatterns$t = {
  narrow: [/^Ä§/i, /^t/i, /^t/i, /^e/i, /^Ä§/i, /^Ä¡/i, /^s/i],
  any: [
    /^(il-)?Ä§ad/i,
    /^(it-)?tn/i,
    /^(it-)?tl/i,
    /^(l-)?er/i,
    /^(il-)?ham/i,
    /^(il-)?Ä¡i/i,
    /^(is-)?si/i,
  ],
};

const matchDayPeriodPatterns$t = {
  narrow:
    /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (gÄ§odwa|wara nofsinhar|filgÄ§axija|lejl))/i,
  any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (gÄ§odwa|wara nofsinhar|filgÄ§axija|lejl))/i,
};
const parseDayPeriodPatterns$t = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^f'nofsillejl/i,
    noon: /^f'nofsinhar/i,
    morning: /gÄ§odwa/i,
    afternoon: /wara(\s.*)nofsinhar/i,
    evening: /filgÄ§axija/i,
    night: /lejl/i,
  },
};

(match$t.match = {
  ordinalNumber: (0, _index2$Y.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$t,
    parsePattern: parseOrdinalNumberPattern$t,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1W.buildMatchFn)({
    matchPatterns: matchEraPatterns$t,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$t,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1W.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$t,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$t,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1W.buildMatchFn)({
    matchPatterns: matchMonthPatterns$t,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$t,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1W.buildMatchFn)({
    matchPatterns: matchDayPatterns$t,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$t,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1W.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$t,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$t,
    defaultParseWidth: "any",
  }),
});

mt.mt = void 0;
var _index$1V = formatDistance$X;
var _index2$X = formatLong$t;
var _index3$t = formatRelative$X;
var _index4$t = localize$t;
var _index5$t = match$t;

/**
 * @category Locales
 * @summary Maltese locale.
 * @language Maltese
 * @iso-639-2 mlt
 * @author Andras Matzon [@amatzon](@link https://github.com/amatzon)
 * @author Bryan Borg [@bryanMt](@link https://github.com/bryanMt)
 */
(mt.mt = {
  code: "mt",
  formatDistance: _index$1V.formatDistance,
  formatLong: _index2$X.formatLong,
  formatRelative: _index3$t.formatRelative,
  localize: _index4$t.localize,
  match: _index5$t.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var nb = {};

var formatDistance$V = {};

formatDistance$V.formatDistance = void 0;

const formatDistanceLocale$s = {
  lessThanXSeconds: {
    one: "mindre enn ett sekund",
    other: "mindre enn {{count}} sekunder",
  },

  xSeconds: {
    one: "ett sekund",
    other: "{{count}} sekunder",
  },

  halfAMinute: "et halvt minutt",

  lessThanXMinutes: {
    one: "mindre enn ett minutt",
    other: "mindre enn {{count}} minutter",
  },

  xMinutes: {
    one: "ett minutt",
    other: "{{count}} minutter",
  },

  aboutXHours: {
    one: "omtrent en time",
    other: "omtrent {{count}} timer",
  },

  xHours: {
    one: "en time",
    other: "{{count}} timer",
  },

  xDays: {
    one: "en dag",
    other: "{{count}} dager",
  },

  aboutXWeeks: {
    one: "omtrent en uke",
    other: "omtrent {{count}} uker",
  },

  xWeeks: {
    one: "en uke",
    other: "{{count}} uker",
  },

  aboutXMonths: {
    one: "omtrent en mÃ¥ned",
    other: "omtrent {{count}} mÃ¥neder",
  },

  xMonths: {
    one: "en mÃ¥ned",
    other: "{{count}} mÃ¥neder",
  },

  aboutXYears: {
    one: "omtrent ett Ã¥r",
    other: "omtrent {{count}} Ã¥r",
  },

  xYears: {
    one: "ett Ã¥r",
    other: "{{count}} Ã¥r",
  },

  overXYears: {
    one: "over ett Ã¥r",
    other: "over {{count}} Ã¥r",
  },

  almostXYears: {
    one: "nesten ett Ã¥r",
    other: "nesten {{count}} Ã¥r",
  },
};

const formatDistance$U = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$s[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " siden";
    }
  }

  return result;
};
formatDistance$V.formatDistance = formatDistance$U;

var formatLong$s = {};

formatLong$s.formatLong = void 0;
var _index$1U = buildFormatLongFn$1;

const dateFormats$s = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y",
};

const timeFormats$s = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$s = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$s.formatLong = {
  date: (0, _index$1U.buildFormatLongFn)({
    formats: dateFormats$s,
    defaultWidth: "full",
  }),

  time: (0, _index$1U.buildFormatLongFn)({
    formats: timeFormats$s,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1U.buildFormatLongFn)({
    formats: dateTimeFormats$s,
    defaultWidth: "full",
  }),
});

var formatRelative$V = {};

formatRelative$V.formatRelative = void 0;

const formatRelativeLocale$s = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i gÃ¥r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P",
};

const formatRelative$U = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$s[token];
formatRelative$V.formatRelative = formatRelative$U;

var localize$s = {};

localize$s.localize = void 0;
var _index$1T = buildLocalizeFn$1;

const eraValues$s = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["fÃ¸r Kristus", "etter Kristus"],
};

const quarterValues$s = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$s = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mars",
    "apr.",
    "mai",
    "juni",
    "juli",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "des.",
  ],

  wide: [
    "januar",
    "februar",
    "mars",
    "april",
    "mai",
    "juni",
    "juli",
    "august",
    "september",
    "oktober",
    "november",
    "desember",
  ],
};

const dayValues$s = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["sÃ¸", "ma", "ti", "on", "to", "fr", "lÃ¸"],
  abbreviated: ["sÃ¸n", "man", "tir", "ons", "tor", "fre", "lÃ¸r"],
  wide: [
    "sÃ¸ndag",
    "mandag",
    "tirsdag",
    "onsdag",
    "torsdag",
    "fredag",
    "lÃ¸rdag",
  ],
};

const dayPeriodValues$s = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morg.",
    afternoon: "pÃ¥ etterm.",
    evening: "pÃ¥ kvelden",
    night: "pÃ¥ natten",
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morg.",
    afternoon: "pÃ¥ etterm.",
    evening: "pÃ¥ kvelden",
    night: "pÃ¥ natten",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morgenen",
    afternoon: "pÃ¥ ettermiddagen",
    evening: "pÃ¥ kvelden",
    night: "pÃ¥ natten",
  },
};

const ordinalNumber$s = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$s.localize = {
  ordinalNumber: ordinalNumber$s,

  era: (0, _index$1T.buildLocalizeFn)({
    values: eraValues$s,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1T.buildLocalizeFn)({
    values: quarterValues$s,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1T.buildLocalizeFn)({
    values: monthValues$s,
    defaultWidth: "wide",
  }),

  day: (0, _index$1T.buildLocalizeFn)({
    values: dayValues$s,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1T.buildLocalizeFn)({
    values: dayPeriodValues$s,
    defaultWidth: "wide",
  }),
});

var match$s = {};

match$s.match = void 0;

var _index$1S = buildMatchFn$1;
var _index2$W = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$s = /^(\d+)\.?/i;
const parseOrdinalNumberPattern$s = /\d+/i;

const matchEraPatterns$s = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(fÃ¸r Kristus|fÃ¸r vÃ¥r tid|etter Kristus|vÃ¥r tid)/i,
};
const parseEraPatterns$s = {
  any: [/^f/i, /^e/i],
};

const matchQuarterPatterns$s = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i,
};
const parseQuarterPatterns$s = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$s = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i,
};
const parseMonthPatterns$s = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^aug/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$s = {
  narrow: /^[smtofl]/i,
  short: /^(sÃ¸|ma|ti|on|to|fr|lÃ¸)/i,
  abbreviated: /^(sÃ¸n|man|tir|ons|tor|fre|lÃ¸r)/i,
  wide: /^(sÃ¸ndag|mandag|tirsdag|onsdag|torsdag|fredag|lÃ¸rdag)/i,
};
const parseDayPatterns$s = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i],
};

const matchDayPeriodPatterns$s = {
  narrow:
    /^(midnatt|middag|(pÃ¥) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(pÃ¥) (morgenen|ettermiddagen|kvelden|natten))/i,
};
const parseDayPeriodPatterns$s = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i,
  },
};

(match$s.match = {
  ordinalNumber: (0, _index2$W.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$s,
    parsePattern: parseOrdinalNumberPattern$s,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1S.buildMatchFn)({
    matchPatterns: matchEraPatterns$s,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$s,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1S.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$s,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$s,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1S.buildMatchFn)({
    matchPatterns: matchMonthPatterns$s,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$s,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1S.buildMatchFn)({
    matchPatterns: matchDayPatterns$s,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$s,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1S.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$s,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$s,
    defaultParseWidth: "any",
  }),
});

nb.nb = void 0;
var _index$1R = formatDistance$V;
var _index2$V = formatLong$s;
var _index3$s = formatRelative$V;
var _index4$s = localize$s;
var _index5$s = match$s;

/**
 * @category Locales
 * @summary Norwegian BokmÃ¥l locale.
 * @language Norwegian BokmÃ¥l
 * @iso-639-2 nob
 * @author Hans-Kristian Koren [@Hanse](https://github.com/Hanse)
 * @author Mikolaj Grzyb [@mikolajgrzyb](https://github.com/mikolajgrzyb)
 * @author Dag Stuan [@dagstuan](https://github.com/dagstuan)
 */
(nb.nb = {
  code: "nb",
  formatDistance: _index$1R.formatDistance,
  formatLong: _index2$V.formatLong,
  formatRelative: _index3$s.formatRelative,
  localize: _index4$s.localize,
  match: _index5$s.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var nl = {};

var formatDistance$T = {};

formatDistance$T.formatDistance = void 0;

const formatDistanceLocale$r = {
  lessThanXSeconds: {
    one: "minder dan een seconde",
    other: "minder dan {{count}} seconden",
  },

  xSeconds: {
    one: "1 seconde",
    other: "{{count}} seconden",
  },

  halfAMinute: "een halve minuut",

  lessThanXMinutes: {
    one: "minder dan een minuut",
    other: "minder dan {{count}} minuten",
  },

  xMinutes: {
    one: "een minuut",
    other: "{{count}} minuten",
  },

  aboutXHours: {
    one: "ongeveer 1 uur",
    other: "ongeveer {{count}} uur",
  },

  xHours: {
    one: "1 uur",
    other: "{{count}} uur",
  },

  xDays: {
    one: "1 dag",
    other: "{{count}} dagen",
  },

  aboutXWeeks: {
    one: "ongeveer 1 week",
    other: "ongeveer {{count}} weken",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weken",
  },

  aboutXMonths: {
    one: "ongeveer 1 maand",
    other: "ongeveer {{count}} maanden",
  },

  xMonths: {
    one: "1 maand",
    other: "{{count}} maanden",
  },

  aboutXYears: {
    one: "ongeveer 1 jaar",
    other: "ongeveer {{count}} jaar",
  },

  xYears: {
    one: "1 jaar",
    other: "{{count}} jaar",
  },

  overXYears: {
    one: "meer dan 1 jaar",
    other: "meer dan {{count}} jaar",
  },

  almostXYears: {
    one: "bijna 1 jaar",
    other: "bijna {{count}} jaar",
  },
};

const formatDistance$S = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$r[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "over " + result;
    } else {
      return result + " geleden";
    }
  }

  return result;
};
formatDistance$T.formatDistance = formatDistance$S;

var formatLong$r = {};

formatLong$r.formatLong = void 0;
var _index$1Q = buildFormatLongFn$1;

const dateFormats$r = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd-MM-y",
};

const timeFormats$r = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$r = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$r.formatLong = {
  date: (0, _index$1Q.buildFormatLongFn)({
    formats: dateFormats$r,
    defaultWidth: "full",
  }),

  time: (0, _index$1Q.buildFormatLongFn)({
    formats: timeFormats$r,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1Q.buildFormatLongFn)({
    formats: dateTimeFormats$r,
    defaultWidth: "full",
  }),
});

var formatRelative$T = {};

formatRelative$T.formatRelative = void 0;

const formatRelativeLocale$r = {
  lastWeek: "'afgelopen' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: "P",
};

const formatRelative$S = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$r[token];
formatRelative$T.formatRelative = formatRelative$S;

var localize$r = {};

localize$r.localize = void 0;
var _index$1P = buildLocalizeFn$1;

const eraValues$r = {
  narrow: ["v.C.", "n.C."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["voor Christus", "na Christus"],
};

const quarterValues$r = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"],
};

const monthValues$r = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mrt.",
    "apr.",
    "mei",
    "jun.",
    "jul.",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "januari",
    "februari",
    "maart",
    "april",
    "mei",
    "juni",
    "juli",
    "augustus",
    "september",
    "oktober",
    "november",
    "december",
  ],
};

const dayValues$r = {
  narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
  short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
  abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
  wide: [
    "zondag",
    "maandag",
    "dinsdag",
    "woensdag",
    "donderdag",
    "vrijdag",
    "zaterdag",
  ],
};

const dayPeriodValues$r = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middaguur",
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middaguur",
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middaguur",
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts",
  },
};

const ordinalNumber$r = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "e";
};

(localize$r.localize = {
  ordinalNumber: ordinalNumber$r,

  era: (0, _index$1P.buildLocalizeFn)({
    values: eraValues$r,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1P.buildLocalizeFn)({
    values: quarterValues$r,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1P.buildLocalizeFn)({
    values: monthValues$r,
    defaultWidth: "wide",
  }),

  day: (0, _index$1P.buildLocalizeFn)({
    values: dayValues$r,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1P.buildLocalizeFn)({
    values: dayPeriodValues$r,
    defaultWidth: "wide",
  }),
});

var match$r = {};

match$r.match = void 0;

var _index$1O = buildMatchFn$1;
var _index2$U = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$r = /^(\d+)e?/i;
const parseOrdinalNumberPattern$r = /\d+/i;

const matchEraPatterns$r = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/,
};
const parseEraPatterns$r = {
  any: [/^v/, /^n/],
};

const matchQuarterPatterns$r = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i,
};
const parseQuarterPatterns$r = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$r = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i,
};
const parseMonthPatterns$r = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^jan/i,
    /^feb/i,
    /^m(r|a)/i,
    /^apr/i,
    /^mei/i,
    /^jun/i,
    /^jul/i,
    /^aug/i,
    /^sep/i,
    /^okt/i,
    /^nov/i,
    /^dec/i,
  ],
};

const matchDayPatterns$r = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i,
};
const parseDayPatterns$r = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i],
};

const matchDayPeriodPatterns$r = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i,
};
const parseDayPeriodPatterns$r = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i,
  },
};

(match$r.match = {
  ordinalNumber: (0, _index2$U.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$r,
    parsePattern: parseOrdinalNumberPattern$r,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1O.buildMatchFn)({
    matchPatterns: matchEraPatterns$r,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$r,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1O.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$r,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$r,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1O.buildMatchFn)({
    matchPatterns: matchMonthPatterns$r,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$r,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1O.buildMatchFn)({
    matchPatterns: matchDayPatterns$r,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$r,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1O.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$r,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$r,
    defaultParseWidth: "any",
  }),
});

nl.nl = void 0;
var _index$1N = formatDistance$T;
var _index2$T = formatLong$r;
var _index3$r = formatRelative$T;
var _index4$r = localize$r;
var _index5$r = match$r;

/**
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder](https://github.com/jtangelder)
 * @author Ruben Stolk [@rubenstolk](https://github.com/rubenstolk)
 * @author Lode Vanhove [@bitcrumb](https://github.com/bitcrumb)
 * @author Edo Rivai [@edorivai](https://github.com/edorivai)
 * @author Niels Keurentjes [@curry684](https://github.com/curry684)
 * @author Stefan Vermaas [@stefanvermaas](https://github.com/stefanvermaas)
 */
(nl.nl = {
  code: "nl",
  formatDistance: _index$1N.formatDistance,
  formatLong: _index2$T.formatLong,
  formatRelative: _index3$r.formatRelative,
  localize: _index4$r.localize,
  match: _index5$r.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var nlBE = {};

var formatDistance$R = {};

formatDistance$R.formatDistance = void 0;

const formatDistanceLocale$q = {
  lessThanXSeconds: {
    one: "minder dan een seconde",
    other: "minder dan {{count}} seconden",
  },

  xSeconds: {
    one: "1 seconde",
    other: "{{count}} seconden",
  },

  halfAMinute: "een halve minuut",

  lessThanXMinutes: {
    one: "minder dan een minuut",
    other: "minder dan {{count}} minuten",
  },

  xMinutes: {
    one: "een minuut",
    other: "{{count}} minuten",
  },

  aboutXHours: {
    one: "ongeveer 1 uur",
    other: "ongeveer {{count}} uur",
  },

  xHours: {
    one: "1 uur",
    other: "{{count}} uur",
  },

  xDays: {
    one: "1 dag",
    other: "{{count}} dagen",
  },

  aboutXWeeks: {
    one: "ongeveer 1 week",
    other: "ongeveer {{count}} weken",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weken",
  },

  aboutXMonths: {
    one: "ongeveer 1 maand",
    other: "ongeveer {{count}} maanden",
  },

  xMonths: {
    one: "1 maand",
    other: "{{count}} maanden",
  },

  aboutXYears: {
    one: "ongeveer 1 jaar",
    other: "ongeveer {{count}} jaar",
  },

  xYears: {
    one: "1 jaar",
    other: "{{count}} jaar",
  },

  overXYears: {
    one: "meer dan 1 jaar",
    other: "meer dan {{count}} jaar",
  },

  almostXYears: {
    one: "bijna 1 jaar",
    other: "bijna {{count}} jaar",
  },
};

const formatDistance$Q = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$q[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "over " + result;
    } else {
      return result + " geleden";
    }
  }

  return result;
};
formatDistance$R.formatDistance = formatDistance$Q;

var formatLong$q = {};

formatLong$q.formatLong = void 0;
var _index$1M = buildFormatLongFn$1;

const dateFormats$q = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.y",
};

const timeFormats$q = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$q = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$q.formatLong = {
  date: (0, _index$1M.buildFormatLongFn)({
    formats: dateFormats$q,
    defaultWidth: "full",
  }),

  time: (0, _index$1M.buildFormatLongFn)({
    formats: timeFormats$q,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1M.buildFormatLongFn)({
    formats: dateTimeFormats$q,
    defaultWidth: "full",
  }),
});

var formatRelative$R = {};

formatRelative$R.formatRelative = void 0;

const formatRelativeLocale$q = {
  lastWeek: "'vorige' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: "P",
};

const formatRelative$Q = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$q[token];
formatRelative$R.formatRelative = formatRelative$Q;

var localize$q = {};

localize$q.localize = void 0;
var _index$1L = buildLocalizeFn$1;

const eraValues$q = {
  narrow: ["v.C.", "n.C."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["voor Christus", "na Christus"],
};

const quarterValues$q = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"],
};

const monthValues$q = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mrt.",
    "apr.",
    "mei",
    "jun.",
    "jul.",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "januari",
    "februari",
    "maart",
    "april",
    "mei",
    "juni",
    "juli",
    "augustus",
    "september",
    "oktober",
    "november",
    "december",
  ],
};

const dayValues$q = {
  narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
  short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
  abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
  wide: [
    "zondag",
    "maandag",
    "dinsdag",
    "woensdag",
    "donderdag",
    "vrijdag",
    "zaterdag",
  ],
};

const dayPeriodValues$q = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middag",
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middag",
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middag",
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts",
  },
};

const ordinalNumber$q = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "e";
};

(localize$q.localize = {
  ordinalNumber: ordinalNumber$q,

  era: (0, _index$1L.buildLocalizeFn)({
    values: eraValues$q,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1L.buildLocalizeFn)({
    values: quarterValues$q,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1L.buildLocalizeFn)({
    values: monthValues$q,
    defaultWidth: "wide",
  }),

  day: (0, _index$1L.buildLocalizeFn)({
    values: dayValues$q,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1L.buildLocalizeFn)({
    values: dayPeriodValues$q,
    defaultWidth: "wide",
  }),
});

var match$q = {};

match$q.match = void 0;

var _index$1K = buildMatchFn$1;
var _index2$S = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$q = /^(\d+)e?/i;
const parseOrdinalNumberPattern$q = /\d+/i;

const matchEraPatterns$q = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/,
};
const parseEraPatterns$q = {
  any: [/^v/, /^n/],
};

const matchQuarterPatterns$q = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i,
};
const parseQuarterPatterns$q = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$q = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i,
};
const parseMonthPatterns$q = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^jan/i,
    /^feb/i,
    /^m(r|a)/i,
    /^apr/i,
    /^mei/i,
    /^jun/i,
    /^jul/i,
    /^aug/i,
    /^sep/i,
    /^okt/i,
    /^nov/i,
    /^dec/i,
  ],
};

const matchDayPatterns$q = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i,
};
const parseDayPatterns$q = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i],
};

const matchDayPeriodPatterns$q = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i,
};
const parseDayPeriodPatterns$q = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i,
  },
};

(match$q.match = {
  ordinalNumber: (0, _index2$S.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$q,
    parsePattern: parseOrdinalNumberPattern$q,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1K.buildMatchFn)({
    matchPatterns: matchEraPatterns$q,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$q,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1K.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$q,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$q,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1K.buildMatchFn)({
    matchPatterns: matchMonthPatterns$q,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$q,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1K.buildMatchFn)({
    matchPatterns: matchDayPatterns$q,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$q,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1K.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$q,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$q,
    defaultParseWidth: "any",
  }),
});

nlBE.nlBE = void 0;
var _index$1J = formatDistance$R;
var _index2$R = formatLong$q;
var _index3$q = formatRelative$R;
var _index4$q = localize$q;
var _index5$q = match$q;

/**
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder](https://github.com/jtangelder)
 * @author Ruben Stolk [@rubenstolk](https://github.com/rubenstolk)
 * @author Lode Vanhove [@bitcrumb](https://github.com/bitcrumb)
 * @author Alex Hoeing [@dcbn](https://github.com/dcbn)
 */
(nlBE.nlBE = {
  code: "nl-BE",
  formatDistance: _index$1J.formatDistance,
  formatLong: _index2$R.formatLong,
  formatRelative: _index3$q.formatRelative,
  localize: _index4$q.localize,
  match: _index5$q.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var nn = {};

var formatDistance$P = {};

formatDistance$P.formatDistance = void 0;

const formatDistanceLocale$p = {
  lessThanXSeconds: {
    one: "mindre enn eitt sekund",
    other: "mindre enn {{count}} sekund",
  },

  xSeconds: {
    one: "eitt sekund",
    other: "{{count}} sekund",
  },

  halfAMinute: "eit halvt minutt",

  lessThanXMinutes: {
    one: "mindre enn eitt minutt",
    other: "mindre enn {{count}} minutt",
  },

  xMinutes: {
    one: "eitt minutt",
    other: "{{count}} minutt",
  },

  aboutXHours: {
    one: "omtrent ein time",
    other: "omtrent {{count}} timar",
  },

  xHours: {
    one: "ein time",
    other: "{{count}} timar",
  },

  xDays: {
    one: "ein dag",
    other: "{{count}} dagar",
  },

  aboutXWeeks: {
    one: "omtrent ei veke",
    other: "omtrent {{count}} veker",
  },

  xWeeks: {
    one: "ei veke",
    other: "{{count}} veker",
  },

  aboutXMonths: {
    one: "omtrent ein mÃ¥nad",
    other: "omtrent {{count}} mÃ¥nader",
  },

  xMonths: {
    one: "ein mÃ¥nad",
    other: "{{count}} mÃ¥nader",
  },

  aboutXYears: {
    one: "omtrent eitt Ã¥r",
    other: "omtrent {{count}} Ã¥r",
  },

  xYears: {
    one: "eitt Ã¥r",
    other: "{{count}} Ã¥r",
  },

  overXYears: {
    one: "over eitt Ã¥r",
    other: "over {{count}} Ã¥r",
  },

  almostXYears: {
    one: "nesten eitt Ã¥r",
    other: "nesten {{count}} Ã¥r",
  },
};

const wordMapping$1 = [
  "null",
  "ein",
  "to",
  "tre",
  "fire",
  "fem",
  "seks",
  "sju",
  "Ã¥tte",
  "ni",
  "ti",
  "elleve",
  "tolv",
];

const formatDistance$O = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$p[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace(
      "{{count}}",
      count < 13 ? wordMapping$1[count] : String(count),
    );
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " sidan";
    }
  }

  return result;
};
formatDistance$P.formatDistance = formatDistance$O;

var formatLong$p = {};

formatLong$p.formatLong = void 0;
var _index$1I = buildFormatLongFn$1;

const dateFormats$p = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y",
};

const timeFormats$p = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$p = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$p.formatLong = {
  date: (0, _index$1I.buildFormatLongFn)({
    formats: dateFormats$p,
    defaultWidth: "full",
  }),

  time: (0, _index$1I.buildFormatLongFn)({
    formats: timeFormats$p,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1I.buildFormatLongFn)({
    formats: dateTimeFormats$p,
    defaultWidth: "full",
  }),
});

var formatRelative$P = {};

formatRelative$P.formatRelative = void 0;

const formatRelativeLocale$p = {
  lastWeek: "'fÃ¸rre' eeee 'kl.' p",
  yesterday: "'i gÃ¥r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P",
};

const formatRelative$O = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$p[token];
formatRelative$P.formatRelative = formatRelative$O;

var localize$p = {};

localize$p.localize = void 0;
var _index$1H = buildLocalizeFn$1;

const eraValues$p = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["fÃ¸r Kristus", "etter Kristus"],
};

const quarterValues$p = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$p = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mars",
    "apr.",
    "mai",
    "juni",
    "juli",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "des.",
  ],

  wide: [
    "januar",
    "februar",
    "mars",
    "april",
    "mai",
    "juni",
    "juli",
    "august",
    "september",
    "oktober",
    "november",
    "desember",
  ],
};

const dayValues$p = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["su", "mÃ¥", "ty", "on", "to", "fr", "lau"],
  abbreviated: ["sun", "mÃ¥n", "tys", "ons", "tor", "fre", "laur"],
  wide: [
    "sundag",
    "mÃ¥ndag",
    "tysdag",
    "onsdag",
    "torsdag",
    "fredag",
    "laurdag",
  ],
};

const dayPeriodValues$p = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morg.",
    afternoon: "pÃ¥ etterm.",
    evening: "pÃ¥ kvelden",
    night: "pÃ¥ natta",
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morg.",
    afternoon: "pÃ¥ etterm.",
    evening: "pÃ¥ kvelden",
    night: "pÃ¥ natta",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morgonen",
    afternoon: "pÃ¥ ettermiddagen",
    evening: "pÃ¥ kvelden",
    night: "pÃ¥ natta",
  },
};

const ordinalNumber$p = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$p.localize = {
  ordinalNumber: ordinalNumber$p,

  era: (0, _index$1H.buildLocalizeFn)({
    values: eraValues$p,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1H.buildLocalizeFn)({
    values: quarterValues$p,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1H.buildLocalizeFn)({
    values: monthValues$p,
    defaultWidth: "wide",
  }),

  day: (0, _index$1H.buildLocalizeFn)({
    values: dayValues$p,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1H.buildLocalizeFn)({
    values: dayPeriodValues$p,
    defaultWidth: "wide",
  }),
});

var match$p = {};

match$p.match = void 0;

var _index$1G = buildMatchFn$1;
var _index2$Q = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$p = /^(\d+)\.?/i;
const parseOrdinalNumberPattern$p = /\d+/i;

const matchEraPatterns$p = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(fÃ¸r Kristus|fÃ¸r vÃ¥r tid|etter Kristus|vÃ¥r tid)/i,
};
const parseEraPatterns$p = {
  any: [/^f/i, /^e/i],
};

const matchQuarterPatterns$p = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i,
};
const parseQuarterPatterns$p = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$p = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i,
};
const parseMonthPatterns$p = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^aug/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$p = {
  narrow: /^[smtofl]/i,
  short: /^(su|mÃ¥|ty|on|to|fr|la)/i,
  abbreviated: /^(sun|mÃ¥n|tys|ons|tor|fre|laur)/i,
  wide: /^(sundag|mÃ¥ndag|tysdag|onsdag|torsdag|fredag|laurdag)/i,
};
const parseDayPatterns$p = {
  any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i],
};

const matchDayPeriodPatterns$p = {
  narrow: /^(midnatt|middag|(pÃ¥) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(pÃ¥) (morgonen|ettermiddagen|kvelden|natta))/i,
};
const parseDayPeriodPatterns$p = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i,
  },
};

(match$p.match = {
  ordinalNumber: (0, _index2$Q.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$p,
    parsePattern: parseOrdinalNumberPattern$p,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1G.buildMatchFn)({
    matchPatterns: matchEraPatterns$p,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$p,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1G.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$p,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$p,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1G.buildMatchFn)({
    matchPatterns: matchMonthPatterns$p,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$p,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1G.buildMatchFn)({
    matchPatterns: matchDayPatterns$p,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$p,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1G.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$p,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$p,
    defaultParseWidth: "any",
  }),
});

nn.nn = void 0;
var _index$1F = formatDistance$P;
var _index2$P = formatLong$p;
var _index3$p = formatRelative$P;
var _index4$p = localize$p;
var _index5$p = match$p;

/**
 * @category Locales
 * @summary Norwegian Nynorsk locale.
 * @language Norwegian Nynorsk
 * @iso-639-2 nno
 * @author Mats Byrkjeland [@draperunner](https://github.com/draperunner)
 */
(nn.nn = {
  code: "nn",
  formatDistance: _index$1F.formatDistance,
  formatLong: _index2$P.formatLong,
  formatRelative: _index3$p.formatRelative,
  localize: _index4$p.localize,
  match: _index5$p.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var oc = {};

var formatDistance$N = {};

formatDistance$N.formatDistance = void 0;

const formatDistanceLocale$o = {
  lessThanXSeconds: {
    one: "mens dâuna segonda",
    other: "mens de {{count}} segondas",
  },

  xSeconds: {
    one: "1 segonda",
    other: "{{count}} segondas",
  },

  halfAMinute: "30 segondas",

  lessThanXMinutes: {
    one: "mens dâuna minuta",
    other: "mens de {{count}} minutas",
  },

  xMinutes: {
    one: "1 minuta",
    other: "{{count}} minutas",
  },

  aboutXHours: {
    one: "environ 1 ora",
    other: "environ {{count}} oras",
  },

  xHours: {
    one: "1 ora",
    other: "{{count}} oras",
  },

  xDays: {
    one: "1 jorn",
    other: "{{count}} jorns",
  },

  aboutXWeeks: {
    one: "environ 1 setmana",
    other: "environ {{count}} setmanas",
  },

  xWeeks: {
    one: "1 setmana",
    other: "{{count}} setmanas",
  },

  aboutXMonths: {
    one: "environ 1 mes",
    other: "environ {{count}} meses",
  },

  xMonths: {
    one: "1 mes",
    other: "{{count}} meses",
  },

  aboutXYears: {
    one: "environ 1 an",
    other: "environ {{count}} ans",
  },

  xYears: {
    one: "1 an",
    other: "{{count}} ans",
  },

  overXYears: {
    one: "mai dâun an",
    other: "mai de {{count}} ans",
  },

  almostXYears: {
    one: "gaireben un an",
    other: "gaireben {{count}} ans",
  },
};

const formatDistance$M = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$o[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dâaquÃ­ " + result;
    } else {
      return "fa " + result;
    }
  }

  return result;
};
formatDistance$N.formatDistance = formatDistance$M;

var formatLong$o = {};

formatLong$o.formatLong = void 0;
var _index$1E = buildFormatLongFn$1;

const dateFormats$o = {
  full: "EEEE d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y",
};

const timeFormats$o = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$o = {
  full: "{{date}} 'a' {{time}}",
  long: "{{date}} 'a' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$o.formatLong = {
  date: (0, _index$1E.buildFormatLongFn)({
    formats: dateFormats$o,
    defaultWidth: "full",
  }),

  time: (0, _index$1E.buildFormatLongFn)({
    formats: timeFormats$o,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1E.buildFormatLongFn)({
    formats: dateTimeFormats$o,
    defaultWidth: "full",
  }),
});

var formatRelative$N = {};

formatRelative$N.formatRelative = void 0;

const formatRelativeLocale$o = {
  lastWeek: "eeee 'passat a' p",
  yesterday: "'iÃ¨r a' p",
  today: "'uÃ¨i a' p",
  tomorrow: "'deman a' p",
  nextWeek: "eeee 'a' p",
  other: "P",
};

const formatRelative$M = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$o[token];
formatRelative$N.formatRelative = formatRelative$M;

var localize$o = {};

localize$o.localize = void 0;
var _index$1D = buildLocalizeFn$1;

const eraValues$o = {
  narrow: ["ab. J.C.", "apr. J.C."],
  abbreviated: ["ab. J.C.", "apr. J.C."],
  wide: ["abans JÃ¨sus-Crist", "aprÃ¨s JÃ¨sus-Crist"],
};

const quarterValues$o = {
  narrow: ["T1", "T2", "T3", "T4"],
  abbreviated: ["1Ã¨r trim.", "2nd trim.", "3en trim.", "4en trim."],
  wide: ["1Ã¨r trimÃ¨stre", "2nd trimÃ¨stre", "3en trimÃ¨stre", "4en trimÃ¨stre"],
};

const monthValues$o = {
  narrow: [
    "GN",
    "FB",
    "MÃ",
    "AB",
    "MA",
    "JN",
    "JL",
    "AG",
    "ST",
    "OC",
    "NV",
    "DC",
  ],

  abbreviated: [
    "gen.",
    "febr.",
    "marÃ§",
    "abr.",
    "mai",
    "junh",
    "jul.",
    "ag.",
    "set.",
    "oct.",
    "nov.",
    "dec.",
  ],

  wide: [
    "geniÃ¨r",
    "febriÃ¨r",
    "marÃ§",
    "abril",
    "mai",
    "junh",
    "julhet",
    "agost",
    "setembre",
    "octÃ²bre",
    "novembre",
    "decembre",
  ],
};

const dayValues$o = {
  narrow: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
  short: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
  abbreviated: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
  wide: [
    "dimenge",
    "diluns",
    "dimars",
    "dimÃ¨cres",
    "dijÃ²us",
    "divendres",
    "dissabte",
  ],
};

const dayPeriodValues$o = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "miÃ¨januÃ¨ch",
    noon: "miÃ¨gjorn",
    morning: "matin",
    afternoon: "aprÃ¨p-miÃ¨gjorn",
    evening: "vÃ¨spre",
    night: "nuÃ¨ch",
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "miÃ¨januÃ¨ch",
    noon: "miÃ¨gjorn",
    morning: "matin",
    afternoon: "aprÃ¨p-miÃ¨gjorn",
    evening: "vÃ¨spre",
    night: "nuÃ¨ch",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "miÃ¨januÃ¨ch",
    noon: "miÃ¨gjorn",
    morning: "matin",
    afternoon: "aprÃ¨p-miÃ¨gjorn",
    evening: "vÃ¨spre",
    night: "nuÃ¨ch",
  },
};

const formattingDayPeriodValues$m = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "miÃ¨januÃ¨ch",
    noon: "miÃ¨gjorn",
    morning: "del matin",
    afternoon: "de lâaprÃ¨p-miÃ¨gjorn",
    evening: "del ser",
    night: "de la nuÃ¨ch",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "miÃ¨januÃ¨ch",
    noon: "miÃ¨gjorn",
    morning: "del matin",
    afternoon: "de lâaprÃ¨p-miÃ¨gjorn",
    evening: "del ser",
    night: "de la nuÃ¨ch",
  },
  wide: {
    am: "ante meridiem",
    pm: "post meridiem",
    midnight: "miÃ¨januÃ¨ch",
    noon: "miÃ¨gjorn",
    morning: "del matin",
    afternoon: "de lâaprÃ¨p-miÃ¨gjorn",
    evening: "del ser",
    night: "de la nuÃ¨ch",
  },
};

const ordinalNumber$o = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = options?.unit;
  let ordinal;

  switch (number) {
    case 1:
      ordinal = "Ã¨r";
      break;
    case 2:
      ordinal = "nd";
      break;
    default:
      ordinal = "en";
  }

  // feminine for year, week, hour, minute, second
  if (
    unit === "year" ||
    unit === "week" ||
    unit === "hour" ||
    unit === "minute" ||
    unit === "second"
  ) {
    ordinal += "a";
  }

  return number + ordinal;
};

(localize$o.localize = {
  ordinalNumber: ordinalNumber$o,

  era: (0, _index$1D.buildLocalizeFn)({
    values: eraValues$o,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1D.buildLocalizeFn)({
    values: quarterValues$o,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1D.buildLocalizeFn)({
    values: monthValues$o,
    defaultWidth: "wide",
  }),

  day: (0, _index$1D.buildLocalizeFn)({
    values: dayValues$o,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1D.buildLocalizeFn)({
    values: dayPeriodValues$o,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$m,
    defaultFormattingWidth: "wide",
  }),
});

var match$o = {};

match$o.match = void 0;

var _index$1C = buildMatchFn$1;
var _index2$O = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$o = /^(\d+)(Ã¨r|nd|en)?[a]?/i;
const parseOrdinalNumberPattern$o = /\d+/i;

const matchEraPatterns$o = {
  narrow: /^(ab\.J\.C|apr\.J\.C|apr\.J\.-C)/i,
  abbreviated: /^(ab\.J\.-C|ab\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(abans JÃ¨sus-Crist|aprÃ¨s JÃ¨sus-Crist)/i,
};
const parseEraPatterns$o = {
  any: [/^ab/i, /^ap/i],
};

const matchQuarterPatterns$o = {
  narrow: /^T[1234]/i,
  abbreviated: /^[1234](Ã¨r|nd|en)? trim\.?/i,
  wide: /^[1234](Ã¨r|nd|en)? trimÃ¨stre/i,
};
const parseQuarterPatterns$o = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$o = {
  narrow: /^(GN|FB|MÃ|AB|MA|JN|JL|AG|ST|OC|NV|DC)/i,
  abbreviated: /^(gen|febr|marÃ§|abr|mai|junh|jul|ag|set|oct|nov|dec)\.?/i,
  wide: /^(geniÃ¨r|febriÃ¨r|marÃ§|abril|mai|junh|julhet|agost|setembre|octÃ²bre|novembre|decembre)/i,
};
const parseMonthPatterns$o = {
  any: [
    /^g/i,
    /^f/i,
    /^ma[r?]|MÃ/i,
    /^ab/i,
    /^ma[i?]/i,
    /^ju[n?]|JN/i,
    /^ju[l?]|JL/i,
    /^ag/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$o = {
  narrow: /^d[glmcjvs]\.?/i,
  short: /^d[glmcjvs]\.?/i,
  abbreviated: /^d[glmcjvs]\.?/i,
  wide: /^(dimenge|diluns|dimars|dimÃ¨cres|dijÃ²us|divendres|dissabte)/i,
};
const parseDayPatterns$o = {
  narrow: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  short: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  abbreviated: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],

  any: [
    /^dg|dime/i,
    /^dl|dil/i,
    /^dm|dima/i,
    /^dc|dimÃ¨/i,
    /^dj|dij/i,
    /^dv|div/i,
    /^ds|dis/i,
  ],
};

const matchDayPeriodPatterns$o = {
  any: /(^(a\.?m|p\.?m))|(ante meridiem|post meridiem)|((del |de la |de lâ)(matin|aprÃ¨p-miÃ¨gjorn|vÃ¨spre|ser|nuÃ¨ch))/i,
};
const parseDayPeriodPatterns$o = {
  any: {
    am: /(^a)|ante meridiem/i,
    pm: /(^p)|post meridiem/i,
    midnight: /^miÃ¨j/i,
    noon: /^miÃ¨g/i,
    morning: /matin/i,
    afternoon: /aprÃ¨p-miÃ¨gjorn/i,
    evening: /vÃ¨spre|ser/i,
    night: /nuÃ¨ch/i,
  },
};

(match$o.match = {
  ordinalNumber: (0, _index2$O.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$o,
    parsePattern: parseOrdinalNumberPattern$o,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1C.buildMatchFn)({
    matchPatterns: matchEraPatterns$o,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$o,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1C.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$o,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$o,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1C.buildMatchFn)({
    matchPatterns: matchMonthPatterns$o,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$o,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1C.buildMatchFn)({
    matchPatterns: matchDayPatterns$o,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$o,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1C.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$o,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$o,
    defaultParseWidth: "any",
  }),
});

oc.oc = void 0;
var _index$1B = formatDistance$N;
var _index2$N = formatLong$o;
var _index3$o = formatRelative$N;
var _index4$o = localize$o;
var _index5$o = match$o;

/**
 * @category Locales
 * @summary Occitan locale.
 * @language Occitan
 * @iso-639-2 oci
 * @author Quentin PAGÃS
 */
(oc.oc = {
  code: "oc",
  formatDistance: _index$1B.formatDistance,
  formatLong: _index2$N.formatLong,
  formatRelative: _index3$o.formatRelative,
  localize: _index4$o.localize,
  match: _index5$o.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var pl = {};

var formatDistance$L = {};

formatDistance$L.formatDistance = void 0;

const formatDistanceLocale$n = {
  lessThanXSeconds: {
    one: {
      regular: "mniej niÅ¼ sekunda",
      past: "mniej niÅ¼ sekundÄ",
      future: "mniej niÅ¼ sekundÄ",
    },
    twoFour: "mniej niÅ¼ {{count}} sekundy",
    other: "mniej niÅ¼ {{count}} sekund",
  },

  xSeconds: {
    one: {
      regular: "sekunda",
      past: "sekundÄ",
      future: "sekundÄ",
    },
    twoFour: "{{count}} sekundy",
    other: "{{count}} sekund",
  },

  halfAMinute: {
    one: "pÃ³Å minuty",
    twoFour: "pÃ³Å minuty",
    other: "pÃ³Å minuty",
  },

  lessThanXMinutes: {
    one: {
      regular: "mniej niÅ¼ minuta",
      past: "mniej niÅ¼ minutÄ",
      future: "mniej niÅ¼ minutÄ",
    },
    twoFour: "mniej niÅ¼ {{count}} minuty",
    other: "mniej niÅ¼ {{count}} minut",
  },

  xMinutes: {
    one: {
      regular: "minuta",
      past: "minutÄ",
      future: "minutÄ",
    },
    twoFour: "{{count}} minuty",
    other: "{{count}} minut",
  },

  aboutXHours: {
    one: {
      regular: "okoÅo godziny",
      past: "okoÅo godziny",
      future: "okoÅo godzinÄ",
    },
    twoFour: "okoÅo {{count}} godziny",
    other: "okoÅo {{count}} godzin",
  },

  xHours: {
    one: {
      regular: "godzina",
      past: "godzinÄ",
      future: "godzinÄ",
    },
    twoFour: "{{count}} godziny",
    other: "{{count}} godzin",
  },

  xDays: {
    one: {
      regular: "dzieÅ",
      past: "dzieÅ",
      future: "1 dzieÅ",
    },
    twoFour: "{{count}} dni",
    other: "{{count}} dni",
  },

  aboutXWeeks: {
    one: "okoÅo tygodnia",
    twoFour: "okoÅo {{count}} tygodni",
    other: "okoÅo {{count}} tygodni",
  },

  xWeeks: {
    one: "tydzieÅ",
    twoFour: "{{count}} tygodnie",
    other: "{{count}} tygodni",
  },

  aboutXMonths: {
    one: "okoÅo miesiÄc",
    twoFour: "okoÅo {{count}} miesiÄce",
    other: "okoÅo {{count}} miesiÄcy",
  },

  xMonths: {
    one: "miesiÄc",
    twoFour: "{{count}} miesiÄce",
    other: "{{count}} miesiÄcy",
  },

  aboutXYears: {
    one: "okoÅo rok",
    twoFour: "okoÅo {{count}} lata",
    other: "okoÅo {{count}} lat",
  },

  xYears: {
    one: "rok",
    twoFour: "{{count}} lata",
    other: "{{count}} lat",
  },

  overXYears: {
    one: "ponad rok",
    twoFour: "ponad {{count}} lata",
    other: "ponad {{count}} lat",
  },

  almostXYears: {
    one: "prawie rok",
    twoFour: "prawie {{count}} lata",
    other: "prawie {{count}} lat",
  },
};

function declensionGroup$1(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }

  const rem100 = count % 100;

  // ends with 11-20
  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }

  const rem10 = rem100 % 10;

  // ends with 2, 3, 4
  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }

  return scheme.other;
}

function declension$3(scheme, count, time) {
  const group = declensionGroup$1(scheme, count);
  const finalText = typeof group === "string" ? group : group[time];
  return finalText.replace("{{count}}", String(count));
}

const formatDistance$K = (token, count, options) => {
  const scheme = formatDistanceLocale$n[token];
  if (!options?.addSuffix) {
    return declension$3(scheme, count, "regular");
  }

  if (options.comparison && options.comparison > 0) {
    return "za " + declension$3(scheme, count, "future");
  } else {
    return declension$3(scheme, count, "past") + " temu";
  }
};
formatDistance$L.formatDistance = formatDistance$K;

var formatLong$n = {};

formatLong$n.formatLong = void 0;
var _index$1A = buildFormatLongFn$1;

const dateFormats$n = {
  full: "EEEE, do MMMM y",
  long: "do MMMM y",
  medium: "do MMM y",
  short: "dd.MM.y",
};

const timeFormats$n = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$n = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$n.formatLong = {
  date: (0, _index$1A.buildFormatLongFn)({
    formats: dateFormats$n,
    defaultWidth: "full",
  }),

  time: (0, _index$1A.buildFormatLongFn)({
    formats: timeFormats$n,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1A.buildFormatLongFn)({
    formats: dateTimeFormats$n,
    defaultWidth: "full",
  }),
});

var formatRelative$L = {};

formatRelative$L.formatRelative = void 0;
var _index$1z = isSameWeek$1;

const adjectivesLastWeek = {
  masculine: "ostatni",
  feminine: "ostatnia",
};

const adjectivesThisWeek = {
  masculine: "ten",
  feminine: "ta",
};

const adjectivesNextWeek = {
  masculine: "nastÄpny",
  feminine: "nastÄpna",
};

const dayGrammaticalGender = {
  0: "feminine",
  1: "masculine",
  2: "masculine",
  3: "feminine",
  4: "masculine",
  5: "masculine",
  6: "feminine",
};

function dayAndTimeWithAdjective(token, date, baseDate, options) {
  let adjectives;
  if ((0, _index$1z.isSameWeek)(date, baseDate, options)) {
    adjectives = adjectivesThisWeek;
  } else if (token === "lastWeek") {
    adjectives = adjectivesLastWeek;
  } else if (token === "nextWeek") {
    adjectives = adjectivesNextWeek;
  } else {
    throw new Error(`Cannot determine adjectives for token ${token}`);
  }

  const day = date.getDay();
  const grammaticalGender = dayGrammaticalGender[day];

  const adjective = adjectives[grammaticalGender];

  return `'${adjective}' eeee 'o' p`;
}

const formatRelativeLocale$n = {
  lastWeek: dayAndTimeWithAdjective,
  yesterday: "'wczoraj o' p",
  today: "'dzisiaj o' p",
  tomorrow: "'jutro o' p",
  nextWeek: dayAndTimeWithAdjective,
  other: "P",
};

const formatRelative$K = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$n[token];

  if (typeof format === "function") {
    return format(token, date, baseDate, options);
  }

  return format;
};
formatRelative$L.formatRelative = formatRelative$K;

var localize$n = {};

localize$n.localize = void 0;
var _index$1y = buildLocalizeFn$1;

const eraValues$n = {
  narrow: ["p.n.e.", "n.e."],
  abbreviated: ["p.n.e.", "n.e."],
  wide: ["przed naszÄ erÄ", "naszej ery"],
};

const quarterValues$n = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["I kw.", "II kw.", "III kw.", "IV kw."],
  wide: ["I kwartaÅ", "II kwartaÅ", "III kwartaÅ", "IV kwartaÅ"],
};

const monthValues$n = {
  narrow: ["S", "L", "M", "K", "M", "C", "L", "S", "W", "P", "L", "G"],
  abbreviated: [
    "sty",
    "lut",
    "mar",
    "kwi",
    "maj",
    "cze",
    "lip",
    "sie",
    "wrz",
    "paÅº",
    "lis",
    "gru",
  ],

  wide: [
    "styczeÅ",
    "luty",
    "marzec",
    "kwiecieÅ",
    "maj",
    "czerwiec",
    "lipiec",
    "sierpieÅ",
    "wrzesieÅ",
    "paÅºdziernik",
    "listopad",
    "grudzieÅ",
  ],
};
const monthFormattingValues = {
  narrow: ["s", "l", "m", "k", "m", "c", "l", "s", "w", "p", "l", "g"],
  abbreviated: [
    "sty",
    "lut",
    "mar",
    "kwi",
    "maj",
    "cze",
    "lip",
    "sie",
    "wrz",
    "paÅº",
    "lis",
    "gru",
  ],

  wide: [
    "stycznia",
    "lutego",
    "marca",
    "kwietnia",
    "maja",
    "czerwca",
    "lipca",
    "sierpnia",
    "wrzeÅnia",
    "paÅºdziernika",
    "listopada",
    "grudnia",
  ],
};

const dayValues$n = {
  narrow: ["N", "P", "W", "Å", "C", "P", "S"],
  short: ["nie", "pon", "wto", "Åro", "czw", "piÄ", "sob"],
  abbreviated: ["niedz.", "pon.", "wt.", "År.", "czw.", "pt.", "sob."],
  wide: [
    "niedziela",
    "poniedziaÅek",
    "wtorek",
    "Åroda",
    "czwartek",
    "piÄtek",
    "sobota",
  ],
};
const dayFormattingValues = {
  narrow: ["n", "p", "w", "Å", "c", "p", "s"],
  short: ["nie", "pon", "wto", "Åro", "czw", "piÄ", "sob"],
  abbreviated: ["niedz.", "pon.", "wt.", "År.", "czw.", "pt.", "sob."],
  wide: [
    "niedziela",
    "poniedziaÅek",
    "wtorek",
    "Åroda",
    "czwartek",
    "piÄtek",
    "sobota",
  ],
};

const dayPeriodValues$n = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "pÃ³Ån.",
    noon: "poÅ",
    morning: "rano",
    afternoon: "popoÅ.",
    evening: "wiecz.",
    night: "noc",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pÃ³Ånoc",
    noon: "poÅudnie",
    morning: "rano",
    afternoon: "popoÅudnie",
    evening: "wieczÃ³r",
    night: "noc",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pÃ³Ånoc",
    noon: "poÅudnie",
    morning: "rano",
    afternoon: "popoÅudnie",
    evening: "wieczÃ³r",
    night: "noc",
  },
};

const dayPeriodFormattingValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "o pÃ³Ån.",
    noon: "w poÅ.",
    morning: "rano",
    afternoon: "po poÅ.",
    evening: "wiecz.",
    night: "w nocy",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "o pÃ³Ånocy",
    noon: "w poÅudnie",
    morning: "rano",
    afternoon: "po poÅudniu",
    evening: "wieczorem",
    night: "w nocy",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "o pÃ³Ånocy",
    noon: "w poÅudnie",
    morning: "rano",
    afternoon: "po poÅudniu",
    evening: "wieczorem",
    night: "w nocy",
  },
};

const ordinalNumber$n = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$n.localize = {
  ordinalNumber: ordinalNumber$n,

  era: (0, _index$1y.buildLocalizeFn)({
    values: eraValues$n,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1y.buildLocalizeFn)({
    values: quarterValues$n,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1y.buildLocalizeFn)({
    values: monthValues$n,
    defaultWidth: "wide",
    formattingValues: monthFormattingValues,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$1y.buildLocalizeFn)({
    values: dayValues$n,
    defaultWidth: "wide",
    formattingValues: dayFormattingValues,
    defaultFormattingWidth: "wide",
  }),

  dayPeriod: (0, _index$1y.buildLocalizeFn)({
    values: dayPeriodValues$n,
    defaultWidth: "wide",
    formattingValues: dayPeriodFormattingValues,
    defaultFormattingWidth: "wide",
  }),
});

var match$n = {};

match$n.match = void 0;

var _index$1x = buildMatchFn$1;
var _index2$M = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$n = /^(\d+)?/i;
const parseOrdinalNumberPattern$n = /\d+/i;

const matchEraPatterns$n = {
  narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  wide: /^(przed\s*nasz(Ä|a)\s*er(Ä|a)|naszej\s*ery)/i,
};
const parseEraPatterns$n = {
  any: [/^p/i, /^n/i],
};

const matchQuarterPatterns$n = {
  narrow: /^[1234]/i,
  abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
  wide: /^(I|II|III|IV)\s*kwarta(Å|l)/i,
};
const parseQuarterPatterns$n = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i],
};

const matchMonthPatterns$n = {
  narrow: /^[slmkcwpg]/i,
  abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(Åº|z)|lis|gru)/i,
  wide: /^(stycznia|stycze(Å|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(Å|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(Å|n)|wrze(Å|s)nia|wrzesie(Å|n)|pa(Åº|z)dziernika|pa(Åº|z)dziernik|listopada|listopad|grudnia|grudzie(Å|n))/i,
};
const parseMonthPatterns$n = {
  narrow: [
    /^s/i,
    /^l/i,
    /^m/i,
    /^k/i,
    /^m/i,
    /^c/i,
    /^l/i,
    /^s/i,
    /^w/i,
    /^p/i,
    /^l/i,
    /^g/i,
  ],

  any: [
    /^st/i,
    /^lu/i,
    /^mar/i,
    /^k/i,
    /^maj/i,
    /^c/i,
    /^lip/i,
    /^si/i,
    /^w/i,
    /^p/i,
    /^lis/i,
    /^g/i,
  ],
};

const matchDayPatterns$n = {
  narrow: /^[npwÅcs]/i,
  short: /^(nie|pon|wto|(Å|s)ro|czw|pi(Ä|a)|sob)/i,
  abbreviated: /^(niedz|pon|wt|(Å|s)r|czw|pt|sob)\.?/i,
  wide: /^(niedziela|poniedzia(Å|l)ek|wtorek|(Å|s)roda|czwartek|pi(Ä|a)tek|sobota)/i,
};
const parseDayPatterns$n = {
  narrow: [/^n/i, /^p/i, /^w/i, /^Å/i, /^c/i, /^p/i, /^s/i],
  abbreviated: [/^n/i, /^po/i, /^w/i, /^(Å|s)r/i, /^c/i, /^pt/i, /^so/i],

  any: [/^n/i, /^po/i, /^w/i, /^(Å|s)r/i, /^c/i, /^pi/i, /^so/i],
};

const matchDayPeriodPatterns$n = {
  narrow:
    /^(^a$|^p$|pÃ³(Å|l)n\.?|o\s*pÃ³(Å|l)n\.?|po(Å|l)\.?|w\s*po(Å|l)\.?|po\s*po(Å|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
  any: /^(am|pm|pÃ³(Å|l)noc|o\s*pÃ³(Å|l)nocy|po(Å|l)udnie|w\s*po(Å|l)udnie|popo(Å|l)udnie|po\s*po(Å|l)udniu|rano|wieczÃ³r|wieczorem|noc|w\s*nocy)/i,
};
const parseDayPeriodPatterns$n = {
  narrow: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /pÃ³(Å|l)n/i,
    noon: /po(Å|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(Å|l)/i,
    evening: /wiecz/i,
    night: /noc/i,
  },
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /pÃ³(Å|l)n/i,
    noon: /po(Å|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(Å|l)/i,
    evening: /wiecz/i,
    night: /noc/i,
  },
};

(match$n.match = {
  ordinalNumber: (0, _index2$M.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$n,
    parsePattern: parseOrdinalNumberPattern$n,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1x.buildMatchFn)({
    matchPatterns: matchEraPatterns$n,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$n,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1x.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$n,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$n,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1x.buildMatchFn)({
    matchPatterns: matchMonthPatterns$n,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$n,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1x.buildMatchFn)({
    matchPatterns: matchDayPatterns$n,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$n,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1x.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$n,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$n,
    defaultParseWidth: "any",
  }),
});

pl.pl = void 0;
var _index$1w = formatDistance$L;
var _index2$L = formatLong$n;
var _index3$n = formatRelative$L;
var _index4$n = localize$n;
var _index5$n = match$n;

/**
 * @category Locales
 * @summary Polish locale.
 * @language Polish
 * @iso-639-2 pol
 * @author Mateusz Derks [@ertrzyiks](https://github.com/ertrzyiks)
 * @author Just RAG [@justrag](https://github.com/justrag)
 * @author Mikolaj Grzyb [@mikolajgrzyb](https://github.com/mikolajgrzyb)
 * @author Mateusz Tokarski [@mutisz](https://github.com/mutisz)
 */
(pl.pl = {
  code: "pl",
  formatDistance: _index$1w.formatDistance,
  formatLong: _index2$L.formatLong,
  formatRelative: _index3$n.formatRelative,
  localize: _index4$n.localize,
  match: _index5$n.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var pt = {};

var formatDistance$J = {};

formatDistance$J.formatDistance = void 0;

const formatDistanceLocale$m = {
  lessThanXSeconds: {
    one: "menos de um segundo",
    other: "menos de {{count}} segundos",
  },

  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos",
  },

  halfAMinute: "meio minuto",

  lessThanXMinutes: {
    one: "menos de um minuto",
    other: "menos de {{count}} minutos",
  },

  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos",
  },

  aboutXHours: {
    one: "aproximadamente 1 hora",
    other: "aproximadamente {{count}} horas",
  },

  xHours: {
    one: "1 hora",
    other: "{{count}} horas",
  },

  xDays: {
    one: "1 dia",
    other: "{{count}} dias",
  },

  aboutXWeeks: {
    one: "aproximadamente 1 semana",
    other: "aproximadamente {{count}} semanas",
  },

  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas",
  },

  aboutXMonths: {
    one: "aproximadamente 1 mÃªs",
    other: "aproximadamente {{count}} meses",
  },

  xMonths: {
    one: "1 mÃªs",
    other: "{{count}} meses",
  },

  aboutXYears: {
    one: "aproximadamente 1 ano",
    other: "aproximadamente {{count}} anos",
  },

  xYears: {
    one: "1 ano",
    other: "{{count}} anos",
  },

  overXYears: {
    one: "mais de 1 ano",
    other: "mais de {{count}} anos",
  },

  almostXYears: {
    one: "quase 1 ano",
    other: "quase {{count}} anos",
  },
};

const formatDistance$I = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$m[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "daqui a " + result;
    } else {
      return "hÃ¡ " + result;
    }
  }

  return result;
};
formatDistance$J.formatDistance = formatDistance$I;

var formatLong$m = {};

formatLong$m.formatLong = void 0;
var _index$1v = buildFormatLongFn$1;

const dateFormats$m = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d 'de' MMM 'de' y",
  short: "dd/MM/y",
};

const timeFormats$m = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$m = {
  full: "{{date}} 'Ã s' {{time}}",
  long: "{{date}} 'Ã s' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$m.formatLong = {
  date: (0, _index$1v.buildFormatLongFn)({
    formats: dateFormats$m,
    defaultWidth: "full",
  }),

  time: (0, _index$1v.buildFormatLongFn)({
    formats: timeFormats$m,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1v.buildFormatLongFn)({
    formats: dateTimeFormats$m,
    defaultWidth: "full",
  }),
});

var formatRelative$J = {};

formatRelative$J.formatRelative = void 0;

const formatRelativeLocale$m = {
  lastWeek: (date) => {
    const weekday = date.getDay();
    const last = weekday === 0 || weekday === 6 ? "Ãºltimo" : "Ãºltima";
    return "'" + last + "' eeee 'Ã s' p";
  },
  yesterday: "'ontem Ã s' p",
  today: "'hoje Ã s' p",
  tomorrow: "'amanhÃ£ Ã s' p",
  nextWeek: "eeee 'Ã s' p",
  other: "P",
};

const formatRelative$I = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$m[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$J.formatRelative = formatRelative$I;

var localize$m = {};

localize$m.localize = void 0;
var _index$1u = buildLocalizeFn$1;

const eraValues$m = {
  narrow: ["aC", "dC"],
  abbreviated: ["a.C.", "d.C."],
  wide: ["antes de Cristo", "depois de Cristo"],
};

const quarterValues$m = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1Âº trimestre", "2Âº trimestre", "3Âº trimestre", "4Âº trimestre"],
};

const monthValues$m = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "jan",
    "fev",
    "mar",
    "abr",
    "mai",
    "jun",
    "jul",
    "ago",
    "set",
    "out",
    "nov",
    "dez",
  ],

  wide: [
    "janeiro",
    "fevereiro",
    "marÃ§o",
    "abril",
    "maio",
    "junho",
    "julho",
    "agosto",
    "setembro",
    "outubro",
    "novembro",
    "dezembro",
  ],
};

const dayValues$m = {
  narrow: ["d", "s", "t", "q", "q", "s", "s"],
  short: ["dom", "seg", "ter", "qua", "qui", "sex", "sÃ¡b"],
  abbreviated: ["dom", "seg", "ter", "qua", "qui", "sex", "sÃ¡b"],
  wide: [
    "domingo",
    "segunda-feira",
    "terÃ§a-feira",
    "quarta-feira",
    "quinta-feira",
    "sexta-feira",
    "sÃ¡bado",
  ],
};

const dayPeriodValues$m = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manhÃ£",
    afternoon: "tarde",
    evening: "noite",
    night: "madrugada",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manhÃ£",
    afternoon: "tarde",
    evening: "noite",
    night: "madrugada",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manhÃ£",
    afternoon: "tarde",
    evening: "noite",
    night: "madrugada",
  },
};

const formattingDayPeriodValues$l = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manhÃ£",
    afternoon: "da tarde",
    evening: "da noite",
    night: "da madrugada",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manhÃ£",
    afternoon: "da tarde",
    evening: "da noite",
    night: "da madrugada",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manhÃ£",
    afternoon: "da tarde",
    evening: "da noite",
    night: "da madrugada",
  },
};

const ordinalNumber$m = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "Âº";
};

(localize$m.localize = {
  ordinalNumber: ordinalNumber$m,

  era: (0, _index$1u.buildLocalizeFn)({
    values: eraValues$m,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1u.buildLocalizeFn)({
    values: quarterValues$m,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1u.buildLocalizeFn)({
    values: monthValues$m,
    defaultWidth: "wide",
  }),

  day: (0, _index$1u.buildLocalizeFn)({
    values: dayValues$m,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1u.buildLocalizeFn)({
    values: dayPeriodValues$m,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$l,
    defaultFormattingWidth: "wide",
  }),
});

var match$m = {};

match$m.match = void 0;

var _index$1t = buildMatchFn$1;
var _index2$K = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$m = /^(\d+)(Âº|Âª)?/i;
const parseOrdinalNumberPattern$m = /\d+/i;

const matchEraPatterns$m = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i,
};
const parseEraPatterns$m = {
  any: [/^ac/i, /^dc/i],
  wide: [
    /^(antes de cristo|antes da era comum)/i,
    /^(depois de cristo|era comum)/i,
  ],
};

const matchQuarterPatterns$m = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](Âº|Âª)? trimestre/i,
};
const parseQuarterPatterns$m = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$m = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|marÃ§o|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i,
};
const parseMonthPatterns$m = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ab/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^ag/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$m = {
  narrow: /^[dstq]/i,
  short: /^(dom|seg|ter|qua|qui|sex|s[Ã¡a]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[Ã¡a]b)/i,
  wide: /^(domingo|segunda-?\s?feira|terÃ§a-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[Ã¡a]bado)/i,
};
const parseDayPatterns$m = {
  narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[Ã¡a]/i],
};

const matchDayPeriodPatterns$m = {
  narrow:
    /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[Ã£a]|tarde|noite|madrugada))/i,
  any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[Ã£a]|tarde|noite|madrugada))/i,
};
const parseDayPeriodPatterns$m = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^meia/i,
    noon: /^meio/i,
    morning: /manh[Ã£a]/i,
    afternoon: /tarde/i,
    evening: /noite/i,
    night: /madrugada/i,
  },
};

(match$m.match = {
  ordinalNumber: (0, _index2$K.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$m,
    parsePattern: parseOrdinalNumberPattern$m,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1t.buildMatchFn)({
    matchPatterns: matchEraPatterns$m,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$m,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1t.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$m,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$m,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1t.buildMatchFn)({
    matchPatterns: matchMonthPatterns$m,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$m,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1t.buildMatchFn)({
    matchPatterns: matchDayPatterns$m,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$m,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1t.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$m,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$m,
    defaultParseWidth: "any",
  }),
});

pt.pt = void 0;
var _index$1s = formatDistance$J;
var _index2$J = formatLong$m;
var _index3$m = formatRelative$J;
var _index4$m = localize$m;
var _index5$m = match$m;

/**
 * @category Locales
 * @summary Portuguese locale.
 * @language Portuguese
 * @iso-639-2 por
 * @author DÃ¡rio Freire [@dfreire](https://github.com/dfreire)
 * @author AdriÃ¡n de la Rosa [@adrm](https://github.com/adrm)
 */
(pt.pt = {
  code: "pt",
  formatDistance: _index$1s.formatDistance,
  formatLong: _index2$J.formatLong,
  formatRelative: _index3$m.formatRelative,
  localize: _index4$m.localize,
  match: _index5$m.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var ptBR = {};

var formatDistance$H = {};

formatDistance$H.formatDistance = void 0;

const formatDistanceLocale$l = {
  lessThanXSeconds: {
    one: "menos de um segundo",
    other: "menos de {{count}} segundos",
  },

  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos",
  },

  halfAMinute: "meio minuto",

  lessThanXMinutes: {
    one: "menos de um minuto",
    other: "menos de {{count}} minutos",
  },

  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos",
  },

  aboutXHours: {
    one: "cerca de 1 hora",
    other: "cerca de {{count}} horas",
  },

  xHours: {
    one: "1 hora",
    other: "{{count}} horas",
  },

  xDays: {
    one: "1 dia",
    other: "{{count}} dias",
  },

  aboutXWeeks: {
    one: "cerca de 1 semana",
    other: "cerca de {{count}} semanas",
  },

  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas",
  },

  aboutXMonths: {
    one: "cerca de 1 mÃªs",
    other: "cerca de {{count}} meses",
  },

  xMonths: {
    one: "1 mÃªs",
    other: "{{count}} meses",
  },

  aboutXYears: {
    one: "cerca de 1 ano",
    other: "cerca de {{count}} anos",
  },

  xYears: {
    one: "1 ano",
    other: "{{count}} anos",
  },

  overXYears: {
    one: "mais de 1 ano",
    other: "mais de {{count}} anos",
  },

  almostXYears: {
    one: "quase 1 ano",
    other: "quase {{count}} anos",
  },
};

const formatDistance$G = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$l[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "em " + result;
    } else {
      return "hÃ¡ " + result;
    }
  }

  return result;
};
formatDistance$H.formatDistance = formatDistance$G;

var formatLong$l = {};

formatLong$l.formatLong = void 0;
var _index$1r = buildFormatLongFn$1;

const dateFormats$l = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d MMM y",
  short: "dd/MM/yyyy",
};

const timeFormats$l = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$l = {
  full: "{{date}} 'Ã s' {{time}}",
  long: "{{date}} 'Ã s' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$l.formatLong = {
  date: (0, _index$1r.buildFormatLongFn)({
    formats: dateFormats$l,
    defaultWidth: "full",
  }),

  time: (0, _index$1r.buildFormatLongFn)({
    formats: timeFormats$l,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1r.buildFormatLongFn)({
    formats: dateTimeFormats$l,
    defaultWidth: "full",
  }),
});

var formatRelative$H = {};

formatRelative$H.formatRelative = void 0;

const formatRelativeLocale$l = {
  lastWeek: (date) => {
    const weekday = date.getDay();
    const last = weekday === 0 || weekday === 6 ? "Ãºltimo" : "Ãºltima";
    return "'" + last + "' eeee 'Ã s' p";
  },
  yesterday: "'ontem Ã s' p",
  today: "'hoje Ã s' p",
  tomorrow: "'amanhÃ£ Ã s' p",
  nextWeek: "eeee 'Ã s' p",
  other: "P",
};

const formatRelative$G = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$l[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$H.formatRelative = formatRelative$G;

var localize$l = {};

localize$l.localize = void 0;
var _index$1q = buildLocalizeFn$1;

const eraValues$l = {
  narrow: ["AC", "DC"],
  abbreviated: ["AC", "DC"],
  wide: ["antes de cristo", "depois de cristo"],
};

const quarterValues$l = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1Âº trimestre", "2Âº trimestre", "3Âº trimestre", "4Âº trimestre"],
};

const monthValues$l = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "jan",
    "fev",
    "mar",
    "abr",
    "mai",
    "jun",
    "jul",
    "ago",
    "set",
    "out",
    "nov",
    "dez",
  ],

  wide: [
    "janeiro",
    "fevereiro",
    "marÃ§o",
    "abril",
    "maio",
    "junho",
    "julho",
    "agosto",
    "setembro",
    "outubro",
    "novembro",
    "dezembro",
  ],
};

const dayValues$l = {
  narrow: ["D", "S", "T", "Q", "Q", "S", "S"],
  short: ["dom", "seg", "ter", "qua", "qui", "sex", "sab"],
  abbreviated: [
    "domingo",
    "segunda",
    "terÃ§a",
    "quarta",
    "quinta",
    "sexta",
    "sÃ¡bado",
  ],

  wide: [
    "domingo",
    "segunda-feira",
    "terÃ§a-feira",
    "quarta-feira",
    "quinta-feira",
    "sexta-feira",
    "sÃ¡bado",
  ],
};

const dayPeriodValues$l = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "manhÃ£",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manhÃ£",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manhÃ£",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite",
  },
};

const formattingDayPeriodValues$k = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "da manhÃ£",
    afternoon: "da tarde",
    evening: "da tarde",
    night: "da noite",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manhÃ£",
    afternoon: "da tarde",
    evening: "da tarde",
    night: "da noite",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manhÃ£",
    afternoon: "da tarde",
    evening: "da tarde",
    night: "da noite",
  },
};

const ordinalNumber$l = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);

  if (options?.unit === "week") {
    return number + "Âª";
  }
  return number + "Âº";
};

(localize$l.localize = {
  ordinalNumber: ordinalNumber$l,

  era: (0, _index$1q.buildLocalizeFn)({
    values: eraValues$l,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1q.buildLocalizeFn)({
    values: quarterValues$l,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1q.buildLocalizeFn)({
    values: monthValues$l,
    defaultWidth: "wide",
  }),

  day: (0, _index$1q.buildLocalizeFn)({
    values: dayValues$l,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1q.buildLocalizeFn)({
    values: dayPeriodValues$l,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$k,
    defaultFormattingWidth: "wide",
  }),
});

var match$l = {};

match$l.match = void 0;

var _index$1p = buildMatchFn$1;
var _index2$I = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$l = /^(\d+)[ÂºÂªo]?/i;
const parseOrdinalNumberPattern$l = /\d+/i;

const matchEraPatterns$l = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
  wide: /^(antes de cristo|depois de cristo)/i,
};
const parseEraPatterns$l = {
  any: [/^ac/i, /^dc/i],
  wide: [/^antes de cristo/i, /^depois de cristo/i],
};

const matchQuarterPatterns$l = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](Âº)? trimestre/i,
};
const parseQuarterPatterns$l = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$l = {
  narrow: /^[jfmajsond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|marÃ§o|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i,
};
const parseMonthPatterns$l = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^fev/i,
    /^mar/i,
    /^abr/i,
    /^mai/i,
    /^jun/i,
    /^jul/i,
    /^ago/i,
    /^set/i,
    /^out/i,
    /^nov/i,
    /^dez/i,
  ],
};

const matchDayPatterns$l = {
  narrow: /^(dom|[23456]Âª?|s[aÃ¡]b)/i,
  short: /^(dom|[23456]Âª?|s[aÃ¡]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aÃ¡]b)/i,
  wide: /^(domingo|(segunda|ter[cÃ§]a|quarta|quinta|sexta)([- ]feira)?|s[aÃ¡]bado)/i,
};
const parseDayPatterns$l = {
  short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aÃ¡]/i],
  narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aÃ¡]/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aÃ¡]b/i],
};

const matchDayPeriodPatterns$l = {
  narrow: /^(a|p|mn|md|(da) (manhÃ£|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhÃ£|tarde|noite))/i,
};
const parseDayPeriodPatterns$l = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn|^meia[-\s]noite/i,
    noon: /^md|^meio[-\s]dia/i,
    morning: /manhÃ£/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noite/i,
  },
};

(match$l.match = {
  ordinalNumber: (0, _index2$I.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$l,
    parsePattern: parseOrdinalNumberPattern$l,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1p.buildMatchFn)({
    matchPatterns: matchEraPatterns$l,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$l,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1p.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$l,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$l,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1p.buildMatchFn)({
    matchPatterns: matchMonthPatterns$l,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$l,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1p.buildMatchFn)({
    matchPatterns: matchDayPatterns$l,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$l,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1p.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$l,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$l,
    defaultParseWidth: "any",
  }),
});

ptBR.ptBR = void 0;
var _index$1o = formatDistance$H;
var _index2$H = formatLong$l;
var _index3$l = formatRelative$H;
var _index4$l = localize$l;
var _index5$l = match$l;

/**
 * @category Locales
 * @summary Portuguese locale (Brazil).
 * @language Portuguese
 * @iso-639-2 por
 * @author Lucas Duailibe [@duailibe](https://github.com/duailibe)
 * @author Yago Carballo [@yagocarballo](https://github.com/YagoCarballo)
 */
(ptBR.ptBR = {
  code: "pt-BR",
  formatDistance: _index$1o.formatDistance,
  formatLong: _index2$H.formatLong,
  formatRelative: _index3$l.formatRelative,
  localize: _index4$l.localize,
  match: _index5$l.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var ro = {};

var formatDistance$F = {};

formatDistance$F.formatDistance = void 0;

const formatDistanceLocale$k = {
  lessThanXSeconds: {
    one: "mai puÈin de o secundÄ",
    other: "mai puÈin de {{count}} secunde",
  },

  xSeconds: {
    one: "1 secundÄ",
    other: "{{count}} secunde",
  },

  halfAMinute: "jumÄtate de minut",

  lessThanXMinutes: {
    one: "mai puÈin de un minut",
    other: "mai puÈin de {{count}} minute",
  },

  xMinutes: {
    one: "1 minut",
    other: "{{count}} minute",
  },

  aboutXHours: {
    one: "circa 1 orÄ",
    other: "circa {{count}} ore",
  },

  xHours: {
    one: "1 orÄ",
    other: "{{count}} ore",
  },

  xDays: {
    one: "1 zi",
    other: "{{count}} zile",
  },

  aboutXWeeks: {
    one: "circa o sÄptÄmÃ¢nÄ",
    other: "circa {{count}} sÄptÄmÃ¢ni",
  },

  xWeeks: {
    one: "1 sÄptÄmÃ¢nÄ",
    other: "{{count}} sÄptÄmÃ¢ni",
  },

  aboutXMonths: {
    one: "circa 1 lunÄ",
    other: "circa {{count}} luni",
  },

  xMonths: {
    one: "1 lunÄ",
    other: "{{count}} luni",
  },

  aboutXYears: {
    one: "circa 1 an",
    other: "circa {{count}} ani",
  },

  xYears: {
    one: "1 an",
    other: "{{count}} ani",
  },

  overXYears: {
    one: "peste 1 an",
    other: "peste {{count}} ani",
  },

  almostXYears: {
    one: "aproape 1 an",
    other: "aproape {{count}} ani",
  },
};

const formatDistance$E = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$k[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ã®n " + result;
    } else {
      return result + " Ã®n urmÄ";
    }
  }

  return result;
};
formatDistance$F.formatDistance = formatDistance$E;

var formatLong$k = {};

formatLong$k.formatLong = void 0;
var _index$1n = buildFormatLongFn$1;

const dateFormats$k = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd.MM.yyyy",
};

const timeFormats$k = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$k = {
  full: "{{date}} 'la' {{time}}",
  long: "{{date}} 'la' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$k.formatLong = {
  date: (0, _index$1n.buildFormatLongFn)({
    formats: dateFormats$k,
    defaultWidth: "full",
  }),

  time: (0, _index$1n.buildFormatLongFn)({
    formats: timeFormats$k,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1n.buildFormatLongFn)({
    formats: dateTimeFormats$k,
    defaultWidth: "full",
  }),
});

var formatRelative$F = {};

formatRelative$F.formatRelative = void 0;

const formatRelativeLocale$k = {
  lastWeek: "eeee 'trecutÄ la' p",
  yesterday: "'ieri la' p",
  today: "'astÄzi la' p",
  tomorrow: "'mÃ¢ine la' p",
  nextWeek: "eeee 'viitoare la' p",
  other: "P",
};

const formatRelative$E = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$k[token];
formatRelative$F.formatRelative = formatRelative$E;

var localize$k = {};

localize$k.localize = void 0;
var _index$1m = buildLocalizeFn$1;

const eraValues$k = {
  narrow: ["Ã", "D"],
  abbreviated: ["Ã.d.C.", "D.C."],
  wide: ["Ãnainte de Cristos", "DupÄ Cristos"],
};

const quarterValues$k = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: [
    "primul trimestru",
    "al doilea trimestru",
    "al treilea trimestru",
    "al patrulea trimestru",
  ],
};

const monthValues$k = {
  narrow: ["I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
  abbreviated: [
    "ian",
    "feb",
    "mar",
    "apr",
    "mai",
    "iun",
    "iul",
    "aug",
    "sep",
    "oct",
    "noi",
    "dec",
  ],

  wide: [
    "ianuarie",
    "februarie",
    "martie",
    "aprilie",
    "mai",
    "iunie",
    "iulie",
    "august",
    "septembrie",
    "octombrie",
    "noiembrie",
    "decembrie",
  ],
};

const dayValues$k = {
  narrow: ["d", "l", "m", "m", "j", "v", "s"],
  short: ["du", "lu", "ma", "mi", "jo", "vi", "sÃ¢"],
  abbreviated: ["dum", "lun", "mar", "mie", "joi", "vin", "sÃ¢m"],
  wide: ["duminicÄ", "luni", "marÈi", "miercuri", "joi", "vineri", "sÃ¢mbÄtÄ"],
};

const dayPeriodValues$k = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "ami",
    morning: "dim",
    afternoon: "da",
    evening: "s",
    night: "n",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "miezul nopÈii",
    noon: "amiazÄ",
    morning: "dimineaÈÄ",
    afternoon: "dupÄ-amiazÄ",
    evening: "searÄ",
    night: "noapte",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "miezul nopÈii",
    noon: "amiazÄ",
    morning: "dimineaÈÄ",
    afternoon: "dupÄ-amiazÄ",
    evening: "searÄ",
    night: "noapte",
  },
};

const formattingDayPeriodValues$j = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "amiazÄ",
    morning: "dimineaÈÄ",
    afternoon: "dupÄ-amiazÄ",
    evening: "searÄ",
    night: "noapte",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "miezul nopÈii",
    noon: "amiazÄ",
    morning: "dimineaÈÄ",
    afternoon: "dupÄ-amiazÄ",
    evening: "searÄ",
    night: "noapte",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "miezul nopÈii",
    noon: "amiazÄ",
    morning: "dimineaÈÄ",
    afternoon: "dupÄ-amiazÄ",
    evening: "searÄ",
    night: "noapte",
  },
};

const ordinalNumber$k = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$k.localize = {
  ordinalNumber: ordinalNumber$k,

  era: (0, _index$1m.buildLocalizeFn)({
    values: eraValues$k,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1m.buildLocalizeFn)({
    values: quarterValues$k,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1m.buildLocalizeFn)({
    values: monthValues$k,
    defaultWidth: "wide",
  }),

  day: (0, _index$1m.buildLocalizeFn)({
    values: dayValues$k,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1m.buildLocalizeFn)({
    values: dayPeriodValues$k,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$j,
    defaultFormattingWidth: "wide",
  }),
});

var match$k = {};

match$k.match = void 0;

var _index$1l = buildMatchFn$1;
var _index2$G = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$k = /^(\d+)?/i;
const parseOrdinalNumberPattern$k = /\d+/i;

const matchEraPatterns$k = {
  narrow: /^(Ã|D)/i,
  abbreviated:
    /^(Ã\.?\s?d\.?\s?C\.?|Ã\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
  wide: /^(Ãnainte de Cristos|Ãnaintea erei noastre|DupÄ Cristos|Era noastrÄ)/i,
};
const parseEraPatterns$k = {
  any: [/^ÃC/i, /^DC/i],
  wide: [
    /^(Ãnainte de Cristos|Ãnaintea erei noastre)/i,
    /^(DupÄ Cristos|Era noastrÄ)/i,
  ],
};

const matchQuarterPatterns$k = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^trimestrul [1234]/i,
};
const parseQuarterPatterns$k = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$k = {
  narrow: /^[ifmaasond]/i,
  abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
  wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i,
};
const parseMonthPatterns$k = {
  narrow: [
    /^i/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^i/i,
    /^i/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ia/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^mai/i,
    /^iun/i,
    /^iul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$k = {
  narrow: /^[dlmjvs]/i,
  short: /^(d|l|ma|mi|j|v|s)/i,
  abbreviated: /^(dum|lun|mar|mie|jo|vi|sÃ¢)/i,
  wide: /^(duminica|luni|marÅ£i|miercuri|joi|vineri|sÃ¢mbÄtÄ)/i,
};
const parseDayPatterns$k = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i],
};

const matchDayPeriodPatterns$k = {
  narrow: /^(a|p|mn|a|(dimineaÅ£a|dupÄ-amiaza|seara|noaptea))/i,
  any: /^([ap]\.?\s?m\.?|miezul nopÈii|amiaza|(dimineaÅ£a|dupÄ-amiaza|seara|noaptea))/i,
};
const parseDayPeriodPatterns$k = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /amiaza/i,
    morning: /dimineaÅ£a/i,
    afternoon: /dupÄ-amiaza/i,
    evening: /seara/i,
    night: /noaptea/i,
  },
};

(match$k.match = {
  ordinalNumber: (0, _index2$G.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$k,
    parsePattern: parseOrdinalNumberPattern$k,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1l.buildMatchFn)({
    matchPatterns: matchEraPatterns$k,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$k,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1l.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$k,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$k,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1l.buildMatchFn)({
    matchPatterns: matchMonthPatterns$k,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$k,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1l.buildMatchFn)({
    matchPatterns: matchDayPatterns$k,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$k,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1l.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$k,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$k,
    defaultParseWidth: "any",
  }),
});

ro.ro = void 0;
var _index$1k = formatDistance$F;
var _index2$F = formatLong$k;
var _index3$k = formatRelative$F;
var _index4$k = localize$k;
var _index5$k = match$k;

/**
 * @category Locales
 * @summary Romanian locale.
 * @language Romanian
 * @iso-639-2 ron
 * @author Sergiu Munteanu [@jsergiu](https://github.com/jsergiu)
 * @author Adrian Ocneanu [@aocneanu](https://github.com/aocneanu)
 * @author Mihai Ocneanu [@gandesc](https://github.com/gandesc)
 */
(ro.ro = {
  code: "ro",
  formatDistance: _index$1k.formatDistance,
  formatLong: _index2$F.formatLong,
  formatRelative: _index3$k.formatRelative,
  localize: _index4$k.localize,
  match: _index5$k.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var ru = {};

var formatDistance$D = {};

formatDistance$D.formatDistance = void 0;

function declension$2(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }

  const rem10 = count % 10;
  const rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}

function buildLocalizeTokenFn$1(scheme) {
  return (count, options) => {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension$2(scheme.future, count);
        } else {
          return "ÑÐµÑÐµÐ· " + declension$2(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension$2(scheme.past, count);
        } else {
          return declension$2(scheme.regular, count) + " Ð½Ð°Ð·Ð°Ð´";
        }
      }
    } else {
      return declension$2(scheme.regular, count);
    }
  };
}

const formatDistanceLocale$j = {
  lessThanXSeconds: buildLocalizeTokenFn$1({
    regular: {
      one: "Ð¼ÐµÐ½ÑÑÐµ ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½ÑÑÐµ {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½ÑÑÐµ {{count}} ÑÐµÐºÑÐ½Ð´",
      pluralGenitive: "Ð¼ÐµÐ½ÑÑÐµ {{count}} ÑÐµÐºÑÐ½Ð´",
    },
    future: {
      one: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  xSeconds: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ð°",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´",
    },
    past: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ Ð½Ð°Ð·Ð°Ð´",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ Ð½Ð°Ð·Ð°Ð´",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ Ð½Ð°Ð·Ð°Ð´",
    },
    future: {
      singularNominative: "ÑÐµÑÐµÐ· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "ÑÐµÑÐµÐ· {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      pluralGenitive: "ÑÐµÑÐµÐ· {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  halfAMinute: (_count, options) => {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "ÑÐµÑÐµÐ· Ð¿Ð¾Ð»Ð¼Ð¸Ð½ÑÑÑ";
      } else {
        return "Ð¿Ð¾Ð»Ð¼Ð¸Ð½ÑÑÑ Ð½Ð°Ð·Ð°Ð´";
      }
    }

    return "Ð¿Ð¾Ð»Ð¼Ð¸Ð½ÑÑÑ";
  },

  lessThanXMinutes: buildLocalizeTokenFn$1({
    regular: {
      one: "Ð¼ÐµÐ½ÑÑÐµ Ð¼Ð¸Ð½ÑÑÑ",
      singularNominative: "Ð¼ÐµÐ½ÑÑÐµ {{count}} Ð¼Ð¸Ð½ÑÑÑ",
      singularGenitive: "Ð¼ÐµÐ½ÑÑÐµ {{count}} Ð¼Ð¸Ð½ÑÑ",
      pluralGenitive: "Ð¼ÐµÐ½ÑÑÐµ {{count}} Ð¼Ð¸Ð½ÑÑ",
    },
    future: {
      one: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· Ð¼Ð¸Ð½ÑÑÑ",
      singularNominative: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} Ð¼Ð¸Ð½ÑÑÑ",
      singularGenitive: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} Ð¼Ð¸Ð½ÑÑÑ",
      pluralGenitive: "Ð¼ÐµÐ½ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} Ð¼Ð¸Ð½ÑÑ",
    },
  }),

  xMinutes: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑÐ°",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑ",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑ",
    },
    past: {
      singularNominative: "{{count}} Ð¼Ð¸Ð½ÑÑÑ Ð½Ð°Ð·Ð°Ð´",
      singularGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑÑ Ð½Ð°Ð·Ð°Ð´",
      pluralGenitive: "{{count}} Ð¼Ð¸Ð½ÑÑ Ð½Ð°Ð·Ð°Ð´",
    },
    future: {
      singularNominative: "ÑÐµÑÐµÐ· {{count}} Ð¼Ð¸Ð½ÑÑÑ",
      singularGenitive: "ÑÐµÑÐµÐ· {{count}} Ð¼Ð¸Ð½ÑÑÑ",
      pluralGenitive: "ÑÐµÑÐµÐ· {{count}} Ð¼Ð¸Ð½ÑÑ",
    },
  }),

  aboutXHours: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} ÑÐ°ÑÐ°",
      singularGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} ÑÐ°ÑÐ¾Ð²",
      pluralGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} ÑÐ°ÑÐ¾Ð²",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} ÑÐ°Ñ",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} ÑÐ°ÑÐ°",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} ÑÐ°ÑÐ¾Ð²",
    },
  }),

  xHours: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} ÑÐ°Ñ",
      singularGenitive: "{{count}} ÑÐ°ÑÐ°",
      pluralGenitive: "{{count}} ÑÐ°ÑÐ¾Ð²",
    },
  }),

  xDays: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} Ð´ÐµÐ½Ñ",
      singularGenitive: "{{count}} Ð´Ð½Ñ",
      pluralGenitive: "{{count}} Ð´Ð½ÐµÐ¹",
    },
  }),

  aboutXWeeks: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð½ÐµÐ´ÐµÐ»Ð¸",
      singularGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð½ÐµÐ´ÐµÐ»Ñ",
      pluralGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð½ÐµÐ´ÐµÐ»Ñ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð½ÐµÐ´ÐµÐ»Ñ",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð½ÐµÐ´ÐµÐ»Ð¸",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð½ÐµÐ´ÐµÐ»Ñ",
    },
  }),

  xWeeks: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} Ð½ÐµÐ´ÐµÐ»Ñ",
      singularGenitive: "{{count}} Ð½ÐµÐ´ÐµÐ»Ð¸",
      pluralGenitive: "{{count}} Ð½ÐµÐ´ÐµÐ»Ñ",
    },
  }),

  aboutXMonths: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð¼ÐµÑÑÑÐ°",
      singularGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð¼ÐµÑÑÑÐµÐ²",
      pluralGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð¼ÐµÑÑÑÐµÐ²",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð¼ÐµÑÑÑ",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð¼ÐµÑÑÑÐ°",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð¼ÐµÑÑÑÐµÐ²",
    },
  }),

  xMonths: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} Ð¼ÐµÑÑÑ",
      singularGenitive: "{{count}} Ð¼ÐµÑÑÑÐ°",
      pluralGenitive: "{{count}} Ð¼ÐµÑÑÑÐµÐ²",
    },
  }),

  aboutXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð³Ð¾Ð´Ð°",
      singularGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð»ÐµÑ",
      pluralGenitive: "Ð¾ÐºÐ¾Ð»Ð¾ {{count}} Ð»ÐµÑ",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð³Ð¾Ð´Ð°",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð¸ÑÐµÐ»ÑÐ½Ð¾ ÑÐµÑÐµÐ· {{count}} Ð»ÐµÑ",
    },
  }),

  xYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "{{count}} Ð³Ð¾Ð´",
      singularGenitive: "{{count}} Ð³Ð¾Ð´Ð°",
      pluralGenitive: "{{count}} Ð»ÐµÑ",
    },
  }),

  overXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "Ð±Ð¾Ð»ÑÑÐµ {{count}} Ð³Ð¾Ð´Ð°",
      singularGenitive: "Ð±Ð¾Ð»ÑÑÐµ {{count}} Ð»ÐµÑ",
      pluralGenitive: "Ð±Ð¾Ð»ÑÑÐµ {{count}} Ð»ÐµÑ",
    },
    future: {
      singularNominative: "Ð±Ð¾Ð»ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð±Ð¾Ð»ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} Ð³Ð¾Ð´Ð°",
      pluralGenitive: "Ð±Ð¾Ð»ÑÑÐµ, ÑÐµÐ¼ ÑÐµÑÐµÐ· {{count}} Ð»ÐµÑ",
    },
  }),

  almostXYears: buildLocalizeTokenFn$1({
    regular: {
      singularNominative: "Ð¿Ð¾ÑÑÐ¸ {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð¿Ð¾ÑÑÐ¸ {{count}} Ð³Ð¾Ð´Ð°",
      pluralGenitive: "Ð¿Ð¾ÑÑÐ¸ {{count}} Ð»ÐµÑ",
    },
    future: {
      singularNominative: "Ð¿Ð¾ÑÑÐ¸ ÑÐµÑÐµÐ· {{count}} Ð³Ð¾Ð´",
      singularGenitive: "Ð¿Ð¾ÑÑÐ¸ ÑÐµÑÐµÐ· {{count}} Ð³Ð¾Ð´Ð°",
      pluralGenitive: "Ð¿Ð¾ÑÑÐ¸ ÑÐµÑÐµÐ· {{count}} Ð»ÐµÑ",
    },
  }),
};

const formatDistance$C = (token, count, options) => {
  return formatDistanceLocale$j[token](count, options);
};
formatDistance$D.formatDistance = formatDistance$C;

var formatLong$j = {};

formatLong$j.formatLong = void 0;
var _index$1j = buildFormatLongFn$1;

const dateFormats$j = {
  full: "EEEE, d MMMM y 'Ð³.'",
  long: "d MMMM y 'Ð³.'",
  medium: "d MMM y 'Ð³.'",
  short: "dd.MM.y",
};

const timeFormats$j = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$j = {
  any: "{{date}}, {{time}}",
};

(formatLong$j.formatLong = {
  date: (0, _index$1j.buildFormatLongFn)({
    formats: dateFormats$j,
    defaultWidth: "full",
  }),

  time: (0, _index$1j.buildFormatLongFn)({
    formats: timeFormats$j,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1j.buildFormatLongFn)({
    formats: dateTimeFormats$j,
    defaultWidth: "any",
  }),
});

var formatRelative$D = {};

formatRelative$D.formatRelative = void 0;
var _index$1i = isSameWeek$1;

const accusativeWeekdays$2 = [
  "Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ",
  "Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº",
  "Ð²ÑÐ¾ÑÐ½Ð¸Ðº",
  "ÑÑÐµÐ´Ñ",
  "ÑÐµÑÐ²ÐµÑÐ³",
  "Ð¿ÑÑÐ½Ð¸ÑÑ",
  "ÑÑÐ±Ð±Ð¾ÑÑ",
];

function lastWeek$2(day) {
  const weekday = accusativeWeekdays$2[day];

  switch (day) {
    case 0:
      return "'Ð² Ð¿ÑÐ¾ÑÐ»Ð¾Ðµ " + weekday + " Ð²' p";
    case 1:
    case 2:
    case 4:
      return "'Ð² Ð¿ÑÐ¾ÑÐ»ÑÐ¹ " + weekday + " Ð²' p";
    case 3:
    case 5:
    case 6:
      return "'Ð² Ð¿ÑÐ¾ÑÐ»ÑÑ " + weekday + " Ð²' p";
  }
}

function thisWeek$2(day) {
  const weekday = accusativeWeekdays$2[day];

  if (day === 2 /* Tue */) {
    return "'Ð²Ð¾ " + weekday + " Ð²' p";
  } else {
    return "'Ð² " + weekday + " Ð²' p";
  }
}

function nextWeek$2(day) {
  const weekday = accusativeWeekdays$2[day];

  switch (day) {
    case 0:
      return "'Ð² ÑÐ»ÐµÐ´ÑÑÑÐµÐµ " + weekday + " Ð²' p";
    case 1:
    case 2:
    case 4:
      return "'Ð² ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹ " + weekday + " Ð²' p";
    case 3:
    case 5:
    case 6:
      return "'Ð² ÑÐ»ÐµÐ´ÑÑÑÑÑ " + weekday + " Ð²' p";
  }
}

const formatRelativeLocale$j = {
  lastWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$1i.isSameWeek)(date, baseDate, options)) {
      return thisWeek$2(day);
    } else {
      return lastWeek$2(day);
    }
  },
  yesterday: "'Ð²ÑÐµÑÐ° Ð²' p",
  today: "'ÑÐµÐ³Ð¾Ð´Ð½Ñ Ð²' p",
  tomorrow: "'Ð·Ð°Ð²ÑÑÐ° Ð²' p",
  nextWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$1i.isSameWeek)(date, baseDate, options)) {
      return thisWeek$2(day);
    } else {
      return nextWeek$2(day);
    }
  },
  other: "P",
};

const formatRelative$C = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$j[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$D.formatRelative = formatRelative$C;

var localize$j = {};

localize$j.localize = void 0;
var _index$1h = buildLocalizeFn$1;

const eraValues$j = {
  narrow: ["Ð´Ð¾ Ð½.Ñ.", "Ð½.Ñ."],
  abbreviated: ["Ð´Ð¾ Ð½. Ñ.", "Ð½. Ñ."],
  wide: ["Ð´Ð¾ Ð½Ð°ÑÐµÐ¹ ÑÑÑ", "Ð½Ð°ÑÐµÐ¹ ÑÑÑ"],
};

const quarterValues$j = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-Ð¹ ÐºÐ².", "2-Ð¹ ÐºÐ².", "3-Ð¹ ÐºÐ².", "4-Ð¹ ÐºÐ²."],
  wide: ["1-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»", "2-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»", "3-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»", "4-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»"],
};

const monthValues$j = {
  narrow: ["Ð¯", "Ð¤", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡", "Ð", "Ð", "Ð"],
  abbreviated: [
    "ÑÐ½Ð².",
    "ÑÐµÐ².",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿Ñ.",
    "Ð¼Ð°Ð¹",
    "Ð¸ÑÐ½Ñ",
    "Ð¸ÑÐ»Ñ",
    "Ð°Ð²Ð³.",
    "ÑÐµÐ½Ñ.",
    "Ð¾ÐºÑ.",
    "Ð½Ð¾ÑÐ±.",
    "Ð´ÐµÐº.",
  ],

  wide: [
    "ÑÐ½Ð²Ð°ÑÑ",
    "ÑÐµÐ²ÑÐ°Ð»Ñ",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿ÑÐµÐ»Ñ",
    "Ð¼Ð°Ð¹",
    "Ð¸ÑÐ½Ñ",
    "Ð¸ÑÐ»Ñ",
    "Ð°Ð²Ð³ÑÑÑ",
    "ÑÐµÐ½ÑÑÐ±ÑÑ",
    "Ð¾ÐºÑÑÐ±ÑÑ",
    "Ð½Ð¾ÑÐ±ÑÑ",
    "Ð´ÐµÐºÐ°Ð±ÑÑ",
  ],
};

const formattingMonthValues$5 = {
  narrow: ["Ð¯", "Ð¤", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡", "Ð", "Ð", "Ð"],
  abbreviated: [
    "ÑÐ½Ð².",
    "ÑÐµÐ².",
    "Ð¼Ð°Ñ.",
    "Ð°Ð¿Ñ.",
    "Ð¼Ð°Ñ",
    "Ð¸ÑÐ½.",
    "Ð¸ÑÐ».",
    "Ð°Ð²Ð³.",
    "ÑÐµÐ½Ñ.",
    "Ð¾ÐºÑ.",
    "Ð½Ð¾ÑÐ±.",
    "Ð´ÐµÐº.",
  ],

  wide: [
    "ÑÐ½Ð²Ð°ÑÑ",
    "ÑÐµÐ²ÑÐ°Ð»Ñ",
    "Ð¼Ð°ÑÑÐ°",
    "Ð°Ð¿ÑÐµÐ»Ñ",
    "Ð¼Ð°Ñ",
    "Ð¸ÑÐ½Ñ",
    "Ð¸ÑÐ»Ñ",
    "Ð°Ð²Ð³ÑÑÑÐ°",
    "ÑÐµÐ½ÑÑÐ±ÑÑ",
    "Ð¾ÐºÑÑÐ±ÑÑ",
    "Ð½Ð¾ÑÐ±ÑÑ",
    "Ð´ÐµÐºÐ°Ð±ÑÑ",
  ],
};

const dayValues$j = {
  narrow: ["Ð", "Ð", "Ð", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð²Ñ", "Ð¿Ð½", "Ð²Ñ", "ÑÑ", "ÑÑ", "Ð¿Ñ", "ÑÐ±"],
  abbreviated: ["Ð²ÑÐº", "Ð¿Ð½Ð´", "Ð²ÑÑ", "ÑÑÐ´", "ÑÑÐ²", "Ð¿ÑÐ½", "ÑÑÐ±"],
  wide: [
    "Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ",
    "Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº",
    "Ð²ÑÐ¾ÑÐ½Ð¸Ðº",
    "ÑÑÐµÐ´Ð°",
    "ÑÐµÑÐ²ÐµÑÐ³",
    "Ð¿ÑÑÐ½Ð¸ÑÐ°",
    "ÑÑÐ±Ð±Ð¾ÑÐ°",
  ],
};

const dayPeriodValues$j = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð»Ð½.",
    noon: "Ð¿Ð¾Ð»Ð´.",
    morning: "ÑÑÑÐ¾",
    afternoon: "Ð´ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð»Ð½.",
    noon: "Ð¿Ð¾Ð»Ð´.",
    morning: "ÑÑÑÐ¾",
    afternoon: "Ð´ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð»Ð½Ð¾ÑÑ",
    noon: "Ð¿Ð¾Ð»Ð´ÐµÐ½Ñ",
    morning: "ÑÑÑÐ¾",
    afternoon: "Ð´ÐµÐ½Ñ",
    evening: "Ð²ÐµÑÐµÑ",
    night: "Ð½Ð¾ÑÑ",
  },
};

const formattingDayPeriodValues$i = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð»Ð½.",
    noon: "Ð¿Ð¾Ð»Ð´.",
    morning: "ÑÑÑÐ°",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÐ¸",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð»Ð½.",
    noon: "Ð¿Ð¾Ð»Ð´.",
    morning: "ÑÑÑÐ°",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÐ¸",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð»Ð½Ð¾ÑÑ",
    noon: "Ð¿Ð¾Ð»Ð´ÐµÐ½Ñ",
    morning: "ÑÑÑÐ°",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑÐµÑÐ°",
    night: "Ð½Ð¾ÑÐ¸",
  },
};

const ordinalNumber$j = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = options?.unit;

  let suffix;
  if (unit === "date") {
    suffix = "-Ðµ";
  } else if (unit === "week" || unit === "minute" || unit === "second") {
    suffix = "-Ñ";
  } else {
    suffix = "-Ð¹";
  }

  return number + suffix;
};

(localize$j.localize = {
  ordinalNumber: ordinalNumber$j,

  era: (0, _index$1h.buildLocalizeFn)({
    values: eraValues$j,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1h.buildLocalizeFn)({
    values: quarterValues$j,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1h.buildLocalizeFn)({
    values: monthValues$j,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$5,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$1h.buildLocalizeFn)({
    values: dayValues$j,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1h.buildLocalizeFn)({
    values: dayPeriodValues$j,
    defaultWidth: "any",
    formattingValues: formattingDayPeriodValues$i,
    defaultFormattingWidth: "wide",
  }),
});

var match$j = {};

match$j.match = void 0;

var _index$1g = buildMatchFn$1;
var _index2$E = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$j = /^(\d+)(-?(Ðµ|Ñ|Ð¹|Ð¾Ðµ|ÑÐµ|Ð°Ñ|ÑÑ|ÑÐ¹|Ð¾Ð¹|Ð¸Ð¹|ÑÐ¹))?/i;
const parseOrdinalNumberPattern$j = /\d+/i;

const matchEraPatterns$j = {
  narrow: /^((Ð´Ð¾ )?Ð½\.?\s?Ñ\.?)/i,
  abbreviated: /^((Ð´Ð¾ )?Ð½\.?\s?Ñ\.?)/i,
  wide: /^(Ð´Ð¾ Ð½Ð°ÑÐµÐ¹ ÑÑÑ|Ð½Ð°ÑÐµÐ¹ ÑÑÑ|Ð½Ð°ÑÐ° ÑÑÐ°)/i,
};
const parseEraPatterns$j = {
  any: [/^Ð´/i, /^Ð½/i],
};

const matchQuarterPatterns$j = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ÑÐ¾Ð¸]?Ð¹?)? ÐºÐ².?/i,
  wide: /^[1234](-?[ÑÐ¾Ð¸]?Ð¹?)? ÐºÐ²Ð°ÑÑÐ°Ð»/i,
};

const parseQuarterPatterns$j = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$j = {
  narrow: /^[ÑÑÐ¼Ð°Ð¸ÑÐ¾Ð½Ð´]/i,
  abbreviated:
    /^(ÑÐ½Ð²|ÑÐµÐ²|Ð¼Ð°ÑÑ?|Ð°Ð¿Ñ|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]?|Ð¸ÑÐ»[ÑÑ]?|Ð°Ð²Ð³|ÑÐµÐ½Ñ?|Ð¾ÐºÑ|Ð½Ð¾ÑÐ±?|Ð´ÐµÐº)\.?/i,
  wide: /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|Ð¼Ð°ÑÑÐ°?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ»[ÑÑ]|Ð°Ð²Ð³ÑÑÑÐ°?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ])/i,
};

const parseMonthPatterns$j = {
  narrow: [
    /^Ñ/i,
    /^Ñ/i,
    /^Ð¼/i,
    /^Ð°/i,
    /^Ð¼/i,
    /^Ð¸/i,
    /^Ð¸/i,
    /^Ð°/i,
    /^Ñ/i,
    /^Ð¾/i,
    /^Ð½/i,
    /^Ñ/i,
  ],

  any: [
    /^Ñ/i,
    /^Ñ/i,
    /^Ð¼Ð°Ñ/i,
    /^Ð°Ð¿/i,
    /^Ð¼Ð°[Ð¹Ñ]/i,
    /^Ð¸ÑÐ½/i,
    /^Ð¸ÑÐ»/i,
    /^Ð°Ð²/i,
    /^Ñ/i,
    /^Ð¾/i,
    /^Ð½/i,
    /^Ð´/i,
  ],
};

const matchDayPatterns$j = {
  narrow: /^[Ð²Ð¿ÑÑ]/i,
  short: /^(Ð²Ñ|Ð²Ð¾|Ð¿Ð½|Ð¿Ð¾|Ð²Ñ|ÑÑ|ÑÑ|ÑÐµ|Ð¿Ñ|Ð¿Ñ|ÑÐ±|ÑÑ)\.?/i,
  abbreviated: /^(Ð²ÑÐº|Ð²Ð¾Ñ|Ð¿Ð½Ð´|Ð¿Ð¾Ð½|Ð²ÑÑ|Ð²ÑÐ¾|ÑÑÐ´|ÑÑÐµ|ÑÑÐ²|ÑÐµÑ|Ð¿ÑÐ½|Ð¿ÑÑ|ÑÑÐ±).?/i,
  wide: /^(Ð²Ð¾ÑÐºÑÐµÑÐµÐ½Ñ[ÐµÑ]|Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸ÐºÐ°?|Ð²ÑÐ¾ÑÐ½Ð¸ÐºÐ°?|ÑÑÐµÐ´[Ð°Ñ]|ÑÐµÑÐ²ÐµÑÐ³Ð°?|Ð¿ÑÑÐ½Ð¸Ñ[Ð°Ñ]|ÑÑÐ±Ð±Ð¾Ñ[Ð°Ñ])/i,
};

const parseDayPatterns$j = {
  narrow: [/^Ð²/i, /^Ð¿/i, /^Ð²/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i],
  any: [/^Ð²[Ð¾Ñ]/i, /^Ð¿[Ð¾Ð½]/i, /^Ð²/i, /^ÑÑ/i, /^Ñ/i, /^Ð¿[ÑÑ]/i, /^Ñ[ÑÐ±]/i],
};

const matchDayPeriodPatterns$j = {
  narrow: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾Ð»Ð½\.?|Ð¿Ð¾Ð»Ð´\.?|ÑÑÑ[Ð¾Ð°]|Ð´ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½Ð¾Ñ[ÑÐ¸])/i,
  abbreviated: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾Ð»Ð½\.?|Ð¿Ð¾Ð»Ð´\.?|ÑÑÑ[Ð¾Ð°]|Ð´ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½Ð¾Ñ[ÑÐ¸])/i,
  wide: /^([Ð´Ð¿]Ð¿|Ð¿Ð¾Ð»Ð½Ð¾ÑÑ|Ð¿Ð¾Ð»Ð´ÐµÐ½Ñ|ÑÑÑ[Ð¾Ð°]|Ð´ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°?|Ð½Ð¾Ñ[ÑÐ¸])/i,
};

const parseDayPeriodPatterns$j = {
  any: {
    am: /^Ð´Ð¿/i,
    pm: /^Ð¿Ð¿/i,
    midnight: /^Ð¿Ð¾Ð»Ð½/i,
    noon: /^Ð¿Ð¾Ð»Ð´/i,
    morning: /^Ñ/i,
    afternoon: /^Ð´[ÐµÐ½]/i,
    evening: /^Ð²/i,
    night: /^Ð½/i,
  },
};

(match$j.match = {
  ordinalNumber: (0, _index2$E.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$j,
    parsePattern: parseOrdinalNumberPattern$j,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1g.buildMatchFn)({
    matchPatterns: matchEraPatterns$j,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$j,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1g.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$j,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$j,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1g.buildMatchFn)({
    matchPatterns: matchMonthPatterns$j,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$j,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1g.buildMatchFn)({
    matchPatterns: matchDayPatterns$j,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$j,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1g.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$j,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$j,
    defaultParseWidth: "any",
  }),
});

ru.ru = void 0;
var _index$1f = formatDistance$D;
var _index2$D = formatLong$j;
var _index3$j = formatRelative$D;
var _index4$j = localize$j;
var _index5$j = match$j;

/**
 * @category Locales
 * @summary Russian locale.
 * @language Russian
 * @iso-639-2 rus
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */
(ru.ru = {
  code: "ru",
  formatDistance: _index$1f.formatDistance,
  formatLong: _index2$D.formatLong,
  formatRelative: _index3$j.formatRelative,
  localize: _index4$j.localize,
  match: _index5$j.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var se = {};

var formatDistance$B = {};

formatDistance$B.formatDistance = void 0;

const formatDistanceLocale$i = {
  lessThanXSeconds: {
    one: "unnit go ovtta sekundda",
    other: "unnit go {{count}} sekundda",
  },

  xSeconds: {
    one: "sekundda",
    other: "{{count}} sekundda",
  },

  halfAMinute: "bealle minuhta",

  lessThanXMinutes: {
    one: "unnit go bealle minuhta",
    other: "unnit go {{count}} minuhta",
  },

  xMinutes: {
    one: "minuhta",
    other: "{{count}} minuhta",
  },

  aboutXHours: {
    one: "sullii ovtta diimmu",
    other: "sullii {{count}} diimmu",
  },

  xHours: {
    one: "diimmu",
    other: "{{count}} diimmu",
  },

  xDays: {
    one: "beaivvi",
    other: "{{count}} beaivvi",
  },

  aboutXWeeks: {
    one: "sullii ovtta vahku",
    other: "sullii {{count}} vahku",
  },

  xWeeks: {
    one: "vahku",
    other: "{{count}} vahku",
  },

  aboutXMonths: {
    one: "sullii ovtta mÃ¡nu",
    other: "sullii {{count}} mÃ¡nu",
  },

  xMonths: {
    one: "mÃ¡nu",
    other: "{{count}} mÃ¡nu",
  },

  aboutXYears: {
    one: "sullii ovtta jagi",
    other: "sullii {{count}} jagi",
  },

  xYears: {
    one: "jagi",
    other: "{{count}} jagi",
  },

  overXYears: {
    one: "guhkit go jagi",
    other: "guhkit go {{count}} jagi",
  },

  almostXYears: {
    one: "measta jagi",
    other: "measta {{count}} jagi",
  },
};

const formatDistance$A = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$i[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "geahÄen " + result;
    } else {
      return result + " Ã¡igi";
    }
  }

  return result;
};
formatDistance$B.formatDistance = formatDistance$A;

var formatLong$i = {};

formatLong$i.formatLong = void 0;
var _index$1e = buildFormatLongFn$1;

const dateFormats$i = {
  full: "EEEE MMMM d. 'b.' y",
  long: "MMMM d. 'b.' y",
  medium: "MMM d. 'b.' y",
  short: "dd.MM.y",
};

const timeFormats$i = {
  full: "'dii.' HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$i = {
  full: "{{date}} 'dii.' {{time}}",
  long: "{{date}} 'dii.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$i.formatLong = {
  date: (0, _index$1e.buildFormatLongFn)({
    formats: dateFormats$i,
    defaultWidth: "full",
  }),

  time: (0, _index$1e.buildFormatLongFn)({
    formats: timeFormats$i,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1e.buildFormatLongFn)({
    formats: dateTimeFormats$i,
    defaultWidth: "full",
  }),
});

var formatRelative$B = {};

formatRelative$B.formatRelative = void 0;

const formatRelativeLocale$i = {
  lastWeek: "'ovddit' eeee 'dii.' p",
  yesterday: "'ikte dii.' p",
  today: "'odne dii.' p",
  tomorrow: "'ihtin dii.' p",
  nextWeek: "EEEE 'dii.' p",
  other: "P",
};

const formatRelative$A = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$i[token];
formatRelative$B.formatRelative = formatRelative$A;

var localize$i = {};

localize$i.localize = void 0;
var _index$1d = buildLocalizeFn$1;

const eraValues$i = {
  narrow: ["o.Kr.", "m.Kr."],
  abbreviated: ["o.Kr.", "m.Kr."],
  wide: ["ovdal Kristusa", "maÅÅel Kristusa"],
};

const quarterValues$i = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartÃ¡la", "2. kvartÃ¡la", "3. kvartÃ¡la", "4. kvartÃ¡la"],
};

const monthValues$i = {
  narrow: ["O", "G", "N", "C", "M", "G", "S", "B", "Ä", "G", "S", "J"],
  abbreviated: [
    "oÄÄa",
    "guov",
    "njuk",
    "cuo",
    "mies",
    "geas",
    "suoi",
    "borg",
    "ÄakÄ",
    "golg",
    "skÃ¡b",
    "juov",
  ],

  wide: [
    "oÄÄajagemÃ¡nnu",
    "guovvamÃ¡nnu",
    "njukÄamÃ¡nnu",
    "cuoÅomÃ¡nnu",
    "miessemÃ¡nnu",
    "geassemÃ¡nnu",
    "suoidnemÃ¡nnu",
    "borgemÃ¡nnu",
    "ÄakÄamÃ¡nnu",
    "golggotmÃ¡nnu",
    "skÃ¡bmamÃ¡nnu",
    "juovlamÃ¡nnu",
  ],
};

const dayValues$i = {
  narrow: ["S", "V", "M", "G", "D", "B", "L"],
  short: ["sotn", "vuos", "maÅ", "gask", "duor", "bear", "lÃ¡v"],
  abbreviated: ["sotn", "vuos", "maÅ", "gask", "duor", "bear", "lÃ¡v"],
  wide: [
    "sotnabeaivi",
    "vuossÃ¡rga",
    "maÅÅebÃ¡rga",
    "gaskavahkku",
    "duorastat",
    "bearjadat",
    "lÃ¡vvardat",
  ],
};

const dayPeriodValues$i = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "gaskaidja",
    noon: "gaskabeaivi",
    morning: "iÄÄes",
    afternoon: "maÅÅel gaska.",
    evening: "eahkes",
    night: "ihkku",
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gaskaidja",
    noon: "gaskabeaivvi",
    morning: "iÄÄes",
    afternoon: "maÅÅel gaskabea.",
    evening: "eahkes",
    night: "ihkku",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gaskaidja",
    noon: "gaskabeavvi",
    morning: "iÄÄes",
    afternoon: "maÅÅel gaskabeaivvi",
    evening: "eahkes",
    night: "ihkku",
  },
};

const ordinalNumber$i = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$i.localize = {
  ordinalNumber: ordinalNumber$i,

  era: (0, _index$1d.buildLocalizeFn)({
    values: eraValues$i,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$1d.buildLocalizeFn)({
    values: quarterValues$i,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$1d.buildLocalizeFn)({
    values: monthValues$i,
    defaultWidth: "wide",
  }),

  day: (0, _index$1d.buildLocalizeFn)({
    values: dayValues$i,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$1d.buildLocalizeFn)({
    values: dayPeriodValues$i,
    defaultWidth: "wide",
  }),
});

var match$i = {};

match$i.match = void 0;

var _index$1c = buildMatchFn$1;
var _index2$C = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$i = /^(\d+)\.?/i;
const parseOrdinalNumberPattern$i = /\d+/i;

const matchEraPatterns$i = {
  narrow: /^(o\.? ?Kr\.?|m\.? ?Kr\.?)/i,
  abbreviated: /^(o\.? ?Kr\.?|m\.? ?Kr\.?)/i,
  wide: /^(ovdal Kristusa|ovdal min Ã¡iggi|maÅÅel Kristusa|min Ã¡igi)/i,
};
const parseEraPatterns$i = {
  any: [/^o/i, /^m/i],
};

const matchQuarterPatterns$i = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartÃ¡la/i,
};
const parseQuarterPatterns$i = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$i = {
  narrow: /^[ogncmsbÄj]/i,
  abbreviated:
    /^(oÄÄa|guov|njuk|cuo|mies|geas|suoi|borg|ÄakÄ|golg|skÃ¡b|juov)\.?/i,
  wide: /^(oÄÄajagemÃ¡nnu|guovvamÃ¡nnu|njukÄamÃ¡nnu|cuoÅomÃ¡nnu|miessemÃ¡nnu|geassemÃ¡nnu|suoidnemÃ¡nnu|borgemÃ¡nnu|ÄakÄamÃ¡nnu|golggotmÃ¡nnu|skÃ¡bmamÃ¡nnu|juovlamÃ¡nnu)/i,
};
const parseMonthPatterns$i = {
  narrow: [
    /^o/i,
    /^g/i,
    /^n/i,
    /^c/i,
    /^m/i,
    /^g/i,
    /^s/i,
    /^b/i,
    /^Ä/i,
    /^g/i,
    /^s/i,
    /^j/i,
  ],

  any: [
    /^o/i,
    /^gu/i,
    /^n/i,
    /^c/i,
    /^m/i,
    /^ge/i,
    /^su/i,
    /^b/i,
    /^Ä/i,
    /^go/i,
    /^sk/i,
    /^j/i,
  ],
};

const matchDayPatterns$i = {
  narrow: /^[svmgdbl]/i,
  short: /^(sotn|vuos|maÅ|gask|duor|bear|lÃ¡v)/i,
  abbreviated: /^(sotn|vuos|maÅ|gask|duor|bear|lÃ¡v)/i,
  wide: /^(sotnabeaivi|vuossÃ¡rga|maÅÅebÃ¡rga|gaskavahkku|duorastat|bearjadat|lÃ¡vvardat)/i,
};
const parseDayPatterns$i = {
  any: [/^s/i, /^v/i, /^m/i, /^g/i, /^d/i, /^b/i, /^l/i],
};

const matchDayPeriodPatterns$i = {
  narrow:
    /^(gaskaidja|gaskabeaivvi|(pÃ¥) (iÄÄes|maÅÅel gaskabeaivvi|eahkes|ihkku)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|gaskaidja|gaskabeaivvi|(pÃ¥) (iÄÄes|maÅÅel gaskabeaivvi|eahkes|ihkku))/i,
};
const parseDayPeriodPatterns$i = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^gaskai/i,
    noon: /^gaskab/i,
    morning: /iÄÄes/i,
    afternoon: /maÅÅel gaskabeaivvi/i,
    evening: /eahkes/i,
    night: /ihkku/i,
  },
};

(match$i.match = {
  ordinalNumber: (0, _index2$C.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$i,
    parsePattern: parseOrdinalNumberPattern$i,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1c.buildMatchFn)({
    matchPatterns: matchEraPatterns$i,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$i,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1c.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$i,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$i,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1c.buildMatchFn)({
    matchPatterns: matchMonthPatterns$i,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$i,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1c.buildMatchFn)({
    matchPatterns: matchDayPatterns$i,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$i,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1c.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$i,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$i,
    defaultParseWidth: "any",
  }),
});

se.se = void 0;
var _index$1b = formatDistance$B;
var _index2$B = formatLong$i;
var _index3$i = formatRelative$B;
var _index4$i = localize$i;
var _index5$i = match$i;

/**
 * @category Locales
 * @summary Northern SÃ¡mi locale.
 * @language Northern SÃ¡mi
 * @iso-639-2 sme
 * @author Audun Rundberg [@audunru](https://github.com/audunru)
 */
(se.se = {
  code: "se",
  formatDistance: _index$1b.formatDistance,
  formatLong: _index2$B.formatLong,
  formatRelative: _index3$i.formatRelative,
  localize: _index4$i.localize,
  match: _index5$i.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var sk = {};

var formatDistance$z = {};

formatDistance$z.formatDistance = void 0;

function declensionGroup(scheme, count) {
  if (count === 1 && scheme.one) {
    return scheme.one;
  }

  if (count >= 2 && count <= 4 && scheme.twoFour) {
    return scheme.twoFour;
  }

  // if count === null || count === 0 || count >= 5
  return scheme.other;
}

function declension$1(scheme, count, time) {
  const group = declensionGroup(scheme, count);
  const finalText = group[time];
  return finalText.replace("{{count}}", String(count));
}

function extractPreposition(token) {
  const result = ["lessThan", "about", "over", "almost"].filter(
    function (preposition) {
      return !!token.match(new RegExp("^" + preposition));
    },
  );

  return result[0];
}

function prefixPreposition(preposition) {
  let translation = "";

  if (preposition === "almost") {
    translation = "takmer";
  }

  if (preposition === "about") {
    translation = "pribliÅ¾ne";
  }

  return translation.length > 0 ? translation + " " : "";
}

function suffixPreposition(preposition) {
  let translation = "";

  if (preposition === "lessThan") {
    translation = "menej neÅ¾";
  }

  if (preposition === "over") {
    translation = "viac neÅ¾";
  }

  return translation.length > 0 ? translation + " " : "";
}

function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}

const formatDistanceLocale$h = {
  xSeconds: {
    one: {
      present: "sekunda",
      past: "sekundou",
      future: "sekundu",
    },
    twoFour: {
      present: "{{count}} sekundy",
      past: "{{count}} sekundami",
      future: "{{count}} sekundy",
    },
    other: {
      present: "{{count}} sekÃºnd",
      past: "{{count}} sekundami",
      future: "{{count}} sekÃºnd",
    },
  },

  halfAMinute: {
    other: {
      present: "pol minÃºty",
      past: "pol minÃºtou",
      future: "pol minÃºty",
    },
  },

  xMinutes: {
    one: {
      present: "minÃºta",
      past: "minÃºtou",
      future: "minÃºtu",
    },
    twoFour: {
      present: "{{count}} minÃºty",
      past: "{{count}} minÃºtami",
      future: "{{count}} minÃºty",
    },
    other: {
      present: "{{count}} minÃºt",
      past: "{{count}} minÃºtami",
      future: "{{count}} minÃºt",
    },
  },

  xHours: {
    one: {
      present: "hodina",
      past: "hodinou",
      future: "hodinu",
    },
    twoFour: {
      present: "{{count}} hodiny",
      past: "{{count}} hodinami",
      future: "{{count}} hodiny",
    },
    other: {
      present: "{{count}} hodÃ­n",
      past: "{{count}} hodinami",
      future: "{{count}} hodÃ­n",
    },
  },

  xDays: {
    one: {
      present: "deÅ",
      past: "dÅom",
      future: "deÅ",
    },
    twoFour: {
      present: "{{count}} dni",
      past: "{{count}} dÅami",
      future: "{{count}} dni",
    },
    other: {
      present: "{{count}} dnÃ­",
      past: "{{count}} dÅami",
      future: "{{count}} dnÃ­",
    },
  },

  xWeeks: {
    one: {
      present: "tÃ½Å¾deÅ",
      past: "tÃ½Å¾dÅom",
      future: "tÃ½Å¾deÅ",
    },
    twoFour: {
      present: "{{count}} tÃ½Å¾dne",
      past: "{{count}} tÃ½Å¾dÅami",
      future: "{{count}} tÃ½Å¾dne",
    },
    other: {
      present: "{{count}} tÃ½Å¾dÅov",
      past: "{{count}} tÃ½Å¾dÅami",
      future: "{{count}} tÃ½Å¾dÅov",
    },
  },

  xMonths: {
    one: {
      present: "mesiac",
      past: "mesiacom",
      future: "mesiac",
    },
    twoFour: {
      present: "{{count}} mesiace",
      past: "{{count}} mesiacmi",
      future: "{{count}} mesiace",
    },
    other: {
      present: "{{count}} mesiacov",
      past: "{{count}} mesiacmi",
      future: "{{count}} mesiacov",
    },
  },

  xYears: {
    one: {
      present: "rok",
      past: "rokom",
      future: "rok",
    },
    twoFour: {
      present: "{{count}} roky",
      past: "{{count}} rokmi",
      future: "{{count}} roky",
    },
    other: {
      present: "{{count}} rokov",
      past: "{{count}} rokmi",
      future: "{{count}} rokov",
    },
  },
};

const formatDistance$y = (token, count, options) => {
  const preposition = extractPreposition(token) || "";
  const key = lowercaseFirstLetter(token.substring(preposition.length));
  const scheme = formatDistanceLocale$h[key];

  if (!options?.addSuffix) {
    return (
      prefixPreposition(preposition) +
      suffixPreposition(preposition) +
      declension$1(scheme, count, "present")
    );
  }

  if (options.comparison && options.comparison > 0) {
    return (
      prefixPreposition(preposition) +
      "o " +
      suffixPreposition(preposition) +
      declension$1(scheme, count, "future")
    );
  } else {
    return (
      prefixPreposition(preposition) +
      "pred " +
      suffixPreposition(preposition) +
      declension$1(scheme, count, "past")
    );
  }
};
formatDistance$z.formatDistance = formatDistance$y;

var formatLong$h = {};

formatLong$h.formatLong = void 0;
var _index$1a = buildFormatLongFn$1;

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1986
const dateFormats$h = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. M. y",
  short: "d. M. y",
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#2149
const timeFormats$h = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1994
const dateTimeFormats$h = {
  full: "{{date}}, {{time}}",
  long: "{{date}}, {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$h.formatLong = {
  date: (0, _index$1a.buildFormatLongFn)({
    formats: dateFormats$h,
    defaultWidth: "full",
  }),

  time: (0, _index$1a.buildFormatLongFn)({
    formats: timeFormats$h,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$1a.buildFormatLongFn)({
    formats: dateTimeFormats$h,
    defaultWidth: "full",
  }),
});

var formatRelative$z = {};

formatRelative$z.formatRelative = void 0;
var _index$19 = isSameWeek$1;

// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
const accusativeWeekdays$1 = [
  "nedeÄ¾u",
  "pondelok",
  "utorok",
  "stredu",
  "Å¡tvrtok",
  "piatok",
  "sobotu",
];

function lastWeek$1(day) {
  const weekday = accusativeWeekdays$1[day];

  switch (day) {
    case 0: /* Sun */
    case 3: /* Wed */
    case 6 /* Sat */:
      return "'minulÃº " + weekday + " o' p";
    default:
      return "'minulÃ½' eeee 'o' p";
  }
}

function thisWeek$1(day) {
  const weekday = accusativeWeekdays$1[day];

  if (day === 4 /* Thu */) {
    return "'vo' eeee 'o' p";
  } else {
    return "'v " + weekday + " o' p";
  }
}

function nextWeek$1(day) {
  const weekday = accusativeWeekdays$1[day];

  switch (day) {
    case 0: /* Sun */
    case 4: /* Wed */
    case 6 /* Sat */:
      return "'budÃºcu " + weekday + " o' p";
    default:
      return "'budÃºci' eeee 'o' p";
  }
}

const formatRelativeLocale$h = {
  lastWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$19.isSameWeek)(date, baseDate, options)) {
      return thisWeek$1(day);
    } else {
      return lastWeek$1(day);
    }
  },
  yesterday: "'vÄera o' p",
  today: "'dnes o' p",
  tomorrow: "'zajtra o' p",
  nextWeek: (date, baseDate, options) => {
    const day = date.getDay();
    if ((0, _index$19.isSameWeek)(date, baseDate, options)) {
      return thisWeek$1(day);
    } else {
      return nextWeek$1(day);
    }
  },
  other: "P",
};

const formatRelative$y = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$h[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$z.formatRelative = formatRelative$y;

var localize$h = {};

localize$h.localize = void 0;
var _index$18 = buildLocalizeFn$1;

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1772
const eraValues$h = {
  narrow: ["pred Kr.", "po Kr."],
  abbreviated: ["pred Kr.", "po Kr."],
  wide: ["pred Kristom", "po Kristovi"],
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1780
const quarterValues$h = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Å¡tvrÅ¥rok", "2. Å¡tvrÅ¥rok", "3. Å¡tvrÅ¥rok", "4. Å¡tvrÅ¥rok"],
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1804
const monthValues$h = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "mÃ¡j",
    "jÃºn",
    "jÃºl",
    "aug",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januÃ¡r",
    "februÃ¡r",
    "marec",
    "aprÃ­l",
    "mÃ¡j",
    "jÃºn",
    "jÃºl",
    "august",
    "september",
    "oktÃ³ber",
    "november",
    "december",
  ],
};
const formattingMonthValues$4 = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "mÃ¡j",
    "jÃºn",
    "jÃºl",
    "aug",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januÃ¡ra",
    "februÃ¡ra",
    "marca",
    "aprÃ­la",
    "mÃ¡ja",
    "jÃºna",
    "jÃºla",
    "augusta",
    "septembra",
    "oktÃ³bra",
    "novembra",
    "decembra",
  ],
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1876
const dayValues$h = {
  narrow: ["n", "p", "u", "s", "Å¡", "p", "s"],
  short: ["ne", "po", "ut", "st", "Å¡t", "pi", "so"],
  abbreviated: ["ne", "po", "ut", "st", "Å¡t", "pi", "so"],
  wide: [
    "nedeÄ¾a",
    "pondelok",
    "utorok",
    "streda",
    "Å¡tvrtok",
    "piatok",
    "sobota",
  ],
};

// https://www.unicode.org/cldr/charts/32/summary/sk.html#1932
const dayPeriodValues$h = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "poln.",
    noon: "pol.",
    morning: "rÃ¡no",
    afternoon: "pop.",
    evening: "veÄ.",
    night: "noc",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "poln.",
    noon: "pol.",
    morning: "rÃ¡no",
    afternoon: "popol.",
    evening: "veÄer",
    night: "noc",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "polnoc",
    noon: "poludnie",
    morning: "rÃ¡no",
    afternoon: "popoludnie",
    evening: "veÄer",
    night: "noc",
  },
};

const formattingDayPeriodValues$h = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "o poln.",
    noon: "nap.",
    morning: "rÃ¡no",
    afternoon: "pop.",
    evening: "veÄ.",
    night: "v n.",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "o poln.",
    noon: "napol.",
    morning: "rÃ¡no",
    afternoon: "popol.",
    evening: "veÄer",
    night: "v noci",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "o polnoci",
    noon: "napoludnie",
    morning: "rÃ¡no",
    afternoon: "popoludnÃ­",
    evening: "veÄer",
    night: "v noci",
  },
};

const ordinalNumber$h = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$h.localize = {
  ordinalNumber: ordinalNumber$h,

  era: (0, _index$18.buildLocalizeFn)({
    values: eraValues$h,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$18.buildLocalizeFn)({
    values: quarterValues$h,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$18.buildLocalizeFn)({
    values: monthValues$h,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$4,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$18.buildLocalizeFn)({
    values: dayValues$h,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$18.buildLocalizeFn)({
    values: dayPeriodValues$h,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$h,
    defaultFormattingWidth: "wide",
  }),
});

var match$h = {};

match$h.match = void 0;

var _index$17 = buildMatchFn$1;
var _index2$A = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$h = /^(\d+)\.?/i;
const parseOrdinalNumberPattern$h = /\d+/i;

const matchEraPatterns$h = {
  narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(pred Kristom|pred na[Å¡s][Ã­i]m letopo[Äc]tom|po Kristovi|n[Ã¡a][Å¡s]ho letopo[Äc]tu)/i,
};
const parseEraPatterns$h = {
  any: [/^pr/i, /^(po|n)/i],
};

const matchQuarterPatterns$h = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\. [Å¡s]tvr[Å¥t]rok/i,
};
const parseQuarterPatterns$h = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$h = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|m[Ã¡a]j|j[Ãºu]n|j[Ãºu]l|aug|sep|okt|nov|dec)/i,
  wide: /^(janu[Ã¡a]ra?|febru[Ã¡a]ra?|(marec|marca)|apr[Ã­i]la?|m[Ã¡a]ja?|j[Ãºu]na?|j[Ãºu]la?|augusta?|(september|septembra)|(okt[Ã³o]ber|okt[Ã³o]bra)|(november|novembra)|(december|decembra))/i,
};
const parseMonthPatterns$h = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^m[Ã¡a]j/i,
    /^j[Ãºu]n/i,
    /^j[Ãºu]l/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$h = {
  narrow: /^[npusÅ¡p]/i,
  short: /^(ne|po|ut|st|Å¡t|pi|so)/i,
  abbreviated: /^(ne|po|ut|st|Å¡t|pi|so)/i,
  wide: /^(nede[Ä¾l]a|pondelok|utorok|streda|[Å¡s]tvrtok|piatok|sobota])/i,
};
const parseDayPatterns$h = {
  narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^Å¡/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(Å¡t|stv)/i, /^pi/i, /^so/i],
};

const matchDayPeriodPatterns$h = {
  narrow:
    /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[Ã¡a]no|pop\.?|ve[Äc]\.?|(v n\.?|noc))/i,
  abbreviated:
    /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[Ã¡a]no|pop\.?|ve[Äc]er|(v )?noci?)/i,
  any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[Ã¡a]no|popoludn(ie|Ã­|i)|ve[Äc]er|(v )?noci?)/i,
};
const parseDayPeriodPatterns$h = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /poln/i,
    noon: /^(nap|(na)?pol(\.|u))/i,
    morning: /^r[Ã¡a]no/i,
    afternoon: /^pop/i,
    evening: /^ve[Äc]/i,
    night: /^(noc|v n\.)/i,
  },
};

(match$h.match = {
  ordinalNumber: (0, _index2$A.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$h,
    parsePattern: parseOrdinalNumberPattern$h,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$17.buildMatchFn)({
    matchPatterns: matchEraPatterns$h,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$h,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$17.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$h,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$h,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$17.buildMatchFn)({
    matchPatterns: matchMonthPatterns$h,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$h,
    defaultParseWidth: "any",
  }),

  day: (0, _index$17.buildMatchFn)({
    matchPatterns: matchDayPatterns$h,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$h,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$17.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$h,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$h,
    defaultParseWidth: "any",
  }),
});

sk.sk = void 0;
var _index$16 = formatDistance$z;
var _index2$z = formatLong$h;
var _index3$h = formatRelative$z;
var _index4$h = localize$h;
var _index5$h = match$h;

/**
 * @category Locales
 * @summary Slovak locale.
 * @language Slovak
 * @iso-639-2 slk
 * @author Marek Suscak [@mareksuscak](https://github.com/mareksuscak)
 */
(sk.sk = {
  code: "sk",
  formatDistance: _index$16.formatDistance,
  formatLong: _index2$z.formatLong,
  formatRelative: _index3$h.formatRelative,
  localize: _index4$h.localize,
  match: _index5$h.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var sl = {};

var formatDistance$x = {};

formatDistance$x.formatDistance = void 0;

function isPluralType$1(val) {
  return val.one !== undefined;
}

const formatDistanceLocale$g = {
  lessThanXSeconds: {
    present: {
      one: "manj kot {{count}} sekunda",
      two: "manj kot {{count}} sekundi",
      few: "manj kot {{count}} sekunde",
      other: "manj kot {{count}} sekund",
    },
    past: {
      one: "manj kot {{count}} sekundo",
      two: "manj kot {{count}} sekundama",
      few: "manj kot {{count}} sekundami",
      other: "manj kot {{count}} sekundami",
    },
    future: {
      one: "manj kot {{count}} sekundo",
      two: "manj kot {{count}} sekundi",
      few: "manj kot {{count}} sekunde",
      other: "manj kot {{count}} sekund",
    },
  },

  xSeconds: {
    present: {
      one: "{{count}} sekunda",
      two: "{{count}} sekundi",
      few: "{{count}} sekunde",
      other: "{{count}} sekund",
    },
    past: {
      one: "{{count}} sekundo",
      two: "{{count}} sekundama",
      few: "{{count}} sekundami",
      other: "{{count}} sekundami",
    },
    future: {
      one: "{{count}} sekundo",
      two: "{{count}} sekundi",
      few: "{{count}} sekunde",
      other: "{{count}} sekund",
    },
  },

  halfAMinute: "pol minute",

  lessThanXMinutes: {
    present: {
      one: "manj kot {{count}} minuta",
      two: "manj kot {{count}} minuti",
      few: "manj kot {{count}} minute",
      other: "manj kot {{count}} minut",
    },
    past: {
      one: "manj kot {{count}} minuto",
      two: "manj kot {{count}} minutama",
      few: "manj kot {{count}} minutami",
      other: "manj kot {{count}} minutami",
    },
    future: {
      one: "manj kot {{count}} minuto",
      two: "manj kot {{count}} minuti",
      few: "manj kot {{count}} minute",
      other: "manj kot {{count}} minut",
    },
  },

  xMinutes: {
    present: {
      one: "{{count}} minuta",
      two: "{{count}} minuti",
      few: "{{count}} minute",
      other: "{{count}} minut",
    },
    past: {
      one: "{{count}} minuto",
      two: "{{count}} minutama",
      few: "{{count}} minutami",
      other: "{{count}} minutami",
    },
    future: {
      one: "{{count}} minuto",
      two: "{{count}} minuti",
      few: "{{count}} minute",
      other: "{{count}} minut",
    },
  },

  aboutXHours: {
    present: {
      one: "pribliÅ¾no {{count}} ura",
      two: "pribliÅ¾no {{count}} uri",
      few: "pribliÅ¾no {{count}} ure",
      other: "pribliÅ¾no {{count}} ur",
    },
    past: {
      one: "pribliÅ¾no {{count}} uro",
      two: "pribliÅ¾no {{count}} urama",
      few: "pribliÅ¾no {{count}} urami",
      other: "pribliÅ¾no {{count}} urami",
    },
    future: {
      one: "pribliÅ¾no {{count}} uro",
      two: "pribliÅ¾no {{count}} uri",
      few: "pribliÅ¾no {{count}} ure",
      other: "pribliÅ¾no {{count}} ur",
    },
  },

  xHours: {
    present: {
      one: "{{count}} ura",
      two: "{{count}} uri",
      few: "{{count}} ure",
      other: "{{count}} ur",
    },
    past: {
      one: "{{count}} uro",
      two: "{{count}} urama",
      few: "{{count}} urami",
      other: "{{count}} urami",
    },
    future: {
      one: "{{count}} uro",
      two: "{{count}} uri",
      few: "{{count}} ure",
      other: "{{count}} ur",
    },
  },

  xDays: {
    present: {
      one: "{{count}} dan",
      two: "{{count}} dni",
      few: "{{count}} dni",
      other: "{{count}} dni",
    },
    past: {
      one: "{{count}} dnem",
      two: "{{count}} dnevoma",
      few: "{{count}} dnevi",
      other: "{{count}} dnevi",
    },
    future: {
      one: "{{count}} dan",
      two: "{{count}} dni",
      few: "{{count}} dni",
      other: "{{count}} dni",
    },
  },

  // no tenses for weeks?
  aboutXWeeks: {
    one: "pribliÅ¾no {{count}} teden",
    two: "pribliÅ¾no {{count}} tedna",
    few: "pribliÅ¾no {{count}} tedne",
    other: "pribliÅ¾no {{count}} tednov",
  },

  // no tenses for weeks?
  xWeeks: {
    one: "{{count}} teden",
    two: "{{count}} tedna",
    few: "{{count}} tedne",
    other: "{{count}} tednov",
  },

  aboutXMonths: {
    present: {
      one: "pribliÅ¾no {{count}} mesec",
      two: "pribliÅ¾no {{count}} meseca",
      few: "pribliÅ¾no {{count}} mesece",
      other: "pribliÅ¾no {{count}} mesecev",
    },
    past: {
      one: "pribliÅ¾no {{count}} mesecem",
      two: "pribliÅ¾no {{count}} mesecema",
      few: "pribliÅ¾no {{count}} meseci",
      other: "pribliÅ¾no {{count}} meseci",
    },
    future: {
      one: "pribliÅ¾no {{count}} mesec",
      two: "pribliÅ¾no {{count}} meseca",
      few: "pribliÅ¾no {{count}} mesece",
      other: "pribliÅ¾no {{count}} mesecev",
    },
  },

  xMonths: {
    present: {
      one: "{{count}} mesec",
      two: "{{count}} meseca",
      few: "{{count}} meseci",
      other: "{{count}} mesecev",
    },
    past: {
      one: "{{count}} mesecem",
      two: "{{count}} mesecema",
      few: "{{count}} meseci",
      other: "{{count}} meseci",
    },
    future: {
      one: "{{count}} mesec",
      two: "{{count}} meseca",
      few: "{{count}} mesece",
      other: "{{count}} mesecev",
    },
  },

  aboutXYears: {
    present: {
      one: "pribliÅ¾no {{count}} leto",
      two: "pribliÅ¾no {{count}} leti",
      few: "pribliÅ¾no {{count}} leta",
      other: "pribliÅ¾no {{count}} let",
    },
    past: {
      one: "pribliÅ¾no {{count}} letom",
      two: "pribliÅ¾no {{count}} letoma",
      few: "pribliÅ¾no {{count}} leti",
      other: "pribliÅ¾no {{count}} leti",
    },
    future: {
      one: "pribliÅ¾no {{count}} leto",
      two: "pribliÅ¾no {{count}} leti",
      few: "pribliÅ¾no {{count}} leta",
      other: "pribliÅ¾no {{count}} let",
    },
  },

  xYears: {
    present: {
      one: "{{count}} leto",
      two: "{{count}} leti",
      few: "{{count}} leta",
      other: "{{count}} let",
    },
    past: {
      one: "{{count}} letom",
      two: "{{count}} letoma",
      few: "{{count}} leti",
      other: "{{count}} leti",
    },
    future: {
      one: "{{count}} leto",
      two: "{{count}} leti",
      few: "{{count}} leta",
      other: "{{count}} let",
    },
  },

  overXYears: {
    present: {
      one: "veÄ kot {{count}} leto",
      two: "veÄ kot {{count}} leti",
      few: "veÄ kot {{count}} leta",
      other: "veÄ kot {{count}} let",
    },
    past: {
      one: "veÄ kot {{count}} letom",
      two: "veÄ kot {{count}} letoma",
      few: "veÄ kot {{count}} leti",
      other: "veÄ kot {{count}} leti",
    },
    future: {
      one: "veÄ kot {{count}} leto",
      two: "veÄ kot {{count}} leti",
      few: "veÄ kot {{count}} leta",
      other: "veÄ kot {{count}} let",
    },
  },

  almostXYears: {
    present: {
      one: "skoraj {{count}} leto",
      two: "skoraj {{count}} leti",
      few: "skoraj {{count}} leta",
      other: "skoraj {{count}} let",
    },
    past: {
      one: "skoraj {{count}} letom",
      two: "skoraj {{count}} letoma",
      few: "skoraj {{count}} leti",
      other: "skoraj {{count}} leti",
    },
    future: {
      one: "skoraj {{count}} leto",
      two: "skoraj {{count}} leti",
      few: "skoraj {{count}} leta",
      other: "skoraj {{count}} let",
    },
  },
};

function getFormFromCount(count) {
  switch (count % 100) {
    case 1:
      return "one";
    case 2:
      return "two";
    case 3:
    case 4:
      return "few";
    default:
      return "other";
  }
}

const formatDistance$w = (token, count, options) => {
  let result = "";
  let tense = "present";

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      tense = "future";
      result = "Äez ";
    } else {
      tense = "past";
      result = "pred ";
    }
  }

  const tokenValue = formatDistanceLocale$g[token];

  if (typeof tokenValue === "string") {
    result += tokenValue;
  } else {
    const form = getFormFromCount(count);
    if (isPluralType$1(tokenValue)) {
      result += tokenValue[form].replace("{{count}}", String(count));
    } else {
      result += tokenValue[tense][form].replace("{{count}}", String(count));
    }
  }

  return result;
};
formatDistance$x.formatDistance = formatDistance$w;

var formatLong$g = {};

formatLong$g.formatLong = void 0;
var _index$15 = buildFormatLongFn$1;

const dateFormats$g = {
  full: "EEEE, dd. MMMM y",
  long: "dd. MMMM y",
  medium: "d. MMM y",
  short: "d. MM. yy",
};

const timeFormats$g = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$g = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$g.formatLong = {
  date: (0, _index$15.buildFormatLongFn)({
    formats: dateFormats$g,
    defaultWidth: "full",
  }),

  time: (0, _index$15.buildFormatLongFn)({
    formats: timeFormats$g,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$15.buildFormatLongFn)({
    formats: dateTimeFormats$g,
    defaultWidth: "full",
  }),
});

var formatRelative$x = {};

formatRelative$x.formatRelative = void 0;

const formatRelativeLocale$g = {
  lastWeek: (date) => {
    const day = date.getDay();

    switch (day) {
      case 0:
        return "'prejÅ¡njo nedeljo ob' p";
      case 3:
        return "'prejÅ¡njo sredo ob' p";
      case 6:
        return "'prejÅ¡njo soboto ob' p";
      default:
        return "'prejÅ¡nji' EEEE 'ob' p";
    }
  },
  yesterday: "'vÄeraj ob' p",
  today: "'danes ob' p",
  tomorrow: "'jutri ob' p",
  nextWeek: (date) => {
    const day = date.getDay();

    switch (day) {
      case 0:
        return "'naslednjo nedeljo ob' p";
      case 3:
        return "'naslednjo sredo ob' p";
      case 6:
        return "'naslednjo soboto ob' p";
      default:
        return "'naslednji' EEEE 'ob' p";
    }
  },
  other: "P",
};

const formatRelative$w = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$g[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$x.formatRelative = formatRelative$w;

var localize$g = {};

localize$g.localize = void 0;
var _index$14 = buildLocalizeFn$1;

const eraValues$g = {
  narrow: ["pr. n. Å¡t.", "po n. Å¡t."],
  abbreviated: ["pr. n. Å¡t.", "po n. Å¡t."],
  wide: ["pred naÅ¡im Å¡tetjem", "po naÅ¡em Å¡tetju"],
};

const quarterValues$g = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. Äet.", "2. Äet.", "3. Äet.", "4. Äet."],
  wide: ["1. Äetrtletje", "2. Äetrtletje", "3. Äetrtletje", "4. Äetrtletje"],
};

const monthValues$g = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: [
    "jan.",
    "feb.",
    "mar.",
    "apr.",
    "maj",
    "jun.",
    "jul.",
    "avg.",
    "sep.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "januar",
    "februar",
    "marec",
    "april",
    "maj",
    "junij",
    "julij",
    "avgust",
    "september",
    "oktober",
    "november",
    "december",
  ],
};

const dayValues$g = {
  narrow: ["n", "p", "t", "s", "Ä", "p", "s"],
  short: ["ned.", "pon.", "tor.", "sre.", "Äet.", "pet.", "sob."],
  abbreviated: ["ned.", "pon.", "tor.", "sre.", "Äet.", "pet.", "sob."],

  wide: [
    "nedelja",
    "ponedeljek",
    "torek",
    "sreda",
    "Äetrtek",
    "petek",
    "sobota",
  ],
};

const dayPeriodValues$g = {
  narrow: {
    am: "d",
    pm: "p",
    midnight: "24.00",
    noon: "12.00",
    morning: "j",
    afternoon: "p",
    evening: "v",
    night: "n",
  },
  abbreviated: {
    am: "dop.",
    pm: "pop.",
    midnight: "poln.",
    noon: "pold.",
    morning: "jut.",
    afternoon: "pop.",
    evening: "veÄ.",
    night: "noÄ",
  },
  wide: {
    am: "dop.",
    pm: "pop.",
    midnight: "polnoÄ",
    noon: "poldne",
    morning: "jutro",
    afternoon: "popoldne",
    evening: "veÄer",
    night: "noÄ",
  },
};

const formattingDayPeriodValues$g = {
  narrow: {
    am: "d",
    pm: "p",
    midnight: "24.00",
    noon: "12.00",
    morning: "zj",
    afternoon: "p",
    evening: "zv",
    night: "po",
  },
  abbreviated: {
    am: "dop.",
    pm: "pop.",
    midnight: "opoln.",
    noon: "opold.",
    morning: "zjut.",
    afternoon: "pop.",
    evening: "zveÄ.",
    night: "ponoÄi",
  },
  wide: {
    am: "dop.",
    pm: "pop.",
    midnight: "opolnoÄi",
    noon: "opoldne",
    morning: "zjutraj",
    afternoon: "popoldan",
    evening: "zveÄer",
    night: "ponoÄi",
  },
};

const ordinalNumber$g = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$g.localize = {
  ordinalNumber: ordinalNumber$g,

  era: (0, _index$14.buildLocalizeFn)({
    values: eraValues$g,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$14.buildLocalizeFn)({
    values: quarterValues$g,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$14.buildLocalizeFn)({
    values: monthValues$g,
    defaultWidth: "wide",
  }),

  day: (0, _index$14.buildLocalizeFn)({
    values: dayValues$g,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$14.buildLocalizeFn)({
    values: dayPeriodValues$g,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$g,
    defaultFormattingWidth: "wide",
  }),
});

var match$g = {};

match$g.match = void 0;

var _index$13 = buildMatchFn$1;
var _index2$y = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$g = /^(\d+)\./i;
const parseOrdinalNumberPattern$g = /\d+/i;

const matchEraPatterns$g = {
  abbreviated: /^(pr\. n\. Å¡t\.|po n\. Å¡t\.)/i,
  wide: /^(pred Kristusom|pred na[sÅ¡]im [sÅ¡]tetjem|po Kristusu|po na[sÅ¡]em [sÅ¡]tetju|na[sÅ¡]ega [sÅ¡]tetja)/i,
};
const parseEraPatterns$g = {
  any: [/^pr/i, /^(po|na[sÅ¡]em)/i],
};

const matchQuarterPatterns$g = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?[Äc]et\.?/i,
  wide: /^[1234]\. [Äc]etrtletje/i,
};
const parseQuarterPatterns$g = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$g = {
  narrow: /^[jfmasond]/i,
  abbreviated:
    /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
  wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i,
};
const parseMonthPatterns$g = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  abbreviated: [
    /^ja/i,
    /^fe/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^av/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  wide: [
    /^ja/i,
    /^fe/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^av/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$g = {
  narrow: /^[nptsÄc]/i,
  short: /^(ned\.|pon\.|tor\.|sre\.|[cÄ]et\.|pet\.|sob\.)/i,
  abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cÄ]et\.|pet\.|sob\.)/i,
  wide: /^(nedelja|ponedeljek|torek|sreda|[cÄ]etrtek|petek|sobota)/i,
};
const parseDayPatterns$g = {
  narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cÄ]/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cÄ]/i, /^pe/i, /^so/i],
};

const matchDayPeriodPatterns$g = {
  narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
  any: /^(dop\.|pop\.|o?poln(\.|o[cÄ]i?)|o?pold(\.|ne)|z?ve[cÄ](\.|er)|(po)?no[cÄ]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i,
};
const parseDayPeriodPatterns$g = {
  narrow: {
    am: /^d/i,
    pm: /^p/i,
    midnight: /^24/i,
    noon: /^12/i,
    morning: /^(z?j)/i,
    afternoon: /^p/i,
    evening: /^(z?v)/i,
    night: /^(n|po)/i,
  },
  any: {
    am: /^dop\./i,
    pm: /^pop\./i,
    midnight: /^o?poln/i,
    noon: /^o?pold/i,
    morning: /j/i,
    afternoon: /^pop\./i,
    evening: /^z?ve/i,
    night: /(po)?no/i,
  },
};

(match$g.match = {
  ordinalNumber: (0, _index2$y.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$g,
    parsePattern: parseOrdinalNumberPattern$g,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$13.buildMatchFn)({
    matchPatterns: matchEraPatterns$g,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$g,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$13.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$g,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$g,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$13.buildMatchFn)({
    matchPatterns: matchMonthPatterns$g,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$g,
    defaultParseWidth: "wide",
  }),

  day: (0, _index$13.buildMatchFn)({
    matchPatterns: matchDayPatterns$g,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$g,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$13.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$g,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$g,
    defaultParseWidth: "any",
  }),
});

sl.sl = void 0;
var _index$12 = formatDistance$x;
var _index2$x = formatLong$g;
var _index3$g = formatRelative$x;
var _index4$g = localize$g;
var _index5$g = match$g;

/**
 * @category Locales
 * @summary Slovenian locale.
 * @language Slovenian
 * @iso-639-2 slv
 * @author Adam Stradovnik [@Neoglyph](https://github.com/Neoglyph)
 * @author Mato Å½gajner [@mzgajner](https://github.com/mzgajner)
 */
(sl.sl = {
  code: "sl",
  formatDistance: _index$12.formatDistance,
  formatLong: _index2$x.formatLong,
  formatRelative: _index3$g.formatRelative,
  localize: _index4$g.localize,
  match: _index5$g.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var sq = {};

var formatDistance$v = {};

formatDistance$v.formatDistance = void 0;

const formatDistanceLocale$f = {
  lessThanXSeconds: {
    one: "mÃ« pak se njÃ« sekondÃ«",
    other: "mÃ« pak se {{count}} sekonda",
  },

  xSeconds: {
    one: "1 sekondÃ«",
    other: "{{count}} sekonda",
  },

  halfAMinute: "gjysÃ«m minuti",

  lessThanXMinutes: {
    one: "mÃ« pak se njÃ« minute",
    other: "mÃ« pak se {{count}} minuta",
  },

  xMinutes: {
    one: "1 minutÃ«",
    other: "{{count}} minuta",
  },

  aboutXHours: {
    one: "rreth 1 orÃ«",
    other: "rreth {{count}} orÃ«",
  },

  xHours: {
    one: "1 orÃ«",
    other: "{{count}} orÃ«",
  },

  xDays: {
    one: "1 ditÃ«",
    other: "{{count}} ditÃ«",
  },

  aboutXWeeks: {
    one: "rreth 1 javÃ«",
    other: "rreth {{count}} javÃ«",
  },

  xWeeks: {
    one: "1 javÃ«",
    other: "{{count}} javÃ«",
  },

  aboutXMonths: {
    one: "rreth 1 muaj",
    other: "rreth {{count}} muaj",
  },

  xMonths: {
    one: "1 muaj",
    other: "{{count}} muaj",
  },

  aboutXYears: {
    one: "rreth 1 vit",
    other: "rreth {{count}} vite",
  },

  xYears: {
    one: "1 vit",
    other: "{{count}} vite",
  },

  overXYears: {
    one: "mbi 1 vit",
    other: "mbi {{count}} vite",
  },

  almostXYears: {
    one: "pothuajse 1 vit",
    other: "pothuajse {{count}} vite",
  },
};

const formatDistance$u = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$f[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "nÃ« " + result;
    } else {
      return result + " mÃ« parÃ«";
    }
  }

  return result;
};
formatDistance$v.formatDistance = formatDistance$u;

var formatLong$f = {};

formatLong$f.formatLong = void 0;
var _index$11 = buildFormatLongFn$1;

const dateFormats$f = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$f = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$f = {
  full: "{{date}} 'nÃ«' {{time}}",
  long: "{{date}} 'nÃ«' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$f.formatLong = {
  date: (0, _index$11.buildFormatLongFn)({
    formats: dateFormats$f,
    defaultWidth: "full",
  }),

  time: (0, _index$11.buildFormatLongFn)({
    formats: timeFormats$f,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$11.buildFormatLongFn)({
    formats: dateTimeFormats$f,
    defaultWidth: "full",
  }),
});

var formatRelative$v = {};

formatRelative$v.formatRelative = void 0;

const formatRelativeLocale$f = {
  lastWeek: "'tÃ«' eeee 'e shkuar nÃ«' p",
  yesterday: "'dje nÃ«' p",
  today: "'sot nÃ«' p",
  tomorrow: "'nesÃ«r nÃ«' p",
  nextWeek: "eeee 'at' p",
  other: "P",
};

const formatRelative$u = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$f[token];
formatRelative$v.formatRelative = formatRelative$u;

var localize$f = {};

localize$f.localize = void 0;
var _index$10 = buildLocalizeFn$1;

const eraValues$f = {
  narrow: ["P", "M"],
  abbreviated: ["PK", "MK"],
  wide: ["Para Krishtit", "Mbas Krishtit"],
};

const quarterValues$f = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["4-mujori I", "4-mujori II", "4-mujori III", "4-mujori IV"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$f = {
  narrow: ["J", "S", "M", "P", "M", "Q", "K", "G", "S", "T", "N", "D"],
  abbreviated: [
    "Jan",
    "Shk",
    "Mar",
    "Pri",
    "Maj",
    "Qer",
    "Kor",
    "Gus",
    "Sht",
    "Tet",
    "NÃ«n",
    "Dhj",
  ],

  wide: [
    "Janar",
    "Shkurt",
    "Mars",
    "Prill",
    "Maj",
    "Qershor",
    "Korrik",
    "Gusht",
    "Shtator",
    "Tetor",
    "NÃ«ntor",
    "Dhjetor",
  ],
};

const dayValues$f = {
  narrow: ["D", "H", "M", "M", "E", "P", "S"],
  short: ["Di", "HÃ«", "Ma", "MÃ«", "En", "Pr", "Sh"],
  abbreviated: ["Die", "HÃ«n", "Mar", "MÃ«r", "Enj", "Pre", "Sht"],
  wide: ["DielÃ«", "HÃ«nÃ«", "MartÃ«", "MÃ«rkurÃ«", "Enjte", "Premte", "ShtunÃ«"],
};

const dayPeriodValues$f = {
  narrow: {
    am: "p",
    pm: "m",
    midnight: "m",
    noon: "d",
    morning: "mÃ«ngjes",
    afternoon: "dite",
    evening: "mbrÃ«mje",
    night: "natÃ«",
  },
  abbreviated: {
    am: "PD",
    pm: "MD",
    midnight: "mesnÃ«tÃ«",
    noon: "drek",
    morning: "mÃ«ngjes",
    afternoon: "mbasdite",
    evening: "mbrÃ«mje",
    night: "natÃ«",
  },
  wide: {
    am: "p.d.",
    pm: "m.d.",
    midnight: "mesnÃ«tÃ«",
    noon: "drek",
    morning: "mÃ«ngjes",
    afternoon: "mbasdite",
    evening: "mbrÃ«mje",
    night: "natÃ«",
  },
};

const formattingDayPeriodValues$f = {
  narrow: {
    am: "p",
    pm: "m",
    midnight: "m",
    noon: "d",
    morning: "nÃ« mÃ«ngjes",
    afternoon: "nÃ« mbasdite",
    evening: "nÃ« mbrÃ«mje",
    night: "nÃ« mesnatÃ«",
  },
  abbreviated: {
    am: "PD",
    pm: "MD",
    midnight: "mesnatÃ«",
    noon: "drek",
    morning: "nÃ« mÃ«ngjes",
    afternoon: "nÃ« mbasdite",
    evening: "nÃ« mbrÃ«mje",
    night: "nÃ« mesnatÃ«",
  },
  wide: {
    am: "p.d.",
    pm: "m.d.",
    midnight: "mesnatÃ«",
    noon: "drek",
    morning: "nÃ« mÃ«ngjes",
    afternoon: "nÃ« mbasdite",
    evening: "nÃ« mbrÃ«mje",
    night: "nÃ« mesnatÃ«",
  },
};

const ordinalNumber$f = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);

  if (options?.unit === "hour") return String(number);

  if (number === 1) return number + "-rÃ«";
  if (number === 4) return number + "t";

  return number + "-tÃ«";
};

(localize$f.localize = {
  ordinalNumber: ordinalNumber$f,

  era: (0, _index$10.buildLocalizeFn)({
    values: eraValues$f,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$10.buildLocalizeFn)({
    values: quarterValues$f,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$10.buildLocalizeFn)({
    values: monthValues$f,
    defaultWidth: "wide",
  }),

  day: (0, _index$10.buildLocalizeFn)({
    values: dayValues$f,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$10.buildLocalizeFn)({
    values: dayPeriodValues$f,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$f,
    defaultFormattingWidth: "wide",
  }),
});

var match$f = {};

match$f.match = void 0;

var _index$$ = buildMatchFn$1;
var _index2$w = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$f = /^(\d+)(-rÃ«|-tÃ«|t|)?/i;
const parseOrdinalNumberPattern$f = /\d+/i;

const matchEraPatterns$f = {
  narrow: /^(p|m)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(para krishtit|mbas krishtit)/i,
};
const parseEraPatterns$f = {
  any: [/^b/i, /^(p|m)/i],
};

const matchQuarterPatterns$f = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]-mujori (i{1,3}|iv)/i,
};
const parseQuarterPatterns$f = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$f = {
  narrow: /^[jsmpqkftnd]/i,
  abbreviated: /^(jan|shk|mar|pri|maj|qer|kor|gus|sht|tet|nÃ«n|dhj)/i,
  wide: /^(janar|shkurt|mars|prill|maj|qershor|korrik|gusht|shtator|tetor|nÃ«ntor|dhjetor)/i,
};
const parseMonthPatterns$f = {
  narrow: [
    /^j/i,
    /^s/i,
    /^m/i,
    /^p/i,
    /^m/i,
    /^q/i,
    /^k/i,
    /^g/i,
    /^s/i,
    /^t/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^shk/i,
    /^mar/i,
    /^pri/i,
    /^maj/i,
    /^qer/i,
    /^kor/i,
    /^gu/i,
    /^sht/i,
    /^tet/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$f = {
  narrow: /^[dhmeps]/i,
  short: /^(di|hÃ«|ma|mÃ«|en|pr|sh)/i,
  abbreviated: /^(die|hÃ«n|mar|mÃ«r|enj|pre|sht)/i,
  wide: /^(dielÃ«|hÃ«nÃ«|martÃ«|mÃ«rkurÃ«|enjte|premte|shtunÃ«)/i,
};
const parseDayPatterns$f = {
  narrow: [/^d/i, /^h/i, /^m/i, /^m/i, /^e/i, /^p/i, /^s/i],
  any: [/^d/i, /^h/i, /^ma/i, /^mÃ«/i, /^e/i, /^p/i, /^s/i],
};

const matchDayPeriodPatterns$f = {
  narrow: /^(p|m|me|nÃ« (mÃ«ngjes|mbasdite|mbrÃ«mje|mesnatÃ«))/i,
  any: /^([pm]\.?\s?d\.?|drek|nÃ« (mÃ«ngjes|mbasdite|mbrÃ«mje|mesnatÃ«))/i,
};
const parseDayPeriodPatterns$f = {
  any: {
    am: /^p/i,
    pm: /^m/i,
    midnight: /^me/i,
    noon: /^dr/i,
    morning: /mÃ«ngjes/i,
    afternoon: /mbasdite/i,
    evening: /mbrÃ«mje/i,
    night: /natÃ«/i,
  },
};

(match$f.match = {
  ordinalNumber: (0, _index2$w.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$f,
    parsePattern: parseOrdinalNumberPattern$f,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$$.buildMatchFn)({
    matchPatterns: matchEraPatterns$f,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$f,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$$.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$f,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$f,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$$.buildMatchFn)({
    matchPatterns: matchMonthPatterns$f,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$f,
    defaultParseWidth: "any",
  }),

  day: (0, _index$$.buildMatchFn)({
    matchPatterns: matchDayPatterns$f,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$f,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$$.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$f,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$f,
    defaultParseWidth: "any",
  }),
});

sq.sq = void 0;
var _index$_ = formatDistance$v;
var _index2$v = formatLong$f;
var _index3$f = formatRelative$v;
var _index4$f = localize$f;
var _index5$f = match$f;

/**
 * @category Locales
 * @summary Albanian locale.
 * @language Shqip
 * @iso-639-2 sqi
 * @author Ardit Dine [@arditdine](https://github.com/arditdine)
 */
(sq.sq = {
  code: "sq",
  formatDistance: _index$_.formatDistance,
  formatLong: _index2$v.formatLong,
  formatRelative: _index3$f.formatRelative,
  localize: _index4$f.localize,
  match: _index5$f.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var sr = {};

var formatDistance$t = {};

formatDistance$t.formatDistance = void 0;

const formatDistanceLocale$e = {
  lessThanXSeconds: {
    one: {
      standalone: "Ð¼Ð°ÑÐµ Ð¾Ð´ 1 ÑÐµÐºÑÐ½Ð´Ðµ",
      withPrepositionAgo: "Ð¼Ð°ÑÐµ Ð¾Ð´ 1 ÑÐµÐºÑÐ½Ð´Ðµ",
      withPrepositionIn: "Ð¼Ð°ÑÐµ Ð¾Ð´ 1 ÑÐµÐºÑÐ½Ð´Ñ",
    },
    dual: "Ð¼Ð°ÑÐµ Ð¾Ð´ {{count}} ÑÐµÐºÑÐ½Ð´Ðµ",
    other: "Ð¼Ð°ÑÐµ Ð¾Ð´ {{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
  },

  xSeconds: {
    one: {
      standalone: "1 ÑÐµÐºÑÐ½Ð´Ð°",
      withPrepositionAgo: "1 ÑÐµÐºÑÐ½Ð´Ðµ",
      withPrepositionIn: "1 ÑÐµÐºÑÐ½Ð´Ñ",
    },
    dual: "{{count}} ÑÐµÐºÑÐ½Ð´Ðµ",
    other: "{{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
  },

  halfAMinute: "Ð¿Ð¾Ð»Ð° Ð¼Ð¸Ð½ÑÑÐµ",

  lessThanXMinutes: {
    one: {
      standalone: "Ð¼Ð°ÑÐµ Ð¾Ð´ 1 Ð¼Ð¸Ð½ÑÑÐµ",
      withPrepositionAgo: "Ð¼Ð°ÑÐµ Ð¾Ð´ 1 Ð¼Ð¸Ð½ÑÑÐµ",
      withPrepositionIn: "Ð¼Ð°ÑÐµ Ð¾Ð´ 1 Ð¼Ð¸Ð½ÑÑÑ",
    },
    dual: "Ð¼Ð°ÑÐµ Ð¾Ð´ {{count}} Ð¼Ð¸Ð½ÑÑÐµ",
    other: "Ð¼Ð°ÑÐµ Ð¾Ð´ {{count}} Ð¼Ð¸Ð½ÑÑÐ°",
  },

  xMinutes: {
    one: {
      standalone: "1 Ð¼Ð¸Ð½ÑÑÐ°",
      withPrepositionAgo: "1 Ð¼Ð¸Ð½ÑÑÐµ",
      withPrepositionIn: "1 Ð¼Ð¸Ð½ÑÑÑ",
    },
    dual: "{{count}} Ð¼Ð¸Ð½ÑÑÐµ",
    other: "{{count}} Ð¼Ð¸Ð½ÑÑÐ°",
  },

  aboutXHours: {
    one: {
      standalone: "Ð¾ÐºÐ¾ 1 ÑÐ°Ñ",
      withPrepositionAgo: "Ð¾ÐºÐ¾ 1 ÑÐ°Ñ",
      withPrepositionIn: "Ð¾ÐºÐ¾ 1 ÑÐ°Ñ",
    },
    dual: "Ð¾ÐºÐ¾ {{count}} ÑÐ°ÑÐ°",
    other: "Ð¾ÐºÐ¾ {{count}} ÑÐ°ÑÐ¸",
  },

  xHours: {
    one: {
      standalone: "1 ÑÐ°Ñ",
      withPrepositionAgo: "1 ÑÐ°Ñ",
      withPrepositionIn: "1 ÑÐ°Ñ",
    },
    dual: "{{count}} ÑÐ°ÑÐ°",
    other: "{{count}} ÑÐ°ÑÐ¸",
  },

  xDays: {
    one: {
      standalone: "1 Ð´Ð°Ð½",
      withPrepositionAgo: "1 Ð´Ð°Ð½",
      withPrepositionIn: "1 Ð´Ð°Ð½",
    },
    dual: "{{count}} Ð´Ð°Ð½Ð°",
    other: "{{count}} Ð´Ð°Ð½Ð°",
  },

  aboutXWeeks: {
    one: {
      standalone: "Ð¾ÐºÐ¾ 1 Ð½ÐµÐ´ÐµÑÑ",
      withPrepositionAgo: "Ð¾ÐºÐ¾ 1 Ð½ÐµÐ´ÐµÑÑ",
      withPrepositionIn: "Ð¾ÐºÐ¾ 1 Ð½ÐµÐ´ÐµÑÑ",
    },
    dual: "Ð¾ÐºÐ¾ {{count}} Ð½ÐµÐ´ÐµÑÐµ",
    other: "Ð¾ÐºÐ¾ {{count}} Ð½ÐµÐ´ÐµÑÐµ",
  },

  xWeeks: {
    one: {
      standalone: "1 Ð½ÐµÐ´ÐµÑÑ",
      withPrepositionAgo: "1 Ð½ÐµÐ´ÐµÑÑ",
      withPrepositionIn: "1 Ð½ÐµÐ´ÐµÑÑ",
    },
    dual: "{{count}} Ð½ÐµÐ´ÐµÑÐµ",
    other: "{{count}} Ð½ÐµÐ´ÐµÑÐµ",
  },

  aboutXMonths: {
    one: {
      standalone: "Ð¾ÐºÐ¾ 1 Ð¼ÐµÑÐµÑ",
      withPrepositionAgo: "Ð¾ÐºÐ¾ 1 Ð¼ÐµÑÐµÑ",
      withPrepositionIn: "Ð¾ÐºÐ¾ 1 Ð¼ÐµÑÐµÑ",
    },
    dual: "Ð¾ÐºÐ¾ {{count}} Ð¼ÐµÑÐµÑÐ°",
    other: "Ð¾ÐºÐ¾ {{count}} Ð¼ÐµÑÐµÑÐ¸",
  },

  xMonths: {
    one: {
      standalone: "1 Ð¼ÐµÑÐµÑ",
      withPrepositionAgo: "1 Ð¼ÐµÑÐµÑ",
      withPrepositionIn: "1 Ð¼ÐµÑÐµÑ",
    },
    dual: "{{count}} Ð¼ÐµÑÐµÑÐ°",
    other: "{{count}} Ð¼ÐµÑÐµÑÐ¸",
  },

  aboutXYears: {
    one: {
      standalone: "Ð¾ÐºÐ¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
      withPrepositionAgo: "Ð¾ÐºÐ¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
      withPrepositionIn: "Ð¾ÐºÐ¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
    },
    dual: "Ð¾ÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ðµ",
    other: "Ð¾ÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð°",
  },

  xYears: {
    one: {
      standalone: "1 Ð³Ð¾Ð´Ð¸Ð½Ð°",
      withPrepositionAgo: "1 Ð³Ð¾Ð´Ð¸Ð½Ðµ",
      withPrepositionIn: "1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
    },
    dual: "{{count}} Ð³Ð¾Ð´Ð¸Ð½Ðµ",
    other: "{{count}} Ð³Ð¾Ð´Ð¸Ð½Ð°",
  },

  overXYears: {
    one: {
      standalone: "Ð¿ÑÐµÐºÐ¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
      withPrepositionAgo: "Ð¿ÑÐµÐºÐ¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
      withPrepositionIn: "Ð¿ÑÐµÐºÐ¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
    },
    dual: "Ð¿ÑÐµÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ðµ",
    other: "Ð¿ÑÐµÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð°",
  },

  almostXYears: {
    one: {
      standalone: "Ð³Ð¾ÑÐ¾Ð²Ð¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
      withPrepositionAgo: "Ð³Ð¾ÑÐ¾Ð²Ð¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
      withPrepositionIn: "Ð³Ð¾ÑÐ¾Ð²Ð¾ 1 Ð³Ð¾Ð´Ð¸Ð½Ñ",
    },
    dual: "Ð³Ð¾ÑÐ¾Ð²Ð¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ðµ",
    other: "Ð³Ð¾ÑÐ¾Ð²Ð¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð°",
  },
};

const formatDistance$s = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$e[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (
    count % 10 > 1 &&
    count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ð·Ð° " + result;
    } else {
      return "Ð¿ÑÐµ " + result;
    }
  }

  return result;
};
formatDistance$t.formatDistance = formatDistance$s;

var formatLong$e = {};

formatLong$e.formatLong = void 0;
var _index$Z = buildFormatLongFn$1;

const dateFormats$e = {
  full: "EEEE, d. MMMM yyyy.",
  long: "d. MMMM yyyy.",
  medium: "d. MMM yy.",
  short: "dd. MM. yy.",
};

const timeFormats$e = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$e = {
  full: "{{date}} 'Ñ' {{time}}",
  long: "{{date}} 'Ñ' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$e.formatLong = {
  date: (0, _index$Z.buildFormatLongFn)({
    formats: dateFormats$e,
    defaultWidth: "full",
  }),

  time: (0, _index$Z.buildFormatLongFn)({
    formats: timeFormats$e,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$Z.buildFormatLongFn)({
    formats: dateTimeFormats$e,
    defaultWidth: "full",
  }),
});

var formatRelative$t = {};

formatRelative$t.formatRelative = void 0;

const formatRelativeLocale$e = {
  lastWeek: (date) => {
    const day = date.getDay();

    switch (day) {
      case 0:
        return "'Ð¿ÑÐ¾ÑÐ»Ðµ Ð½ÐµÐ´ÐµÑÐµ Ñ' p";
      case 3:
        return "'Ð¿ÑÐ¾ÑÐ»Ðµ ÑÑÐµÐ´Ðµ Ñ' p";
      case 6:
        return "'Ð¿ÑÐ¾ÑÐ»Ðµ ÑÑÐ±Ð¾ÑÐµ Ñ' p";
      default:
        return "'Ð¿ÑÐ¾ÑÐ»Ð¸' EEEE 'Ñ' p";
    }
  },
  yesterday: "'ÑÑÑÐµ Ñ' p",
  today: "'Ð´Ð°Ð½Ð°Ñ Ñ' p",
  tomorrow: "'ÑÑÑÑÐ° Ñ' p",
  nextWeek: (date) => {
    const day = date.getDay();

    switch (day) {
      case 0:
        return "'ÑÐ»ÐµÐ´ÐµÑÐµ Ð½ÐµÐ´ÐµÑÐµ Ñ' p";
      case 3:
        return "'ÑÐ»ÐµÐ´ÐµÑÑ ÑÑÐµÐ´Ñ Ñ' p";
      case 6:
        return "'ÑÐ»ÐµÐ´ÐµÑÑ ÑÑÐ±Ð¾ÑÑ Ñ' p";
      default:
        return "'ÑÐ»ÐµÐ´ÐµÑÐ¸' EEEE 'Ñ' p";
    }
  },
  other: "P",
};

const formatRelative$s = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$e[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$t.formatRelative = formatRelative$s;

var localize$e = {};

localize$e.localize = void 0;
var _index$Y = buildLocalizeFn$1;

const eraValues$e = {
  narrow: ["Ð¿Ñ.Ð½.Ðµ.", "ÐÐ"],
  abbreviated: ["Ð¿Ñ. Ð¥Ñ.", "Ð¿Ð¾. Ð¥Ñ."],
  wide: ["ÐÑÐµ Ð¥ÑÐ¸ÑÑÐ°", "ÐÐ¾ÑÐ»Ðµ Ð¥ÑÐ¸ÑÑÐ°"],
};

const quarterValues$e = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. ÐºÐ².", "2. ÐºÐ².", "3. ÐºÐ².", "4. ÐºÐ²."],
  wide: ["1. ÐºÐ²Ð°ÑÑÐ°Ð»", "2. ÐºÐ²Ð°ÑÑÐ°Ð»", "3. ÐºÐ²Ð°ÑÑÐ°Ð»", "4. ÐºÐ²Ð°ÑÑÐ°Ð»"],
};

const monthValues$e = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "ÑÐ°Ð½",
    "ÑÐµÐ±",
    "Ð¼Ð°Ñ",
    "Ð°Ð¿Ñ",
    "Ð¼Ð°Ñ",
    "ÑÑÐ½",
    "ÑÑÐ»",
    "Ð°Ð²Ð³",
    "ÑÐµÐ¿",
    "Ð¾ÐºÑ",
    "Ð½Ð¾Ð²",
    "Ð´ÐµÑ",
  ],

  wide: [
    "ÑÐ°Ð½ÑÐ°Ñ",
    "ÑÐµÐ±ÑÑÐ°Ñ",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿ÑÐ¸Ð»",
    "Ð¼Ð°Ñ",
    "ÑÑÐ½",
    "ÑÑÐ»",
    "Ð°Ð²Ð³ÑÑÑ",
    "ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ",
    "Ð¾ÐºÑÐ¾Ð±Ð°Ñ",
    "Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ",
    "Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ",
  ],
};

const formattingMonthValues$3 = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "ÑÐ°Ð½",
    "ÑÐµÐ±",
    "Ð¼Ð°Ñ",
    "Ð°Ð¿Ñ",
    "Ð¼Ð°Ñ",
    "ÑÑÐ½",
    "ÑÑÐ»",
    "Ð°Ð²Ð³",
    "ÑÐµÐ¿",
    "Ð¾ÐºÑ",
    "Ð½Ð¾Ð²",
    "Ð´ÐµÑ",
  ],

  wide: [
    "ÑÐ°Ð½ÑÐ°Ñ",
    "ÑÐµÐ±ÑÑÐ°Ñ",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿ÑÐ¸Ð»",
    "Ð¼Ð°Ñ",
    "ÑÑÐ½",
    "ÑÑÐ»",
    "Ð°Ð²Ð³ÑÑÑ",
    "ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ",
    "Ð¾ÐºÑÐ¾Ð±Ð°Ñ",
    "Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ",
    "Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ",
  ],
};

const dayValues$e = {
  narrow: ["Ð", "Ð", "Ð£", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "ÑÑÐ¾", "ÑÑÐµ", "ÑÐµÑ", "Ð¿ÐµÑ", "ÑÑÐ±"],
  abbreviated: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "ÑÑÐ¾", "ÑÑÐµ", "ÑÐµÑ", "Ð¿ÐµÑ", "ÑÑÐ±"],
  wide: [
    "Ð½ÐµÐ´ÐµÑÐ°",
    "Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº",
    "ÑÑÐ¾ÑÐ°Ðº",
    "ÑÑÐµÐ´Ð°",
    "ÑÐµÑÐ²ÑÑÐ°Ðº",
    "Ð¿ÐµÑÐ°Ðº",
    "ÑÑÐ±Ð¾ÑÐ°",
  ],
};

const formattingDayPeriodValues$e = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð½Ð¾Ñ",
    noon: "Ð¿Ð¾Ð´Ð½Ðµ",
    morning: "ÑÑÑÑÑÑ",
    afternoon: "Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ",
    evening: "ÑÐ²ÐµÑÐµ",
    night: "Ð½Ð¾ÑÑ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿Ð¾Ð½Ð¾Ñ",
    noon: "Ð¿Ð¾Ð´Ð½Ðµ",
    morning: "ÑÑÑÑÑÑ",
    afternoon: "Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ",
    evening: "ÑÐ²ÐµÑÐµ",
    night: "Ð½Ð¾ÑÑ",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "Ð¿Ð¾Ð½Ð¾Ñ",
    noon: "Ð¿Ð¾Ð´Ð½Ðµ",
    morning: "ÑÑÑÑÑÑ",
    afternoon: "Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾Ð´Ð½Ðµ",
    evening: "ÑÐ²ÐµÑÐµ",
    night: "Ð½Ð¾ÑÑ",
  },
};

const dayPeriodValues$e = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "Ð¿Ð¾Ð½Ð¾Ñ",
    noon: "Ð¿Ð¾Ð´Ð½Ðµ",
    morning: "ÑÑÑÑÑÑ",
    afternoon: "Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ",
    evening: "ÑÐ²ÐµÑÐµ",
    night: "Ð½Ð¾ÑÑ",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "Ð¿Ð¾Ð½Ð¾Ñ",
    noon: "Ð¿Ð¾Ð´Ð½Ðµ",
    morning: "ÑÑÑÑÑÑ",
    afternoon: "Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ",
    evening: "ÑÐ²ÐµÑÐµ",
    night: "Ð½Ð¾ÑÑ",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "Ð¿Ð¾Ð½Ð¾Ñ",
    noon: "Ð¿Ð¾Ð´Ð½Ðµ",
    morning: "ÑÑÑÑÑÑ",
    afternoon: "Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾Ð´Ð½Ðµ",
    evening: "ÑÐ²ÐµÑÐµ",
    night: "Ð½Ð¾ÑÑ",
  },
};

const ordinalNumber$e = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$e.localize = {
  ordinalNumber: ordinalNumber$e,

  era: (0, _index$Y.buildLocalizeFn)({
    values: eraValues$e,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$Y.buildLocalizeFn)({
    values: quarterValues$e,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$Y.buildLocalizeFn)({
    values: monthValues$e,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$3,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$Y.buildLocalizeFn)({
    values: dayValues$e,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$Y.buildLocalizeFn)({
    values: dayPeriodValues$e,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$e,
    defaultFormattingWidth: "wide",
  }),
});

var match$e = {};

match$e.match = void 0;

var _index$X = buildMatchFn$1;
var _index2$u = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$e = /^(\d+)\./i;
const parseOrdinalNumberPattern$e = /\d+/i;

const matchEraPatterns$e = {
  narrow: /^(Ð¿Ñ\.Ð½\.Ðµ\.|ÐÐ)/i,
  abbreviated: /^(Ð¿Ñ\.\s?Ð¥Ñ\.|Ð¿Ð¾\.\s?Ð¥Ñ\.)/i,
  wide: /^(ÐÑÐµ Ð¥ÑÐ¸ÑÑÐ°|Ð¿ÑÐµ Ð½Ð¾Ð²Ðµ ÐµÑÐµ|ÐÐ¾ÑÐ»Ðµ Ð¥ÑÐ¸ÑÑÐ°|Ð½Ð¾Ð²Ð° ÐµÑÐ°)/i,
};
const parseEraPatterns$e = {
  any: [/^Ð¿Ñ/i, /^(Ð¿Ð¾|Ð½Ð¾Ð²Ð°)/i],
};

const matchQuarterPatterns$e = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?ÐºÐ²\.?/i,
  wide: /^[1234]\. ÐºÐ²Ð°ÑÑÐ°Ð»/i,
};
const parseQuarterPatterns$e = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$e = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(ÑÐ°Ð½|ÑÐµÐ±|Ð¼Ð°Ñ|Ð°Ð¿Ñ|Ð¼Ð°Ñ|ÑÑÐ½|ÑÑÐ»|Ð°Ð²Ð³|ÑÐµÐ¿|Ð¾ÐºÑ|Ð½Ð¾Ð²|Ð´ÐµÑ)/i,
  wide: /^((ÑÐ°Ð½ÑÐ°Ñ|ÑÐ°Ð½ÑÐ°ÑÐ°)|(ÑÐµÐ±ÑÑÐ°Ñ|ÑÐµÐ±ÑÑÐ°ÑÐ°)|(Ð¼Ð°ÑÑ|Ð¼Ð°ÑÑÐ°)|(Ð°Ð¿ÑÐ¸Ð»|Ð°Ð¿ÑÐ¸Ð»Ð°)|(Ð¼ÑÐ°|Ð¼Ð°ÑÐ°)|(ÑÑÐ½|ÑÑÐ½Ð°)|(ÑÑÐ»|ÑÑÐ»Ð°)|(Ð°Ð²Ð³ÑÑÑ|Ð°Ð²Ð³ÑÑÑÐ°)|(ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ|ÑÐµÐ¿ÑÐµÐ¼Ð±ÑÐ°)|(Ð¾ÐºÑÐ¾Ð±Ð°Ñ|Ð¾ÐºÑÐ¾Ð±ÑÐ°)|(Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ|Ð½Ð¾Ð²ÐµÐ¼Ð±ÑÐ°)|(Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ|Ð´ÐµÑÐµÐ¼Ð±ÑÐ°))/i,
};
const parseMonthPatterns$e = {
  narrow: [
    /^1/i,
    /^2/i,
    /^3/i,
    /^4/i,
    /^5/i,
    /^6/i,
    /^7/i,
    /^8/i,
    /^9/i,
    /^10/i,
    /^11/i,
    /^12/i,
  ],

  any: [
    /^ÑÐ°/i,
    /^Ñ/i,
    /^Ð¼Ð°Ñ/i,
    /^Ð°Ð¿/i,
    /^Ð¼Ð°Ñ/i,
    /^ÑÑÐ½/i,
    /^ÑÑÐ»/i,
    /^Ð°Ð²Ð³/i,
    /^Ñ/i,
    /^Ð¾/i,
    /^Ð½/i,
    /^Ð´/i,
  ],
};

const matchDayPatterns$e = {
  narrow: /^[Ð¿ÑÑÑÐ½]/i,
  short: /^(Ð½ÐµÐ´|Ð¿Ð¾Ð½|ÑÑÐ¾|ÑÑÐµ|ÑÐµÑ|Ð¿ÐµÑ|ÑÑÐ±)/i,
  abbreviated: /^(Ð½ÐµÐ´|Ð¿Ð¾Ð½|ÑÑÐ¾|ÑÑÐµ|ÑÐµÑ|Ð¿ÐµÑ|ÑÑÐ±)/i,
  wide: /^(Ð½ÐµÐ´ÐµÑÐ°|Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº|ÑÑÐ¾ÑÐ°Ðº|ÑÑÐµÐ´Ð°|ÑÐµÑÐ²ÑÑÐ°Ðº|Ð¿ÐµÑÐ°Ðº|ÑÑÐ±Ð¾ÑÐ°)/i,
};
const parseDayPatterns$e = {
  narrow: [/^Ð¿/i, /^Ñ/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i, /^Ð½/i],
  any: [/^Ð½ÐµÐ´/i, /^Ð¿Ð¾Ð½/i, /^ÑÑÐ¾/i, /^ÑÑÐµ/i, /^ÑÐµÑ/i, /^Ð¿ÐµÑ/i, /^ÑÑÐ±/i],
};

const matchDayPeriodPatterns$e = {
  any: /^(Ð°Ð¼|Ð¿Ð¼|Ð¿Ð¾Ð½Ð¾Ñ|(Ð¿Ð¾)?Ð¿Ð¾Ð´Ð½Ðµ|ÑÐ²ÐµÑÐµ|Ð½Ð¾ÑÑ|Ð¿Ð¾ÑÐ»Ðµ Ð¿Ð¾Ð´Ð½Ðµ|ÑÑÑÑÑÑ)/i,
};
const parseDayPeriodPatterns$e = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^Ð¿Ð¾Ð½Ð¾/i,
    noon: /^Ð¿Ð¾Ð´/i,
    morning: /ÑÑÑÑÑÑ/i,
    afternoon: /(Ð¿Ð¾ÑÐ»Ðµ\s|Ð¿Ð¾)+Ð¿Ð¾Ð´Ð½Ðµ/i,
    evening: /(ÑÐ²ÐµÑÐµ)/i,
    night: /(Ð½Ð¾ÑÑ)/i,
  },
};

(match$e.match = {
  ordinalNumber: (0, _index2$u.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$e,
    parsePattern: parseOrdinalNumberPattern$e,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$X.buildMatchFn)({
    matchPatterns: matchEraPatterns$e,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$e,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$X.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$e,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$e,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$X.buildMatchFn)({
    matchPatterns: matchMonthPatterns$e,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$e,
    defaultParseWidth: "any",
  }),

  day: (0, _index$X.buildMatchFn)({
    matchPatterns: matchDayPatterns$e,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$e,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$X.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$e,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$e,
    defaultParseWidth: "any",
  }),
});

sr.sr = void 0;
var _index$W = formatDistance$t;
var _index2$t = formatLong$e;
var _index3$e = formatRelative$t;
var _index4$e = localize$e;
var _index5$e = match$e;

/**
 * @category Locales
 * @summary Serbian cyrillic locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor RadivojeviÄ [@rogyvoje](https://github.com/rogyvoje)
 */
(sr.sr = {
  code: "sr",
  formatDistance: _index$W.formatDistance,
  formatLong: _index2$t.formatLong,
  formatRelative: _index3$e.formatRelative,
  localize: _index4$e.localize,
  match: _index5$e.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var srLatn = {};

var formatDistance$r = {};

formatDistance$r.formatDistance = void 0;

const formatDistanceLocale$d = {
  lessThanXSeconds: {
    one: {
      standalone: "manje od 1 sekunde",
      withPrepositionAgo: "manje od 1 sekunde",
      withPrepositionIn: "manje od 1 sekundu",
    },
    dual: "manje od {{count}} sekunde",
    other: "manje od {{count}} sekundi",
  },

  xSeconds: {
    one: {
      standalone: "1 sekunda",
      withPrepositionAgo: "1 sekunde",
      withPrepositionIn: "1 sekundu",
    },
    dual: "{{count}} sekunde",
    other: "{{count}} sekundi",
  },

  halfAMinute: "pola minute",

  lessThanXMinutes: {
    one: {
      standalone: "manje od 1 minute",
      withPrepositionAgo: "manje od 1 minute",
      withPrepositionIn: "manje od 1 minutu",
    },
    dual: "manje od {{count}} minute",
    other: "manje od {{count}} minuta",
  },

  xMinutes: {
    one: {
      standalone: "1 minuta",
      withPrepositionAgo: "1 minute",
      withPrepositionIn: "1 minutu",
    },
    dual: "{{count}} minute",
    other: "{{count}} minuta",
  },

  aboutXHours: {
    one: {
      standalone: "oko 1 sat",
      withPrepositionAgo: "oko 1 sat",
      withPrepositionIn: "oko 1 sat",
    },
    dual: "oko {{count}} sata",
    other: "oko {{count}} sati",
  },

  xHours: {
    one: {
      standalone: "1 sat",
      withPrepositionAgo: "1 sat",
      withPrepositionIn: "1 sat",
    },
    dual: "{{count}} sata",
    other: "{{count}} sati",
  },

  xDays: {
    one: {
      standalone: "1 dan",
      withPrepositionAgo: "1 dan",
      withPrepositionIn: "1 dan",
    },
    dual: "{{count}} dana",
    other: "{{count}} dana",
  },

  aboutXWeeks: {
    one: {
      standalone: "oko 1 nedelju",
      withPrepositionAgo: "oko 1 nedelju",
      withPrepositionIn: "oko 1 nedelju",
    },
    dual: "oko {{count}} nedelje",
    other: "oko {{count}} nedelje",
  },

  xWeeks: {
    one: {
      standalone: "1 nedelju",
      withPrepositionAgo: "1 nedelju",
      withPrepositionIn: "1 nedelju",
    },
    dual: "{{count}} nedelje",
    other: "{{count}} nedelje",
  },

  aboutXMonths: {
    one: {
      standalone: "oko 1 mesec",
      withPrepositionAgo: "oko 1 mesec",
      withPrepositionIn: "oko 1 mesec",
    },
    dual: "oko {{count}} meseca",
    other: "oko {{count}} meseci",
  },

  xMonths: {
    one: {
      standalone: "1 mesec",
      withPrepositionAgo: "1 mesec",
      withPrepositionIn: "1 mesec",
    },
    dual: "{{count}} meseca",
    other: "{{count}} meseci",
  },

  aboutXYears: {
    one: {
      standalone: "oko 1 godinu",
      withPrepositionAgo: "oko 1 godinu",
      withPrepositionIn: "oko 1 godinu",
    },
    dual: "oko {{count}} godine",
    other: "oko {{count}} godina",
  },

  xYears: {
    one: {
      standalone: "1 godina",
      withPrepositionAgo: "1 godine",
      withPrepositionIn: "1 godinu",
    },
    dual: "{{count}} godine",
    other: "{{count}} godina",
  },

  overXYears: {
    one: {
      standalone: "preko 1 godinu",
      withPrepositionAgo: "preko 1 godinu",
      withPrepositionIn: "preko 1 godinu",
    },
    dual: "preko {{count}} godine",
    other: "preko {{count}} godina",
  },

  almostXYears: {
    one: {
      standalone: "gotovo 1 godinu",
      withPrepositionAgo: "gotovo 1 godinu",
      withPrepositionIn: "gotovo 1 godinu",
    },
    dual: "gotovo {{count}} godine",
    other: "gotovo {{count}} godina",
  },
};

const formatDistance$q = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$d[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (
    count % 10 > 1 &&
    count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
  ) {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "za " + result;
    } else {
      return "pre " + result;
    }
  }

  return result;
};
formatDistance$r.formatDistance = formatDistance$q;

var formatLong$d = {};

formatLong$d.formatLong = void 0;
var _index$V = buildFormatLongFn$1;

const dateFormats$d = {
  full: "EEEE, d. MMMM yyyy.",
  long: "d. MMMM yyyy.",
  medium: "d. MMM yy.",
  short: "dd. MM. yy.",
};

const timeFormats$d = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$d = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$d.formatLong = {
  date: (0, _index$V.buildFormatLongFn)({
    formats: dateFormats$d,
    defaultWidth: "full",
  }),

  time: (0, _index$V.buildFormatLongFn)({
    formats: timeFormats$d,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$V.buildFormatLongFn)({
    formats: dateTimeFormats$d,
    defaultWidth: "full",
  }),
});

var formatRelative$r = {};

formatRelative$r.formatRelative = void 0;

const formatRelativeLocale$d = {
  lastWeek: (date) => {
    switch (date.getDay()) {
      case 0:
        return "'proÅ¡le nedelje u' p";
      case 3:
        return "'proÅ¡le srede u' p";
      case 6:
        return "'proÅ¡le subote u' p";
      default:
        return "'proÅ¡li' EEEE 'u' p";
    }
  },
  yesterday: "'juÄe u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: (date) => {
    switch (date.getDay()) {
      case 0:
        return "'sledeÄe nedelje u' p";
      case 3:
        return "'sledeÄu sredu u' p";
      case 6:
        return "'sledeÄu subotu u' p";
      default:
        return "'sledeÄi' EEEE 'u' p";
    }
  },
  other: "P",
};

const formatRelative$q = (token, date, _baseDate, _options) => {
  const format = formatRelativeLocale$d[token];

  if (typeof format === "function") {
    return format(date);
  }

  return format;
};
formatRelative$r.formatRelative = formatRelative$q;

var localize$d = {};

localize$d.localize = void 0;
var _index$U = buildLocalizeFn$1;

const eraValues$d = {
  narrow: ["pr.n.e.", "AD"],
  abbreviated: ["pr. Hr.", "po. Hr."],
  wide: ["Pre Hrista", "Posle Hrista"],
};

const quarterValues$d = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"],
};

const monthValues$d = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "maj",
    "jun",
    "jul",
    "avg",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januar",
    "februar",
    "mart",
    "april",
    "maj",
    "jun",
    "jul",
    "avgust",
    "septembar",
    "oktobar",
    "novembar",
    "decembar",
  ],
};

const formattingMonthValues$2 = {
  narrow: [
    "1.",
    "2.",
    "3.",
    "4.",
    "5.",
    "6.",
    "7.",
    "8.",
    "9.",
    "10.",
    "11.",
    "12.",
  ],

  abbreviated: [
    "jan",
    "feb",
    "mar",
    "apr",
    "maj",
    "jun",
    "jul",
    "avg",
    "sep",
    "okt",
    "nov",
    "dec",
  ],

  wide: [
    "januar",
    "februar",
    "mart",
    "april",
    "maj",
    "jun",
    "jul",
    "avgust",
    "septembar",
    "oktobar",
    "novembar",
    "decembar",
  ],
};

const dayValues$d = {
  narrow: ["N", "P", "U", "S", "Ä", "P", "S"],
  short: ["ned", "pon", "uto", "sre", "Äet", "pet", "sub"],
  abbreviated: ["ned", "pon", "uto", "sre", "Äet", "pet", "sub"],
  wide: [
    "nedelja",
    "ponedeljak",
    "utorak",
    "sreda",
    "Äetvrtak",
    "petak",
    "subota",
  ],
};

const formattingDayPeriodValues$d = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "posle podne",
    evening: "uveÄe",
    night: "noÄu",
  },
};

const dayPeriodValues$d = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uveÄe",
    night: "noÄu",
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "ponoÄ",
    noon: "podne",
    morning: "ujutru",
    afternoon: "posle podne",
    evening: "uveÄe",
    night: "noÄu",
  },
};

const ordinalNumber$d = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$d.localize = {
  ordinalNumber: ordinalNumber$d,

  era: (0, _index$U.buildLocalizeFn)({
    values: eraValues$d,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$U.buildLocalizeFn)({
    values: quarterValues$d,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$U.buildLocalizeFn)({
    values: monthValues$d,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$2,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$U.buildLocalizeFn)({
    values: dayValues$d,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$U.buildLocalizeFn)({
    values: dayPeriodValues$d,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$d,
    defaultFormattingWidth: "wide",
  }),
});

var match$d = {};

match$d.match = void 0;

var _index$T = buildMatchFn$1;
var _index2$s = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$d = /^(\d+)\./i;
const parseOrdinalNumberPattern$d = /\d+/i;

const matchEraPatterns$d = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i,
};
const parseEraPatterns$d = {
  any: [/^pr/i, /^(po|nova)/i],
};

const matchQuarterPatterns$d = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i,
};
const parseQuarterPatterns$d = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$d = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i,
};
const parseMonthPatterns$d = {
  narrow: [
    /^1/i,
    /^2/i,
    /^3/i,
    /^4/i,
    /^5/i,
    /^6/i,
    /^7/i,
    /^8/i,
    /^9/i,
    /^10/i,
    /^11/i,
    /^12/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^avg/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$d = {
  narrow: /^[npusÄc]/i,
  short: /^(ned|pon|uto|sre|(Äet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(Äet|cet)|pet|sub)/i,
  wide: /^(nedelja|ponedeljak|utorak|sreda|(Äetvrtak|cetvrtak)|petak|subota)/i,
};
const parseDayPatterns$d = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns$d = {
  any: /^(am|pm|ponoc|ponoÄ|(po)?podne|uvece|uveÄe|noÄu|posle podne|ujutru)/i,
};
const parseDayPeriodPatterns$d = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(posle\s|po)+podne/i,
    evening: /(uvece|uveÄe)/i,
    night: /(nocu|noÄu)/i,
  },
};

(match$d.match = {
  ordinalNumber: (0, _index2$s.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$d,
    parsePattern: parseOrdinalNumberPattern$d,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$T.buildMatchFn)({
    matchPatterns: matchEraPatterns$d,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$d,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$T.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$d,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$d,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$T.buildMatchFn)({
    matchPatterns: matchMonthPatterns$d,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$d,
    defaultParseWidth: "any",
  }),

  day: (0, _index$T.buildMatchFn)({
    matchPatterns: matchDayPatterns$d,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$d,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$T.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$d,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$d,
    defaultParseWidth: "any",
  }),
});

srLatn.srLatn = void 0;
var _index$S = formatDistance$r;
var _index2$r = formatLong$d;
var _index3$d = formatRelative$r;
var _index4$d = localize$d;
var _index5$d = match$d;

/**
 * @category Locales
 * @summary Serbian latin locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor RadivojeviÄ [@rogyvoje](https://github.com/rogyvoje)
 */
(srLatn.srLatn = {
  code: "sr-Latn",
  formatDistance: _index$S.formatDistance,
  formatLong: _index2$r.formatLong,
  formatRelative: _index3$d.formatRelative,
  localize: _index4$d.localize,
  match: _index5$d.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var sv = {};

var formatDistance$p = {};

formatDistance$p.formatDistance = void 0;

const formatDistanceLocale$c = {
  lessThanXSeconds: {
    one: "mindre Ã¤n en sekund",
    other: "mindre Ã¤n {{count}} sekunder",
  },

  xSeconds: {
    one: "en sekund",
    other: "{{count}} sekunder",
  },

  halfAMinute: "en halv minut",

  lessThanXMinutes: {
    one: "mindre Ã¤n en minut",
    other: "mindre Ã¤n {{count}} minuter",
  },

  xMinutes: {
    one: "en minut",
    other: "{{count}} minuter",
  },

  aboutXHours: {
    one: "ungefÃ¤r en timme",
    other: "ungefÃ¤r {{count}} timmar",
  },

  xHours: {
    one: "en timme",
    other: "{{count}} timmar",
  },

  xDays: {
    one: "en dag",
    other: "{{count}} dagar",
  },

  aboutXWeeks: {
    one: "ungefÃ¤r en vecka",
    other: "ungefÃ¤r {{count}} veckor",
  },

  xWeeks: {
    one: "en vecka",
    other: "{{count}} veckor",
  },

  aboutXMonths: {
    one: "ungefÃ¤r en mÃ¥nad",
    other: "ungefÃ¤r {{count}} mÃ¥nader",
  },

  xMonths: {
    one: "en mÃ¥nad",
    other: "{{count}} mÃ¥nader",
  },

  aboutXYears: {
    one: "ungefÃ¤r ett Ã¥r",
    other: "ungefÃ¤r {{count}} Ã¥r",
  },

  xYears: {
    one: "ett Ã¥r",
    other: "{{count}} Ã¥r",
  },

  overXYears: {
    one: "Ã¶ver ett Ã¥r",
    other: "Ã¶ver {{count}} Ã¥r",
  },

  almostXYears: {
    one: "nÃ¤stan ett Ã¥r",
    other: "nÃ¤stan {{count}} Ã¥r",
  },
};

const wordMapping = [
  "noll",
  "en",
  "tvÃ¥",
  "tre",
  "fyra",
  "fem",
  "sex",
  "sju",
  "Ã¥tta",
  "nio",
  "tio",
  "elva",
  "tolv",
];

const formatDistance$o = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$c[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace(
      "{{count}}",
      count < 13 ? wordMapping[count] : String(count),
    );
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " sedan";
    }
  }

  return result;
};
formatDistance$p.formatDistance = formatDistance$o;

var formatLong$c = {};

formatLong$c.formatLong = void 0;
var _index$R = buildFormatLongFn$1;

const dateFormats$c = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "y-MM-dd",
};

const timeFormats$c = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$c = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$c.formatLong = {
  date: (0, _index$R.buildFormatLongFn)({
    formats: dateFormats$c,
    defaultWidth: "full",
  }),

  time: (0, _index$R.buildFormatLongFn)({
    formats: timeFormats$c,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$R.buildFormatLongFn)({
    formats: dateTimeFormats$c,
    defaultWidth: "full",
  }),
});

var formatRelative$p = {};

formatRelative$p.formatRelative = void 0;

const formatRelativeLocale$c = {
  lastWeek: "'i' EEEE's kl.' p",
  yesterday: "'igÃ¥r kl.' p",
  today: "'idag kl.' p",
  tomorrow: "'imorgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P",
};

const formatRelative$o = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$c[token];
formatRelative$p.formatRelative = formatRelative$o;

var localize$c = {};

localize$c.localize = void 0;
var _index$Q = buildLocalizeFn$1;

const eraValues$c = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["fÃ¶re Kristus", "efter Kristus"],
};

const quarterValues$c = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet"],
};

const monthValues$c = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "jan.",
    "feb.",
    "mars",
    "apr.",
    "maj",
    "juni",
    "juli",
    "aug.",
    "sep.",
    "okt.",
    "nov.",
    "dec.",
  ],

  wide: [
    "januari",
    "februari",
    "mars",
    "april",
    "maj",
    "juni",
    "juli",
    "augusti",
    "september",
    "oktober",
    "november",
    "december",
  ],
};

const dayValues$c = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["sÃ¶", "mÃ¥", "ti", "on", "to", "fr", "lÃ¶"],
  abbreviated: ["sÃ¶n", "mÃ¥n", "tis", "ons", "tors", "fre", "lÃ¶r"],
  wide: ["sÃ¶ndag", "mÃ¥ndag", "tisdag", "onsdag", "torsdag", "fredag", "lÃ¶rdag"],
};

// https://www.unicode.org/cldr/charts/32/summary/sv.html#1888
const dayPeriodValues$c = {
  narrow: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "morg.",
    afternoon: "efterm.",
    evening: "kvÃ¤ll",
    night: "natt",
  },
  abbreviated: {
    am: "f.m.",
    pm: "e.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "morgon",
    afternoon: "efterm.",
    evening: "kvÃ¤ll",
    night: "natt",
  },
  wide: {
    am: "fÃ¶rmiddag",
    pm: "eftermiddag",
    midnight: "midnatt",
    noon: "middag",
    morning: "morgon",
    afternoon: "eftermiddag",
    evening: "kvÃ¤ll",
    night: "natt",
  },
};

const formattingDayPeriodValues$c = {
  narrow: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morg.",
    afternoon: "pÃ¥ efterm.",
    evening: "pÃ¥ kvÃ¤llen",
    night: "pÃ¥ natten",
  },
  abbreviated: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morg.",
    afternoon: "pÃ¥ efterm.",
    evening: "pÃ¥ kvÃ¤llen",
    night: "pÃ¥ natten",
  },
  wide: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "pÃ¥ morgonen",
    afternoon: "pÃ¥ eftermiddagen",
    evening: "pÃ¥ kvÃ¤llen",
    night: "pÃ¥ natten",
  },
};

const ordinalNumber$c = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
      case 2:
        return number + ":a";
    }
  }
  return number + ":e";
};

(localize$c.localize = {
  ordinalNumber: ordinalNumber$c,

  era: (0, _index$Q.buildLocalizeFn)({
    values: eraValues$c,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$Q.buildLocalizeFn)({
    values: quarterValues$c,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$Q.buildLocalizeFn)({
    values: monthValues$c,
    defaultWidth: "wide",
  }),

  day: (0, _index$Q.buildLocalizeFn)({
    values: dayValues$c,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$Q.buildLocalizeFn)({
    values: dayPeriodValues$c,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$c,
    defaultFormattingWidth: "wide",
  }),
});

var match$c = {};

match$c.match = void 0;

var _index$P = buildMatchFn$1;
var _index2$q = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$c = /^(\d+)(:a|:e)?/i;
const parseOrdinalNumberPattern$c = /\d+/i;

const matchEraPatterns$c = {
  narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  wide: /^(fÃ¶re Kristus|fÃ¶re vÃ¥r tid|efter Kristus|vÃ¥r tid)/i,
};
const parseEraPatterns$c = {
  any: [/^f/i, /^[ev]/i],
};

const matchQuarterPatterns$c = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](:a|:e)? kvartalet/i,
};
const parseQuarterPatterns$c = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$c = {
  narrow: /^[jfmasond]/i,
  abbreviated:
    /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
  wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i,
};
const parseMonthPatterns$c = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^maj/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$c = {
  narrow: /^[smtofl]/i,
  short: /^(sÃ¶|mÃ¥|ti|on|to|fr|lÃ¶)/i,
  abbreviated: /^(sÃ¶n|mÃ¥n|tis|ons|tors|fre|lÃ¶r)/i,
  wide: /^(sÃ¶ndag|mÃ¥ndag|tisdag|onsdag|torsdag|fredag|lÃ¶rdag)/i,
};
const parseDayPatterns$c = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i],
};

const matchDayPeriodPatterns$c = {
  any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(pÃ¥) (morgonen|eftermiddagen|kvÃ¤llen|natten))/i,
};
const parseDayPeriodPatterns$c = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /eftermiddag/i,
    evening: /kvÃ¤ll/i,
    night: /natt/i,
  },
};

(match$c.match = {
  ordinalNumber: (0, _index2$q.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$c,
    parsePattern: parseOrdinalNumberPattern$c,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$P.buildMatchFn)({
    matchPatterns: matchEraPatterns$c,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$c,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$P.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$c,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$c,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$P.buildMatchFn)({
    matchPatterns: matchMonthPatterns$c,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$c,
    defaultParseWidth: "any",
  }),

  day: (0, _index$P.buildMatchFn)({
    matchPatterns: matchDayPatterns$c,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$c,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$P.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$c,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$c,
    defaultParseWidth: "any",
  }),
});

sv.sv = void 0;
var _index$O = formatDistance$p;
var _index2$p = formatLong$c;
var _index3$c = formatRelative$p;
var _index4$c = localize$c;
var _index5$c = match$c;

/**
 * @category Locales
 * @summary Swedish locale.
 * @language Swedish
 * @iso-639-2 swe
 * @author Johannes UlÃ©n [@ejulen](https://github.com/ejulen)
 * @author Alexander Nanberg [@alexandernanberg](https://github.com/alexandernanberg)
 * @author Henrik Andersson [@limelights](https://github.com/limelights)
 */
(sv.sv = {
  code: "sv",
  formatDistance: _index$O.formatDistance,
  formatLong: _index2$p.formatLong,
  formatRelative: _index3$c.formatRelative,
  localize: _index4$c.localize,
  match: _index5$c.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var ta = {};

var formatDistance$n = {};

formatDistance$n.formatDistance = void 0;

function isPluralType(val) {
  return val.one !== undefined;
}

const formatDistanceLocale$b = {
  lessThanXSeconds: {
    one: {
      default: "à®à®°à¯ à®µà®¿à®©à®¾à®à®¿à®à¯à®à¯ à®à¯à®±à¯à®µà®¾à®",
      in: "à®à®°à¯ à®µà®¿à®©à®¾à®à®¿à®à¯à®à¯à®³à¯",
      ago: "à®à®°à¯ à®µà®¿à®©à®¾à®à®¿à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®µà®¿à®©à®¾à®à®¿à®à®³à¯à®à¯à®à¯ à®à¯à®±à¯à®µà®¾à®",
      in: "{{count}} à®µà®¿à®©à®¾à®à®¿à®à®³à¯à®à¯à®à¯à®³à¯",
      ago: "{{count}} à®µà®¿à®©à®¾à®à®¿à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  xSeconds: {
    one: {
      default: "1 à®µà®¿à®©à®¾à®à®¿",
      in: "1 à®µà®¿à®©à®¾à®à®¿à®¯à®¿à®²à¯",
      ago: "1 à®µà®¿à®©à®¾à®à®¿ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®µà®¿à®¨à®¾à®à®¿à®à®³à¯",
      in: "{{count}} à®µà®¿à®©à®¾à®à®¿à®à®³à®¿à®²à¯",
      ago: "{{count}} à®µà®¿à®¨à®¾à®à®¿à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  halfAMinute: {
    default: "à®à®°à¯ à®¨à®¿à®®à®¿à®à®®à¯",
    in: "à®à®°à¯ à®¨à®¿à®®à®¿à®à®¤à¯à®¤à®¿à®²à¯",
    ago: "à®à®°à¯ à®¨à®¿à®®à®¿à®à®®à¯ à®®à¯à®©à¯à®ªà¯",
  },

  lessThanXMinutes: {
    one: {
      default: "à®à®°à¯ à®¨à®¿à®®à®¿à®à®¤à¯à®¤à®¿à®±à¯à®à¯à®®à¯ à®à¯à®±à¯à®µà®¾à®",
      in: "à®à®°à¯ à®¨à®¿à®®à®¿à®à®¤à¯à®¤à®¿à®±à¯à®à¯à®³à¯",
      ago: "à®à®°à¯ à®¨à®¿à®®à®¿à®à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯à®à¯à®à¯à®®à¯ à®à¯à®±à¯à®µà®¾à®",
      in: "{{count}} à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯à®à¯à®à¯à®³à¯",
      ago: "{{count}} à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  xMinutes: {
    one: {
      default: "1 à®¨à®¿à®®à®¿à®à®®à¯",
      in: "1 à®¨à®¿à®®à®¿à®à®¤à¯à®¤à®¿à®²à¯",
      ago: "1 à®¨à®¿à®®à®¿à®à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯",
      in: "{{count}} à®¨à®¿à®®à®¿à®à®à¯à®à®³à®¿à®²à¯",
      ago: "{{count}} à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  aboutXHours: {
    one: {
      default: "à®à¯à®®à®¾à®°à¯ 1 à®®à®£à®¿ à®¨à¯à®°à®®à¯",
      in: "à®à¯à®®à®¾à®°à¯ 1 à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ 1 à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "à®à¯à®®à®¾à®°à¯ {{count}} à®®à®£à®¿ à®¨à¯à®°à®®à¯",
      in: "à®à¯à®®à®¾à®°à¯ {{count}} à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
      ago: "à®à¯à®®à®¾à®°à¯ {{count}} à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®²à¯",
    },
  },

  xHours: {
    one: {
      default: "1 à®®à®£à®¿ à®¨à¯à®°à®®à¯",
      in: "1 à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®²à¯",
      ago: "1 à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®®à®£à®¿ à®¨à¯à®°à®®à¯",
      in: "{{count}} à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®²à¯",
      ago: "{{count}} à®®à®£à®¿ à®¨à¯à®°à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  xDays: {
    one: {
      default: "1 à®¨à®¾à®³à¯",
      in: "1 à®¨à®¾à®³à®¿à®²à¯",
      ago: "1 à®¨à®¾à®³à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®¨à®¾à®à¯à®à®³à¯",
      in: "{{count}} à®¨à®¾à®à¯à®à®³à®¿à®²à¯",
      ago: "{{count}} à®¨à®¾à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  aboutXWeeks: {
    one: {
      default: "à®à¯à®®à®¾à®°à¯ 1 à®µà®¾à®°à®®à¯",
      in: "à®à¯à®®à®¾à®°à¯ 1 à®µà®¾à®°à®¤à¯à®¤à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ 1 à®µà®¾à®°à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "à®à¯à®®à®¾à®°à¯ {{count}} à®µà®¾à®°à®à¯à®à®³à¯",
      in: "à®à¯à®®à®¾à®°à¯ {{count}} à®µà®¾à®°à®à¯à®à®³à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ {{count}} à®µà®¾à®°à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  xWeeks: {
    one: {
      default: "1 à®µà®¾à®°à®®à¯",
      in: "1 à®µà®¾à®°à®¤à¯à®¤à®¿à®²à¯",
      ago: "1 à®µà®¾à®°à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®µà®¾à®°à®à¯à®à®³à¯",
      in: "{{count}} à®µà®¾à®°à®à¯à®à®³à®¿à®²à¯",
      ago: "{{count}} à®µà®¾à®°à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  aboutXMonths: {
    one: {
      default: "à®à¯à®®à®¾à®°à¯ 1 à®®à®¾à®¤à®®à¯",
      in: "à®à¯à®®à®¾à®°à¯ 1 à®®à®¾à®¤à®¤à¯à®¤à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ 1 à®®à®¾à®¤à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "à®à¯à®®à®¾à®°à¯ {{count}} à®®à®¾à®¤à®à¯à®à®³à¯",
      in: "à®à¯à®®à®¾à®°à¯ {{count}} à®®à®¾à®¤à®à¯à®à®³à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ {{count}} à®®à®¾à®¤à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  xMonths: {
    one: {
      default: "1 à®®à®¾à®¤à®®à¯",
      in: "1 à®®à®¾à®¤à®¤à¯à®¤à®¿à®²à¯",
      ago: "1 à®®à®¾à®¤à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®®à®¾à®¤à®à¯à®à®³à¯",
      in: "{{count}} à®®à®¾à®¤à®à¯à®à®³à®¿à®²à¯",
      ago: "{{count}} à®®à®¾à®¤à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  aboutXYears: {
    one: {
      default: "à®à¯à®®à®¾à®°à¯ 1 à®µà®°à¯à®à®®à¯",
      in: "à®à¯à®®à®¾à®°à¯ 1 à®à®£à¯à®à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ 1 à®µà®°à¯à®à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "à®à¯à®®à®¾à®°à¯ {{count}} à®à®£à¯à®à¯à®à®³à¯",
      in: "à®à¯à®®à®¾à®°à¯ {{count}} à®à®£à¯à®à¯à®à®³à®¿à®²à¯",
      ago: "à®à¯à®®à®¾à®°à¯ {{count}} à®à®£à¯à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  xYears: {
    one: {
      default: "1 à®µà®°à¯à®à®®à¯",
      in: "1 à®à®£à¯à®à®¿à®²à¯",
      ago: "1 à®µà®°à¯à®à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®à®£à¯à®à¯à®à®³à¯",
      in: "{{count}} à®à®£à¯à®à¯à®à®³à®¿à®²à¯",
      ago: "{{count}} à®à®£à¯à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  overXYears: {
    one: {
      default: "1 à®µà®°à¯à®à®¤à¯à®¤à®¿à®±à¯à®à¯ à®®à¯à®²à¯",
      in: "1 à®µà®°à¯à®à®¤à¯à®¤à®¿à®±à¯à®à¯à®®à¯ à®®à¯à®²à®¾à®",
      ago: "1 à®µà®°à¯à®à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "{{count}} à®à®£à¯à®à¯à®à®³à¯à®à¯à®à¯à®®à¯ à®®à¯à®²à®¾à®",
      in: "{{count}} à®à®£à¯à®à¯à®à®³à®¿à®²à¯",
      ago: "{{count}} à®à®£à¯à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },

  almostXYears: {
    one: {
      default: "à®à®¿à®à¯à®à®¤à¯à®¤à®à¯à® 1 à®µà®°à¯à®à®®à¯",
      in: "à®à®¿à®à¯à®à®¤à¯à®¤à®à¯à® 1 à®à®£à¯à®à®¿à®²à¯",
      ago: "à®à®¿à®à¯à®à®¤à¯à®¤à®à¯à® 1 à®µà®°à¯à®à®®à¯ à®®à¯à®©à¯à®ªà¯",
    },
    other: {
      default: "à®à®¿à®à¯à®à®¤à¯à®¤à®à¯à® {{count}} à®à®£à¯à®à¯à®à®³à¯",
      in: "à®à®¿à®à¯à®à®¤à¯à®¤à®à¯à® {{count}} à®à®£à¯à®à¯à®à®³à®¿à®²à¯",
      ago: "à®à®¿à®à¯à®à®¤à¯à®¤à®à¯à® {{count}} à®à®£à¯à®à¯à®à®³à¯à®à¯à®à¯ à®®à¯à®©à¯à®ªà¯",
    },
  },
};

const formatDistance$m = (token, count, options) => {
  const tense = options?.addSuffix
    ? options.comparison && options.comparison > 0
      ? "in"
      : "ago"
    : "default";

  const tokenValue = formatDistanceLocale$b[token];

  if (!isPluralType(tokenValue)) return tokenValue[tense];

  if (count === 1) {
    return tokenValue.one[tense];
  } else {
    return tokenValue.other[tense].replace("{{count}}", String(count));
  }
};
formatDistance$n.formatDistance = formatDistance$m;

var formatLong$b = {};

formatLong$b.formatLong = void 0;
var _index$N = buildFormatLongFn$1;

// Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html

// CLDR #1846 - #1849
const dateFormats$b = {
  full: "EEEE, d MMMM, y",
  long: "d MMMM, y",
  medium: "d MMM, y",
  short: "d/M/yy",
};

// CLDR #1850 - #1853
const timeFormats$b = {
  full: "a h:mm:ss zzzz",
  long: "a h:mm:ss z",
  medium: "a h:mm:ss",
  short: "a h:mm",
};

const dateTimeFormats$b = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$b.formatLong = {
  date: (0, _index$N.buildFormatLongFn)({
    formats: dateFormats$b,
    defaultWidth: "full",
  }),

  time: (0, _index$N.buildFormatLongFn)({
    formats: timeFormats$b,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$N.buildFormatLongFn)({
    formats: dateTimeFormats$b,
    defaultWidth: "full",
  }),
});

var formatRelative$n = {};

formatRelative$n.formatRelative = void 0;

const formatRelativeLocale$b = {
  lastWeek: "'à®à®à®¨à¯à®¤' eeee p 'à®®à®£à®¿à®à¯à®à¯'",
  yesterday: "'à®¨à¯à®±à¯à®±à¯ ' p 'à®®à®£à®¿à®à¯à®à¯'",
  today: "'à®à®©à¯à®±à¯ ' p 'à®®à®£à®¿à®à¯à®à¯'",
  tomorrow: "'à®¨à®¾à®³à¯ ' p 'à®®à®£à®¿à®à¯à®à¯'",
  nextWeek: "eeee p 'à®®à®£à®¿à®à¯à®à¯'",
  other: "P",
};

const formatRelative$m = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$b[token];
formatRelative$n.formatRelative = formatRelative$m;

var localize$b = {};

localize$b.localize = void 0;
var _index$M = buildLocalizeFn$1;

// Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html

const eraValues$b = {
  narrow: ["à®à®¿.à®®à¯.", "à®à®¿.à®ªà®¿."],
  abbreviated: ["à®à®¿.à®®à¯.", "à®à®¿.à®ªà®¿."], // CLDR #1624, #1626
  wide: ["à®à®¿à®±à®¿à®¸à¯à®¤à¯à®µà¯à®à¯à®à¯ à®®à¯à®©à¯", "à®à®©à¯à®©à¯ à®à¯à®®à®¿à®©à®¿"], // CLDR #1620, #1622
};

const quarterValues$b = {
  // CLDR #1644 - #1647
  narrow: ["1", "2", "3", "4"],
  // CLDR #1636 - #1639
  abbreviated: ["à®à®¾à®²à®¾.1", "à®à®¾à®²à®¾.2", "à®à®¾à®²à®¾.3", "à®à®¾à®²à®¾.4"],
  // CLDR #1628 - #1631
  wide: [
    "à®à®©à¯à®±à®¾à®®à¯ à®à®¾à®²à®¾à®£à¯à®à¯",
    "à®à®°à®£à¯à®à®¾à®®à¯ à®à®¾à®²à®¾à®£à¯à®à¯",
    "à®®à¯à®©à¯à®±à®¾à®®à¯ à®à®¾à®²à®¾à®£à¯à®à¯",
    "à®¨à®¾à®©à¯à®à®¾à®®à¯ à®à®¾à®²à®¾à®£à¯à®à¯",
  ],
};

const monthValues$b = {
  // CLDR #700 - #711
  narrow: ["à®", "à®ªà®¿", "à®®à®¾", "à®", "à®®à¯", "à®à¯", "à®à¯", "à®", "à®à¯", "à®", "à®¨", "à®à®¿"],

  // CLDR #1676 - #1687
  abbreviated: [
    "à®à®©.",
    "à®ªà®¿à®ªà¯.",
    "à®®à®¾à®°à¯.",
    "à®à®ªà¯.",
    "à®®à¯",
    "à®à¯à®©à¯",
    "à®à¯à®²à¯",
    "à®à®.",
    "à®à¯à®ªà¯.",
    "à®à®à¯.",
    "à®¨à®µ.",
    "à®à®¿à®.",
  ],

  // CLDR #1652 - #1663
  wide: [
    "à®à®©à®µà®°à®¿", // January
    "à®ªà®¿à®ªà¯à®°à®µà®°à®¿", // February
    "à®®à®¾à®°à¯à®à¯", // March
    "à®à®ªà¯à®°à®²à¯", // April
    "à®®à¯", // May
    "à®à¯à®©à¯", // June
    "à®à¯à®²à¯", // July
    "à®à®à®¸à¯à®à¯", // August
    "à®à¯à®ªà¯à®à®®à¯à®ªà®°à¯", // September
    "à®à®à¯à®à¯à®ªà®°à¯", // October
    "à®¨à®µà®®à¯à®ªà®°à¯", // November
    "à®à®¿à®à®®à¯à®ªà®°à¯", // December
  ],
};

const dayValues$b = {
  // CLDR #1766 - #1772
  narrow: ["à®à®¾", "à®¤à®¿", "à®à¯", "à®ªà¯", "à®µà®¿", "à®µà¯", "à®"],
  // CLDR #1752 - #1758
  short: ["à®à®¾", "à®¤à®¿", "à®à¯", "à®ªà¯", "à®µà®¿", "à®µà¯", "à®"],
  // CLDR #1738 - #1744
  abbreviated: ["à®à®¾à®¯à®¿.", "à®¤à®¿à®à¯.", "à®à¯à®µà¯.", "à®ªà¯à®¤.", "à®µà®¿à®¯à®¾.", "à®µà¯à®³à¯.", "à®à®©à®¿"],

  // CLDR #1724 - #1730
  wide: [
    "à®à®¾à®¯à®¿à®±à¯", // Sunday
    "à®¤à®¿à®à¯à®à®³à¯", // Monday
    "à®à¯à®µà¯à®µà®¾à®¯à¯", // Tuesday
    "à®ªà¯à®¤à®©à¯", // Wednesday
    "à®µà®¿à®¯à®¾à®´à®©à¯", // Thursday
    "à®µà¯à®³à¯à®³à®¿", // Friday
    "à®à®©à®¿", // Saturday
  ],
};

// CLDR #1780 - #1845
const dayPeriodValues$b = {
  narrow: {
    am: "à®®à¯.à®ª",
    pm: "à®ªà®¿.à®ª",
    midnight: "à®¨à®³à¯.",
    noon: "à®¨à®£à¯.",
    morning: "à®à®¾.",
    afternoon: "à®®à®¤à®¿.",
    evening: "à®®à®¾.",
    night: "à®à®°.",
  },
  abbreviated: {
    am: "à®®à¯à®±à¯à®ªà®à®²à¯",
    pm: "à®ªà®¿à®±à¯à®ªà®à®²à¯",
    midnight: "à®¨à®³à¯à®³à®¿à®°à®µà¯",
    noon: "à®¨à®£à¯à®ªà®à®²à¯",
    morning: "à®à®¾à®²à¯",
    afternoon: "à®®à®¤à®¿à®¯à®®à¯",
    evening: "à®®à®¾à®²à¯",
    night: "à®à®°à®µà¯",
  },
  wide: {
    am: "à®®à¯à®±à¯à®ªà®à®²à¯",
    pm: "à®ªà®¿à®±à¯à®ªà®à®²à¯",
    midnight: "à®¨à®³à¯à®³à®¿à®°à®µà¯",
    noon: "à®¨à®£à¯à®ªà®à®²à¯",
    morning: "à®à®¾à®²à¯",
    afternoon: "à®®à®¤à®¿à®¯à®®à¯",
    evening: "à®®à®¾à®²à¯",
    night: "à®à®°à®µà¯",
  },
};

// CLDR #1780 - #1845
const formattingDayPeriodValues$b = {
  narrow: {
    am: "à®®à¯.à®ª",
    pm: "à®ªà®¿.à®ª",
    midnight: "à®¨à®³à¯.",
    noon: "à®¨à®£à¯.",
    morning: "à®à®¾.",
    afternoon: "à®®à®¤à®¿.",
    evening: "à®®à®¾.",
    night: "à®à®°.",
  },
  abbreviated: {
    am: "à®®à¯à®±à¯à®ªà®à®²à¯",
    pm: "à®ªà®¿à®±à¯à®ªà®à®²à¯",
    midnight: "à®¨à®³à¯à®³à®¿à®°à®µà¯",
    noon: "à®¨à®£à¯à®ªà®à®²à¯",
    morning: "à®à®¾à®²à¯",
    afternoon: "à®®à®¤à®¿à®¯à®®à¯",
    evening: "à®®à®¾à®²à¯",
    night: "à®à®°à®µà¯",
  },
  wide: {
    am: "à®®à¯à®±à¯à®ªà®à®²à¯",
    pm: "à®ªà®¿à®±à¯à®ªà®à®²à¯",
    midnight: "à®¨à®³à¯à®³à®¿à®°à®µà¯",
    noon: "à®¨à®£à¯à®ªà®à®²à¯",
    morning: "à®à®¾à®²à¯",
    afternoon: "à®®à®¤à®¿à®¯à®®à¯",
    evening: "à®®à®¾à®²à¯",
    night: "à®à®°à®µà¯",
  },
};

const ordinalNumber$b = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$b.localize = {
  ordinalNumber: ordinalNumber$b,

  era: (0, _index$M.buildLocalizeFn)({
    values: eraValues$b,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$M.buildLocalizeFn)({
    values: quarterValues$b,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$M.buildLocalizeFn)({
    values: monthValues$b,
    defaultWidth: "wide",
  }),

  day: (0, _index$M.buildLocalizeFn)({
    values: dayValues$b,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$M.buildLocalizeFn)({
    values: dayPeriodValues$b,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$b,
    defaultFormattingWidth: "wide",
  }),
});

var match$b = {};

match$b.match = void 0;

var _index$L = buildMatchFn$1;
var _index2$o = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$b = /^(\d+)(à®µà®¤à¯)?/i;
const parseOrdinalNumberPattern$b = /\d+/i;

const matchEraPatterns$b = {
  narrow: /^(à®à®¿.à®®à¯.|à®à®¿.à®ªà®¿.)/i,
  abbreviated: /^(à®à®¿\.?\s?à®®à¯\.?|à®à®¿\.?\s?à®ªà®¿\.?)/,
  wide: /^(à®à®¿à®±à®¿à®¸à¯à®¤à¯à®µà¯à®à¯à®à¯\sà®®à¯à®©à¯|à®à®©à¯à®©à¯\sà®à¯à®®à®¿à®©à®¿)/i,
};
const parseEraPatterns$b = {
  any: [/à®à®¿\.?\s?à®®à¯\.?/, /à®à®¿\.?\s?à®ªà®¿\.?/],
};

const matchQuarterPatterns$b = {
  narrow: /^[1234]/i,
  abbreviated: /^à®à®¾à®²à®¾.[1234]/i,
  wide: /^(à®à®©à¯à®±à®¾à®®à¯|à®à®°à®£à¯à®à®¾à®®à¯|à®®à¯à®©à¯à®±à®¾à®®à¯|à®¨à®¾à®©à¯à®à®¾à®®à¯) à®à®¾à®²à®¾à®£à¯à®à¯/i,
};
const parseQuarterPatterns$b = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [
    /(1|à®à®¾à®²à®¾.1|à®à®©à¯à®±à®¾à®®à¯)/i,
    /(2|à®à®¾à®²à®¾.2|à®à®°à®£à¯à®à®¾à®®à¯)/i,
    /(3|à®à®¾à®²à®¾.3|à®®à¯à®©à¯à®±à®¾à®®à¯)/i,
    /(4|à®à®¾à®²à®¾.4|à®¨à®¾à®©à¯à®à®¾à®®à¯)/i,
  ],
};

const matchMonthPatterns$b = {
  narrow: /^(à®|à®ªà®¿|à®®à®¾|à®|à®®à¯|à®à¯|à®|à®à¯|à®|à®¨|à®à®¿)$/i,
  abbreviated: /^(à®à®©.|à®ªà®¿à®ªà¯.|à®®à®¾à®°à¯.|à®à®ªà¯.|à®®à¯|à®à¯à®©à¯|à®à¯à®²à¯|à®à®.|à®à¯à®ªà¯.|à®à®à¯.|à®¨à®µ.|à®à®¿à®.)/i,
  wide: /^(à®à®©à®µà®°à®¿|à®ªà®¿à®ªà¯à®°à®µà®°à®¿|à®®à®¾à®°à¯à®à¯|à®à®ªà¯à®°à®²à¯|à®®à¯|à®à¯à®©à¯|à®à¯à®²à¯|à®à®à®¸à¯à®à¯|à®à¯à®ªà¯à®à®®à¯à®ªà®°à¯|à®à®à¯à®à¯à®ªà®°à¯|à®¨à®µà®®à¯à®ªà®°à¯|à®à®¿à®à®®à¯à®ªà®°à¯)/i,
};
const parseMonthPatterns$b = {
  narrow: [
    /^à®$/i,
    /^à®ªà®¿/i,
    /^à®®à®¾/i,
    /^à®/i,
    /^à®®à¯/i,
    /^à®à¯/i,
    /^à®à¯/i,
    /^à®/i,
    /^à®à¯/i,
    /^à®/i,
    /^à®¨/i,
    /^à®à®¿/i,
  ],

  any: [
    /^à®à®©/i,
    /^à®ªà®¿/i,
    /^à®®à®¾/i,
    /^à®/i,
    /^à®®à¯/i,
    /^à®à¯à®©à¯/i,
    /^à®à¯à®²à¯/i,
    /^à®/i,
    /^à®à¯/i,
    /^à®/i,
    /^à®¨/i,
    /^à®à®¿/i,
  ],
};

const matchDayPatterns$b = {
  narrow: /^(à®à®¾|à®¤à®¿|à®à¯|à®ªà¯|à®µà®¿|à®µà¯|à®)/i,
  short: /^(à®à®¾|à®¤à®¿|à®à¯|à®ªà¯|à®µà®¿|à®µà¯|à®)/i,
  abbreviated: /^(à®à®¾à®¯à®¿.|à®¤à®¿à®à¯.|à®à¯à®µà¯.|à®ªà¯à®¤.|à®µà®¿à®¯à®¾.|à®µà¯à®³à¯.|à®à®©à®¿)/i,
  wide: /^(à®à®¾à®¯à®¿à®±à¯|à®¤à®¿à®à¯à®à®³à¯|à®à¯à®µà¯à®µà®¾à®¯à¯|à®ªà¯à®¤à®©à¯|à®µà®¿à®¯à®¾à®´à®©à¯|à®µà¯à®³à¯à®³à®¿|à®à®©à®¿)/i,
};
const parseDayPatterns$b = {
  narrow: [/^à®à®¾/i, /^à®¤à®¿/i, /^à®à¯/i, /^à®ªà¯/i, /^à®µà®¿/i, /^à®µà¯/i, /^à®/i],
  any: [/^à®à®¾/i, /^à®¤à®¿/i, /^à®à¯/i, /^à®ªà¯/i, /^à®µà®¿/i, /^à®µà¯/i, /^à®/i],
};

const matchDayPeriodPatterns$b = {
  narrow: /^(à®®à¯.à®ª|à®ªà®¿.à®ª|à®¨à®³à¯|à®¨à®£à¯|à®à®¾à®²à¯|à®®à®¤à®¿à®¯à®®à¯|à®®à®¾à®²à¯|à®à®°à®µà¯)/i,
  any: /^(à®®à¯.à®ª|à®ªà®¿.à®ª|à®®à¯à®±à¯à®ªà®à®²à¯|à®ªà®¿à®±à¯à®ªà®à®²à¯|à®¨à®³à¯à®³à®¿à®°à®µà¯|à®¨à®£à¯à®ªà®à®²à¯|à®à®¾à®²à¯|à®®à®¤à®¿à®¯à®®à¯|à®®à®¾à®²à¯|à®à®°à®µà¯)/i,
};
const parseDayPeriodPatterns$b = {
  any: {
    am: /^à®®à¯/i,
    pm: /^à®ªà®¿/i,
    midnight: /^à®¨à®³à¯/i,
    noon: /^à®¨à®£à¯/i,
    morning: /à®à®¾à®²à¯/i,
    afternoon: /à®®à®¤à®¿à®¯à®®à¯/i,
    evening: /à®®à®¾à®²à¯/i,
    night: /à®à®°à®µà¯/i,
  },
};

(match$b.match = {
  ordinalNumber: (0, _index2$o.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$b,
    parsePattern: parseOrdinalNumberPattern$b,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$L.buildMatchFn)({
    matchPatterns: matchEraPatterns$b,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$b,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$L.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$b,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$b,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$L.buildMatchFn)({
    matchPatterns: matchMonthPatterns$b,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$b,
    defaultParseWidth: "any",
  }),

  day: (0, _index$L.buildMatchFn)({
    matchPatterns: matchDayPatterns$b,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$b,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$L.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$b,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$b,
    defaultParseWidth: "any",
  }),
});

ta.ta = void 0;
var _index$K = formatDistance$n;
var _index2$n = formatLong$b;
var _index3$b = formatRelative$n;
var _index4$b = localize$b;
var _index5$b = match$b;

/**
 * @category Locales
 * @summary Tamil locale (India).
 * @language Tamil
 * @iso-639-2 tam
 * @author Sibiraj [@sibiraj-s](https://github.com/sibiraj-s)
 */
(ta.ta = {
  code: "ta",
  formatDistance: _index$K.formatDistance,
  formatLong: _index2$n.formatLong,
  formatRelative: _index3$b.formatRelative,
  localize: _index4$b.localize,
  match: _index5$b.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var te = {};

var formatDistance$l = {};

formatDistance$l.formatDistance = void 0;

// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

const formatDistanceLocale$a = {
  lessThanXSeconds: {
    standalone: {
      one: "à°¸à±à°à°¨à± à°à°¨à±à°¨à°¾ à°¤à°à±à°à±à°µ",
      other: "{{count}} à°¸à±à°à°¨à±à°² à°à°¨à±à°¨à°¾ à°¤à°à±à°à±à°µ",
    },
    withPreposition: {
      one: "à°¸à±à°à°¨à±",
      other: "{{count}} à°¸à±à°à°¨à±à°²",
    },
  },

  xSeconds: {
    standalone: {
      one: "à°à° à°¸à±à°à°¨à±", // CLDR #1314
      other: "{{count}} à°¸à±à°à°¨à±à°²",
    },
    withPreposition: {
      one: "à°à° à°¸à±à°à°¨à±",
      other: "{{count}} à°¸à±à°à°¨à±à°²",
    },
  },

  halfAMinute: {
    standalone: "à°à°° à°¨à°¿à°®à°¿à°·à°",
    withPreposition: "à°à°° à°¨à°¿à°®à°¿à°·à°",
  },

  lessThanXMinutes: {
    standalone: {
      one: "à°à° à°¨à°¿à°®à°¿à°·à° à°à°¨à±à°¨à°¾ à°¤à°à±à°à±à°µ",
      other: "{{count}} à°¨à°¿à°®à°¿à°·à°¾à°² à°à°¨à±à°¨à°¾ à°¤à°à±à°à±à°µ",
    },
    withPreposition: {
      one: "à°à° à°¨à°¿à°®à°¿à°·à°",
      other: "{{count}} à°¨à°¿à°®à°¿à°·à°¾à°²",
    },
  },

  xMinutes: {
    standalone: {
      one: "à°à° à°¨à°¿à°®à°¿à°·à°", // CLDR #1311
      other: "{{count}} à°¨à°¿à°®à°¿à°·à°¾à°²à±",
    },
    withPreposition: {
      one: "à°à° à°¨à°¿à°®à°¿à°·à°", // CLDR #1311
      other: "{{count}} à°¨à°¿à°®à°¿à°·à°¾à°²",
    },
  },

  aboutXHours: {
    standalone: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°à°à°",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°à°à°à°²à±",
    },
    withPreposition: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°à°à°",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°à°à°à°²",
    },
  },

  xHours: {
    standalone: {
      one: "à°à° à°à°à°", // CLDR #1308
      other: "{{count}} à°à°à°à°²à±",
    },
    withPreposition: {
      one: "à°à° à°à°à°",
      other: "{{count}} à°à°à°à°²",
    },
  },

  xDays: {
    standalone: {
      one: "à°à° à°°à±à°à±", // CLDR #1292
      other: "{{count}} à°°à±à°à±à°²à±",
    },
    withPreposition: {
      one: "à°à° à°°à±à°à±",
      other: "{{count}} à°°à±à°à±à°²",
    },
  },

  aboutXWeeks: {
    standalone: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°µà°¾à°°à°",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°µà°¾à°°à°¾à°²à±",
    },
    withPreposition: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°µà°¾à°°à°",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°µà°¾à°°à°¾à°²à°²",
    },
  },

  xWeeks: {
    standalone: {
      one: "à°à° à°µà°¾à°°à°",
      other: "{{count}} à°µà°¾à°°à°¾à°²à±",
    },
    withPreposition: {
      one: "à°à° à°µà°¾à°°à°",
      other: "{{count}} à°µà°¾à°°à°¾à°²à°²",
    },
  },

  aboutXMonths: {
    standalone: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°¨à±à°²",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°¨à±à°²à°²à±",
    },
    withPreposition: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°¨à±à°²",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°¨à±à°²à°²",
    },
  },

  xMonths: {
    standalone: {
      one: "à°à° à°¨à±à°²", // CLDR #1281
      other: "{{count}} à°¨à±à°²à°²à±",
    },
    withPreposition: {
      one: "à°à° à°¨à±à°²",
      other: "{{count}} à°¨à±à°²à°²",
    },
  },

  aboutXYears: {
    standalone: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°¸à°à°µà°¤à±à°¸à°°à°",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±",
    },
    withPreposition: {
      one: "à°¸à±à°®à°¾à°°à± à°à° à°¸à°à°µà°¤à±à°¸à°°à°",
      other: "à°¸à±à°®à°¾à°°à± {{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²",
    },
  },

  xYears: {
    standalone: {
      one: "à°à° à°¸à°à°µà°¤à±à°¸à°°à°", // CLDR #1275
      other: "{{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±",
    },
    withPreposition: {
      one: "à°à° à°¸à°à°µà°¤à±à°¸à°°à°",
      other: "{{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²",
    },
  },

  overXYears: {
    standalone: {
      one: "à°à° à°¸à°à°µà°¤à±à°¸à°°à° à°ªà±à°à°¾",
      other: "{{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à°à± à°ªà±à°à°¾",
    },
    withPreposition: {
      one: "à°à° à°¸à°à°µà°¤à±à°¸à°°à°",
      other: "{{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²",
    },
  },

  almostXYears: {
    standalone: {
      one: "à°¦à°¾à°¦à°¾à°ªà± à°à° à°¸à°à°µà°¤à±à°¸à°°à°",
      other: "à°¦à°¾à°¦à°¾à°ªà± {{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±",
    },
    withPreposition: {
      one: "à°¦à°¾à°¦à°¾à°ªà± à°à° à°¸à°à°µà°¤à±à°¸à°°à°",
      other: "à°¦à°¾à°¦à°¾à°ªà± {{count}} à°¸à°à°µà°¤à±à°¸à°°à°¾à°²",
    },
  },
};

const formatDistance$k = (token, count, options) => {
  let result;

  const tokenValue = options?.addSuffix
    ? formatDistanceLocale$a[token].withPreposition
    : formatDistanceLocale$a[token].standalone;

  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "à°²à±";
    } else {
      return result + " à°à±à°°à°¿à°¤à°";
    }
  }

  return result;
};
formatDistance$l.formatDistance = formatDistance$k;

var formatLong$a = {};

formatLong$a.formatLong = void 0;
var _index$J = buildFormatLongFn$1;

// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

// CLDR #1807 - #1811
const dateFormats$a = {
  full: "d, MMMM y, EEEE",
  long: "d MMMM, y",
  medium: "d MMM, y",
  short: "dd-MM-yy",
};

// CLDR #1807 - #1811
const timeFormats$a = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

// CLDR #1815 - #1818
const dateTimeFormats$a = {
  full: "{{date}} {{time}}'à°à°¿'",
  long: "{{date}} {{time}}'à°à°¿'",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$a.formatLong = {
  date: (0, _index$J.buildFormatLongFn)({
    formats: dateFormats$a,
    defaultWidth: "full",
  }),

  time: (0, _index$J.buildFormatLongFn)({
    formats: timeFormats$a,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$J.buildFormatLongFn)({
    formats: dateTimeFormats$a,
    defaultWidth: "full",
  }),
});

var formatRelative$l = {};

formatRelative$l.formatRelative = void 0;

// Source: https://www.unicode.org/cldr/charts/32/summary/te.html

const formatRelativeLocale$a = {
  lastWeek: "'à°à°¤' eeee p", // CLDR #1384
  yesterday: "'à°¨à°¿à°¨à±à°¨' p", // CLDR #1393
  today: "'à° à°°à±à°à±' p", // CLDR #1394
  tomorrow: "'à°°à±à°ªà±' p", // CLDR #1395
  nextWeek: "'à°¤à°¦à±à°ªà°°à°¿' eeee p", // CLDR #1386
  other: "P",
};

const formatRelative$k = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$a[token];
formatRelative$l.formatRelative = formatRelative$k;

var localize$a = {};

localize$a.localize = void 0;
var _index$I = buildLocalizeFn$1;

// Source: https://www.unicode.org/cldr/charts/32/summary/te.html
// Source: https://dsal.uchicago.edu/dictionaries/brown/

// CLDR #1605 - #1608
const eraValues$a = {
  narrow: ["à°à±à°°à±.à°ªà±.", "à°à±à°°à±.à°¶."],
  abbreviated: ["à°à±à°°à±.à°ªà±.", "à°à±à°°à±.à°¶."],
  wide: ["à°à±à°°à±à°¸à±à°¤à± à°ªà±à°°à±à°µà°", "à°à±à°°à±à°¸à±à°¤à±à°¶à°à°"],
};

// CLDR #1613 - #1628
const quarterValues$a = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["à°¤à±à°°à±1", "à°¤à±à°°à±2", "à°¤à±à°°à±3", "à°¤à±à°°à±4"],
  wide: ["1à°µ à°¤à±à°°à±à°®à°¾à°¸à°¿à°à°", "2à°µ à°¤à±à°°à±à°®à°¾à°¸à°¿à°à°", "3à°µ à°¤à±à°°à±à°®à°¾à°¸à°¿à°à°", "4à°µ à°¤à±à°°à±à°®à°¾à°¸à°¿à°à°"],
};

// CLDR #1637 - #1708
const monthValues$a = {
  narrow: ["à°", "à°«à°¿", "à°®à°¾", "à°", "à°®à±", "à°à±", "à°à±", "à°", "à°¸à±", "à°", "à°¨", "à°¡à°¿"],

  abbreviated: [
    "à°à°¨",
    "à°«à°¿à°¬à±à°°",
    "à°®à°¾à°°à±à°à°¿",
    "à°à°ªà±à°°à°¿",
    "à°®à±",
    "à°à±à°¨à±",
    "à°à±à°²à±",
    "à°à°",
    "à°¸à±à°ªà±à°à±à°",
    "à°à°à±à°à±",
    "à°¨à°µà°",
    "à°¡à°¿à°¸à±à°",
  ],

  wide: [
    "à°à°¨à°µà°°à°¿",
    "à°«à°¿à°¬à±à°°à°µà°°à°¿",
    "à°®à°¾à°°à±à°à°¿",
    "à°à°ªà±à°°à°¿à°²à±",
    "à°®à±",
    "à°à±à°¨à±",
    "à°à±à°²à±",
    "à°à°à°¸à±à°à±",
    "à°¸à±à°ªà±à°à±à°à°¬à°°à±",
    "à°à°à±à°à±à°¬à°°à±",
    "à°¨à°µà°à°¬à°°à±",
    "à°¡à°¿à°¸à±à°à°¬à°°à±",
  ],
};

// CLDR #1709 - #1764
const dayValues$a = {
  narrow: ["à°", "à°¸à±", "à°®", "à°¬à±", "à°à±", "à°¶à±", "à°¶"],
  short: ["à°à°¦à°¿", "à°¸à±à°®", "à°®à°à°à°³", "à°¬à±à°§", "à°à±à°°à±", "à°¶à±à°à±à°°", "à°¶à°¨à°¿"],
  abbreviated: ["à°à°¦à°¿", "à°¸à±à°®", "à°®à°à°à°³", "à°¬à±à°§", "à°à±à°°à±", "à°¶à±à°à±à°°", "à°¶à°¨à°¿"],
  wide: [
    "à°à°¦à°¿à°µà°¾à°°à°",
    "à°¸à±à°®à°µà°¾à°°à°",
    "à°®à°à°à°³à°µà°¾à°°à°",
    "à°¬à±à°§à°µà°¾à°°à°",
    "à°à±à°°à±à°µà°¾à°°à°",
    "à°¶à±à°à±à°°à°µà°¾à°°à°",
    "à°¶à°¨à°¿à°µà°¾à°°à°",
  ],
};

// CLDR #1767 - #1806
const dayPeriodValues$a = {
  narrow: {
    am: "à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°",
    pm: "à°à°ªà°°à°¾à°¹à±à°¨à°",
    midnight: "à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿",
    noon: "à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    morning: "à°à°¦à°¯à°",
    afternoon: "à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    evening: "à°¸à°¾à°¯à°à°¤à±à°°à°",
    night: "à°°à°¾à°¤à±à°°à°¿",
  },
  abbreviated: {
    am: "à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°",
    pm: "à°à°ªà°°à°¾à°¹à±à°¨à°",
    midnight: "à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿",
    noon: "à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    morning: "à°à°¦à°¯à°",
    afternoon: "à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    evening: "à°¸à°¾à°¯à°à°¤à±à°°à°",
    night: "à°°à°¾à°¤à±à°°à°¿",
  },
  wide: {
    am: "à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°",
    pm: "à°à°ªà°°à°¾à°¹à±à°¨à°",
    midnight: "à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿",
    noon: "à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    morning: "à°à°¦à°¯à°",
    afternoon: "à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    evening: "à°¸à°¾à°¯à°à°¤à±à°°à°",
    night: "à°°à°¾à°¤à±à°°à°¿",
  },
};

const formattingDayPeriodValues$a = {
  narrow: {
    am: "à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°",
    pm: "à°à°ªà°°à°¾à°¹à±à°¨à°",
    midnight: "à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿",
    noon: "à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    morning: "à°à°¦à°¯à°",
    afternoon: "à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    evening: "à°¸à°¾à°¯à°à°¤à±à°°à°",
    night: "à°°à°¾à°¤à±à°°à°¿",
  },
  abbreviated: {
    am: "à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°",
    pm: "à°à°ªà°°à°¾à°¹à±à°¨à°",
    midnight: "à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿",
    noon: "à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    morning: "à°à°¦à°¯à°",
    afternoon: "à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    evening: "à°¸à°¾à°¯à°à°¤à±à°°à°",
    night: "à°°à°¾à°¤à±à°°à°¿",
  },
  wide: {
    am: "à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°",
    pm: "à°à°ªà°°à°¾à°¹à±à°¨à°",
    midnight: "à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿",
    noon: "à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    morning: "à°à°¦à°¯à°",
    afternoon: "à°®à°§à±à°¯à°¾à°¹à±à°¨à°",
    evening: "à°¸à°¾à°¯à°à°¤à±à°°à°",
    night: "à°°à°¾à°¤à±à°°à°¿",
  },
};

const ordinalNumber$a = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + "à°µ";
};

(localize$a.localize = {
  ordinalNumber: ordinalNumber$a,

  era: (0, _index$I.buildLocalizeFn)({
    values: eraValues$a,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$I.buildLocalizeFn)({
    values: quarterValues$a,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$I.buildLocalizeFn)({
    values: monthValues$a,
    defaultWidth: "wide",
  }),

  day: (0, _index$I.buildLocalizeFn)({
    values: dayValues$a,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$I.buildLocalizeFn)({
    values: dayPeriodValues$a,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$a,
    defaultFormattingWidth: "wide",
  }),
});

var match$a = {};

match$a.match = void 0;

var _index$H = buildMatchFn$1;
var _index2$m = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$a = /^(\d+)(à°µ)?/i;
const parseOrdinalNumberPattern$a = /\d+/i;

const matchEraPatterns$a = {
  narrow: /^(à°à±à°°à±\.à°ªà±\.|à°à±à°°à±\.à°¶\.)/i,
  abbreviated:
    /^(à°à±à°°à±\.?\s?à°ªà±\.?|à°ªà±à°°\.?\s?à°¶\.?\s?à°ªà±\.?|à°à±à°°à±\.?\s?à°¶\.?|à°¸à°¾\.?\s?à°¶\.?)/i,
  wide: /^(à°à±à°°à±à°¸à±à°¤à± à°ªà±à°°à±à°µà°|à°ªà±à°°à°¸à±à°¤à±à°¤ à°¶à°à°¾à°¨à°¿à°à°¿ à°ªà±à°°à±à°µà°|à°à±à°°à±à°¸à±à°¤à± à°¶à°à°|à°ªà±à°°à°¸à±à°¤à±à°¤ à°¶à°à°)/i,
};
const parseEraPatterns$a = {
  any: [/^(à°ªà±|à°¶)/i, /^à°¸à°¾/i],
};

const matchQuarterPatterns$a = {
  narrow: /^[1234]/i,
  abbreviated: /^à°¤à±à°°à±[1234]/i,
  wide: /^[1234](à°µ)? à°¤à±à°°à±à°®à°¾à°¸à°¿à°à°/i,
};
const parseQuarterPatterns$a = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$a = {
  narrow: /^(à°à±|à°à±|à°|à°«à°¿|à°®à°¾|à°|à°®à±|à°|à°¸à±|à°|à°¨|à°¡à°¿)/i,
  abbreviated: /^(à°à°¨|à°«à°¿à°¬à±à°°|à°®à°¾à°°à±à°à°¿|à°à°ªà±à°°à°¿|à°®à±|à°à±à°¨à±|à°à±à°²à±|à°à°|à°¸à±à°ªà±|à°à°à±à°à±|à°¨à°µ|à°¡à°¿à°¸à±)/i,
  wide: /^(à°à°¨à°µà°°à°¿|à°«à°¿à°¬à±à°°à°µà°°à°¿|à°®à°¾à°°à±à°à°¿|à°à°ªà±à°°à°¿à°²à±|à°®à±|à°à±à°¨à±|à°à±à°²à±|à°à°à°¸à±à°à±|à°¸à±à°ªà±à°à±à°à°¬à°°à±|à°à°à±à°à±à°¬à°°à±|à°¨à°µà°à°¬à°°à±|à°¡à°¿à°¸à±à°à°¬à°°à±)/i,
};
const parseMonthPatterns$a = {
  narrow: [
    /^à°/i,
    /^à°«à°¿/i,
    /^à°®à°¾/i,
    /^à°/i,
    /^à°®à±/i,
    /^à°à±/i,
    /^à°à±/i,
    /^à°/i,
    /^à°¸à±/i,
    /^à°/i,
    /^à°¨/i,
    /^à°¡à°¿/i,
  ],

  any: [
    /^à°à°¨/i,
    /^à°«à°¿/i,
    /^à°®à°¾/i,
    /^à°/i,
    /^à°®à±/i,
    /^à°à±à°¨à±/i,
    /^à°à±à°²à±/i,
    /^à°à°/i,
    /^à°¸à±/i,
    /^à°/i,
    /^à°¨/i,
    /^à°¡à°¿/i,
  ],
};

const matchDayPatterns$a = {
  narrow: /^(à°|à°¸à±|à°®|à°¬à±|à°à±|à°¶à±|à°¶)/i,
  short: /^(à°à°¦à°¿|à°¸à±à°®|à°®à°|à°¬à±à°§|à°à±à°°à±|à°¶à±à°à±à°°|à°¶à°¨à°¿)/i,
  abbreviated: /^(à°à°¦à°¿|à°¸à±à°®|à°®à°|à°¬à±à°§|à°à±à°°à±|à°¶à±à°à±à°°|à°¶à°¨à°¿)/i,
  wide: /^(à°à°¦à°¿à°µà°¾à°°à°|à°¸à±à°®à°µà°¾à°°à°|à°®à°à°à°³à°µà°¾à°°à°|à°¬à±à°§à°µà°¾à°°à°|à°à±à°°à±à°µà°¾à°°à°|à°¶à±à°à±à°°à°µà°¾à°°à°|à°¶à°¨à°¿à°µà°¾à°°à°)/i,
};
const parseDayPatterns$a = {
  narrow: [/^à°/i, /^à°¸à±/i, /^à°®/i, /^à°¬à±/i, /^à°à±/i, /^à°¶à±/i, /^à°¶/i],
  any: [/^à°à°¦à°¿/i, /^à°¸à±à°®/i, /^à°®à°/i, /^à°¬à±à°§/i, /^à°à±à°°à±/i, /^à°¶à±à°à±à°°/i, /^à°¶à°¨à°¿/i],
};

const matchDayPeriodPatterns$a = {
  narrow:
    /^(à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°|à°à°ªà°°à°¾à°¹à±à°¨à°|à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿|à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°à°¦à°¯à°|à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°¸à°¾à°¯à°à°¤à±à°°à°|à°°à°¾à°¤à±à°°à°¿)/i,
  any: /^(à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°|à°à°ªà°°à°¾à°¹à±à°¨à°|à°à°°à±à°§à°°à°¾à°¤à±à°°à°¿|à°®à°¿à°à±à°à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°à°¦à°¯à°|à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°¸à°¾à°¯à°à°¤à±à°°à°|à°°à°¾à°¤à±à°°à°¿)/i,
};
const parseDayPeriodPatterns$a = {
  any: {
    am: /^à°ªà±à°°à±à°µà°¾à°¹à±à°¨à°/i,
    pm: /^à°à°ªà°°à°¾à°¹à±à°¨à°/i,
    midnight: /^à°à°°à±à°§/i,
    noon: /^à°®à°¿à°à±à°/i,
    morning: /à°à°¦à°¯à°/i,
    afternoon: /à°®à°§à±à°¯à°¾à°¹à±à°¨à°/i,
    evening: /à°¸à°¾à°¯à°à°¤à±à°°à°/i,
    night: /à°°à°¾à°¤à±à°°à°¿/i,
  },
};

(match$a.match = {
  ordinalNumber: (0, _index2$m.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$a,
    parsePattern: parseOrdinalNumberPattern$a,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$H.buildMatchFn)({
    matchPatterns: matchEraPatterns$a,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$a,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$H.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$a,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$a,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$H.buildMatchFn)({
    matchPatterns: matchMonthPatterns$a,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$a,
    defaultParseWidth: "any",
  }),

  day: (0, _index$H.buildMatchFn)({
    matchPatterns: matchDayPatterns$a,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$a,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$H.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$a,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$a,
    defaultParseWidth: "any",
  }),
});

te.te = void 0;
var _index$G = formatDistance$l;
var _index2$l = formatLong$a;
var _index3$a = formatRelative$l;
var _index4$a = localize$a;
var _index5$a = match$a;

/**
 * @category Locales
 * @summary Telugu locale
 * @language Telugu
 * @iso-639-2 tel
 * @author Kranthi Lakum [@kranthilakum](https://github.com/kranthilakum)
 */
(te.te = {
  code: "te",
  formatDistance: _index$G.formatDistance,
  formatLong: _index2$l.formatLong,
  formatRelative: _index3$a.formatRelative,
  localize: _index4$a.localize,
  match: _index5$a.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var th = {};

var formatDistance$j = {};

formatDistance$j.formatDistance = void 0;

const formatDistanceLocale$9 = {
  lessThanXSeconds: {
    one: "à¸à¹à¸­à¸¢à¸à¸§à¹à¸² 1 à¸§à¸´à¸à¸²à¸à¸µ",
    other: "à¸à¹à¸­à¸¢à¸à¸§à¹à¸² {{count}} à¸§à¸´à¸à¸²à¸à¸µ",
  },

  xSeconds: {
    one: "1 à¸§à¸´à¸à¸²à¸à¸µ",
    other: "{{count}} à¸§à¸´à¸à¸²à¸à¸µ",
  },

  halfAMinute: "à¸à¸£à¸¶à¹à¸à¸à¸²à¸à¸µ",

  lessThanXMinutes: {
    one: "à¸à¹à¸­à¸¢à¸à¸§à¹à¸² 1 à¸à¸²à¸à¸µ",
    other: "à¸à¹à¸­à¸¢à¸à¸§à¹à¸² {{count}} à¸à¸²à¸à¸µ",
  },

  xMinutes: {
    one: "1 à¸à¸²à¸à¸µ",
    other: "{{count}} à¸à¸²à¸à¸µ",
  },

  aboutXHours: {
    one: "à¸à¸£à¸°à¸¡à¸²à¸ 1 à¸à¸±à¹à¸§à¹à¸¡à¸",
    other: "à¸à¸£à¸°à¸¡à¸²à¸ {{count}} à¸à¸±à¹à¸§à¹à¸¡à¸",
  },

  xHours: {
    one: "1 à¸à¸±à¹à¸§à¹à¸¡à¸",
    other: "{{count}} à¸à¸±à¹à¸§à¹à¸¡à¸",
  },

  xDays: {
    one: "1 à¸§à¸±à¸",
    other: "{{count}} à¸§à¸±à¸",
  },

  aboutXWeeks: {
    one: "à¸à¸£à¸°à¸¡à¸²à¸ 1 à¸ªà¸±à¸à¸à¸²à¸«à¹",
    other: "à¸à¸£à¸°à¸¡à¸²à¸ {{count}} à¸ªà¸±à¸à¸à¸²à¸«à¹",
  },

  xWeeks: {
    one: "1 à¸ªà¸±à¸à¸à¸²à¸«à¹",
    other: "{{count}} à¸ªà¸±à¸à¸à¸²à¸«à¹",
  },

  aboutXMonths: {
    one: "à¸à¸£à¸°à¸¡à¸²à¸ 1 à¹à¸à¸·à¸­à¸",
    other: "à¸à¸£à¸°à¸¡à¸²à¸ {{count}} à¹à¸à¸·à¸­à¸",
  },

  xMonths: {
    one: "1 à¹à¸à¸·à¸­à¸",
    other: "{{count}} à¹à¸à¸·à¸­à¸",
  },

  aboutXYears: {
    one: "à¸à¸£à¸°à¸¡à¸²à¸ 1 à¸à¸µ",
    other: "à¸à¸£à¸°à¸¡à¸²à¸ {{count}} à¸à¸µ",
  },

  xYears: {
    one: "1 à¸à¸µ",
    other: "{{count}} à¸à¸µ",
  },

  overXYears: {
    one: "à¸¡à¸²à¸à¸à¸§à¹à¸² 1 à¸à¸µ",
    other: "à¸¡à¸²à¸à¸à¸§à¹à¸² {{count}} à¸à¸µ",
  },

  almostXYears: {
    one: "à¹à¸à¸·à¸­à¸ 1 à¸à¸µ",
    other: "à¹à¸à¸·à¸­à¸ {{count}} à¸à¸µ",
  },
};

const formatDistance$i = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$9[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (token === "halfAMinute") {
        return "à¹à¸" + result;
      } else {
        return "à¹à¸ " + result;
      }
    } else {
      return result + "à¸à¸µà¹à¸à¹à¸²à¸à¸¡à¸²";
    }
  }

  return result;
};
formatDistance$j.formatDistance = formatDistance$i;

var formatLong$9 = {};

formatLong$9.formatLong = void 0;
var _index$F = buildFormatLongFn$1;

const dateFormats$9 = {
  full: "à¸§à¸±à¸EEEEà¸à¸µà¹ do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy",
};

const timeFormats$9 = {
  full: "H:mm:ss à¸. zzzz",
  long: "H:mm:ss à¸. z",
  medium: "H:mm:ss à¸.",
  short: "H:mm à¸.",
};

const dateTimeFormats$9 = {
  full: "{{date}} 'à¹à¸§à¸¥à¸²' {{time}}",
  long: "{{date}} 'à¹à¸§à¸¥à¸²' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$9.formatLong = {
  date: (0, _index$F.buildFormatLongFn)({
    formats: dateFormats$9,
    defaultWidth: "full",
  }),

  time: (0, _index$F.buildFormatLongFn)({
    formats: timeFormats$9,
    defaultWidth: "medium",
  }),

  dateTime: (0, _index$F.buildFormatLongFn)({
    formats: dateTimeFormats$9,
    defaultWidth: "full",
  }),
});

var formatRelative$j = {};

formatRelative$j.formatRelative = void 0;

const formatRelativeLocale$9 = {
  lastWeek: "eeee'à¸à¸µà¹à¹à¸¥à¹à¸§à¹à¸§à¸¥à¸²' p",
  yesterday: "'à¹à¸¡à¸·à¹à¸­à¸§à¸²à¸à¸à¸µà¹à¹à¸§à¸¥à¸²' p",
  today: "'à¸§à¸±à¸à¸à¸µà¹à¹à¸§à¸¥à¸²' p",
  tomorrow: "'à¸à¸£à¸¸à¹à¸à¸à¸µà¹à¹à¸§à¸¥à¸²' p",
  nextWeek: "eeee 'à¹à¸§à¸¥à¸²' p",
  other: "P",
};

const formatRelative$i = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$9[token];
formatRelative$j.formatRelative = formatRelative$i;

var localize$9 = {};

localize$9.localize = void 0;
var _index$E = buildLocalizeFn$1;

const eraValues$9 = {
  narrow: ["B", "à¸à¸¨"],
  abbreviated: ["BC", "à¸.à¸¨."],
  wide: ["à¸à¸µà¸à¹à¸­à¸à¸à¸£à¸´à¸ªà¸à¸à¸²à¸¥", "à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸"],
};

const quarterValues$9 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["à¹à¸à¸£à¸¡à¸²à¸ªà¹à¸£à¸", "à¹à¸à¸£à¸¡à¸²à¸ªà¸à¸µà¹à¸ªà¸­à¸", "à¹à¸à¸£à¸¡à¸²à¸ªà¸à¸µà¹à¸ªà¸²à¸¡", "à¹à¸à¸£à¸¡à¸²à¸ªà¸à¸µà¹à¸ªà¸µà¹"],
};

const dayValues$9 = {
  narrow: ["à¸­à¸².", "à¸.", "à¸­.", "à¸.", "à¸à¸¤.", "à¸¨.", "à¸ª."],
  short: ["à¸­à¸².", "à¸.", "à¸­.", "à¸.", "à¸à¸¤.", "à¸¨.", "à¸ª."],
  abbreviated: ["à¸­à¸².", "à¸.", "à¸­.", "à¸.", "à¸à¸¤.", "à¸¨.", "à¸ª."],
  wide: ["à¸­à¸²à¸à¸´à¸à¸¢à¹", "à¸à¸±à¸à¸à¸£à¹", "à¸­à¸±à¸à¸à¸²à¸£", "à¸à¸¸à¸", "à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ", "à¸¨à¸¸à¸à¸£à¹", "à¹à¸ªà¸²à¸£à¹"],
};

const monthValues$9 = {
  narrow: [
    "à¸¡.à¸.",
    "à¸.à¸.",
    "à¸¡à¸µ.à¸.",
    "à¹à¸¡.à¸¢.",
    "à¸.à¸.",
    "à¸¡à¸´.à¸¢.",
    "à¸.à¸.",
    "à¸ª.à¸.",
    "à¸.à¸¢.",
    "à¸.à¸.",
    "à¸.à¸¢.",
    "à¸.à¸.",
  ],

  abbreviated: [
    "à¸¡.à¸.",
    "à¸.à¸.",
    "à¸¡à¸µ.à¸.",
    "à¹à¸¡.à¸¢.",
    "à¸.à¸.",
    "à¸¡à¸´.à¸¢.",
    "à¸.à¸.",
    "à¸ª.à¸.",
    "à¸.à¸¢.",
    "à¸.à¸.",
    "à¸.à¸¢.",
    "à¸.à¸.",
  ],

  wide: [
    "à¸¡à¸à¸£à¸²à¸à¸¡",
    "à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹",
    "à¸¡à¸µà¸à¸²à¸à¸¡",
    "à¹à¸¡à¸©à¸²à¸¢à¸",
    "à¸à¸¤à¸©à¸ à¸²à¸à¸¡",
    "à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸",
    "à¸à¸£à¸à¸à¸²à¸à¸¡",
    "à¸ªà¸´à¸à¸«à¸²à¸à¸¡",
    "à¸à¸±à¸à¸¢à¸²à¸¢à¸",
    "à¸à¸¸à¸¥à¸²à¸à¸¡",
    "à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸",
    "à¸à¸±à¸à¸§à¸²à¸à¸¡",
  ],
};

const dayPeriodValues$9 = {
  narrow: {
    am: "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸",
    pm: "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸",
    midnight: "à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸",
    noon: "à¹à¸à¸µà¹à¸¢à¸",
    morning: "à¹à¸à¹à¸²",
    afternoon: "à¸à¹à¸²à¸¢",
    evening: "à¹à¸¢à¹à¸",
    night: "à¸à¸¥à¸²à¸à¸à¸·à¸",
  },
  abbreviated: {
    am: "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸",
    pm: "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸",
    midnight: "à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸",
    noon: "à¹à¸à¸µà¹à¸¢à¸",
    morning: "à¹à¸à¹à¸²",
    afternoon: "à¸à¹à¸²à¸¢",
    evening: "à¹à¸¢à¹à¸",
    night: "à¸à¸¥à¸²à¸à¸à¸·à¸",
  },
  wide: {
    am: "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸",
    pm: "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸",
    midnight: "à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸",
    noon: "à¹à¸à¸µà¹à¸¢à¸",
    morning: "à¹à¸à¹à¸²",
    afternoon: "à¸à¹à¸²à¸¢",
    evening: "à¹à¸¢à¹à¸",
    night: "à¸à¸¥à¸²à¸à¸à¸·à¸",
  },
};

const formattingDayPeriodValues$9 = {
  narrow: {
    am: "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸",
    pm: "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸",
    midnight: "à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸",
    noon: "à¹à¸à¸µà¹à¸¢à¸",
    morning: "à¸à¸­à¸à¹à¸à¹à¸²",
    afternoon: "à¸à¸­à¸à¸à¸¥à¸²à¸à¸§à¸±à¸",
    evening: "à¸à¸­à¸à¹à¸¢à¹à¸",
    night: "à¸à¸­à¸à¸à¸¥à¸²à¸à¸à¸·à¸",
  },
  abbreviated: {
    am: "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸",
    pm: "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸",
    midnight: "à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸",
    noon: "à¹à¸à¸µà¹à¸¢à¸",
    morning: "à¸à¸­à¸à¹à¸à¹à¸²",
    afternoon: "à¸à¸­à¸à¸à¸¥à¸²à¸à¸§à¸±à¸",
    evening: "à¸à¸­à¸à¹à¸¢à¹à¸",
    night: "à¸à¸­à¸à¸à¸¥à¸²à¸à¸à¸·à¸",
  },
  wide: {
    am: "à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸",
    pm: "à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸",
    midnight: "à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸",
    noon: "à¹à¸à¸µà¹à¸¢à¸",
    morning: "à¸à¸­à¸à¹à¸à¹à¸²",
    afternoon: "à¸à¸­à¸à¸à¸¥à¸²à¸à¸§à¸±à¸",
    evening: "à¸à¸­à¸à¹à¸¢à¹à¸",
    night: "à¸à¸­à¸à¸à¸¥à¸²à¸à¸à¸·à¸",
  },
};

const ordinalNumber$9 = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$9.localize = {
  ordinalNumber: ordinalNumber$9,

  era: (0, _index$E.buildLocalizeFn)({
    values: eraValues$9,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$E.buildLocalizeFn)({
    values: quarterValues$9,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$E.buildLocalizeFn)({
    values: monthValues$9,
    defaultWidth: "wide",
  }),

  day: (0, _index$E.buildLocalizeFn)({
    values: dayValues$9,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$E.buildLocalizeFn)({
    values: dayPeriodValues$9,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$9,
    defaultFormattingWidth: "wide",
  }),
});

var match$9 = {};

match$9.match = void 0;

var _index$D = buildMatchFn$1;
var _index2$k = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$9 = /^\d+/i;
const parseOrdinalNumberPattern$9 = /\d+/i;

const matchEraPatterns$9 = {
  narrow: /^([bB]|[aA]|à¸à¸¨)/i,
  abbreviated:
    /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|à¸\.?à¸¨\.?)/i,
  wide: /^(à¸à¹à¸­à¸à¸à¸£à¸´à¸ªà¸à¸à¸²à¸¥|à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸|à¸à¸£à¸´à¸ªà¸à¸à¸²à¸¥)/i,
};
const parseEraPatterns$9 = {
  any: [/^[bB]/i, /^(^[aA]|à¸\.?à¸¨\.?|à¸à¸£à¸´à¸ªà¸à¸à¸²à¸¥|à¸à¸£à¸´à¸ªà¸à¹à¸¨à¸±à¸à¸£à¸²à¸|)/i],
};

const matchQuarterPatterns$9 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^à¹à¸à¸£à¸¡à¸²à¸ª(à¸à¸µà¹)? ?[1234]/i,
};
const parseQuarterPatterns$9 = {
  any: [/(1|à¹à¸£à¸|à¸«à¸à¸¶à¹à¸)/i, /(2|à¸ªà¸­à¸)/i, /(3|à¸ªà¸²à¸¡)/i, /(4|à¸ªà¸µà¹)/i],
};

const matchMonthPatterns$9 = {
  narrow:
    /^(à¸¡\.?à¸\.?|à¸\.?à¸\.?|à¸¡à¸µ\.?à¸\.?|à¹à¸¡\.?à¸¢\.?|à¸\.?à¸\.?|à¸¡à¸´\.?à¸¢\.?|à¸\.?à¸\.?|à¸ª\.?à¸\.?|à¸\.?à¸¢\.?|à¸\.?à¸\.?|à¸\.?à¸¢\.?|à¸\.?à¸\.?)/i,
  abbreviated:
    /^(à¸¡\.?à¸\.?|à¸\.?à¸\.?|à¸¡à¸µ\.?à¸\.?|à¹à¸¡\.?à¸¢\.?|à¸\.?à¸\.?|à¸¡à¸´\.?à¸¢\.?|à¸\.?à¸\.?|à¸ª\.?à¸\.?|à¸\.?à¸¢\.?|à¸\.?à¸\.?|à¸\.?à¸¢\.?|à¸\.?à¸\.?')/i,
  wide: /^(à¸¡à¸à¸£à¸²à¸à¸¡|à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹|à¸¡à¸µà¸à¸²à¸à¸¡|à¹à¸¡à¸©à¸²à¸¢à¸|à¸à¸¤à¸©à¸ à¸²à¸à¸¡|à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸|à¸à¸£à¸à¸à¸²à¸à¸¡|à¸ªà¸´à¸à¸«à¸²à¸à¸¡|à¸à¸±à¸à¸¢à¸²à¸¢à¸|à¸à¸¸à¸¥à¸²à¸à¸¡|à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸|à¸à¸±à¸à¸§à¸²à¸à¸¡)/i,
};
const parseMonthPatterns$9 = {
  wide: [
    /^à¸¡à¸/i,
    /^à¸à¸¸à¸¡/i,
    /^à¸¡à¸µ/i,
    /^à¹à¸¡/i,
    /^à¸à¸¤à¸©/i,
    /^à¸¡à¸´/i,
    /^à¸à¸£à¸/i,
    /^à¸ª/i,
    /^à¸à¸±à¸/i,
    /^à¸/i,
    /^à¸à¸¤à¸¨/i,
    /^à¸/i,
  ],

  any: [
    /^à¸¡\.?à¸\.?/i,
    /^à¸\.?à¸\.?/i,
    /^à¸¡à¸µ\.?à¸\.?/i,
    /^à¹à¸¡\.?à¸¢\.?/i,
    /^à¸\.?à¸\.?/i,
    /^à¸¡à¸´\.?à¸¢\.?/i,
    /^à¸\.?à¸\.?/i,
    /^à¸ª\.?à¸\.?/i,
    /^à¸\.?à¸¢\.?/i,
    /^à¸\.?à¸\.?/i,
    /^à¸\.?à¸¢\.?/i,
    /^à¸\.?à¸\.?/i,
  ],
};

const matchDayPatterns$9 = {
  narrow: /^(à¸­à¸²\.?|à¸\.?|à¸­\.?|à¸à¸¤\.?|à¸\.?|à¸¨\.?|à¸ª\.?)/i,
  short: /^(à¸­à¸²\.?|à¸\.?|à¸­\.?|à¸à¸¤\.?|à¸\.?|à¸¨\.?|à¸ª\.?)/i,
  abbreviated: /^(à¸­à¸²\.?|à¸\.?|à¸­\.?|à¸à¸¤\.?|à¸\.?|à¸¨\.?|à¸ª\.?)/i,
  wide: /^(à¸­à¸²à¸à¸´à¸à¸¢à¹|à¸à¸±à¸à¸à¸£à¹|à¸­à¸±à¸à¸à¸²à¸£|à¸à¸¸à¸|à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ|à¸¨à¸¸à¸à¸£à¹|à¹à¸ªà¸²à¸£à¹)/i,
};
const parseDayPatterns$9 = {
  wide: [/^à¸­à¸²/i, /^à¸à¸±/i, /^à¸­à¸±/i, /^à¸à¸¸à¸/i, /^à¸à¸¤/i, /^à¸¨/i, /^à¹à¸ª/i],
  any: [/^à¸­à¸²/i, /^à¸/i, /^à¸­/i, /^à¸(?!à¸¤)/i, /^à¸à¸¤/i, /^à¸¨/i, /^à¸ª/i],
};

const matchDayPeriodPatterns$9 = {
  any: /^(à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸|à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸|à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸|à¹à¸à¸µà¹à¸¢à¸|(à¸à¸­à¸.*?)?.*(à¹à¸à¸µà¹à¸¢à¸|à¹à¸à¹à¸²|à¸à¹à¸²à¸¢|à¹à¸¢à¹à¸|à¸à¸¥à¸²à¸à¸à¸·à¸))/i,
};
const parseDayPeriodPatterns$9 = {
  any: {
    am: /^à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸/i,
    pm: /^à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸/i,
    midnight: /^à¹à¸à¸µà¹à¸¢à¸à¸à¸·à¸/i,
    noon: /^à¹à¸à¸µà¹à¸¢à¸/i,
    morning: /à¹à¸à¹à¸²/i,
    afternoon: /à¸à¹à¸²à¸¢/i,
    evening: /à¹à¸¢à¹à¸/i,
    night: /à¸à¸¥à¸²à¸à¸à¸·à¸/i,
  },
};

(match$9.match = {
  ordinalNumber: (0, _index2$k.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$9,
    parsePattern: parseOrdinalNumberPattern$9,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$D.buildMatchFn)({
    matchPatterns: matchEraPatterns$9,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$9,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$D.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$9,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$9,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$D.buildMatchFn)({
    matchPatterns: matchMonthPatterns$9,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$9,
    defaultParseWidth: "any",
  }),

  day: (0, _index$D.buildMatchFn)({
    matchPatterns: matchDayPatterns$9,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$9,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$D.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$9,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$9,
    defaultParseWidth: "any",
  }),
});

th.th = void 0;
var _index$C = formatDistance$j;
var _index2$j = formatLong$9;
var _index3$9 = formatRelative$j;
var _index4$9 = localize$9;
var _index5$9 = match$9;

/**
 * @category Locales
 * @summary Thai locale.
 * @language Thai
 * @iso-639-2 tha
 * @author Athiwat Hirunworawongkun [@athivvat](https://github.com/athivvat)
 * @author [@hawkup](https://github.com/hawkup)
 * @author  Jirawat I. [@nodtem66](https://github.com/nodtem66)
 */
(th.th = {
  code: "th",
  formatDistance: _index$C.formatDistance,
  formatLong: _index2$j.formatLong,
  formatRelative: _index3$9.formatRelative,
  localize: _index4$9.localize,
  match: _index5$9.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var tr = {};

var formatDistance$h = {};

formatDistance$h.formatDistance = void 0;

const formatDistanceLocale$8 = {
  lessThanXSeconds: {
    one: "bir saniyeden az",
    other: "{{count}} saniyeden az",
  },

  xSeconds: {
    one: "1 saniye",
    other: "{{count}} saniye",
  },

  halfAMinute: "yarÄ±m dakika",

  lessThanXMinutes: {
    one: "bir dakikadan az",
    other: "{{count}} dakikadan az",
  },

  xMinutes: {
    one: "1 dakika",
    other: "{{count}} dakika",
  },

  aboutXHours: {
    one: "yaklaÅÄ±k 1 saat",
    other: "yaklaÅÄ±k {{count}} saat",
  },

  xHours: {
    one: "1 saat",
    other: "{{count}} saat",
  },

  xDays: {
    one: "1 gÃ¼n",
    other: "{{count}} gÃ¼n",
  },

  aboutXWeeks: {
    one: "yaklaÅÄ±k 1 hafta",
    other: "yaklaÅÄ±k {{count}} hafta",
  },

  xWeeks: {
    one: "1 hafta",
    other: "{{count}} hafta",
  },

  aboutXMonths: {
    one: "yaklaÅÄ±k 1 ay",
    other: "yaklaÅÄ±k {{count}} ay",
  },

  xMonths: {
    one: "1 ay",
    other: "{{count}} ay",
  },

  aboutXYears: {
    one: "yaklaÅÄ±k 1 yÄ±l",
    other: "yaklaÅÄ±k {{count}} yÄ±l",
  },

  xYears: {
    one: "1 yÄ±l",
    other: "{{count}} yÄ±l",
  },

  overXYears: {
    one: "1 yÄ±ldan fazla",
    other: "{{count}} yÄ±ldan fazla",
  },

  almostXYears: {
    one: "neredeyse 1 yÄ±l",
    other: "neredeyse {{count}} yÄ±l",
  },
};

const formatDistance$g = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$8[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " sonra";
    } else {
      return result + " Ã¶nce";
    }
  }

  return result;
};
formatDistance$h.formatDistance = formatDistance$g;

var formatLong$8 = {};

formatLong$8.formatLong = void 0;
var _index$B = buildFormatLongFn$1;

const dateFormats$8 = {
  full: "d MMMM y EEEE",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.yyyy",
};

const timeFormats$8 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$8 = {
  full: "{{date}} 'saat' {{time}}",
  long: "{{date}} 'saat' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$8.formatLong = {
  date: (0, _index$B.buildFormatLongFn)({
    formats: dateFormats$8,
    defaultWidth: "full",
  }),

  time: (0, _index$B.buildFormatLongFn)({
    formats: timeFormats$8,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$B.buildFormatLongFn)({
    formats: dateTimeFormats$8,
    defaultWidth: "full",
  }),
});

var formatRelative$h = {};

formatRelative$h.formatRelative = void 0;

const formatRelativeLocale$8 = {
  lastWeek: "'geÃ§en hafta' eeee 'saat' p",
  yesterday: "'dÃ¼n saat' p",
  today: "'bugÃ¼n saat' p",
  tomorrow: "'yarÄ±n saat' p",
  nextWeek: "eeee 'saat' p",
  other: "P",
};

const formatRelative$g = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$8[token];
formatRelative$h.formatRelative = formatRelative$g;

var localize$8 = {};

localize$8.localize = void 0;

var _index$A = buildLocalizeFn$1;

const eraValues$8 = {
  narrow: ["MÃ", "MS"],
  abbreviated: ["MÃ", "MS"],
  wide: ["Milattan Ãnce", "Milattan Sonra"],
};

const quarterValues$8 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1Ã", "2Ã", "3Ã", "4Ã"],
  wide: ["Ä°lk Ã§eyrek", "Ä°kinci Ãeyrek", "ÃÃ§Ã¼ncÃ¼ Ã§eyrek", "Son Ã§eyrek"],
};

const monthValues$8 = {
  narrow: ["O", "Å", "M", "N", "M", "H", "T", "A", "E", "E", "K", "A"],
  abbreviated: [
    "Oca",
    "Åub",
    "Mar",
    "Nis",
    "May",
    "Haz",
    "Tem",
    "AÄu",
    "Eyl",
    "Eki",
    "Kas",
    "Ara",
  ],

  wide: [
    "Ocak",
    "Åubat",
    "Mart",
    "Nisan",
    "MayÄ±s",
    "Haziran",
    "Temmuz",
    "AÄustos",
    "EylÃ¼l",
    "Ekim",
    "KasÄ±m",
    "AralÄ±k",
  ],
};

const dayValues$8 = {
  narrow: ["P", "P", "S", "Ã", "P", "C", "C"],
  short: ["Pz", "Pt", "Sa", "Ãa", "Pe", "Cu", "Ct"],
  abbreviated: ["Paz", "Pzt", "Sal", "Ãar", "Per", "Cum", "Cts"],
  wide: [
    "Pazar",
    "Pazartesi",
    "SalÄ±",
    "ÃarÅamba",
    "PerÅembe",
    "Cuma",
    "Cumartesi",
  ],
};

const dayPeriodValues$8 = {
  narrow: {
    am: "Ã¶Ã¶",
    pm: "Ã¶s",
    midnight: "gy",
    noon: "Ã¶",
    morning: "sa",
    afternoon: "Ã¶s",
    evening: "ak",
    night: "ge",
  },
  abbreviated: {
    am: "ÃÃ",
    pm: "ÃS",
    midnight: "gece yarÄ±sÄ±",
    noon: "Ã¶Äle",
    morning: "sabah",
    afternoon: "Ã¶Äleden sonra",
    evening: "akÅam",
    night: "gece",
  },
  wide: {
    am: "Ã.Ã.",
    pm: "Ã.S.",
    midnight: "gece yarÄ±sÄ±",
    noon: "Ã¶Äle",
    morning: "sabah",
    afternoon: "Ã¶Äleden sonra",
    evening: "akÅam",
    night: "gece",
  },
};

const formattingDayPeriodValues$8 = {
  narrow: {
    am: "Ã¶Ã¶",
    pm: "Ã¶s",
    midnight: "gy",
    noon: "Ã¶",
    morning: "sa",
    afternoon: "Ã¶s",
    evening: "ak",
    night: "ge",
  },
  abbreviated: {
    am: "ÃÃ",
    pm: "ÃS",
    midnight: "gece yarÄ±sÄ±",
    noon: "Ã¶Älen",
    morning: "sabahleyin",
    afternoon: "Ã¶Äleden sonra",
    evening: "akÅamleyin",
    night: "geceleyin",
  },
  wide: {
    am: "Ã¶.Ã¶.",
    pm: "Ã¶.s.",
    midnight: "gece yarÄ±sÄ±",
    noon: "Ã¶Älen",
    morning: "sabahleyin",
    afternoon: "Ã¶Äleden sonra",
    evening: "akÅamleyin",
    night: "geceleyin",
  },
};

const ordinalNumber$8 = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  return number + ".";
};

(localize$8.localize = {
  ordinalNumber: ordinalNumber$8,

  era: (0, _index$A.buildLocalizeFn)({
    values: eraValues$8,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$A.buildLocalizeFn)({
    values: quarterValues$8,
    defaultWidth: "wide",
    argumentCallback: (quarter) => Number(quarter) - 1,
  }),

  month: (0, _index$A.buildLocalizeFn)({
    values: monthValues$8,
    defaultWidth: "wide",
  }),

  day: (0, _index$A.buildLocalizeFn)({
    values: dayValues$8,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$A.buildLocalizeFn)({
    values: dayPeriodValues$8,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$8,
    defaultFormattingWidth: "wide",
  }),
});

var match$8 = {};

match$8.match = void 0;

var _index$z = buildMatchFn$1;
var _index2$i = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$8 = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern$8 = /\d+/i;

const matchEraPatterns$8 = {
  narrow: /^(mÃ¶|ms)/i,
  abbreviated: /^(mÃ¶|ms)/i,
  wide: /^(milattan Ã¶nce|milattan sonra)/i,
};
const parseEraPatterns$8 = {
  any: [/(^mÃ¶|^milattan Ã¶nce)/i, /(^ms|^milattan sonra)/i],
};

const matchQuarterPatterns$8 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]Ã§/i,
  wide: /^((i|Ä°)lk|(i|Ä°)kinci|Ã¼Ã§Ã¼ncÃ¼|son) Ã§eyrek/i,
};
const parseQuarterPatterns$8 = {
  any: [/1/i, /2/i, /3/i, /4/i],
  abbreviated: [/1Ã§/i, /2Ã§/i, /3Ã§/i, /4Ã§/i],
  wide: [
    /^(i|Ä°)lk Ã§eyrek/i,
    /(i|Ä°)kinci Ã§eyrek/i,
    /Ã¼Ã§Ã¼ncÃ¼ Ã§eyrek/i,
    /son Ã§eyrek/i,
  ],
};

const matchMonthPatterns$8 = {
  narrow: /^[oÅmnhtaek]/i,
  abbreviated: /^(oca|Åub|mar|nis|may|haz|tem|aÄu|eyl|eki|kas|ara)/i,
  wide: /^(ocak|Åubat|mart|nisan|mayÄ±s|haziran|temmuz|aÄustos|eylÃ¼l|ekim|kasÄ±m|aralÄ±k)/i,
};
const parseMonthPatterns$8 = {
  narrow: [
    /^o/i,
    /^Å/i,
    /^m/i,
    /^n/i,
    /^m/i,
    /^h/i,
    /^t/i,
    /^a/i,
    /^e/i,
    /^e/i,
    /^k/i,
    /^a/i,
  ],

  any: [
    /^o/i,
    /^Å/i,
    /^mar/i,
    /^n/i,
    /^may/i,
    /^h/i,
    /^t/i,
    /^aÄ/i,
    /^ey/i,
    /^ek/i,
    /^k/i,
    /^ar/i,
  ],
};

const matchDayPatterns$8 = {
  narrow: /^[psÃ§c]/i,
  short: /^(pz|pt|sa|Ã§a|pe|cu|ct)/i,
  abbreviated: /^(paz|pzt|sal|Ã§ar|per|cum|cts)/i,
  wide: /^(pazar(?!tesi)|pazartesi|salÄ±|Ã§arÅamba|perÅembe|cuma(?!rtesi)|cumartesi)/i,
};
const parseDayPatterns$8 = {
  narrow: [/^p/i, /^p/i, /^s/i, /^Ã§/i, /^p/i, /^c/i, /^c/i],
  any: [/^pz/i, /^pt/i, /^sa/i, /^Ã§a/i, /^pe/i, /^cu/i, /^ct/i],
  wide: [
    /^pazar(?!tesi)/i,
    /^pazartesi/i,
    /^salÄ±/i,
    /^Ã§arÅamba/i,
    /^perÅembe/i,
    /^cuma(?!rtesi)/i,
    /^cumartesi/i,
  ],
};

const matchDayPeriodPatterns$8 = {
  narrow: /^(Ã¶Ã¶|Ã¶s|gy|Ã¶|sa|Ã¶s|ak|ge)/i,
  any: /^(Ã¶\.?\s?[Ã¶s]\.?|Ã¶Äleden sonra|gece yarÄ±sÄ±|Ã¶Äle|(sabah|Ã¶Ä|akÅam|gece)(leyin))/i,
};
const parseDayPeriodPatterns$8 = {
  any: {
    am: /^Ã¶\.?Ã¶\.?/i,
    pm: /^Ã¶\.?s\.?/i,
    midnight: /^(gy|gece yarÄ±sÄ±)/i,
    noon: /^Ã¶Ä/i,
    morning: /^sa/i,
    afternoon: /^Ã¶Äleden sonra/i,
    evening: /^ak/i,
    night: /^ge/i,
  },
};

(match$8.match = {
  ordinalNumber: (0, _index2$i.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$8,
    parsePattern: parseOrdinalNumberPattern$8,
    valueCallback: function (value) {
      return parseInt(value, 10);
    },
  }),

  era: (0, _index$z.buildMatchFn)({
    matchPatterns: matchEraPatterns$8,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$8,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$z.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$8,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$8,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$z.buildMatchFn)({
    matchPatterns: matchMonthPatterns$8,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$8,
    defaultParseWidth: "any",
  }),

  day: (0, _index$z.buildMatchFn)({
    matchPatterns: matchDayPatterns$8,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$8,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$z.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$8,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$8,
    defaultParseWidth: "any",
  }),
});

tr.tr = void 0;
var _index$y = formatDistance$h;
var _index2$h = formatLong$8;
var _index3$8 = formatRelative$h;
var _index4$8 = localize$8;
var _index5$8 = match$8;

/**
 * @category Locales
 * @summary Turkish locale.
 * @language Turkish
 * @iso-639-2 tur
 * @author Alpcan AydÄ±n [@alpcanaydin](https://github.com/alpcanaydin)
 * @author Berkay SargÄ±n [@berkaey](https://github.com/berkaey)
 * @author Fatih Bulut [@bulutfatih](https://github.com/bulutfatih)
 * @author Ismail Demirbilek [@dbtek](https://github.com/dbtek)
 * @author Ä°smail Kayar [@ikayar](https://github.com/ikayar)
 *
 *
 */
(tr.tr = {
  code: "tr",
  formatDistance: _index$y.formatDistance,
  formatLong: _index2$h.formatLong,
  formatRelative: _index3$8.formatRelative,
  localize: _index4$8.localize,
  match: _index5$8.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var ug = {};

var formatDistance$f = {};

formatDistance$f.formatDistance = void 0;

const formatDistanceLocale$7 = {
  lessThanXSeconds: {
    one: "Ø¨ÙØ± Ø³ÙÙÛÙØª Ø¦ÙÚÙØ¯Û",
    other: "Ø³ÙÙÛÙØª Ø¦ÙÚÙØ¯Û {{count}}",
  },

  xSeconds: {
    one: "Ø¨ÙØ± Ø³ÙÙÛÙØª",
    other: "Ø³ÙÙÛÙØª {{count}}",
  },

  halfAMinute: "ÙÙØ±ÙÙ ÙÙÙÛØª",

  lessThanXMinutes: {
    one: "Ø¨ÙØ± ÙÙÙÛØª Ø¦ÙÚÙØ¯Û",
    other: "ÙÙÙÛØª Ø¦ÙÚÙØ¯Û {{count}}",
  },

  xMinutes: {
    one: "Ø¨ÙØ± ÙÙÙÛØª",
    other: "ÙÙÙÛØª {{count}}",
  },

  aboutXHours: {
    one: "ØªÛØ®ÙÙÙÛÙ Ø¨ÙØ± Ø³Ø§Ø¦ÛØª",
    other: "Ø³Ø§Ø¦ÛØª {{count}} ØªÛØ®ÙÙÙÛÙ",
  },

  xHours: {
    one: "Ø¨ÙØ± Ø³Ø§Ø¦ÛØª",
    other: "Ø³Ø§Ø¦ÛØª {{count}}",
  },

  xDays: {
    one: "Ø¨ÙØ± ÙÛÙ",
    other: "ÙÛÙ {{count}}",
  },

  aboutXWeeks: {
    one: "ØªÛØ®ÙÙÙÛÙ Ø¨ÙØ±Ú¾ÛÙ¾ØªÛ",
    other: "Ú¾ÛÙ¾ØªÛ {{count}} ØªÛØ®ÙÙÙÛÙ",
  },

  xWeeks: {
    one: "Ø¨ÙØ±Ú¾ÛÙ¾ØªÛ",
    other: "Ú¾ÛÙ¾ØªÛ {{count}}",
  },

  aboutXMonths: {
    one: "ØªÛØ®ÙÙÙÛÙ Ø¨ÙØ± Ø¦Ø§Ù",
    other: "Ø¦Ø§Ù {{count}} ØªÛØ®ÙÙÙÛÙ",
  },

  xMonths: {
    one: "Ø¨ÙØ± Ø¦Ø§Ù",
    other: "Ø¦Ø§Ù {{count}}",
  },

  aboutXYears: {
    one: "ØªÛØ®ÙÙÙÛÙ Ø¨ÙØ± ÙÙÙ",
    other: "ÙÙÙ {{count}} ØªÛØ®ÙÙÙÛÙ",
  },

  xYears: {
    one: "Ø¨ÙØ± ÙÙÙ",
    other: "ÙÙÙ {{count}}",
  },

  overXYears: {
    one: "Ø¨ÙØ± ÙÙÙØ¯ÙÙ Ø¦Ø§Ø±ØªÛÙ",
    other: "ÙÙÙØ¯ÙÙ Ø¦Ø§Ø±ØªÛÙ {{count}}",
  },

  almostXYears: {
    one: "Ø¦Ø§Ø³Ø§Ø³ÛÙ Ø¨ÙØ± ÙÙÙ",
    other: "ÙÙÙ {{count}} Ø¦Ø§Ø³Ø§Ø³ÛÙ",
  },
};

const formatDistance$e = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$7[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result;
    } else {
      return result + " Ø¨ÙÙØ¯Ù";
    }
  }

  return result;
};
formatDistance$f.formatDistance = formatDistance$e;

var formatLong$7 = {};

formatLong$7.formatLong = void 0;
var _index$x = buildFormatLongFn$1;

const dateFormats$7 = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats$7 = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats$7 = {
  full: "{{date}} 'Ø¯Û' {{time}}",
  long: "{{date}} 'Ø¯Û' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$7.formatLong = {
  date: (0, _index$x.buildFormatLongFn)({
    formats: dateFormats$7,
    defaultWidth: "full",
  }),

  time: (0, _index$x.buildFormatLongFn)({
    formats: timeFormats$7,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$x.buildFormatLongFn)({
    formats: dateTimeFormats$7,
    defaultWidth: "full",
  }),
});

var formatRelative$f = {};

formatRelative$f.formatRelative = void 0;

const formatRelativeLocale$7 = {
  lastWeek: "'Ø¦âÛØªÙÛÙ' eeee 'Ø¯Û' p",
  yesterday: "'ØªÛÙÛÚ¯ÛÙ Ø¯Û' p",
  today: "'Ø¨ÛÚ¯ÛÙ Ø¯Û' p",
  tomorrow: "'Ø¦ÛØªÛ Ø¯Û' p",
  nextWeek: "eeee 'Ø¯Û' p",
  other: "P",
};

const formatRelative$e = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$7[token];
formatRelative$f.formatRelative = formatRelative$e;

var localize$7 = {};

localize$7.localize = void 0;
var _index$w = buildLocalizeFn$1;

const eraValues$7 = {
  narrow: ["Ø¨", "Ù"],
  abbreviated: ["Ø¨", "Ù"],
  wide: ["ÙÙÙÙØ§Ø¯ÙØ¯ÙÙ Ø¨ÛØ±ÛÙ", "ÙÙÙÙØ§Ø¯ÙØ¯ÙÙ ÙÙÙÙÙ"],
};

const quarterValues$7 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1", "2", "3", "4"],
  wide: ["Ø¨ÙØ±ÙÙØ¬Ù ÚØ§Ø±ÛÙ", "Ø¦ÙÙÙÙÙØ¬Ù ÚØ§Ø±ÛÙ", "Ø¦ÛÚÙÙØ¬Ù ÚØ§Ø±ÛÙ", "ØªÛØªÙÙØ¬Ù ÚØ§Ø±ÛÙ"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$7 = {
  narrow: ["Ù", "Ù", "Ù", "Ø§", "Ù", "Ù", "Ù", "Ø§", "Ø³", "Û", "Ù", "Ø¯"],
  abbreviated: [
    "ÙØ§ÙÛØ§Ø±",
    "ÙÛÛÙØ±Ø§Ù",
    "ÙØ§Ø±Øª",
    "Ø¦Ø§Ù¾Ø±ÙÙ",
    "ÙØ§Ù",
    "Ø¦ÙÙÛÙ",
    "Ø¦ÙÙÙÙ",
    "Ø¦Ø§ÛØºÛØ³Øª",
    "Ø³ÙÙØªÛØ¨ÙØ±",
    "Ø¦ÛÙØªÛØ¨ÙØ±",
    "ÙÙÙØ§Ø¨ÙØ±",
    "Ø¯ÙÙØ§Ø¨ÙØ±",
  ],

  wide: [
    "ÙØ§ÙÛØ§Ø±",
    "ÙÛÛÙØ±Ø§Ù",
    "ÙØ§Ø±Øª",
    "Ø¦Ø§Ù¾Ø±ÙÙ",
    "ÙØ§Ù",
    "Ø¦ÙÙÛÙ",
    "Ø¦ÙÙÙÙ",
    "Ø¦Ø§ÛØºÛØ³Øª",
    "Ø³ÙÙØªÛØ¨ÙØ±",
    "Ø¦ÛÙØªÛØ¨ÙØ±",
    "ÙÙÙØ§Ø¨ÙØ±",
    "Ø¯ÙÙØ§Ø¨ÙØ±",
  ],
};

const dayValues$7 = {
  narrow: ["Ù", "Ø¯", "Ø³", "Ú", "Ù¾", "Ø¬", "Ø´"],
  short: ["Ù", "Ø¯", "Ø³", "Ú", "Ù¾", "Ø¬", "Ø´"],
  abbreviated: [
    "ÙÛÙØ´ÛÙØ¨Û",
    "Ø¯ÛØ´ÛÙØ¨Û",
    "Ø³ÛÙØ´ÛÙØ¨Û",
    "ÚØ§Ø±Ø´ÛÙØ¨Û",
    "Ù¾ÛÙØ´ÛÙØ¨Û",
    "Ø¬ÛÙÛ",
    "Ø´ÛÙØ¨Û",
  ],

  wide: [
    "ÙÛÙØ´ÛÙØ¨Û",
    "Ø¯ÛØ´ÛÙØ¨Û",
    "Ø³ÛÙØ´ÛÙØ¨Û",
    "ÚØ§Ø±Ø´ÛÙØ¨Û",
    "Ù¾ÛÙØ´ÛÙØ¨Û",
    "Ø¬ÛÙÛ",
    "Ø´ÛÙØ¨Û",
  ],
};

const dayPeriodValues$7 = {
  narrow: {
    am: "Ø¦Û",
    pm: "Ú",
    midnight: "Ù",
    noon: "Ú",
    morning: "Ø¦ÛØªÙÚ¯ÛÙ",
    afternoon: "ÚÛØ´ØªÙÙ ÙÙÙÙÙ",
    evening: "Ø¦Ø§Ø®Ø´ÙÙ",
    night: "ÙÙÚÛ",
  },
  abbreviated: {
    am: "Ø¦Û",
    pm: "Ú",
    midnight: "Ù",
    noon: "Ú",
    morning: "Ø¦ÛØªÙÚ¯ÛÙ",
    afternoon: "ÚÛØ´ØªÙÙ ÙÙÙÙÙ",
    evening: "Ø¦Ø§Ø®Ø´ÙÙ",
    night: "ÙÙÚÛ",
  },
  wide: {
    am: "Ø¦Û",
    pm: "Ú",
    midnight: "Ù",
    noon: "Ú",
    morning: "Ø¦ÛØªÙÚ¯ÛÙ",
    afternoon: "ÚÛØ´ØªÙÙ ÙÙÙÙÙ",
    evening: "Ø¦Ø§Ø®Ø´ÙÙ",
    night: "ÙÙÚÛ",
  },
};

const formattingDayPeriodValues$7 = {
  narrow: {
    am: "Ø¦Û",
    pm: "Ú",
    midnight: "Ù",
    noon: "Ú",
    morning: "Ø¦ÛØªÙÚ¯ÛÙØ¯Û",
    afternoon: "ÚÛØ´ØªÙÙ ÙÙÙÙÙ",
    evening: "Ø¦Ø§Ø®Ø´Ø§ÙØ¯Ø§",
    night: "ÙÙÚÙØ¯Û",
  },
  abbreviated: {
    am: "Ø¦Û",
    pm: "Ú",
    midnight: "Ù",
    noon: "Ú",
    morning: "Ø¦ÛØªÙÚ¯ÛÙØ¯Û",
    afternoon: "ÚÛØ´ØªÙÙ ÙÙÙÙÙ",
    evening: "Ø¦Ø§Ø®Ø´Ø§ÙØ¯Ø§",
    night: "ÙÙÚÙØ¯Û",
  },
  wide: {
    am: "Ø¦Û",
    pm: "Ú",
    midnight: "Ù",
    noon: "Ú",
    morning: "Ø¦ÛØªÙÚ¯ÛÙØ¯Û",
    afternoon: "ÚÛØ´ØªÙÙ ÙÙÙÙÙ",
    evening: "Ø¦Ø§Ø®Ø´Ø§ÙØ¯Ø§",
    night: "ÙÙÚÙØ¯Û",
  },
};

const ordinalNumber$7 = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$7.localize = {
  ordinalNumber: ordinalNumber$7,

  era: (0, _index$w.buildLocalizeFn)({
    values: eraValues$7,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$w.buildLocalizeFn)({
    values: quarterValues$7,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$w.buildLocalizeFn)({
    values: monthValues$7,
    defaultWidth: "wide",
  }),

  day: (0, _index$w.buildLocalizeFn)({
    values: dayValues$7,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$w.buildLocalizeFn)({
    values: dayPeriodValues$7,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$7,
    defaultFormattingWidth: "wide",
  }),
});

var match$7 = {};

match$7.match = void 0;

var _index$v = buildMatchFn$1;
var _index2$g = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$7 = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern$7 = /\d+/i;

const matchEraPatterns$7 = {
  narrow: /^(Ø¨|Ù)/i,
  wide: /^(ÙÙÙÙØ§Ø¯ÙØ¯ÙÙ Ø¨ÛØ±ÛÙ|ÙÙÙÙØ§Ø¯ÙØ¯ÙÙ ÙÙÙÙÙ)/i,
};
const parseEraPatterns$7 = {
  any: [/^Ø¨ÛØ±ÛÙ/i, /^ÙÙÙÙÙ/i],
};

const matchQuarterPatterns$7 = {
  narrow: /^[1234]/i,
  abbreviated: /^Ú[1234]/i,
  wide: /^ÚØ§Ø±ÛÙ [1234]/i,
};
const parseQuarterPatterns$7 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$7 = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[ÙÙÙØ¦Ø§ÙØ¦âØ¦Ø§Ø³ÛÙØ¯]/i,
  abbreviated:
    /^(ÙØ§ÙÛØ§Ø±|ÙÛÛÙØ±Ø§Ù|ÙØ§Ø±Øª|Ø¦Ø§Ù¾Ø±ÙÙ|ÙØ§Ù|Ø¦ÙÙÛÙ|Ø¦ÙÙÙÙ|Ø¦Ø§ÛØºÛØ³Øª|Ø³ÙÙØªÛØ¨ÙØ±|Ø¦ÛÙØªÛØ¨ÙØ±|ÙÙÙØ§Ø¨ÙØ±|Ø¯ÙÙØ§Ø¨ÙØ±)/i,
  wide: /^(ÙØ§ÙÛØ§Ø±|ÙÛÛÙØ±Ø§Ù|ÙØ§Ø±Øª|Ø¦Ø§Ù¾Ø±ÙÙ|ÙØ§Ù|Ø¦ÙÙÛÙ|Ø¦ÙÙÙÙ|Ø¦Ø§ÛØºÛØ³Øª|Ø³ÙÙØªÛØ¨ÙØ±|Ø¦ÛÙØªÛØ¨ÙØ±|ÙÙÙØ§Ø¨ÙØ±|Ø¯ÙÙØ§Ø¨ÙØ±)/i,
};
const parseMonthPatterns$7 = {
  narrow: [
    /^Ù/i,
    /^Ù/i,
    /^Ù/i,
    /^Ø§/i,
    /^Ù/i,
    /^Ùâ/i,
    /^Ùâ/i,
    /^Ø§â/i,
    /^Ø³/i,
    /^Û/i,
    /^Ù/i,
    /^Ø¯/i,
  ],

  any: [
    /^ÙØ§Ù/i,
    /^ÙÛÛ/i,
    /^ÙØ§Ø±/i,
    /^Ø¦Ø§Ù¾/i,
    /^ÙØ§Ù/i,
    /^Ø¦ÙÙÛÙ/i,
    /^Ø¦ÙÙÙÙ/i,
    /^Ø¦Ø§Û/i,
    /^Ø³ÙÙ/i,
    /^Ø¦ÛÙ/i,
    /^ÙÙÙ/i,
    /^Ø¯ÙÙ/i,
  ],
};

const matchDayPatterns$7 = {
  narrow: /^[Ø¯Ø³ÚÙ¾Ø¬Ø´Ù]/i,
  short: /^(ÙÛ|Ø¯Û|Ø³Û|ÚØ§|Ù¾Û|Ø¬Û|Ø´Û)/i,
  abbreviated: /^(ÙÛ|Ø¯Û|Ø³Û|ÚØ§|Ù¾Û|Ø¬Û|Ø´Û)/i,
  wide: /^(ÙÛÙØ´ÛÙØ¨Û|Ø¯ÛØ´ÛÙØ¨Û|Ø³ÛÙØ´ÛÙØ¨Û|ÚØ§Ø±Ø´ÛÙØ¨Û|Ù¾ÛÙØ´ÛÙØ¨Û|Ø¬ÛÙÛ|Ø´ÛÙØ¨Û)/i,
};
const parseDayPatterns$7 = {
  narrow: [/^Ù/i, /^Ø¯/i, /^Ø³/i, /^Ú/i, /^Ù¾/i, /^Ø¬/i, /^Ø´/i],
  any: [/^Ù/i, /^Ø¯/i, /^Ø³/i, /^Ú/i, /^Ù¾/i, /^Ø¬/i, /^Ø´/i],
};

const matchDayPeriodPatterns$7 = {
  narrow: /^(Ø¦Û|Ú|Ù|Ú|(Ø¯Û|Ø¦ÛØªÙÚ¯ÛÙ) ( Ø¦Ûâ|ÚÛØ´ØªÙÙ ÙÙÙÙÙ|Ø¦Ø§Ø®Ø´ÙÙ|ÙÙÚÛ))/i,
  any: /^(Ø¦Û|Ú|Ù|Ú|(Ø¯Û|Ø¦ÛØªÙÚ¯ÛÙ) ( Ø¦Ûâ|ÚÛØ´ØªÙÙ ÙÙÙÙÙ|Ø¦Ø§Ø®Ø´ÙÙ|ÙÙÚÛ))/i,
};
const parseDayPeriodPatterns$7 = {
  any: {
    am: /^Ø¦Û/i,
    pm: /^Ú/i,
    midnight: /^Ù/i,
    noon: /^Ú/i,
    morning: /Ø¦ÛØªÙÚ¯ÛÙ/i,
    afternoon: /ÚÛØ´ØªÙÙ ÙÙÙÙÙ/i,
    evening: /Ø¦Ø§Ø®Ø´ÙÙ/i,
    night: /ÙÙÚÛ/i,
  },
};

(match$7.match = {
  ordinalNumber: (0, _index2$g.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$7,
    parsePattern: parseOrdinalNumberPattern$7,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$v.buildMatchFn)({
    matchPatterns: matchEraPatterns$7,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$7,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$v.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$7,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$7,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$v.buildMatchFn)({
    matchPatterns: matchMonthPatterns$7,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$7,
    defaultParseWidth: "any",
  }),

  day: (0, _index$v.buildMatchFn)({
    matchPatterns: matchDayPatterns$7,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$7,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$v.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$7,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$7,
    defaultParseWidth: "any",
  }),
});

ug.ug = void 0;
var _index$u = formatDistance$f;
var _index2$f = formatLong$7;
var _index3$7 = formatRelative$f;
var _index4$7 = localize$7;
var _index5$7 = match$7;

/**
 * @category Locales
 * @summary Uighur locale
 * @language Uighur
 * @iso-639-2 uig
 * @author Abduwaly M. [@abduwaly](https://github.com/abduwaly)
 */
(ug.ug = {
  code: "ug",
  formatDistance: _index$u.formatDistance,
  formatLong: _index2$f.formatLong,
  formatRelative: _index3$7.formatRelative,
  localize: _index4$7.localize,
  match: _index5$7.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var uk = {};

var formatDistance$d = {};

formatDistance$d.formatDistance = void 0;

function declension(scheme, count) {
  // scheme for count=1 exists
  if (scheme.one !== undefined && count === 1) {
    return scheme.one;
  }

  const rem10 = count % 10;
  const rem100 = count % 100;

  // 1, 21, 31, ...
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));

    // 2, 3, 4, 22, 23, 24, 32 ...
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));

    // 5, 6, 7, 8, 9, 10, 11, ...
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}

function buildLocalizeTokenFn(scheme) {
  return (count, options) => {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension(scheme.future, count);
        } else {
          return "Ð·Ð° " + declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension(scheme.past, count);
        } else {
          return declension(scheme.regular, count) + " ÑÐ¾Ð¼Ñ";
        }
      }
    } else {
      return declension(scheme.regular, count);
    }
  };
}

const halfAtMinute = (_, options) => {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "Ð·Ð° Ð¿ÑÐ²ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸";
    } else {
      return "Ð¿ÑÐ²ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸ ÑÐ¾Ð¼Ñ";
    }
  }

  return "Ð¿ÑÐ²ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸";
};

const formatDistanceLocale$6 = {
  lessThanXSeconds: buildLocalizeTokenFn({
    regular: {
      one: "Ð¼ÐµÐ½ÑÐµ ÑÐµÐºÑÐ½Ð´Ð¸",
      singularNominative: "Ð¼ÐµÐ½ÑÐµ {{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
      singularGenitive: "Ð¼ÐµÐ½ÑÐµ {{count}} ÑÐµÐºÑÐ½Ð´",
      pluralGenitive: "Ð¼ÐµÐ½ÑÐµ {{count}} ÑÐµÐºÑÐ½Ð´",
    },
    future: {
      one: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° ÑÐµÐºÑÐ½Ð´Ñ",
      singularNominative: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
      pluralGenitive: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  xSeconds: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ð°",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´",
    },
    past: {
      singularNominative: "{{count}} ÑÐµÐºÑÐ½Ð´Ñ ÑÐ¾Ð¼Ñ",
      singularGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´Ð¸ ÑÐ¾Ð¼Ñ",
      pluralGenitive: "{{count}} ÑÐµÐºÑÐ½Ð´ ÑÐ¾Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ñ",
      singularGenitive: "Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´Ð¸",
      pluralGenitive: "Ð·Ð° {{count}} ÑÐµÐºÑÐ½Ð´",
    },
  }),

  halfAMinute: halfAtMinute,

  lessThanXMinutes: buildLocalizeTokenFn({
    regular: {
      one: "Ð¼ÐµÐ½ÑÐµ ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",
      singularNominative: "Ð¼ÐµÐ½ÑÐµ {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",
      singularGenitive: "Ð¼ÐµÐ½ÑÐµ {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½",
      pluralGenitive: "Ð¼ÐµÐ½ÑÐµ {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½",
    },
    future: {
      one: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° ÑÐ²Ð¸Ð»Ð¸Ð½Ñ",
      singularNominative: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ñ",
      singularGenitive: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",
      pluralGenitive: "Ð¼ÐµÐ½ÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½",
    },
  }),

  xMinutes: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ð°",
      singularGenitive: "{{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",
      pluralGenitive: "{{count}} ÑÐ²Ð¸Ð»Ð¸Ð½",
    },
    past: {
      singularNominative: "{{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ñ ÑÐ¾Ð¼Ñ",
      singularGenitive: "{{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸ ÑÐ¾Ð¼Ñ",
      pluralGenitive: "{{count}} ÑÐ²Ð¸Ð»Ð¸Ð½ ÑÐ¾Ð¼Ñ",
    },
    future: {
      singularNominative: "Ð·Ð° {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ñ",
      singularGenitive: "Ð·Ð° {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸",
      pluralGenitive: "Ð·Ð° {{count}} ÑÐ²Ð¸Ð»Ð¸Ð½",
    },
  }),

  aboutXHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
      singularGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½",
      pluralGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} Ð³Ð¾Ð´Ð¸Ð½",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} Ð³Ð¾Ð´Ð¸Ð½Ñ",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} Ð³Ð¾Ð´Ð¸Ð½",
    },
  }),

  xHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} Ð³Ð¾Ð´Ð¸Ð½Ñ",
      singularGenitive: "{{count}} Ð³Ð¾Ð´Ð¸Ð½Ð¸",
      pluralGenitive: "{{count}} Ð³Ð¾Ð´Ð¸Ð½",
    },
  }),

  xDays: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} Ð´ÐµÐ½Ñ",
      singularGenitive: "{{count}} Ð´Ð½i",
      pluralGenitive: "{{count}} Ð´Ð½ÑÐ²",
    },
  }),

  aboutXWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} ÑÐ¸Ð¶Ð½Ñ",
      singularGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} ÑÐ¸Ð¶Ð½ÑÐ²",
      pluralGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} ÑÐ¸Ð¶Ð½ÑÐ²",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} ÑÐ¸Ð¶Ð´ÐµÐ½Ñ",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} ÑÐ¸Ð¶Ð½Ñ",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} ÑÐ¸Ð¶Ð½ÑÐ²",
    },
  }),

  xWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} ÑÐ¸Ð¶Ð´ÐµÐ½Ñ",
      singularGenitive: "{{count}} ÑÐ¸Ð¶Ð½Ñ",
      pluralGenitive: "{{count}} ÑÐ¸Ð¶Ð½ÑÐ²",
    },
  }),

  aboutXMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} Ð¼ÑÑÑÑÑ",
      singularGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} Ð¼ÑÑÑÑÑÐ²",
      pluralGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} Ð¼ÑÑÑÑÑÐ²",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} Ð¼ÑÑÑÑÑ",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} Ð¼ÑÑÑÑÑ",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} Ð¼ÑÑÑÑÑÐ²",
    },
  }),

  xMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} Ð¼ÑÑÑÑÑ",
      singularGenitive: "{{count}} Ð¼ÑÑÑÑÑ",
      pluralGenitive: "{{count}} Ð¼ÑÑÑÑÑÐ²",
    },
  }),

  aboutXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} ÑÐ¾ÐºÑ",
      singularGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} ÑÐ¾ÐºÑÐ²",
      pluralGenitive: "Ð±Ð»Ð¸Ð·ÑÐºÐ¾ {{count}} ÑÐ¾ÐºÑÐ²",
    },
    future: {
      singularNominative: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} ÑÑÐº",
      singularGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} ÑÐ¾ÐºÐ¸",
      pluralGenitive: "Ð¿ÑÐ¸Ð±Ð»Ð¸Ð·Ð½Ð¾ Ð·Ð° {{count}} ÑÐ¾ÐºÑÐ²",
    },
  }),

  xYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} ÑÑÐº",
      singularGenitive: "{{count}} ÑÐ¾ÐºÐ¸",
      pluralGenitive: "{{count}} ÑÐ¾ÐºÑÐ²",
    },
  }),

  overXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "Ð±ÑÐ»ÑÑÐµ {{count}} ÑÐ¾ÐºÑ",
      singularGenitive: "Ð±ÑÐ»ÑÑÐµ {{count}} ÑÐ¾ÐºÑÐ²",
      pluralGenitive: "Ð±ÑÐ»ÑÑÐµ {{count}} ÑÐ¾ÐºÑÐ²",
    },
    future: {
      singularNominative: "Ð±ÑÐ»ÑÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÑÐº",
      singularGenitive: "Ð±ÑÐ»ÑÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐ¾ÐºÐ¸",
      pluralGenitive: "Ð±ÑÐ»ÑÑÐµ, Ð½ÑÐ¶ Ð·Ð° {{count}} ÑÐ¾ÐºÑÐ²",
    },
  }),

  almostXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "Ð¼Ð°Ð¹Ð¶Ðµ {{count}} ÑÑÐº",
      singularGenitive: "Ð¼Ð°Ð¹Ð¶Ðµ {{count}} ÑÐ¾ÐºÐ¸",
      pluralGenitive: "Ð¼Ð°Ð¹Ð¶Ðµ {{count}} ÑÐ¾ÐºÑÐ²",
    },
    future: {
      singularNominative: "Ð¼Ð°Ð¹Ð¶Ðµ Ð·Ð° {{count}} ÑÑÐº",
      singularGenitive: "Ð¼Ð°Ð¹Ð¶Ðµ Ð·Ð° {{count}} ÑÐ¾ÐºÐ¸",
      pluralGenitive: "Ð¼Ð°Ð¹Ð¶Ðµ Ð·Ð° {{count}} ÑÐ¾ÐºÑÐ²",
    },
  }),
};

const formatDistance$c = (token, count, options) => {
  options = options || {};

  return formatDistanceLocale$6[token](count, options);
};
formatDistance$d.formatDistance = formatDistance$c;

var formatLong$6 = {};

formatLong$6.formatLong = void 0;
var _index$t = buildFormatLongFn$1;

const dateFormats$6 = {
  full: "EEEE, do MMMM y 'Ñ.'",
  long: "do MMMM y 'Ñ.'",
  medium: "d MMM y 'Ñ.'",
  short: "dd.MM.y",
};

const timeFormats$6 = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$6 = {
  full: "{{date}} 'Ð¾' {{time}}",
  long: "{{date}} 'Ð¾' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

(formatLong$6.formatLong = {
  date: (0, _index$t.buildFormatLongFn)({
    formats: dateFormats$6,
    defaultWidth: "full",
  }),

  time: (0, _index$t.buildFormatLongFn)({
    formats: timeFormats$6,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$t.buildFormatLongFn)({
    formats: dateTimeFormats$6,
    defaultWidth: "full",
  }),
});

var formatRelative$d = {};

formatRelative$d.formatRelative = void 0;
var _index$s = isSameWeek$1;
var _index2$e = toDate$1;

const accusativeWeekdays = [
  "Ð½ÐµÐ´ÑÐ»Ñ",
  "Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº",
  "Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº",
  "ÑÐµÑÐµÐ´Ñ",
  "ÑÐµÑÐ²ÐµÑ",
  "Ð¿âÑÑÐ½Ð¸ÑÑ",
  "ÑÑÐ±Ð¾ÑÑ",
];

function lastWeek(day) {
  const weekday = accusativeWeekdays[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'Ñ Ð¼Ð¸Ð½ÑÐ»Ñ " + weekday + " Ð¾' p";
    case 1:
    case 2:
    case 4:
      return "'Ñ Ð¼Ð¸Ð½ÑÐ»Ð¸Ð¹ " + weekday + " Ð¾' p";
  }
}

function thisWeek(day) {
  const weekday = accusativeWeekdays[day];

  return "'Ñ " + weekday + " Ð¾' p";
}

function nextWeek(day) {
  const weekday = accusativeWeekdays[day];

  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ñ " + weekday + " Ð¾' p";
    case 1:
    case 2:
    case 4:
      return "'Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ð¹ " + weekday + " Ð¾' p";
  }
}

const lastWeekFormat = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$e.toDate)(dirtyDate);
  const day = date.getDay();

  if ((0, _index$s.isSameWeek)(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return lastWeek(day);
  }
};

const nextWeekFormat = (dirtyDate, baseDate, options) => {
  const date = (0, _index2$e.toDate)(dirtyDate);
  const day = date.getDay();
  if ((0, _index$s.isSameWeek)(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return nextWeek(day);
  }
};

const formatRelativeLocale$6 = {
  lastWeek: lastWeekFormat,
  yesterday: "'Ð²ÑÐ¾ÑÐ° Ð¾' p",
  today: "'ÑÑÐ¾Ð³Ð¾Ð´Ð½Ñ Ð¾' p",
  tomorrow: "'Ð·Ð°Ð²ÑÑÐ° Ð¾' p",
  nextWeek: nextWeekFormat,
  other: "P",
};

const formatRelative$c = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$6[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$d.formatRelative = formatRelative$c;

var localize$6 = {};

localize$6.localize = void 0;
var _index$r = buildLocalizeFn$1;

const eraValues$6 = {
  narrow: ["Ð´Ð¾ Ð½.Ðµ.", "Ð½.Ðµ."],
  abbreviated: ["Ð´Ð¾ Ð½. Ðµ.", "Ð½. Ðµ."],
  wide: ["Ð´Ð¾ Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸", "Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸"],
};

const quarterValues$6 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-Ð¹ ÐºÐ².", "2-Ð¹ ÐºÐ².", "3-Ð¹ ÐºÐ².", "4-Ð¹ ÐºÐ²."],
  wide: ["1-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»", "2-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»", "3-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»", "4-Ð¹ ÐºÐ²Ð°ÑÑÐ°Ð»"],
};

const monthValues$6 = {
  // ÐÐ¡Ð¢Ð£ 3582:2013
  narrow: ["Ð¡", "Ð", "Ð", "Ð", "Ð¢", "Ð§", "Ð", "Ð¡", "Ð", "Ð", "Ð", "Ð"],
  abbreviated: [
    "ÑÑÑ.",
    "Ð»ÑÑ.",
    "Ð±ÐµÑÐµÐ·.",
    "ÐºÐ²ÑÑ.",
    "ÑÑÐ°Ð².",
    "ÑÐµÑÐ².",
    "Ð»Ð¸Ð¿.",
    "ÑÐµÑÐ¿.",
    "Ð²ÐµÑÐµÑ.",
    "Ð¶Ð¾Ð²Ñ.",
    "Ð»Ð¸ÑÑÐ¾Ð¿.",
    "Ð³ÑÑÐ´.",
  ],

  wide: [
    "ÑÑÑÐµÐ½Ñ",
    "Ð»ÑÑÐ¸Ð¹",
    "Ð±ÐµÑÐµÐ·ÐµÐ½Ñ",
    "ÐºÐ²ÑÑÐµÐ½Ñ",
    "ÑÑÐ°Ð²ÐµÐ½Ñ",
    "ÑÐµÑÐ²ÐµÐ½Ñ",
    "Ð»Ð¸Ð¿ÐµÐ½Ñ",
    "ÑÐµÑÐ¿ÐµÐ½Ñ",
    "Ð²ÐµÑÐµÑÐµÐ½Ñ",
    "Ð¶Ð¾Ð²ÑÐµÐ½Ñ",
    "Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´",
    "Ð³ÑÑÐ´ÐµÐ½Ñ",
  ],
};

const formattingMonthValues$1 = {
  narrow: ["Ð¡", "Ð", "Ð", "Ð", "Ð¢", "Ð§", "Ð", "Ð¡", "Ð", "Ð", "Ð", "Ð"],
  abbreviated: [
    "ÑÑÑ.",
    "Ð»ÑÑ.",
    "Ð±ÐµÑÐµÐ·.",
    "ÐºÐ²ÑÑ.",
    "ÑÑÐ°Ð².",
    "ÑÐµÑÐ².",
    "Ð»Ð¸Ð¿.",
    "ÑÐµÑÐ¿.",
    "Ð²ÐµÑÐµÑ.",
    "Ð¶Ð¾Ð²Ñ.",
    "Ð»Ð¸ÑÑÐ¾Ð¿.",
    "Ð³ÑÑÐ´.",
  ],

  wide: [
    "ÑÑÑÐ½Ñ",
    "Ð»ÑÑÐ¾Ð³Ð¾",
    "Ð±ÐµÑÐµÐ·Ð½Ñ",
    "ÐºÐ²ÑÑÐ½Ñ",
    "ÑÑÐ°Ð²Ð½Ñ",
    "ÑÐµÑÐ²Ð½Ñ",
    "Ð»Ð¸Ð¿Ð½Ñ",
    "ÑÐµÑÐ¿Ð½Ñ",
    "Ð²ÐµÑÐµÑÐ½Ñ",
    "Ð¶Ð¾Ð²ÑÐ½Ñ",
    "Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°",
    "Ð³ÑÑÐ´Ð½Ñ",
  ],
};

const dayValues$6 = {
  narrow: ["Ð", "Ð", "Ð", "Ð¡", "Ð§", "Ð", "Ð¡"],
  short: ["Ð½Ð´", "Ð¿Ð½", "Ð²Ñ", "ÑÑ", "ÑÑ", "Ð¿Ñ", "ÑÐ±"],
  abbreviated: ["Ð½ÐµÐ´", "Ð¿Ð¾Ð½", "Ð²ÑÐ²", "ÑÐµÑ", "ÑÑÐ²", "Ð¿ÑÐ½", "ÑÑÐ±"],
  wide: [
    "Ð½ÐµÐ´ÑÐ»Ñ",
    "Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº",
    "Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº",
    "ÑÐµÑÐµÐ´Ð°",
    "ÑÐµÑÐ²ÐµÑ",
    "Ð¿âÑÑÐ½Ð¸ÑÑ",
    "ÑÑÐ±Ð¾ÑÐ°",
  ],
};

const dayPeriodValues$6 = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿ÑÐ²Ð½.",
    noon: "Ð¿Ð¾Ð».",
    morning: "ÑÐ°Ð½Ð¾Ðº",
    afternoon: "Ð´ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½ÑÑ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿ÑÐ²Ð½.",
    noon: "Ð¿Ð¾Ð».",
    morning: "ÑÐ°Ð½Ð¾Ðº",
    afternoon: "Ð´ÐµÐ½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½ÑÑ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿ÑÐ²Ð½ÑÑ",
    noon: "Ð¿Ð¾Ð»ÑÐ´ÐµÐ½Ñ",
    morning: "ÑÐ°Ð½Ð¾Ðº",
    afternoon: "Ð´ÐµÐ½Ñ",
    evening: "Ð²ÐµÑÑÑ",
    night: "Ð½ÑÑ",
  },
};

const formattingDayPeriodValues$6 = {
  narrow: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿ÑÐ²Ð½.",
    noon: "Ð¿Ð¾Ð».",
    morning: "ÑÐ°Ð½ÐºÑ",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  abbreviated: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿ÑÐ²Ð½.",
    noon: "Ð¿Ð¾Ð».",
    morning: "ÑÐ°Ð½ÐºÑ",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
  wide: {
    am: "ÐÐ",
    pm: "ÐÐ",
    midnight: "Ð¿ÑÐ²Ð½ÑÑ",
    noon: "Ð¿Ð¾Ð»ÑÐ´ÐµÐ½Ñ",
    morning: "ÑÐ°Ð½ÐºÑ",
    afternoon: "Ð´Ð½Ñ",
    evening: "Ð²ÐµÑ.",
    night: "Ð½Ð¾ÑÑ",
  },
};

const ordinalNumber$6 = (dirtyNumber, options) => {
  const unit = String(options?.unit);
  const number = Number(dirtyNumber);
  let suffix;

  if (unit === "date") {
    if (number === 3 || number === 23) {
      suffix = "-Ñ";
    } else {
      suffix = "-Ðµ";
    }
  } else if (unit === "minute" || unit === "second" || unit === "hour") {
    suffix = "-Ð°";
  } else {
    suffix = "-Ð¹";
  }

  return number + suffix;
};

(localize$6.localize = {
  ordinalNumber: ordinalNumber$6,

  era: (0, _index$r.buildLocalizeFn)({
    values: eraValues$6,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$r.buildLocalizeFn)({
    values: quarterValues$6,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$r.buildLocalizeFn)({
    values: monthValues$6,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues$1,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$r.buildLocalizeFn)({
    values: dayValues$6,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$r.buildLocalizeFn)({
    values: dayPeriodValues$6,
    defaultWidth: "any",
    formattingValues: formattingDayPeriodValues$6,
    defaultFormattingWidth: "wide",
  }),
});

var match$6 = {};

match$6.match = void 0;

var _index$q = buildMatchFn$1;
var _index2$d = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$6 = /^(\d+)(-?(Ðµ|Ð¹|Ñ|Ð°|Ñ))?/i;
const parseOrdinalNumberPattern$6 = /\d+/i;

const matchEraPatterns$6 = {
  narrow: /^((Ð´Ð¾ )?Ð½\.?\s?Ðµ\.?)/i,
  abbreviated: /^((Ð´Ð¾ )?Ð½\.?\s?Ðµ\.?)/i,
  wide: /^(Ð´Ð¾ Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸|Ð½Ð°ÑÐ¾Ñ ÐµÑÐ¸|Ð½Ð°ÑÐ° ÐµÑÐ°)/i,
};

const parseEraPatterns$6 = {
  any: [/^Ð´/i, /^Ð½/i],
};

const matchQuarterPatterns$6 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[Ð¸Ñ]?Ð¹?)? ÐºÐ².?/i,
  wide: /^[1234](-?[Ð¸Ñ]?Ð¹?)? ÐºÐ²Ð°ÑÑÐ°Ð»/i,
};

const parseQuarterPatterns$6 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$6 = {
  narrow: /^[ÑÐ»Ð±ÐºÑÑÐ²Ð¶Ð³]/i,
  abbreviated:
    /^(ÑÑÑ|Ð»ÑÑ|Ð±ÐµÑ(ÐµÐ·)?|ÐºÐ²ÑÑ|ÑÑÐ°Ð²|ÑÐµÑÐ²|Ð»Ð¸Ð¿|ÑÐµÑÐ¿|Ð²ÐµÑ(ÐµÑ)?|Ð¶Ð¾Ð²Ñ|Ð»Ð¸Ñ(ÑÐ¾Ð¿)?|Ð³ÑÑÐ´)\.?/i,
  wide: /^(ÑÑÑÐµÐ½Ñ|ÑÑÑÐ½Ñ|Ð»ÑÑÐ¸Ð¹|Ð»ÑÑÐ¾Ð³Ð¾|Ð±ÐµÑÐµÐ·ÐµÐ½Ñ|Ð±ÐµÑÐµÐ·Ð½Ñ|ÐºÐ²ÑÑÐµÐ½Ñ|ÐºÐ²ÑÑÐ½Ñ|ÑÑÐ°Ð²ÐµÐ½Ñ|ÑÑÐ°Ð²Ð½Ñ|ÑÐµÑÐ²Ð½Ñ|ÑÐµÑÐ²ÐµÐ½Ñ|Ð»Ð¸Ð¿ÐµÐ½Ñ|Ð»Ð¸Ð¿Ð½Ñ|ÑÐµÑÐ¿ÐµÐ½Ñ|ÑÐµÑÐ¿Ð½Ñ|Ð²ÐµÑÐµÑÐµÐ½Ñ|Ð²ÐµÑÐµÑÐ½Ñ|Ð¶Ð¾Ð²ÑÐµÐ½Ñ|Ð¶Ð¾Ð²ÑÐ½Ñ|Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´[Ð°]?|Ð³ÑÑÐ´ÐµÐ½Ñ|Ð³ÑÑÐ´Ð½Ñ)/i,
};

const parseMonthPatterns$6 = {
  narrow: [
    /^Ñ/i,
    /^Ð»/i,
    /^Ð±/i,
    /^Ðº/i,
    /^Ñ/i,
    /^Ñ/i,
    /^Ð»/i,
    /^Ñ/i,
    /^Ð²/i,
    /^Ð¶/i,
    /^Ð»/i,
    /^Ð³/i,
  ],

  any: [
    /^ÑÑ/i,
    /^Ð»Ñ/i,
    /^Ð±/i,
    /^Ðº/i,
    /^Ñ/i,
    /^Ñ/i,
    /^Ð»Ð¸Ð¿/i,
    /^ÑÐµ/i,
    /^Ð²/i,
    /^Ð¶/i,
    /^Ð»Ð¸Ñ/i,
    /^Ð³/i,
  ],
};

const matchDayPatterns$6 = {
  narrow: /^[Ð½Ð¿Ð²ÑÑ]/i,
  short: /^(Ð½Ð´|Ð¿Ð½|Ð²Ñ|ÑÑ|ÑÑ|Ð¿Ñ|ÑÐ±)\.?/i,
  abbreviated: /^(Ð½ÐµÐ´|Ð¿Ð¾Ð½|Ð²ÑÐ²|ÑÐµÑ|ÑÐµ?ÑÐ²|Ð¿ÑÐ½?|ÑÑÐ±)\.?/i,
  wide: /^(Ð½ÐµÐ´ÑÐ»[ÑÑ]|Ð¿Ð¾Ð½ÐµÐ´ÑÐ»[Ð¾Ðº][ÐºÐ°]|Ð²ÑÐ²ÑÐ¾Ñ[Ð¾Ðº][ÐºÐ°]|ÑÐµÑÐµÐ´[Ð°Ð¸]|ÑÐµÑÐ²ÐµÑ(Ð³Ð°)?|Ð¿\W*?ÑÑÐ½Ð¸Ñ[ÑÑ]|ÑÑÐ±Ð¾Ñ[Ð°Ð¸])/i,
};

const parseDayPatterns$6 = {
  narrow: [/^Ð½/i, /^Ð¿/i, /^Ð²/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ñ/i],
  any: [/^Ð½/i, /^Ð¿[Ð¾Ð½]/i, /^Ð²/i, /^Ñ[ÐµÑ]/i, /^Ñ/i, /^Ð¿\W*?[ÑÑ]/i, /^Ñ[ÑÐ±]/i],
};

const matchDayPeriodPatterns$6 = {
  narrow: /^([Ð´Ð¿]Ð¿|Ð¿ÑÐ²Ð½\.?|Ð¿Ð¾Ð»\.?|ÑÐ°Ð½Ð¾Ðº|ÑÐ°Ð½ÐºÑ|Ð´ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½ÑÑ|Ð½Ð¾ÑÑ)/i,
  abbreviated: /^([Ð´Ð¿]Ð¿|Ð¿ÑÐ²Ð½\.?|Ð¿Ð¾Ð»\.?|ÑÐ°Ð½Ð¾Ðº|ÑÐ°Ð½ÐºÑ|Ð´ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑ\.?|Ð½ÑÑ|Ð½Ð¾ÑÑ)/i,
  wide: /^([Ð´Ð¿]Ð¿|Ð¿ÑÐ²Ð½ÑÑ|Ð¿Ð¾Ð»ÑÐ´ÐµÐ½Ñ|ÑÐ°Ð½Ð¾Ðº|ÑÐ°Ð½ÐºÑ|Ð´ÐµÐ½Ñ|Ð´Ð½Ñ|Ð²ÐµÑÑÑ|Ð²ÐµÑÐ¾ÑÐ°|Ð½ÑÑ|Ð½Ð¾ÑÑ)/i,
};

const parseDayPeriodPatterns$6 = {
  any: {
    am: /^Ð´Ð¿/i,
    pm: /^Ð¿Ð¿/i,
    midnight: /^Ð¿ÑÐ²Ð½/i,
    noon: /^Ð¿Ð¾Ð»/i,
    morning: /^Ñ/i,
    afternoon: /^Ð´[ÐµÐ½]/i,
    evening: /^Ð²/i,
    night: /^Ð½/i,
  },
};

(match$6.match = {
  ordinalNumber: (0, _index2$d.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$6,
    parsePattern: parseOrdinalNumberPattern$6,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$q.buildMatchFn)({
    matchPatterns: matchEraPatterns$6,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$6,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$q.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$6,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$6,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$q.buildMatchFn)({
    matchPatterns: matchMonthPatterns$6,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$6,
    defaultParseWidth: "any",
  }),

  day: (0, _index$q.buildMatchFn)({
    matchPatterns: matchDayPatterns$6,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$6,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$q.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$6,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$6,
    defaultParseWidth: "any",
  }),
});

uk.uk = void 0;
var _index$p = formatDistance$d;
var _index2$c = formatLong$6;
var _index3$6 = formatRelative$d;
var _index4$6 = localize$6;
var _index5$6 = match$6;

/**
 * @category Locales
 * @summary Ukrainian locale.
 * @language Ukrainian
 * @iso-639-2 ukr
 * @author Andrii Korzh [@korzhyk](https://github.com/korzhyk)
 * @author Andriy Shcherbyak [@shcherbyakdev](https://github.com/shcherbyakdev)
 */
(uk.uk = {
  code: "uk",
  formatDistance: _index$p.formatDistance,
  formatLong: _index2$c.formatLong,
  formatRelative: _index3$6.formatRelative,
  localize: _index4$6.localize,
  match: _index5$6.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var uz = {};

var formatDistance$b = {};

formatDistance$b.formatDistance = void 0;

const formatDistanceLocale$5 = {
  lessThanXSeconds: {
    one: "sekunddan kam",
    other: "{{count}} sekunddan kam",
  },

  xSeconds: {
    one: "1 sekund",
    other: "{{count}} sekund",
  },

  halfAMinute: "yarim minut",

  lessThanXMinutes: {
    one: "bir minutdan kam",
    other: "{{count}} minutdan kam",
  },

  xMinutes: {
    one: "1 minut",
    other: "{{count}} minut",
  },

  aboutXHours: {
    one: "tahminan 1 soat",
    other: "tahminan {{count}} soat",
  },

  xHours: {
    one: "1 soat",
    other: "{{count}} soat",
  },

  xDays: {
    one: "1 kun",
    other: "{{count}} kun",
  },

  aboutXWeeks: {
    one: "tahminan 1 hafta",
    other: "tahminan {{count}} hafta",
  },

  xWeeks: {
    one: "1 hafta",
    other: "{{count}} hafta",
  },

  aboutXMonths: {
    one: "tahminan 1 oy",
    other: "tahminan {{count}} oy",
  },

  xMonths: {
    one: "1 oy",
    other: "{{count}} oy",
  },

  aboutXYears: {
    one: "tahminan 1 yil",
    other: "tahminan {{count}} yil",
  },

  xYears: {
    one: "1 yil",
    other: "{{count}} yil",
  },

  overXYears: {
    one: "1 yildan ko'p",
    other: "{{count}} yildan ko'p",
  },

  almostXYears: {
    one: "deyarli 1 yil",
    other: "deyarli {{count}} yil",
  },
};

const formatDistance$a = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$5[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " dan keyin";
    } else {
      return result + " oldin";
    }
  }

  return result;
};
formatDistance$b.formatDistance = formatDistance$a;

var formatLong$5 = {};

formatLong$5.formatLong = void 0;
var _index$o = buildFormatLongFn$1;

const dateFormats$5 = {
  full: "EEEE, do MMMM, y",
  long: "do MMMM, y",
  medium: "d MMM, y",
  short: "dd/MM/yyyy",
};

const timeFormats$5 = {
  full: "h:mm:ss zzzz",
  long: "h:mm:ss z",
  medium: "h:mm:ss",
  short: "h:mm",
};

const dateTimeFormats$5 = {
  any: "{{date}}, {{time}}",
};

(formatLong$5.formatLong = {
  date: (0, _index$o.buildFormatLongFn)({
    formats: dateFormats$5,
    defaultWidth: "full",
  }),

  time: (0, _index$o.buildFormatLongFn)({
    formats: timeFormats$5,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$o.buildFormatLongFn)({
    formats: dateTimeFormats$5,
    defaultWidth: "any",
  }),
});

var formatRelative$b = {};

formatRelative$b.formatRelative = void 0;

const formatRelativeLocale$5 = {
  lastWeek: "'oldingi' eeee p 'da'",
  yesterday: "'kecha' p 'da'",
  today: "'bugun' p 'da'",
  tomorrow: "'ertaga' p 'da'",
  nextWeek: "eeee p 'da'",
  other: "P",
};

const formatRelative$a = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$5[token];
formatRelative$b.formatRelative = formatRelative$a;

var localize$5 = {};

localize$5.localize = void 0;
var _index$n = buildLocalizeFn$1;

const eraValues$5 = {
  narrow: ["M.A", "M."],
  abbreviated: ["M.A", "M."],
  wide: ["Miloddan Avvalgi", "Milodiy"],
};

const quarterValues$5 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["CH.1", "CH.2", "CH.3", "CH.4"],
  wide: ["1-chi chorak", "2-chi chorak", "3-chi chorak", "4-chi chorak"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$5 = {
  narrow: ["Y", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Yan",
    "Fev",
    "Mar",
    "Apr",
    "May",
    "Iyun",
    "Iyul",
    "Avg",
    "Sen",
    "Okt",
    "Noy",
    "Dek",
  ],

  wide: [
    "Yanvar",
    "Fevral",
    "Mart",
    "Aprel",
    "May",
    "Iyun",
    "Iyul",
    "Avgust",
    "Sentabr",
    "Oktabr",
    "Noyabr",
    "Dekabr",
  ],
};

const dayValues$5 = {
  narrow: ["Y", "D", "S", "CH", "P", "J", "SH"],
  short: ["Ya", "Du", "Se", "Cho", "Pa", "Ju", "Sha"],
  abbreviated: ["Yak", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"],
  wide: [
    "Yakshanba",
    "Dushanba",
    "Seshanba",
    "Chorshanba",
    "Payshanba",
    "Juma",
    "Shanba",
  ],
};

const dayPeriodValues$5 = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "y.t",
    noon: "p.",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun",
  },
};

const formattingDayPeriodValues$5 = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "y.t",
    noon: "p.",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun",
  },
};

const ordinalNumber$5 = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$5.localize = {
  ordinalNumber: ordinalNumber$5,

  era: (0, _index$n.buildLocalizeFn)({
    values: eraValues$5,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$n.buildLocalizeFn)({
    values: quarterValues$5,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$n.buildLocalizeFn)({
    values: monthValues$5,
    defaultWidth: "wide",
  }),

  day: (0, _index$n.buildLocalizeFn)({
    values: dayValues$5,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$n.buildLocalizeFn)({
    values: dayPeriodValues$5,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$5,
    defaultFormattingWidth: "wide",
  }),
});

var match$5 = {};

match$5.match = void 0;

var _index$m = buildMatchFn$1;
var _index2$b = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$5 = /^(\d+)(chi)?/i;
const parseOrdinalNumberPattern$5 = /\d+/i;

const matchEraPatterns$5 = {
  narrow: /^(m\.a|m\.)/i,
  abbreviated: /^(m\.a\.?\s?m\.?)/i,
  wide: /^(miloddan avval|miloddan keyin)/i,
};
const parseEraPatterns$5 = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns$5 = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](chi)? chorak/i,
};
const parseQuarterPatterns$5 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$5 = {
  narrow: /^[yfmasond]/i,
  abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
  wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i,
};
const parseMonthPatterns$5 = {
  narrow: [
    /^y/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^i/i,
    /^i/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ya/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^iyun/i,
    /^iyul/i,
    /^av/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns$5 = {
  narrow: /^[ydschj]/i,
  short: /^(ya|du|se|cho|pa|ju|sha)/i,
  abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
  wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i,
};
const parseDayPatterns$5 = {
  narrow: [/^y/i, /^d/i, /^s/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
  any: [/^ya/i, /^d/i, /^se/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
};

const matchDayPeriodPatterns$5 = {
  narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
  any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i,
};
const parseDayPeriodPatterns$5 = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^y\.t/i,
    noon: /^pe/i,
    morning: /ertalab/i,
    afternoon: /tushdan keyin/i,
    evening: /kechqurun/i,
    night: /tun/i,
  },
};

(match$5.match = {
  ordinalNumber: (0, _index2$b.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$5,
    parsePattern: parseOrdinalNumberPattern$5,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$m.buildMatchFn)({
    matchPatterns: matchEraPatterns$5,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$5,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$m.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$5,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$5,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$m.buildMatchFn)({
    matchPatterns: matchMonthPatterns$5,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$5,
    defaultParseWidth: "any",
  }),

  day: (0, _index$m.buildMatchFn)({
    matchPatterns: matchDayPatterns$5,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$5,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$m.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$5,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$5,
    defaultParseWidth: "any",
  }),
});

uz.uz = void 0;
var _index$l = formatDistance$b;
var _index2$a = formatLong$5;
var _index3$5 = formatRelative$b;
var _index4$5 = localize$5;
var _index5$5 = match$5;

/**
 * @category Locales
 * @summary Uzbek locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Mukhammadali [@mukhammadali](https://github.com/Mukhammadali)
 */
(uz.uz = {
  code: "uz",
  formatDistance: _index$l.formatDistance,
  formatLong: _index2$a.formatLong,
  formatRelative: _index3$5.formatRelative,
  localize: _index4$5.localize,
  match: _index5$5.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var uzCyrl = {};

var formatDistance$9 = {};

formatDistance$9.formatDistance = void 0;

const formatDistanceLocale$4 = {
  lessThanXSeconds: {
    one: "1 ÑÐ¾Ð½Ð¸ÑÐ´Ð°Ð½ ÐºÐ°Ð¼",
    other: "{{count}} ÑÐ¾Ð½Ð¸ÑÐ´Ð°Ð½ ÐºÐ°Ð¼",
  },

  xSeconds: {
    one: "1 ÑÐ¾Ð½Ð¸Ñ",
    other: "{{count}} ÑÐ¾Ð½Ð¸Ñ",
  },

  halfAMinute: "ÑÑÐ¸Ð¼ Ð´Ð°ÒÐ¸ÒÐ°",

  lessThanXMinutes: {
    one: "1 Ð´Ð°ÒÐ¸ÒÐ°Ð´Ð°Ð½ ÐºÐ°Ð¼",
    other: "{{count}} Ð´Ð°ÒÐ¸ÒÐ°Ð´Ð°Ð½ ÐºÐ°Ð¼",
  },

  xMinutes: {
    one: "1 Ð´Ð°ÒÐ¸ÒÐ°",
    other: "{{count}} Ð´Ð°ÒÐ¸ÒÐ°",
  },

  aboutXHours: {
    one: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ 1 ÑÐ¾Ð°Ñ",
    other: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ {{count}} ÑÐ¾Ð°Ñ",
  },

  xHours: {
    one: "1 ÑÐ¾Ð°Ñ",
    other: "{{count}} ÑÐ¾Ð°Ñ",
  },

  xDays: {
    one: "1 ÐºÑÐ½",
    other: "{{count}} ÐºÑÐ½",
  },

  aboutXWeeks: {
    one: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ 1 ÑÐ°ÑÑÐ°",
    other: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ {{count}} ÑÐ°ÑÑÐ°",
  },

  xWeeks: {
    one: "1 ÑÐ°ÑÑÐ°",
    other: "{{count}} ÑÐ°ÑÑÐ°",
  },

  aboutXMonths: {
    one: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ 1 Ð¾Ð¹",
    other: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ {{count}} Ð¾Ð¹",
  },

  xMonths: {
    one: "1 Ð¾Ð¹",
    other: "{{count}} Ð¾Ð¹",
  },

  aboutXYears: {
    one: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ 1 Ð¹Ð¸Ð»",
    other: "ÑÐ°ÑÐ¼Ð¸Ð½Ð°Ð½ {{count}} Ð¹Ð¸Ð»",
  },

  xYears: {
    one: "1 Ð¹Ð¸Ð»",
    other: "{{count}} Ð¹Ð¸Ð»",
  },

  overXYears: {
    one: "1 Ð¹Ð¸Ð»Ð´Ð°Ð½ ÐºÑÐ¿",
    other: "{{count}} Ð¹Ð¸Ð»Ð´Ð°Ð½ ÐºÑÐ¿",
  },

  almostXYears: {
    one: "Ð´ÐµÑÑÐ»Ð¸ 1 Ð¹Ð¸Ð»",
    other: "Ð´ÐµÑÑÐ»Ð¸ {{count}} Ð¹Ð¸Ð»",
  },
};

const formatDistance$8 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$4[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½";
    } else {
      return result + " Ð¾Ð»Ð´Ð¸Ð½";
    }
  }

  return result;
};
formatDistance$9.formatDistance = formatDistance$8;

var formatLong$4 = {};

formatLong$4.formatLong = void 0;
var _index$k = buildFormatLongFn$1;

const dateFormats$4 = {
  full: "EEEE, do MMMM, y",
  long: "do MMMM, y",
  medium: "d MMM, y",
  short: "dd/MM/yyyy",
};

const timeFormats$4 = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm",
};

const dateTimeFormats$4 = {
  any: "{{date}}, {{time}}",
};

(formatLong$4.formatLong = {
  date: (0, _index$k.buildFormatLongFn)({
    formats: dateFormats$4,
    defaultWidth: "full",
  }),

  time: (0, _index$k.buildFormatLongFn)({
    formats: timeFormats$4,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$k.buildFormatLongFn)({
    formats: dateTimeFormats$4,
    defaultWidth: "any",
  }),
});

var formatRelative$9 = {};

formatRelative$9.formatRelative = void 0;

const formatRelativeLocale$4 = {
  lastWeek: "'ÑÑÐ³Ð°Ð½' eeee p 'Ð´Ð°'",
  yesterday: "'ÐºÐµÑÐ°' p 'Ð´Ð°'",
  today: "'Ð±ÑÐ³ÑÐ½' p 'Ð´Ð°'",
  tomorrow: "'ÑÑÑÐ°Ð³Ð°' p 'Ð´Ð°'",
  nextWeek: "eeee p 'Ð´Ð°'",
  other: "P",
};

const formatRelative$8 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$4[token];
formatRelative$9.formatRelative = formatRelative$8;

var localize$4 = {};

localize$4.localize = void 0;
var _index$j = buildLocalizeFn$1;

const eraValues$4 = {
  narrow: ["Ð.Ð", "Ð"],
  abbreviated: ["Ð.Ð", "Ð"],
  wide: ["ÐÐ¸Ð»Ð¾Ð´Ð´Ð°Ð½ ÐÐ²Ð²Ð°Ð»Ð³Ð¸", "ÐÐ¸Ð»Ð¾Ð´Ð¸Ð¹"],
};

const quarterValues$4 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-ÑÐ¾Ñ.", "2-ÑÐ¾Ñ.", "3-ÑÐ¾Ñ.", "4-ÑÐ¾Ñ."],
  wide: ["1-ÑÐ¾ÑÐ°Ðº", "2-ÑÐ¾ÑÐ°Ðº", "3-ÑÐ¾ÑÐ°Ðº", "4-ÑÐ¾ÑÐ°Ðº"],
};

const monthValues$4 = {
  narrow: ["Ð¯", "Ð¤", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð", "Ð¡", "Ð", "Ð", "Ð"],
  abbreviated: [
    "ÑÐ½Ð²",
    "ÑÐµÐ²",
    "Ð¼Ð°Ñ",
    "Ð°Ð¿Ñ",
    "Ð¼Ð°Ð¹",
    "Ð¸ÑÐ½",
    "Ð¸ÑÐ»",
    "Ð°Ð²Ð³",
    "ÑÐµÐ½",
    "Ð¾ÐºÑ",
    "Ð½Ð¾Ñ",
    "Ð´ÐµÐº",
  ],

  wide: [
    "ÑÐ½Ð²Ð°Ñ",
    "ÑÐµÐ²ÑÐ°Ð»",
    "Ð¼Ð°ÑÑ",
    "Ð°Ð¿ÑÐµÐ»",
    "Ð¼Ð°Ð¹",
    "Ð¸ÑÐ½",
    "Ð¸ÑÐ»",
    "Ð°Ð²Ð³ÑÑÑ",
    "ÑÐµÐ½ÑÐ°Ð±Ñ",
    "Ð¾ÐºÑÐ°Ð±Ñ",
    "Ð½Ð¾ÑÐ±Ñ",
    "Ð´ÐµÐºÐ°Ð±Ñ",
  ],
};

const dayValues$4 = {
  narrow: ["Ð¯", "Ð", "Ð¡", "Ð§", "Ð", "Ð", "Ð¨"],
  short: ["ÑÐº", "Ð´Ñ", "ÑÐµ", "ÑÐ¾", "Ð¿Ð°", "Ð¶Ñ", "ÑÐ°"],
  abbreviated: ["ÑÐºÑ", "Ð´ÑÑ", "ÑÐµÑ", "ÑÐ¾Ñ", "Ð¿Ð°Ð¹", "Ð¶ÑÐ¼", "ÑÐ°Ð½"],
  wide: [
    "ÑÐºÑÐ°Ð½Ð±Ð°",
    "Ð´ÑÑÐ°Ð½Ð±Ð°",
    "ÑÐµÑÐ°Ð½Ð±Ð°",
    "ÑÐ¾ÑÑÐ°Ð½Ð±Ð°",
    "Ð¿Ð°Ð¹ÑÐ°Ð½Ð±Ð°",
    "Ð¶ÑÐ¼Ð°",
    "ÑÐ°Ð½Ð±Ð°",
  ],
};

const dayPeriodValues$4 = {
  any: {
    am: "Ð.Ð.",
    pm: "Ð.Ð.",
    midnight: "ÑÑÐ¸Ð¼ ÑÑÐ½",
    noon: "Ð¿ÐµÑÐ¸Ð½",
    morning: "ÑÑÑÐ°Ð»Ð°Ð±",
    afternoon: "Ð¿ÐµÑÐ¸Ð½Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½",
    evening: "ÐºÐµÑÐ°ÑÐ¸",
    night: "ÑÑÐ½",
  },
};

const formattingDayPeriodValues$4 = {
  any: {
    am: "Ð.Ð.",
    pm: "Ð.Ð.",
    midnight: "ÑÑÐ¸Ð¼ ÑÑÐ½",
    noon: "Ð¿ÐµÑÐ¸Ð½",
    morning: "ÑÑÑÐ°Ð»Ð°Ð±",
    afternoon: "Ð¿ÐµÑÐ¸Ð½Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½",
    evening: "ÐºÐµÑÐ°ÑÐ¸",
    night: "ÑÑÐ½",
  },
};

const ordinalNumber$4 = (dirtyNumber, _options) => {
  return String(dirtyNumber);
};

(localize$4.localize = {
  ordinalNumber: ordinalNumber$4,

  era: (0, _index$j.buildLocalizeFn)({
    values: eraValues$4,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$j.buildLocalizeFn)({
    values: quarterValues$4,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$j.buildLocalizeFn)({
    values: monthValues$4,
    defaultWidth: "wide",
  }),

  day: (0, _index$j.buildLocalizeFn)({
    values: dayValues$4,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$j.buildLocalizeFn)({
    values: dayPeriodValues$4,
    defaultWidth: "any",
    formattingValues: formattingDayPeriodValues$4,
    defaultFormattingWidth: "any",
  }),
});

var match$4 = {};

match$4.match = void 0;

var _index$i = buildMatchFn$1;
var _index2$9 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$4 = /^(\d+)(ÑÐ¸)?/i;
const parseOrdinalNumberPattern$4 = /\d+/i;

const matchEraPatterns$4 = {
  narrow: /^(Ð¼\.Ð°|Ð¼\.)/i,
  abbreviated: /^(Ð¼\.Ð°|Ð¼\.)/i,
  wide: /^(Ð¼Ð¸Ð»Ð¾Ð´Ð´Ð°Ð½ Ð°Ð²Ð²Ð°Ð»|Ð¼Ð¸Ð»Ð¾Ð´Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½)/i,
};
const parseEraPatterns$4 = {
  any: [/^Ð¼/i, /^Ð°/i],
};

const matchQuarterPatterns$4 = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-ÑÐ¾Ñ./i,
  wide: /^[1234]-ÑÐ¾ÑÐ°Ðº/i,
};
const parseQuarterPatterns$4 = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns$4 = {
  narrow: /^[ÑÑÐ¼Ð°Ð¼Ð¸Ð¸Ð°ÑÐ¾Ð½Ð´]/i,
  abbreviated: /^(ÑÐ½Ð²|ÑÐµÐ²|Ð¼Ð°Ñ|Ð°Ð¿Ñ|Ð¼Ð°Ð¹|Ð¸ÑÐ½|Ð¸ÑÐ»|Ð°Ð²Ð³|ÑÐµÐ½|Ð¾ÐºÑ|Ð½Ð¾Ñ|Ð´ÐµÐº)/i,
  wide: /^(ÑÐ½Ð²Ð°Ñ|ÑÐµÐ²ÑÐ°Ð»|Ð¼Ð°ÑÑ|Ð°Ð¿ÑÐµÐ»|Ð¼Ð°Ð¹|Ð¸ÑÐ½|Ð¸ÑÐ»|Ð°Ð²Ð³ÑÑÑ|ÑÐµÐ½ÑÐ°Ð±Ñ|Ð¾ÐºÑÐ°Ð±Ñ|Ð½Ð¾ÑÐ±Ñ|Ð´ÐµÐºÐ°Ð±Ñ)/i,
};
const parseMonthPatterns$4 = {
  narrow: [
    /^Ñ/i,
    /^Ñ/i,
    /^Ð¼/i,
    /^Ð°/i,
    /^Ð¼/i,
    /^Ð¸/i,
    /^Ð¸/i,
    /^Ð°/i,
    /^Ñ/i,
    /^Ð¾/i,
    /^Ð½/i,
    /^Ð´/i,
  ],

  any: [
    /^Ñ/i,
    /^Ñ/i,
    /^Ð¼Ð°Ñ/i,
    /^Ð°Ð¿/i,
    /^Ð¼Ð°Ð¹/i,
    /^Ð¸ÑÐ½/i,
    /^Ð¸ÑÐ»/i,
    /^Ð°Ð²/i,
    /^Ñ/i,
    /^Ð¾/i,
    /^Ð½/i,
    /^Ð´/i,
  ],
};

const matchDayPatterns$4 = {
  narrow: /^[ÑÐ´ÑÑÐ¿Ð¶Ñ]/i,
  short: /^(ÑÐº|Ð´Ñ|ÑÐµ|ÑÐ¾|Ð¿Ð°|Ð¶Ñ|ÑÐ°)/i,
  abbreviated: /^(ÑÐºÑ|Ð´ÑÑ|ÑÐµÑ|ÑÐ¾Ñ|Ð¿Ð°Ð¹|Ð¶ÑÐ¼|ÑÐ°Ð½)/i,
  wide: /^(ÑÐºÑÐ°Ð½Ð±Ð°|Ð´ÑÑÐ°Ð½Ð±Ð°|ÑÐµÑÐ°Ð½Ð±Ð°|ÑÐ¾ÑÑÐ°Ð½Ð±Ð°|Ð¿Ð°Ð¹ÑÐ°Ð½Ð±Ð°|Ð¶ÑÐ¼Ð°|ÑÐ°Ð½Ð±Ð°)/i,
};
const parseDayPatterns$4 = {
  narrow: [/^Ñ/i, /^Ð´/i, /^Ñ/i, /^Ñ/i, /^Ð¿/i, /^Ð¶/i, /^Ñ/i],
  any: [/^ÑÐº/i, /^Ð´Ñ/i, /^ÑÐµ/i, /^ÑÐ¾Ñ/i, /^Ð¿Ð°Ð¹/i, /^Ð¶Ñ/i, /^ÑÐ°Ð½/i],
};

const matchDayPeriodPatterns$4 = {
  any: /^(Ð¿\.Ð¾\.|Ð¿\.Ðº\.|ÑÑÐ¸Ð¼ ÑÑÐ½|Ð¿ÐµÑÐ¸Ð½Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½|(ÑÑÑÐ°Ð»Ð°Ð±|Ð¿ÐµÑÐ¸Ð½Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½|ÐºÐµÑÐ°ÑÐ¸|ÑÑÐ½))/i,
};
const parseDayPeriodPatterns$4 = {
  any: {
    am: /^Ð¿\.Ð¾\./i,
    pm: /^Ð¿\.Ðº\./i,
    midnight: /^ÑÑÐ¸Ð¼ ÑÑÐ½/i,
    noon: /^Ð¿ÐµÑÐ¸Ð½Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½/i,
    morning: /ÑÑÑÐ°Ð»Ð°Ð±/i,
    afternoon: /Ð¿ÐµÑÐ¸Ð½Ð´Ð°Ð½ ÐºÐµÐ¹Ð¸Ð½/i,
    evening: /ÐºÐµÑÐ°ÑÐ¸/i,
    night: /ÑÑÐ½/i,
  },
};

(match$4.match = {
  ordinalNumber: (0, _index2$9.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$4,
    parsePattern: parseOrdinalNumberPattern$4,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$i.buildMatchFn)({
    matchPatterns: matchEraPatterns$4,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$4,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$i.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$4,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$4,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$i.buildMatchFn)({
    matchPatterns: matchMonthPatterns$4,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$4,
    defaultParseWidth: "any",
  }),

  day: (0, _index$i.buildMatchFn)({
    matchPatterns: matchDayPatterns$4,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$4,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$i.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$4,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$4,
    defaultParseWidth: "any",
  }),
});

uzCyrl.uzCyrl = void 0;
var _index$h = formatDistance$9;
var _index2$8 = formatLong$4;
var _index3$4 = formatRelative$9;
var _index4$4 = localize$4;
var _index5$4 = match$4;

/**
 * @category Locales
 * @summary Uzbek Cyrillic locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Kamronbek Shodmonov [@kamronbek28](https://github.com/kamronbek28)
 */
(uzCyrl.uzCyrl = {
  code: "uz-Cyrl",
  formatDistance: _index$h.formatDistance,
  formatLong: _index2$8.formatLong,
  formatRelative: _index3$4.formatRelative,
  localize: _index4$4.localize,
  match: _index5$4.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1,
  },
});

var vi = {};

var formatDistance$7 = {};

formatDistance$7.formatDistance = void 0;

const formatDistanceLocale$3 = {
  lessThanXSeconds: {
    one: "dÆ°á»i 1 giÃ¢y",
    other: "dÆ°á»i {{count}} giÃ¢y",
  },

  xSeconds: {
    one: "1 giÃ¢y",
    other: "{{count}} giÃ¢y",
  },

  halfAMinute: "ná»­a phÃºt",

  lessThanXMinutes: {
    one: "dÆ°á»i 1 phÃºt",
    other: "dÆ°á»i {{count}} phÃºt",
  },

  xMinutes: {
    one: "1 phÃºt",
    other: "{{count}} phÃºt",
  },

  aboutXHours: {
    one: "khoáº£ng 1 giá»",
    other: "khoáº£ng {{count}} giá»",
  },

  xHours: {
    one: "1 giá»",
    other: "{{count}} giá»",
  },

  xDays: {
    one: "1 ngÃ y",
    other: "{{count}} ngÃ y",
  },

  aboutXWeeks: {
    one: "khoáº£ng 1 tuáº§n",
    other: "khoáº£ng {{count}} tuáº§n",
  },

  xWeeks: {
    one: "1 tuáº§n",
    other: "{{count}} tuáº§n",
  },

  aboutXMonths: {
    one: "khoáº£ng 1 thÃ¡ng",
    other: "khoáº£ng {{count}} thÃ¡ng",
  },

  xMonths: {
    one: "1 thÃ¡ng",
    other: "{{count}} thÃ¡ng",
  },

  aboutXYears: {
    one: "khoáº£ng 1 nÄm",
    other: "khoáº£ng {{count}} nÄm",
  },

  xYears: {
    one: "1 nÄm",
    other: "{{count}} nÄm",
  },

  overXYears: {
    one: "hÆ¡n 1 nÄm",
    other: "hÆ¡n {{count}} nÄm",
  },

  almostXYears: {
    one: "gáº§n 1 nÄm",
    other: "gáº§n {{count}} nÄm",
  },
};

const formatDistance$6 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$3[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " ná»¯a";
    } else {
      return result + " trÆ°á»c";
    }
  }

  return result;
};
formatDistance$7.formatDistance = formatDistance$6;

var formatLong$3 = {};

formatLong$3.formatLong = void 0;
var _index$g = buildFormatLongFn$1;

const dateFormats$3 = {
  // thá»© SÃ¡u, ngÃ y 25 thÃ¡ng 08 nÄm 2017
  full: "EEEE, 'ngÃ y' d MMMM 'nÄm' y",
  // ngÃ y 25 thÃ¡ng 08 nÄm 2017
  long: "'ngÃ y' d MMMM 'nÄm' y",
  // 25 thg 08 nÄm 2017
  medium: "d MMM 'nÄm' y",
  // 25/08/2017
  short: "dd/MM/y",
};

const timeFormats$3 = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm",
};

const dateTimeFormats$3 = {
  // thá»© SÃ¡u, ngÃ y 25 thÃ¡ng 08 nÄm 2017 23:25:59
  full: "{{date}} {{time}}",
  // ngÃ y 25 thÃ¡ng 08 nÄm 2017 23:25
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$3.formatLong = {
  date: (0, _index$g.buildFormatLongFn)({
    formats: dateFormats$3,
    defaultWidth: "full",
  }),

  time: (0, _index$g.buildFormatLongFn)({
    formats: timeFormats$3,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$g.buildFormatLongFn)({
    formats: dateTimeFormats$3,
    defaultWidth: "full",
  }),
});

var formatRelative$7 = {};

formatRelative$7.formatRelative = void 0;

const formatRelativeLocale$3 = {
  lastWeek: "eeee 'tuáº§n trÆ°á»c vÃ o lÃºc' p",
  yesterday: "'hÃ´m qua vÃ o lÃºc' p",
  today: "'hÃ´m nay vÃ o lÃºc' p",
  tomorrow: "'ngÃ y mai vÃ o lÃºc' p",
  nextWeek: "eeee 'tá»i vÃ o lÃºc' p",
  other: "P",
};

const formatRelative$6 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$3[token];
formatRelative$7.formatRelative = formatRelative$6;

var localize$3 = {};

localize$3.localize = void 0;
var _index$f = buildLocalizeFn$1;

// Vietnamese locale reference: http://www.localeplanet.com/icu/vi-VN/index.html
// Capitalization reference: http://hcmup.edu.vn/index.php?option=com_content&view=article&id=4106%3Avit-hoa-trong-vn-bn-hanh-chinh&catid=2345%3Atham-kho&Itemid=4103&lang=vi&site=134

const eraValues$3 = {
  narrow: ["TCN", "SCN"],
  abbreviated: ["trÆ°á»c CN", "sau CN"],
  wide: ["trÆ°á»c CÃ´ng NguyÃªn", "sau CÃ´ng NguyÃªn"],
};

const quarterValues$3 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["QuÃ½ 1", "QuÃ½ 2", "QuÃ½ 3", "QuÃ½ 4"],
};

const formattingQuarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  // I notice many news outlet use this "quÃ½ II/2018"
  wide: ["quÃ½ I", "quÃ½ II", "quÃ½ III", "quÃ½ IV"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues$3 = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],

  abbreviated: [
    "Thg 1",
    "Thg 2",
    "Thg 3",
    "Thg 4",
    "Thg 5",
    "Thg 6",
    "Thg 7",
    "Thg 8",
    "Thg 9",
    "Thg 10",
    "Thg 11",
    "Thg 12",
  ],

  wide: [
    "ThÃ¡ng Má»t",
    "ThÃ¡ng Hai",
    "ThÃ¡ng Ba",
    "ThÃ¡ng TÆ°",
    "ThÃ¡ng NÄm",
    "ThÃ¡ng SÃ¡u",
    "ThÃ¡ng Báº£y",
    "ThÃ¡ng TÃ¡m",
    "ThÃ¡ng ChÃ­n",
    "ThÃ¡ng MÆ°á»i",
    "ThÃ¡ng MÆ°á»i Má»t",
    "ThÃ¡ng MÆ°á»i Hai",
  ],
};
// In Vietnamese date formatting, month number less than 10 expected to have leading zero
const formattingMonthValues = {
  narrow: [
    "01",
    "02",
    "03",
    "04",
    "05",
    "06",
    "07",
    "08",
    "09",
    "10",
    "11",
    "12",
  ],

  abbreviated: [
    "thg 1",
    "thg 2",
    "thg 3",
    "thg 4",
    "thg 5",
    "thg 6",
    "thg 7",
    "thg 8",
    "thg 9",
    "thg 10",
    "thg 11",
    "thg 12",
  ],

  wide: [
    "thÃ¡ng 01",
    "thÃ¡ng 02",
    "thÃ¡ng 03",
    "thÃ¡ng 04",
    "thÃ¡ng 05",
    "thÃ¡ng 06",
    "thÃ¡ng 07",
    "thÃ¡ng 08",
    "thÃ¡ng 09",
    "thÃ¡ng 10",
    "thÃ¡ng 11",
    "thÃ¡ng 12",
  ],
};

const dayValues$3 = {
  narrow: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
  short: ["CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"],
  abbreviated: ["CN", "Thá»© 2", "Thá»© 3", "Thá»© 4", "Thá»© 5", "Thá»© 6", "Thá»© 7"],

  wide: [
    "Chá»§ Nháº­t",
    "Thá»© Hai",
    "Thá»© Ba",
    "Thá»© TÆ°",
    "Thá»© NÄm",
    "Thá»© SÃ¡u",
    "Thá»© Báº£y",
  ],
};

// Vietnamese are used to AM/PM borrowing from English, hence `narrow` and
// `abbreviated` are just like English but I'm leaving the `wide`
// format being localized with abbreviations found in some systems (SÃng / CHiá»u);
// however, personally, I don't think `Chiá»u` sounds appropriate for `PM`
const dayPeriodValues$3 = {
  // narrow date period is extremely rare in Vietnamese
  // I used abbreviated form for noon, morning and afternoon
  // which are regconizable by Vietnamese, others cannot be any shorter
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "ná»­a ÄÃªm",
    noon: "tr",
    morning: "sg",
    afternoon: "ch",
    evening: "tá»i",
    night: "ÄÃªm",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ná»­a ÄÃªm",
    noon: "trÆ°a",
    morning: "sÃ¡ng",
    afternoon: "chiá»u",
    evening: "tá»i",
    night: "ÄÃªm",
  },
  wide: {
    am: "SA",
    pm: "CH",
    midnight: "ná»­a ÄÃªm",
    noon: "trÆ°a",
    morning: "sÃ¡ng",
    afternoon: "chiá»u",
    evening: "tá»i",
    night: "ÄÃªm",
  },
};

const formattingDayPeriodValues$3 = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "ná»­a ÄÃªm",
    noon: "tr",
    morning: "sg",
    afternoon: "ch",
    evening: "tá»i",
    night: "ÄÃªm",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "ná»­a ÄÃªm",
    noon: "trÆ°a",
    morning: "sÃ¡ng",
    afternoon: "chiá»u",
    evening: "tá»i",
    night: "ÄÃªm",
  },
  wide: {
    am: "SA",
    pm: "CH",
    midnight: "ná»­a ÄÃªm",
    noon: "giá»¯a trÆ°a",
    morning: "vÃ o buá»i sÃ¡ng",
    afternoon: "vÃ o buá»i chiá»u",
    evening: "vÃ o buá»i tá»i",
    night: "vÃ o ban ÄÃªm",
  },
};

const ordinalNumber$3 = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);
  const unit = options?.unit;

  if (unit === "quarter") {
    // many news outlets use "quÃ½ I"...
    switch (number) {
      case 1:
        return "I";
      case 2:
        return "II";
      case 3:
        return "III";
      case 4:
        return "IV";
    }
  } else if (unit === "day") {
    // day of week in Vietnamese has ordinal number meaning,
    // so we should use them, else it'll sound weird
    switch (number) {
      case 1:
        return "thá»© 2"; // meaning 2nd day but it's the first day of the week :D
      case 2:
        return "thá»© 3"; // meaning 3rd day
      case 3:
        return "thá»© 4"; // meaning 4th day and so on
      case 4:
        return "thá»© 5";
      case 5:
        return "thá»© 6";
      case 6:
        return "thá»© 7";
      case 7:
        return "chá»§ nháº­t"; // meaning Sunday, there's no 8th day :D
    }
  } else if (unit === "week") {
    if (number === 1) {
      return "thá»© nháº¥t";
    } else {
      return "thá»© " + number;
    }
  } else if (unit === "dayOfYear") {
    if (number === 1) {
      return "Äáº§u tiÃªn";
    } else {
      return "thá»© " + number;
    }
  }

  // there are no different forms of ordinal numbers in Vietnamese
  return String(number);
};

(localize$3.localize = {
  ordinalNumber: ordinalNumber$3,

  era: (0, _index$f.buildLocalizeFn)({
    values: eraValues$3,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$f.buildLocalizeFn)({
    values: quarterValues$3,
    defaultWidth: "wide",
    formattingValues: formattingQuarterValues,
    defaultFormattingWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$f.buildLocalizeFn)({
    values: monthValues$3,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues,
    defaultFormattingWidth: "wide",
  }),

  day: (0, _index$f.buildLocalizeFn)({
    values: dayValues$3,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$f.buildLocalizeFn)({
    values: dayPeriodValues$3,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$3,
    defaultFormattingWidth: "wide",
  }),
});

var match$3 = {};

match$3.match = void 0;

var _index$e = buildMatchFn$1;
var _index2$7 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$3 = /^(\d+)/i;
const parseOrdinalNumberPattern$3 = /\d+/i;

const matchEraPatterns$3 = {
  narrow: /^(tcn|scn)/i,
  abbreviated: /^(trÆ°á»c CN|sau CN)/i,
  wide: /^(trÆ°á»c CÃ´ng NguyÃªn|sau CÃ´ng NguyÃªn)/i,
};
const parseEraPatterns$3 = {
  any: [/^t/i, /^s/i],
};

const matchQuarterPatterns$3 = {
  narrow: /^([1234]|i{1,3}v?)/i,
  abbreviated: /^q([1234]|i{1,3}v?)/i,
  wide: /^quÃ½ ([1234]|i{1,3}v?)/i,
};
const parseQuarterPatterns$3 = {
  any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i],
};

const matchMonthPatterns$3 = {
  // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
  // note the order of '1' since it is a sub-string of '10', so must be lower priority
  narrow: /^(0?[2-9]|10|11|12|0?1)/i,
  // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
  abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
  // note the order of 'MÆ°á»i' since it is sub-string of MÆ°á»i Má»t, so must be lower priority
  wide: /^thÃ¡ng ?(Má»t|Hai|Ba|TÆ°|NÄm|SÃ¡u|Báº£y|TÃ¡m|ChÃ­n|MÆ°á»i|MÆ°á»i ?Má»t|MÆ°á»i ?Hai|0?[1-9](?!\d)|10|11|12)/i,
};
const parseMonthPatterns$3 = {
  narrow: [
    /0?1$/i,
    /0?2/i,
    /3/,
    /4/,
    /5/,
    /6/,
    /7/,
    /8/,
    /9/,
    /10/,
    /11/,
    /12/,
  ],

  abbreviated: [
    /^thg[ _]?0?1(?!\d)/i,
    /^thg[ _]?0?2/i,
    /^thg[ _]?0?3/i,
    /^thg[ _]?0?4/i,
    /^thg[ _]?0?5/i,
    /^thg[ _]?0?6/i,
    /^thg[ _]?0?7/i,
    /^thg[ _]?0?8/i,
    /^thg[ _]?0?9/i,
    /^thg[ _]?10/i,
    /^thg[ _]?11/i,
    /^thg[ _]?12/i,
  ],

  wide: [
    /^thÃ¡ng ?(Má»t|0?1(?!\d))/i,
    /^thÃ¡ng ?(Hai|0?2)/i,
    /^thÃ¡ng ?(Ba|0?3)/i,
    /^thÃ¡ng ?(TÆ°|0?4)/i,
    /^thÃ¡ng ?(NÄm|0?5)/i,
    /^thÃ¡ng ?(SÃ¡u|0?6)/i,
    /^thÃ¡ng ?(Báº£y|0?7)/i,
    /^thÃ¡ng ?(TÃ¡m|0?8)/i,
    /^thÃ¡ng ?(ChÃ­n|0?9)/i,
    /^thÃ¡ng ?(MÆ°á»i|10)/i,
    /^thÃ¡ng ?(MÆ°á»i ?Má»t|11)/i,
    /^thÃ¡ng ?(MÆ°á»i ?Hai|12)/i,
  ],
};

const matchDayPatterns$3 = {
  narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
  short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  wide: /^(Chá»§ ?Nháº­t|ChÃºa ?Nháº­t|thá»© ?Hai|thá»© ?Ba|thá»© ?TÆ°|thá»© ?NÄm|thá»© ?SÃ¡u|thá»© ?Báº£y)/i,
};
const parseDayPatterns$3 = {
  narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  wide: [/(Chá»§|ChÃºa) ?Nháº­t/i, /Hai/i, /Ba/i, /TÆ°/i, /NÄm/i, /SÃ¡u/i, /Báº£y/i],
};

const matchDayPeriodPatterns$3 = {
  narrow: /^(a|p|ná»­a ÄÃªm|trÆ°a|(giá») (sÃ¡ng|chiá»u|tá»i|ÄÃªm))/i,
  abbreviated: /^(am|pm|ná»­a ÄÃªm|trÆ°a|(giá») (sÃ¡ng|chiá»u|tá»i|ÄÃªm))/i,
  wide: /^(ch[^i]*|sa|ná»­a ÄÃªm|trÆ°a|(giá») (sÃ¡ng|chiá»u|tá»i|ÄÃªm))/i,
};
const parseDayPeriodPatterns$3 = {
  any: {
    am: /^(a|sa)/i,
    pm: /^(p|ch[^i]*)/i,
    midnight: /ná»­a ÄÃªm/i,
    noon: /trÆ°a/i,
    morning: /sÃ¡ng/i,
    afternoon: /chiá»u/i,
    evening: /tá»i/i,
    night: /^ÄÃªm/i,
  },
};

(match$3.match = {
  ordinalNumber: (0, _index2$7.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$3,
    parsePattern: parseOrdinalNumberPattern$3,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$e.buildMatchFn)({
    matchPatterns: matchEraPatterns$3,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$3,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$e.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$3,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$3,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$e.buildMatchFn)({
    matchPatterns: matchMonthPatterns$3,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$3,
    defaultParseWidth: "wide",
  }),

  day: (0, _index$e.buildMatchFn)({
    matchPatterns: matchDayPatterns$3,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$3,
    defaultParseWidth: "wide",
  }),

  dayPeriod: (0, _index$e.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$3,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPeriodPatterns$3,
    defaultParseWidth: "any",
  }),
});

vi.vi = void 0;
var _index$d = formatDistance$7;
var _index2$6 = formatLong$3;
var _index3$3 = formatRelative$7;
var _index4$3 = localize$3;
var _index5$3 = match$3;

/**
 * @category Locales
 * @summary Vietnamese locale (Vietnam).
 * @language Vietnamese
 * @iso-639-2 vie
 * @author Thanh Tran [@trongthanh](https://github.com/trongthanh)
 * @author Leroy Hopson [@lihop](https://github.com/lihop)
 */
(vi.vi = {
  code: "vi",
  formatDistance: _index$d.formatDistance,
  formatLong: _index2$6.formatLong,
  formatRelative: _index3$3.formatRelative,
  localize: _index4$3.localize,
  match: _index5$3.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 1 /* First week of new year contains Jan 1st  */,
  },
});

var zhCN = {};

var formatDistance$5 = {};

formatDistance$5.formatDistance = void 0;

const formatDistanceLocale$2 = {
  lessThanXSeconds: {
    one: "ä¸å° 1 ç§",
    other: "ä¸å° {{count}} ç§",
  },

  xSeconds: {
    one: "1 ç§",
    other: "{{count}} ç§",
  },

  halfAMinute: "ååé",

  lessThanXMinutes: {
    one: "ä¸å° 1 åé",
    other: "ä¸å° {{count}} åé",
  },

  xMinutes: {
    one: "1 åé",
    other: "{{count}} åé",
  },

  xHours: {
    one: "1 å°æ¶",
    other: "{{count}} å°æ¶",
  },

  aboutXHours: {
    one: "å¤§çº¦ 1 å°æ¶",
    other: "å¤§çº¦ {{count}} å°æ¶",
  },

  xDays: {
    one: "1 å¤©",
    other: "{{count}} å¤©",
  },

  aboutXWeeks: {
    one: "å¤§çº¦ 1 ä¸ªææ",
    other: "å¤§çº¦ {{count}} ä¸ªææ",
  },

  xWeeks: {
    one: "1 ä¸ªææ",
    other: "{{count}} ä¸ªææ",
  },

  aboutXMonths: {
    one: "å¤§çº¦ 1 ä¸ªæ",
    other: "å¤§çº¦ {{count}} ä¸ªæ",
  },

  xMonths: {
    one: "1 ä¸ªæ",
    other: "{{count}} ä¸ªæ",
  },

  aboutXYears: {
    one: "å¤§çº¦ 1 å¹´",
    other: "å¤§çº¦ {{count}} å¹´",
  },

  xYears: {
    one: "1 å¹´",
    other: "{{count}} å¹´",
  },

  overXYears: {
    one: "è¶è¿ 1 å¹´",
    other: "è¶è¿ {{count}} å¹´",
  },

  almostXYears: {
    one: "å°è¿ 1 å¹´",
    other: "å°è¿ {{count}} å¹´",
  },
};

const formatDistance$4 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$2[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "å";
    } else {
      return result + "å";
    }
  }

  return result;
};
formatDistance$5.formatDistance = formatDistance$4;

var formatLong$2 = {};

formatLong$2.formatLong = void 0;
var _index$c = buildFormatLongFn$1;

const dateFormats$2 = {
  full: "y'å¹´'M'æ'd'æ¥' EEEE",
  long: "y'å¹´'M'æ'd'æ¥'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd",
};

const timeFormats$2 = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm",
};

const dateTimeFormats$2 = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$2.formatLong = {
  date: (0, _index$c.buildFormatLongFn)({
    formats: dateFormats$2,
    defaultWidth: "full",
  }),

  time: (0, _index$c.buildFormatLongFn)({
    formats: timeFormats$2,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$c.buildFormatLongFn)({
    formats: dateTimeFormats$2,
    defaultWidth: "full",
  }),
});

var formatRelative$5 = {};

formatRelative$5.formatRelative = void 0;
var _index$b = isSameWeek$1;

function checkWeek(date, baseDate, options) {
  const baseFormat = "eeee p";

  if ((0, _index$b.isSameWeek)(date, baseDate, options)) {
    return baseFormat; // in same week
  } else if (date.getTime() > baseDate.getTime()) {
    return "'ä¸ä¸ª'" + baseFormat; // in next week
  }
  return "'ä¸ä¸ª'" + baseFormat; // in last week
}

const formatRelativeLocale$2 = {
  lastWeek: checkWeek, // days before yesterday, maybe in this week or last week
  yesterday: "'æ¨å¤©' p",
  today: "'ä»å¤©' p",
  tomorrow: "'æå¤©' p",
  nextWeek: checkWeek, // days after tomorrow, maybe in this week or next week
  other: "PP p",
};

const formatRelative$4 = (token, date, baseDate, options) => {
  const format = formatRelativeLocale$2[token];

  if (typeof format === "function") {
    return format(date, baseDate, options);
  }

  return format;
};
formatRelative$5.formatRelative = formatRelative$4;

var localize$2 = {};

localize$2.localize = void 0;
var _index$a = buildLocalizeFn$1;

const eraValues$2 = {
  narrow: ["å", "å¬å"],
  abbreviated: ["å", "å¬å"],
  wide: ["å¬åå", "å¬å"],
};

const quarterValues$2 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["ç¬¬ä¸å­£", "ç¬¬äºå­£", "ç¬¬ä¸å­£", "ç¬¬åå­£"],
  wide: ["ç¬¬ä¸å­£åº¦", "ç¬¬äºå­£åº¦", "ç¬¬ä¸å­£åº¦", "ç¬¬åå­£åº¦"],
};

const monthValues$2 = {
  narrow: [
    "ä¸",
    "äº",
    "ä¸",
    "å",
    "äº",
    "å­",
    "ä¸",
    "å«",
    "ä¹",
    "å",
    "åä¸",
    "åäº",
  ],

  abbreviated: [
    "1æ",
    "2æ",
    "3æ",
    "4æ",
    "5æ",
    "6æ",
    "7æ",
    "8æ",
    "9æ",
    "10æ",
    "11æ",
    "12æ",
  ],

  wide: [
    "ä¸æ",
    "äºæ",
    "ä¸æ",
    "åæ",
    "äºæ",
    "å­æ",
    "ä¸æ",
    "å«æ",
    "ä¹æ",
    "åæ",
    "åä¸æ",
    "åäºæ",
  ],
};

const dayValues$2 = {
  narrow: ["æ¥", "ä¸", "äº", "ä¸", "å", "äº", "å­"],
  short: ["æ¥", "ä¸", "äº", "ä¸", "å", "äº", "å­"],
  abbreviated: ["å¨æ¥", "å¨ä¸", "å¨äº", "å¨ä¸", "å¨å", "å¨äº", "å¨å­"],

  wide: ["æææ¥", "ææä¸", "ææäº", "ææä¸", "ææå", "ææäº", "ææå­"],
};

const dayPeriodValues$2 = {
  narrow: {
    am: "ä¸",
    pm: "ä¸",
    midnight: "åæ¨",
    noon: "å",
    morning: "æ©",
    afternoon: "ä¸å",
    evening: "æ",
    night: "å¤",
  },
  abbreviated: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é´",
  },
  wide: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é´",
  },
};

const formattingDayPeriodValues$2 = {
  narrow: {
    am: "ä¸",
    pm: "ä¸",
    midnight: "åæ¨",
    noon: "å",
    morning: "æ©",
    afternoon: "ä¸å",
    evening: "æ",
    night: "å¤",
  },
  abbreviated: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é´",
  },
  wide: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é´",
  },
};

const ordinalNumber$2 = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);

  switch (options?.unit) {
    case "date":
      return number.toString() + "æ¥";
    case "hour":
      return number.toString() + "æ¶";
    case "minute":
      return number.toString() + "å";
    case "second":
      return number.toString() + "ç§";
    default:
      return "ç¬¬ " + number.toString();
  }
};

(localize$2.localize = {
  ordinalNumber: ordinalNumber$2,

  era: (0, _index$a.buildLocalizeFn)({
    values: eraValues$2,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$a.buildLocalizeFn)({
    values: quarterValues$2,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$a.buildLocalizeFn)({
    values: monthValues$2,
    defaultWidth: "wide",
  }),

  day: (0, _index$a.buildLocalizeFn)({
    values: dayValues$2,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$a.buildLocalizeFn)({
    values: dayPeriodValues$2,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$2,
    defaultFormattingWidth: "wide",
  }),
});

var match$2 = {};

match$2.match = void 0;

var _index$9 = buildMatchFn$1;
var _index2$5 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$2 = /^(ç¬¬\s*)?\d+(æ¥|æ¶|å|ç§)?/i;
const parseOrdinalNumberPattern$2 = /\d+/i;

const matchEraPatterns$2 = {
  narrow: /^(å)/i,
  abbreviated: /^(å)/i,
  wide: /^(å¬åå|å¬å)/i,
};
const parseEraPatterns$2 = {
  any: [/^(å)/i, /^(å¬å)/i],
};

const matchQuarterPatterns$2 = {
  narrow: /^[1234]/i,
  abbreviated: /^ç¬¬[ä¸äºä¸å]å»/i,
  wide: /^ç¬¬[ä¸äºä¸å]å»é/i,
};
const parseQuarterPatterns$2 = {
  any: [/(1|ä¸)/i, /(2|äº)/i, /(3|ä¸)/i, /(4|å)/i],
};

const matchMonthPatterns$2 = {
  narrow: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸])/i,
  abbreviated: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸]|\d|1[12])æ/i,
  wide: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸])æ/i,
};
const parseMonthPatterns$2 = {
  narrow: [
    /^ä¸/i,
    /^äº/i,
    /^ä¸/i,
    /^å/i,
    /^äº/i,
    /^å­/i,
    /^ä¸/i,
    /^å«/i,
    /^ä¹/i,
    /^å(?!(ä¸|äº))/i,
    /^åä¸/i,
    /^åäº/i,
  ],

  any: [
    /^ä¸|1/i,
    /^äº|2/i,
    /^ä¸|3/i,
    /^å|4/i,
    /^äº|5/i,
    /^å­|6/i,
    /^ä¸|7/i,
    /^å«|8/i,
    /^ä¹|9/i,
    /^å(?!(ä¸|äº))|10/i,
    /^åä¸|11/i,
    /^åäº|12/i,
  ],
};

const matchDayPatterns$2 = {
  narrow: /^[ä¸äºä¸åäºå­æ¥]/i,
  short: /^[ä¸äºä¸åäºå­æ¥]/i,
  abbreviated: /^å¨[ä¸äºä¸åäºå­æ¥]/i,
  wide: /^ææ[ä¸äºä¸åäºå­æ¥]/i,
};
const parseDayPatterns$2 = {
  any: [/æ¥/i, /ä¸/i, /äº/i, /ä¸/i, /å/i, /äº/i, /å­/i],
};

const matchDayPeriodPatterns$2 = {
  any: /^(ä¸å?|ä¸å?|åå¤|[ä¸­æ­£]å|æ©ä¸?|ä¸å|æä¸?|åæ¨|)/i,
};
const parseDayPeriodPatterns$2 = {
  any: {
    am: /^ä¸å?/i,
    pm: /^ä¸å?/i,
    midnight: /^åå¤/i,
    noon: /^[ä¸­æ­£]å/i,
    morning: /^æ©ä¸/i,
    afternoon: /^ä¸å/i,
    evening: /^æä¸?/i,
    night: /^åæ¨/i,
  },
};

(match$2.match = {
  ordinalNumber: (0, _index2$5.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$2,
    parsePattern: parseOrdinalNumberPattern$2,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$9.buildMatchFn)({
    matchPatterns: matchEraPatterns$2,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$2,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$9.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$2,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$2,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$9.buildMatchFn)({
    matchPatterns: matchMonthPatterns$2,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$2,
    defaultParseWidth: "any",
  }),

  day: (0, _index$9.buildMatchFn)({
    matchPatterns: matchDayPatterns$2,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$2,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$9.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$2,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$2,
    defaultParseWidth: "any",
  }),
});

zhCN.zhCN = void 0;
var _index$8 = formatDistance$5;
var _index2$4 = formatLong$2;
var _index3$2 = formatRelative$5;
var _index4$2 = localize$2;
var _index5$2 = match$2;

/**
 * @category Locales
 * @summary Chinese Simplified locale.
 * @language Chinese Simplified
 * @iso-639-2 zho
 * @author Changyu Geng [@KingMario](https://github.com/KingMario)
 * @author Song Shuoyun [@fnlctrl](https://github.com/fnlctrl)
 * @author sabrinaM [@sabrinamiao](https://github.com/sabrinamiao)
 * @author Carney Wu [@cubicwork](https://github.com/cubicwork)
 * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)
 */
(zhCN.zhCN = {
  code: "zh-CN",
  formatDistance: _index$8.formatDistance,
  formatLong: _index2$4.formatLong,
  formatRelative: _index3$2.formatRelative,
  localize: _index4$2.localize,
  match: _index5$2.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

var zhHK = {};

var formatDistance$3 = {};

formatDistance$3.formatDistance = void 0;

const formatDistanceLocale$1 = {
  lessThanXSeconds: {
    one: "å°æ¼ 1 ç§",
    other: "å°æ¼ {{count}} ç§",
  },

  xSeconds: {
    one: "1 ç§",
    other: "{{count}} ç§",
  },

  halfAMinute: "ååé",

  lessThanXMinutes: {
    one: "å°æ¼ 1 åé",
    other: "å°æ¼ {{count}} åé",
  },

  xMinutes: {
    one: "1 åé",
    other: "{{count}} åé",
  },

  xHours: {
    one: "1 å°æ",
    other: "{{count}} å°æ",
  },

  aboutXHours: {
    one: "å¤§ç´ 1 å°æ",
    other: "å¤§ç´ {{count}} å°æ",
  },

  xDays: {
    one: "1 å¤©",
    other: "{{count}} å¤©",
  },

  aboutXWeeks: {
    one: "å¤§ç´ 1 åææ",
    other: "å¤§ç´ {{count}} åææ",
  },

  xWeeks: {
    one: "1 åææ",
    other: "{{count}} åææ",
  },

  aboutXMonths: {
    one: "å¤§ç´ 1 åæ",
    other: "å¤§ç´ {{count}} åæ",
  },

  xMonths: {
    one: "1 åæ",
    other: "{{count}} åæ",
  },

  aboutXYears: {
    one: "å¤§ç´ 1 å¹´",
    other: "å¤§ç´ {{count}} å¹´",
  },

  xYears: {
    one: "1 å¹´",
    other: "{{count}} å¹´",
  },

  overXYears: {
    one: "è¶é 1 å¹´",
    other: "è¶é {{count}} å¹´",
  },

  almostXYears: {
    one: "å°è¿ 1 å¹´",
    other: "å°è¿ {{count}} å¹´",
  },
};

const formatDistance$2 = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale$1[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "å§";
    } else {
      return result + "å";
    }
  }

  return result;
};
formatDistance$3.formatDistance = formatDistance$2;

var formatLong$1 = {};

formatLong$1.formatLong = void 0;
var _index$7 = buildFormatLongFn$1;

const dateFormats$1 = {
  full: "y'å¹´'M'æ'd'æ¥' EEEE",
  long: "y'å¹´'M'æ'd'æ¥'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd",
};

const timeFormats$1 = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm",
};

const dateTimeFormats$1 = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong$1.formatLong = {
  date: (0, _index$7.buildFormatLongFn)({
    formats: dateFormats$1,
    defaultWidth: "full",
  }),

  time: (0, _index$7.buildFormatLongFn)({
    formats: timeFormats$1,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$7.buildFormatLongFn)({
    formats: dateTimeFormats$1,
    defaultWidth: "full",
  }),
});

var formatRelative$3 = {};

formatRelative$3.formatRelative = void 0;

const formatRelativeLocale$1 = {
  lastWeek: "'ä¸å'eeee p",
  yesterday: "'æ¨å¤©' p",
  today: "'ä»å¤©' p",
  tomorrow: "'æå¤©' p",
  nextWeek: "'ä¸å'eeee p",
  other: "P",
};

const formatRelative$2 = (token, _date, _baseDate, _options) =>
  formatRelativeLocale$1[token];
formatRelative$3.formatRelative = formatRelative$2;

var localize$1 = {};

localize$1.localize = void 0;
var _index$6 = buildLocalizeFn$1;

const eraValues$1 = {
  narrow: ["å", "å¬å"],
  abbreviated: ["å", "å¬å"],
  wide: ["å¬åå", "å¬å"],
};

const quarterValues$1 = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["ç¬¬ä¸å­£", "ç¬¬äºå­£", "ç¬¬ä¸å­£", "ç¬¬åå­£"],
  wide: ["ç¬¬ä¸å­£åº¦", "ç¬¬äºå­£åº¦", "ç¬¬ä¸å­£åº¦", "ç¬¬åå­£åº¦"],
};

const monthValues$1 = {
  narrow: [
    "ä¸",
    "äº",
    "ä¸",
    "å",
    "äº",
    "å­",
    "ä¸",
    "å«",
    "ä¹",
    "å",
    "åä¸",
    "åäº",
  ],

  abbreviated: [
    "1æ",
    "2æ",
    "3æ",
    "4æ",
    "5æ",
    "6æ",
    "7æ",
    "8æ",
    "9æ",
    "10æ",
    "11æ",
    "12æ",
  ],

  wide: [
    "ä¸æ",
    "äºæ",
    "ä¸æ",
    "åæ",
    "äºæ",
    "å­æ",
    "ä¸æ",
    "å«æ",
    "ä¹æ",
    "åæ",
    "åä¸æ",
    "åäºæ",
  ],
};

const dayValues$1 = {
  narrow: ["æ¥", "ä¸", "äº", "ä¸", "å", "äº", "å­"],
  short: ["æ¥", "ä¸", "äº", "ä¸", "å", "äº", "å­"],
  abbreviated: ["é±æ¥", "é±ä¸", "é±äº", "é±ä¸", "é±å", "é±äº", "é±å­"],

  wide: ["æææ¥", "ææä¸", "ææäº", "ææä¸", "ææå", "ææäº", "ææå­"],
};

const dayPeriodValues$1 = {
  narrow: {
    am: "ä¸",
    pm: "ä¸",
    midnight: "åå¤",
    noon: "æ",
    morning: "æ©",
    afternoon: "å",
    evening: "æ",
    night: "å¤",
  },
  abbreviated: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åå¤",
    noon: "ä¸­å",
    morning: "ä¸å",
    afternoon: "ä¸å",
    evening: "æä¸",
    night: "å¤æ",
  },
  wide: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åå¤",
    noon: "ä¸­å",
    morning: "ä¸å",
    afternoon: "ä¸å",
    evening: "æä¸",
    night: "å¤æ",
  },
};

const formattingDayPeriodValues$1 = {
  narrow: {
    am: "ä¸",
    pm: "ä¸",
    midnight: "åå¤",
    noon: "æ",
    morning: "æ©",
    afternoon: "å",
    evening: "æ",
    night: "å¤",
  },
  abbreviated: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åå¤",
    noon: "ä¸­å",
    morning: "ä¸å",
    afternoon: "ä¸å",
    evening: "æä¸",
    night: "å¤æ",
  },
  wide: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åå¤",
    noon: "ä¸­å",
    morning: "ä¸å",
    afternoon: "ä¸å",
    evening: "æä¸",
    night: "å¤æ",
  },
};

const ordinalNumber$1 = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);

  switch (options?.unit) {
    case "date":
      return number + "æ¥";
    case "hour":
      return number + "æ";
    case "minute":
      return number + "å";
    case "second":
      return number + "ç§";
    default:
      return "ç¬¬ " + number;
  }
};

(localize$1.localize = {
  ordinalNumber: ordinalNumber$1,

  era: (0, _index$6.buildLocalizeFn)({
    values: eraValues$1,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$6.buildLocalizeFn)({
    values: quarterValues$1,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$6.buildLocalizeFn)({
    values: monthValues$1,
    defaultWidth: "wide",
  }),

  day: (0, _index$6.buildLocalizeFn)({
    values: dayValues$1,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$6.buildLocalizeFn)({
    values: dayPeriodValues$1,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues$1,
    defaultFormattingWidth: "wide",
  }),
});

var match$1 = {};

match$1.match = void 0;

var _index$5 = buildMatchFn$1;
var _index2$3 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern$1 = /^(ç¬¬\s*)?\d+(æ¥|æ|å|ç§)?/i;
const parseOrdinalNumberPattern$1 = /\d+/i;

const matchEraPatterns$1 = {
  narrow: /^(å)/i,
  abbreviated: /^(å)/i,
  wide: /^(å¬åå|å¬å)/i,
};
const parseEraPatterns$1 = {
  any: [/^(å)/i, /^(å¬å)/i],
};

const matchQuarterPatterns$1 = {
  narrow: /^[1234]/i,
  abbreviated: /^ç¬¬[ä¸äºä¸å]å­£/i,
  wide: /^ç¬¬[ä¸äºä¸å]å­£åº¦/i,
};
const parseQuarterPatterns$1 = {
  any: [/(1|ä¸)/i, /(2|äº)/i, /(3|ä¸)/i, /(4|å)/i],
};

const matchMonthPatterns$1 = {
  narrow: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸])/i,
  abbreviated: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸]|\d|1[12])æ/i,
  wide: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸])æ/i,
};
const parseMonthPatterns$1 = {
  narrow: [
    /^ä¸/i,
    /^äº/i,
    /^ä¸/i,
    /^å/i,
    /^äº/i,
    /^å­/i,
    /^ä¸/i,
    /^å«/i,
    /^ä¹/i,
    /^å(?!(ä¸|äº))/i,
    /^åä¸/i,
    /^åäº/i,
  ],

  any: [
    /^ä¸|1/i,
    /^äº|2/i,
    /^ä¸|3/i,
    /^å|4/i,
    /^äº|5/i,
    /^å­|6/i,
    /^ä¸|7/i,
    /^å«|8/i,
    /^ä¹|9/i,
    /^å(?!(ä¸|äº))|10/i,
    /^åä¸|11/i,
    /^åäº|12/i,
  ],
};

const matchDayPatterns$1 = {
  narrow: /^[ä¸äºä¸åäºå­æ¥]/i,
  short: /^[ä¸äºä¸åäºå­æ¥]/i,
  abbreviated: /^é±[ä¸äºä¸åäºå­æ¥]/i,
  wide: /^ææ[ä¸äºä¸åäºå­æ¥]/i,
};
const parseDayPatterns$1 = {
  any: [/æ¥/i, /ä¸/i, /äº/i, /ä¸/i, /å/i, /äº/i, /å­/i],
};

const matchDayPeriodPatterns$1 = {
  any: /^(ä¸å?|ä¸å?|åå¤|[ä¸­æ­£]å|æ©ä¸?|ä¸å|æä¸?|åæ¨)/i,
};
const parseDayPeriodPatterns$1 = {
  any: {
    am: /^ä¸å?/i,
    pm: /^ä¸å?/i,
    midnight: /^åå¤/i,
    noon: /^[ä¸­æ­£]å/i,
    morning: /^æ©ä¸/i,
    afternoon: /^ä¸å/i,
    evening: /^æä¸?/i,
    night: /^åæ¨/i,
  },
};

(match$1.match = {
  ordinalNumber: (0, _index2$3.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern$1,
    parsePattern: parseOrdinalNumberPattern$1,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$5.buildMatchFn)({
    matchPatterns: matchEraPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns$1,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$5.buildMatchFn)({
    matchPatterns: matchQuarterPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns$1,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$5.buildMatchFn)({
    matchPatterns: matchMonthPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns$1,
    defaultParseWidth: "any",
  }),

  day: (0, _index$5.buildMatchFn)({
    matchPatterns: matchDayPatterns$1,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns$1,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$5.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns$1,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns$1,
    defaultParseWidth: "any",
  }),
});

zhHK.zhHK = void 0;
var _index$4 = formatDistance$3;
var _index2$2 = formatLong$1;
var _index3$1 = formatRelative$3;
var _index4$1 = localize$1;
var _index5$1 = match$1;

/**
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author Gary Ip [@gaplo](https://github.com/gaplo)
 */
(zhHK.zhHK = {
  code: "zh-HK",
  formatDistance: _index$4.formatDistance,
  formatLong: _index2$2.formatLong,
  formatRelative: _index3$1.formatRelative,
  localize: _index4$1.localize,
  match: _index5$1.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
});

var zhTW = {};

var formatDistance$1 = {};

formatDistance$1.formatDistance = void 0;

const formatDistanceLocale = {
  lessThanXSeconds: {
    one: "å°æ¼ 1 ç§",
    other: "å°æ¼ {{count}} ç§",
  },

  xSeconds: {
    one: "1 ç§",
    other: "{{count}} ç§",
  },

  halfAMinute: "ååé",

  lessThanXMinutes: {
    one: "å°æ¼ 1 åé",
    other: "å°æ¼ {{count}} åé",
  },

  xMinutes: {
    one: "1 åé",
    other: "{{count}} åé",
  },

  xHours: {
    one: "1 å°æ",
    other: "{{count}} å°æ",
  },

  aboutXHours: {
    one: "å¤§ç´ 1 å°æ",
    other: "å¤§ç´ {{count}} å°æ",
  },

  xDays: {
    one: "1 å¤©",
    other: "{{count}} å¤©",
  },

  aboutXWeeks: {
    one: "å¤§ç´ 1 åææ",
    other: "å¤§ç´ {{count}} åææ",
  },

  xWeeks: {
    one: "1 åææ",
    other: "{{count}} åææ",
  },

  aboutXMonths: {
    one: "å¤§ç´ 1 åæ",
    other: "å¤§ç´ {{count}} åæ",
  },

  xMonths: {
    one: "1 åæ",
    other: "{{count}} åæ",
  },

  aboutXYears: {
    one: "å¤§ç´ 1 å¹´",
    other: "å¤§ç´ {{count}} å¹´",
  },

  xYears: {
    one: "1 å¹´",
    other: "{{count}} å¹´",
  },

  overXYears: {
    one: "è¶é 1 å¹´",
    other: "è¶é {{count}} å¹´",
  },

  almostXYears: {
    one: "å°è¿ 1 å¹´",
    other: "å°è¿ {{count}} å¹´",
  },
};

const formatDistance = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "å§";
    } else {
      return result + "å";
    }
  }

  return result;
};
formatDistance$1.formatDistance = formatDistance;

var formatLong = {};

formatLong.formatLong = void 0;
var _index$3 = buildFormatLongFn$1;

const dateFormats = {
  full: "y'å¹´'M'æ'd'æ¥' EEEE",
  long: "y'å¹´'M'æ'd'æ¥'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd",
};

const timeFormats = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm",
};

const dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}",
};

(formatLong.formatLong = {
  date: (0, _index$3.buildFormatLongFn)({
    formats: dateFormats,
    defaultWidth: "full",
  }),

  time: (0, _index$3.buildFormatLongFn)({
    formats: timeFormats,
    defaultWidth: "full",
  }),

  dateTime: (0, _index$3.buildFormatLongFn)({
    formats: dateTimeFormats,
    defaultWidth: "full",
  }),
});

var formatRelative$1 = {};

formatRelative$1.formatRelative = void 0;

const formatRelativeLocale = {
  lastWeek: "'ä¸å'eeee p",
  yesterday: "'æ¨å¤©' p",
  today: "'ä»å¤©' p",
  tomorrow: "'æå¤©' p",
  nextWeek: "'ä¸å'eeee p",
  other: "P",
};

const formatRelative = (token, _date, _baseDate, _options) =>
  formatRelativeLocale[token];
formatRelative$1.formatRelative = formatRelative;

var localize = {};

localize.localize = void 0;
var _index$2 = buildLocalizeFn$1;

const eraValues = {
  narrow: ["å", "å¬å"],
  abbreviated: ["å", "å¬å"],
  wide: ["å¬åå", "å¬å"],
};

const quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["ç¬¬ä¸å»", "ç¬¬äºå»", "ç¬¬ä¸å»", "ç¬¬åå»"],
  wide: ["ç¬¬ä¸å»é", "ç¬¬äºå»é", "ç¬¬ä¸å»é", "ç¬¬åå»é"],
};

const monthValues = {
  narrow: [
    "ä¸",
    "äº",
    "ä¸",
    "å",
    "äº",
    "å­",
    "ä¸",
    "å«",
    "ä¹",
    "å",
    "åä¸",
    "åäº",
  ],

  abbreviated: [
    "1æ",
    "2æ",
    "3æ",
    "4æ",
    "5æ",
    "6æ",
    "7æ",
    "8æ",
    "9æ",
    "10æ",
    "11æ",
    "12æ",
  ],

  wide: [
    "ä¸æ",
    "äºæ",
    "ä¸æ",
    "åæ",
    "äºæ",
    "å­æ",
    "ä¸æ",
    "å«æ",
    "ä¹æ",
    "åæ",
    "åä¸æ",
    "åäºæ",
  ],
};

const dayValues = {
  narrow: ["æ¥", "ä¸", "äº", "ä¸", "å", "äº", "å­"],
  short: ["æ¥", "ä¸", "äº", "ä¸", "å", "äº", "å­"],
  abbreviated: ["é±æ¥", "é±ä¸", "é±äº", "é±ä¸", "é±å", "é±äº", "é±å­"],

  wide: ["æææ¥", "ææä¸", "ææäº", "ææä¸", "ææå", "ææäº", "ææå­"],
};

const dayPeriodValues = {
  narrow: {
    am: "ä¸",
    pm: "ä¸",
    midnight: "åæ¨",
    noon: "å",
    morning: "æ©",
    afternoon: "ä¸å",
    evening: "æ",
    night: "å¤",
  },
  abbreviated: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é",
  },
  wide: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é",
  },
};

const formattingDayPeriodValues = {
  narrow: {
    am: "ä¸",
    pm: "ä¸",
    midnight: "åæ¨",
    noon: "å",
    morning: "æ©",
    afternoon: "ä¸å",
    evening: "æ",
    night: "å¤",
  },
  abbreviated: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é",
  },
  wide: {
    am: "ä¸å",
    pm: "ä¸å",
    midnight: "åæ¨",
    noon: "ä¸­å",
    morning: "æ©æ¨",
    afternoon: "ä¸­å",
    evening: "æä¸",
    night: "å¤é",
  },
};

const ordinalNumber = (dirtyNumber, options) => {
  const number = Number(dirtyNumber);

  switch (options?.unit) {
    case "date":
      return number + "æ¥";
    case "hour":
      return number + "æ";
    case "minute":
      return number + "å";
    case "second":
      return number + "ç§";
    default:
      return "ç¬¬ " + number;
  }
};

(localize.localize = {
  ordinalNumber,

  era: (0, _index$2.buildLocalizeFn)({
    values: eraValues,
    defaultWidth: "wide",
  }),

  quarter: (0, _index$2.buildLocalizeFn)({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0, _index$2.buildLocalizeFn)({
    values: monthValues,
    defaultWidth: "wide",
  }),

  day: (0, _index$2.buildLocalizeFn)({
    values: dayValues,
    defaultWidth: "wide",
  }),

  dayPeriod: (0, _index$2.buildLocalizeFn)({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide",
  }),
});

var match = {};

match.match = void 0;

var _index$1 = buildMatchFn$1;
var _index2$1 = buildMatchPatternFn$1;

const matchOrdinalNumberPattern = /^(ç¬¬\s*)?\d+(æ¥|æ|å|ç§)?/i;
const parseOrdinalNumberPattern = /\d+/i;

const matchEraPatterns = {
  narrow: /^(å)/i,
  abbreviated: /^(å)/i,
  wide: /^(å¬åå|å¬å)/i,
};
const parseEraPatterns = {
  any: [/^(å)/i, /^(å¬å)/i],
};

const matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ç¬¬[ä¸äºä¸å]å»/i,
  wide: /^ç¬¬[ä¸äºä¸å]å»é/i,
};
const parseQuarterPatterns = {
  any: [/(1|ä¸)/i, /(2|äº)/i, /(3|ä¸)/i, /(4|å)/i],
};

const matchMonthPatterns = {
  narrow: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸])/i,
  abbreviated: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸]|\d|1[12])æ/i,
  wide: /^(ä¸|äº|ä¸|å|äº|å­|ä¸|å«|ä¹|å[äºä¸])æ/i,
};
const parseMonthPatterns = {
  narrow: [
    /^ä¸/i,
    /^äº/i,
    /^ä¸/i,
    /^å/i,
    /^äº/i,
    /^å­/i,
    /^ä¸/i,
    /^å«/i,
    /^ä¹/i,
    /^å(?!(ä¸|äº))/i,
    /^åä¸/i,
    /^åäº/i,
  ],

  any: [
    /^ä¸|1/i,
    /^äº|2/i,
    /^ä¸|3/i,
    /^å|4/i,
    /^äº|5/i,
    /^å­|6/i,
    /^ä¸|7/i,
    /^å«|8/i,
    /^ä¹|9/i,
    /^å(?!(ä¸|äº))|10/i,
    /^åä¸|11/i,
    /^åäº|12/i,
  ],
};

const matchDayPatterns = {
  narrow: /^[ä¸äºä¸åäºå­æ¥]/i,
  short: /^[ä¸äºä¸åäºå­æ¥]/i,
  abbreviated: /^é±[ä¸äºä¸åäºå­æ¥]/i,
  wide: /^ææ[ä¸äºä¸åäºå­æ¥]/i,
};
const parseDayPatterns = {
  any: [/æ¥/i, /ä¸/i, /äº/i, /ä¸/i, /å/i, /äº/i, /å­/i],
};

const matchDayPeriodPatterns = {
  any: /^(ä¸å?|ä¸å?|åå¤|[ä¸­æ­£]å|æ©ä¸?|ä¸å|æä¸?|åæ¨)/i,
};
const parseDayPeriodPatterns = {
  any: {
    am: /^ä¸å?/i,
    pm: /^ä¸å?/i,
    midnight: /^åå¤/i,
    noon: /^[ä¸­æ­£]å/i,
    morning: /^æ©ä¸/i,
    afternoon: /^ä¸å/i,
    evening: /^æä¸?/i,
    night: /^åæ¨/i,
  },
};

(match.match = {
  ordinalNumber: (0, _index2$1.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0, _index$1.buildMatchFn)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any",
  }),

  quarter: (0, _index$1.buildMatchFn)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0, _index$1.buildMatchFn)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any",
  }),

  day: (0, _index$1.buildMatchFn)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0, _index$1.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any",
  }),
});

zhTW.zhTW = void 0;
var _index = formatDistance$1;
var _index2 = formatLong;
var _index3 = formatRelative$1;
var _index4 = localize;
var _index5 = match;

/**
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author tonypai [@tpai](https://github.com/tpai)
 * @author Jack Hsu [@jackhsu978](https://github.com/jackhsu978)
 * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)
 */
(zhTW.zhTW = {
  code: "zh-TW",
  formatDistance: _index.formatDistance,
  formatLong: _index2.formatLong,
  formatRelative: _index3.formatRelative,
  localize: _index4.localize,
  match: _index5.match,
  options: {
    weekStartsOn: 1 /* Monday */,
    firstWeekContainsDate: 4,
  },
});

(function (exports) {

var _index = af;
Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    },
  });
});
var _index2 = ar;
Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    },
  });
});
var _index3 = arDZ;
Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    },
  });
});
var _index4 = arEG;
Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    },
  });
});
var _index5 = arMA;
Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    },
  });
});
var _index6 = arSA;
Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index6[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    },
  });
});
var _index7 = arTN;
Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index7[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    },
  });
});
var _index8 = az;
Object.keys(_index8).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index8[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index8[key];
    },
  });
});
var _index9 = be;
Object.keys(_index9).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index9[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index9[key];
    },
  });
});
var _index10 = beTarask;
Object.keys(_index10).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index10[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index10[key];
    },
  });
});
var _index11 = bg;
Object.keys(_index11).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index11[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index11[key];
    },
  });
});
var _index12 = bn;
Object.keys(_index12).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index12[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index12[key];
    },
  });
});
var _index13 = bs;
Object.keys(_index13).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index13[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index13[key];
    },
  });
});
var _index14 = ca;
Object.keys(_index14).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index14[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index14[key];
    },
  });
});
var _index15 = ckb;
Object.keys(_index15).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index15[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index15[key];
    },
  });
});
var _index16 = cs;
Object.keys(_index16).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index16[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index16[key];
    },
  });
});
var _index17 = cy;
Object.keys(_index17).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index17[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index17[key];
    },
  });
});
var _index18 = da;
Object.keys(_index18).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index18[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index18[key];
    },
  });
});
var _index19 = de;
Object.keys(_index19).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index19[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index19[key];
    },
  });
});
var _index20 = deAT;
Object.keys(_index20).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index20[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index20[key];
    },
  });
});
var _index21 = el;
Object.keys(_index21).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index21[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index21[key];
    },
  });
});
var _index22 = enAU;
Object.keys(_index22).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index22[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index22[key];
    },
  });
});
var _index23 = enCA;
Object.keys(_index23).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index23[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index23[key];
    },
  });
});
var _index24 = enGB;
Object.keys(_index24).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index24[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index24[key];
    },
  });
});
var _index25 = enIE;
Object.keys(_index25).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index25[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index25[key];
    },
  });
});
var _index26 = enIN;
Object.keys(_index26).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index26[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index26[key];
    },
  });
});
var _index27 = enNZ;
Object.keys(_index27).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index27[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index27[key];
    },
  });
});
var _index28 = enUS;
Object.keys(_index28).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index28[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index28[key];
    },
  });
});
var _index29 = enZA;
Object.keys(_index29).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index29[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index29[key];
    },
  });
});
var _index30 = eo;
Object.keys(_index30).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index30[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index30[key];
    },
  });
});
var _index31 = es;
Object.keys(_index31).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index31[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index31[key];
    },
  });
});
var _index32 = et;
Object.keys(_index32).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index32[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index32[key];
    },
  });
});
var _index33 = eu;
Object.keys(_index33).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index33[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index33[key];
    },
  });
});
var _index34 = faIR;
Object.keys(_index34).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index34[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index34[key];
    },
  });
});
var _index35 = fi;
Object.keys(_index35).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index35[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index35[key];
    },
  });
});
var _index36 = fr;
Object.keys(_index36).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index36[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index36[key];
    },
  });
});
var _index37 = frCA;
Object.keys(_index37).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index37[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index37[key];
    },
  });
});
var _index38 = frCH;
Object.keys(_index38).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index38[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index38[key];
    },
  });
});
var _index39 = fy;
Object.keys(_index39).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index39[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index39[key];
    },
  });
});
var _index40 = gd;
Object.keys(_index40).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index40[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index40[key];
    },
  });
});
var _index41 = gl;
Object.keys(_index41).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index41[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index41[key];
    },
  });
});
var _index42 = gu;
Object.keys(_index42).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index42[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index42[key];
    },
  });
});
var _index43 = he;
Object.keys(_index43).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index43[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index43[key];
    },
  });
});
var _index44 = hi;
Object.keys(_index44).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index44[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index44[key];
    },
  });
});
var _index45 = hr;
Object.keys(_index45).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index45[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index45[key];
    },
  });
});
var _index46 = ht;
Object.keys(_index46).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index46[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index46[key];
    },
  });
});
var _index47 = hu;
Object.keys(_index47).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index47[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index47[key];
    },
  });
});
var _index48 = hy;
Object.keys(_index48).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index48[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index48[key];
    },
  });
});
var _index49 = id;
Object.keys(_index49).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index49[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index49[key];
    },
  });
});
var _index50 = is;
Object.keys(_index50).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index50[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index50[key];
    },
  });
});
var _index51 = it;
Object.keys(_index51).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index51[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index51[key];
    },
  });
});
var _index52 = itCH;
Object.keys(_index52).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index52[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index52[key];
    },
  });
});
var _index53 = ja;
Object.keys(_index53).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index53[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index53[key];
    },
  });
});
var _index54 = jaHira;
Object.keys(_index54).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index54[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index54[key];
    },
  });
});
var _index55 = ka;
Object.keys(_index55).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index55[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index55[key];
    },
  });
});
var _index56 = kk;
Object.keys(_index56).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index56[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index56[key];
    },
  });
});
var _index57 = km;
Object.keys(_index57).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index57[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index57[key];
    },
  });
});
var _index58 = kn;
Object.keys(_index58).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index58[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index58[key];
    },
  });
});
var _index59 = ko;
Object.keys(_index59).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index59[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index59[key];
    },
  });
});
var _index60 = lb;
Object.keys(_index60).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index60[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index60[key];
    },
  });
});
var _index61 = lt;
Object.keys(_index61).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index61[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index61[key];
    },
  });
});
var _index62 = lv;
Object.keys(_index62).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index62[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index62[key];
    },
  });
});
var _index63 = mk;
Object.keys(_index63).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index63[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index63[key];
    },
  });
});
var _index64 = mn;
Object.keys(_index64).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index64[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index64[key];
    },
  });
});
var _index65 = ms;
Object.keys(_index65).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index65[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index65[key];
    },
  });
});
var _index66 = mt;
Object.keys(_index66).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index66[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index66[key];
    },
  });
});
var _index67 = nb;
Object.keys(_index67).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index67[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index67[key];
    },
  });
});
var _index68 = nl;
Object.keys(_index68).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index68[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index68[key];
    },
  });
});
var _index69 = nlBE;
Object.keys(_index69).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index69[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index69[key];
    },
  });
});
var _index70 = nn;
Object.keys(_index70).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index70[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index70[key];
    },
  });
});
var _index71 = oc;
Object.keys(_index71).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index71[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index71[key];
    },
  });
});
var _index72 = pl;
Object.keys(_index72).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index72[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index72[key];
    },
  });
});
var _index73 = pt;
Object.keys(_index73).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index73[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index73[key];
    },
  });
});
var _index74 = ptBR;
Object.keys(_index74).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index74[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index74[key];
    },
  });
});
var _index75 = ro;
Object.keys(_index75).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index75[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index75[key];
    },
  });
});
var _index76 = ru;
Object.keys(_index76).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index76[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index76[key];
    },
  });
});
var _index77 = se;
Object.keys(_index77).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index77[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index77[key];
    },
  });
});
var _index78 = sk;
Object.keys(_index78).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index78[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index78[key];
    },
  });
});
var _index79 = sl;
Object.keys(_index79).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index79[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index79[key];
    },
  });
});
var _index80 = sq;
Object.keys(_index80).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index80[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index80[key];
    },
  });
});
var _index81 = sr;
Object.keys(_index81).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index81[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index81[key];
    },
  });
});
var _index82 = srLatn;
Object.keys(_index82).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index82[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index82[key];
    },
  });
});
var _index83 = sv;
Object.keys(_index83).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index83[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index83[key];
    },
  });
});
var _index84 = ta;
Object.keys(_index84).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index84[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index84[key];
    },
  });
});
var _index85 = te;
Object.keys(_index85).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index85[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index85[key];
    },
  });
});
var _index86 = th;
Object.keys(_index86).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index86[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index86[key];
    },
  });
});
var _index87 = tr;
Object.keys(_index87).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index87[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index87[key];
    },
  });
});
var _index88 = ug;
Object.keys(_index88).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index88[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index88[key];
    },
  });
});
var _index89 = uk;
Object.keys(_index89).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index89[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index89[key];
    },
  });
});
var _index90 = uz;
Object.keys(_index90).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index90[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index90[key];
    },
  });
});
var _index91 = uzCyrl;
Object.keys(_index91).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index91[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index91[key];
    },
  });
});
var _index92 = vi;
Object.keys(_index92).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index92[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index92[key];
    },
  });
});
var _index93 = zhCN;
Object.keys(_index93).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index93[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index93[key];
    },
  });
});
var _index94 = zhHK;
Object.keys(_index94).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index94[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index94[key];
    },
  });
});
var _index95 = zhTW;
Object.keys(_index95).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index95[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index95[key];
    },
  });
});
}(locale));

const initialState$1 = {
    nonBookableNights: null,
    childrenStartAge: 3,
    currentPage: 'booking',
    dir: 'LTR',
    selectedLocale: locale.enUS,
    localizedWords: [],
    userPreferences: {
        currency_id: 'usd',
        language_id: 'en',
    },
    invoice: null,
    app_data: {
        origin: null,
        override_rp: false,
        displayMode: 'default',
        affiliate: null,
        stag: null,
        token: '',
        property_id: null,
        injected: false,
        roomtype_id: null,
        tag: null,
        source: null,
        hideGoogleSignIn: false,
        isFromGhs: false,
        isAgentMode: false,
        aName: null,
        perma_link: null,
    },
    property: undefined,
    setup_entries: undefined,
    currencies: [],
    userDefaultCountry: undefined,
    fetchedBooking: false,
    languages: [],
    is_signed_in: false,
    email: null,
};
const { state: app_store, onChange: onAppDataChange } = createStore(initialState$1);
function changeLocale(dir, locale) {
    document.body.dir = dir;
    app_store.dir = dir;
    app_store.selectedLocale = locale;
}
function updateUserPreference(params) {
    app_store.userPreferences = Object.assign(Object.assign({}, app_store.userPreferences), params);
}

class VariationService {
    /**
     * Formats a variation based on the number of infants and returns a formatted string.
     * @param {Object} params - The input parameters.
     * @param {Variation} params.baseVariation - The base variation object.
     * @param {Variation[]} params.variations - A list of available variations.
     * @param {number} params.infants - The number of infants to adjust the variation for.
     * @returns {string} A formatted string describing the variation adjusted for infants.
     */
    formatVariationBasedOnInfants(params) {
        const variation = this.getVariationBasedOnInfants(params);
        return this.formatVariation(variation, params.infants);
    }
    /**
     * Calculates the discounted amount for a variation adjusted for the number of infants.
     * @param {Object} params - The input parameters.
     * @param {Variation} params.baseVariation - The base variation object.
     * @param {Variation[]} params.variations - A list of available variations.
     * @param {number} params.infants - The number of infants to consider for adjustments.
     * @returns {number} The discounted amount for the selected variation, or 0 if no discounted amount is available.
     */
    calculateVariationAmount(params) {
        var _a;
        return ((_a = this.getVariationBasedOnInfants(params)) === null || _a === void 0 ? void 0 : _a.discounted_amount) || 0;
    }
    /**
     * Finds the appropriate variation from a list of variations based on the number of infants.
     * @param {Object} params - The input parameters.
     * @param {Variation} params.baseVariation - The base variation object.
     * @param {Variation[]} params.variations - A list of available variations.
     * @param {number} params.infants - The number of infants to adjust for.
     * @returns {Variation} The matching variation or the base variation if no match is found.
     */
    getVariationBasedOnInfants({ variations, baseVariation, infants }) {
        const { adult_nbr, child_nbr } = baseVariation;
        return variations.find(v => v.adult_nbr === adult_nbr && v.child_nbr === Math.max(0, child_nbr - Math.max(0, infants))) || baseVariation;
    }
    /**
     * Formats a variation object into a human-readable string, adjusted for the number of infants.
     * @param {Variation} variation - The variation object to format.
     * @param {number} infant_nbr - The number of infants to adjust for.
     * @returns {string} A formatted string representing the variation.
     * @private
     */
    formatVariation({ child_nbr, adult_nbr }, infant_nbr) {
        var _a, _b, _c, _d;
        const adultNumber = Number(adult_nbr) || 0;
        const infantNumber = Math.max(Number(infant_nbr) || 0, 0);
        const adultLabel = adultNumber > 1 ? localizedWords.entries.Lcz_Adults.toLowerCase() : localizedWords.entries.Lcz_Adult.toLowerCase();
        const childLabel = child_nbr > 1 ? localizedWords.entries.Lcz_Children.toLowerCase() : localizedWords.entries.Lcz_Child.toLowerCase();
        const infantLabel = infantNumber > 1 ? (_b = ((_a = localizedWords.entries['Lcz_Infants']) !== null && _a !== void 0 ? _a : 'infants')) === null || _b === void 0 ? void 0 : _b.toLowerCase() : (_d = ((_c = localizedWords === null || localizedWords === void 0 ? void 0 : localizedWords.entries['Lcz_Infant']) !== null && _c !== void 0 ? _c : 'infant')) === null || _d === void 0 ? void 0 : _d.toLowerCase();
        const parts = [`${adultNumber} ${adultLabel}`, child_nbr ? `${child_nbr} ${childLabel}` : '', infantNumber ? `${infantNumber} ${infantLabel}` : ''];
        return parts.filter(Boolean).join('  ');
    }
}

const initialState = {
    tax_statement: null,
    roomTypes: undefined,
    childrenAges: [],
    enableBooking: false,
    resetBooking: false,
    ratePlanSelections: {},
    isInFreeCancelationZone: false,
    bookingAvailabilityParams: {
        from_date: null,
        to_date: null,
        adult_nbr: 0,
        child_nbr: 0,
    },
    booking: null,
    fictus_booking_nbr: null,
};
const { state: booking_store, onChange: onRoomTypeChange } = createStore(initialState);
function checkVariation(variations, selected_variation) {
    var _a;
    if (!variations) {
        return null;
    }
    if (!selected_variation || booking_store.resetBooking) {
        return variations[0];
    }
    return (_a = variations === null || variations === void 0 ? void 0 : variations.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr)) !== null && _a !== void 0 ? _a : null;
}
onRoomTypeChange('roomTypes', (newValue) => {
    const currentSelections = booking_store.ratePlanSelections;
    const ratePlanSelections = {};
    newValue.forEach(roomType => {
        if (!roomType.is_active)
            return;
        ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};
        roomType.rateplans.forEach(ratePlan => {
            var _a, _c, _d, _e;
            if (!ratePlan.is_active || !((_a = ratePlan === null || ratePlan === void 0 ? void 0 : ratePlan.variations) === null || _a === void 0 ? void 0 : _a.length))
                return;
            const currentRatePlanSelection = (_c = currentSelections[roomType.id]) === null || _c === void 0 ? void 0 : _c[ratePlan.id];
            ratePlanSelections[roomType.id][ratePlan.id] =
                currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0
                    ? Object.assign(Object.assign({}, currentRatePlanSelection), { ratePlan, selected_variation: (_d = checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation)) !== null && _d !== void 0 ? _d : null, visibleInventory: roomType.inventory === 1 ? 2 : roomType.inventory, reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved, checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations, checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection, checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection, guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName, roomtype: Object.assign({}, currentRatePlanSelection.roomtype) }) : {
                    reserved: 0,
                    infant_nbr: [],
                    visibleInventory: roomType.inventory === 1 ? 2 : roomType.inventory,
                    selected_variation: (_e = ratePlan === null || ratePlan === void 0 ? void 0 : ratePlan.variations[0]) !== null && _e !== void 0 ? _e : null,
                    ratePlan,
                    guestName: [],
                    is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,
                    roomtype: Object.assign(Object.assign({}, roomType), { physicalrooms: null, rateplans: null, availabilities: null }),
                    checkoutVariations: [],
                    checkoutBedSelection: [],
                    checkoutSmokingSelection: [],
                };
        });
    });
    booking_store.ratePlanSelections = ratePlanSelections;
    booking_store.resetBooking = false;
});
function updateInventory(roomTypeId) {
    const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];
    const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId) => {
        return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {
            return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;
        }, 0);
    };
    const newRatePlans = Object.fromEntries(Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {
        const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));
        const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);
        const availableRooms = roomTypeData ? (roomTypeData.inventory === 1 ? 2 : roomTypeData.inventory) - totalSelectedRoomsExcludingCurrent : 0;
        return [
            ratePlanId,
            Object.assign(Object.assign({}, ratePlan), { visibleInventory: availableRooms > 0 ? availableRooms : 0 }),
        ];
    }));
    if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {
        booking_store.ratePlanSelections = Object.assign(Object.assign({}, booking_store.ratePlanSelections), { [roomTypeId]: newRatePlans });
    }
}
function updateRoomParams({ ratePlanId, roomTypeId, params }) {
    booking_store.ratePlanSelections = Object.assign(Object.assign({}, booking_store.ratePlanSelections), { [Number(roomTypeId)]: Object.assign(Object.assign({}, booking_store.ratePlanSelections[Number(roomTypeId)]), { [ratePlanId]: Object.assign(Object.assign({}, booking_store.ratePlanSelections[roomTypeId][ratePlanId]), params) }) });
}
function reserveRooms(roomTypeId, ratePlanId, rooms) {
    var _a;
    if (!booking_store.ratePlanSelections[roomTypeId]) {
        booking_store.ratePlanSelections[roomTypeId] = {};
    }
    const roomType = (_a = booking_store.roomTypes) === null || _a === void 0 ? void 0 : _a.find(r => r.id === roomTypeId);
    if (!roomType) {
        throw new Error('Invalid room type id');
    }
    const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);
    if (!ratePlan) {
        throw new Error('Invalid rate plan');
    }
    if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {
        booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {
            guestName: null,
            reserved: 0,
            infant_nbr: [],
            is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,
            visibleInventory: 0,
            selected_variation: null,
            ratePlan,
            checkoutVariations: [],
            checkoutBedSelection: [],
            checkoutSmokingSelection: [],
            roomtype: {
                id: roomType.id,
                name: roomType.name,
                physicalrooms: null,
                rateplans: null,
                availabilities: null,
                inventory: roomType.inventory,
                rate: roomType.rate,
                bedding_setup: roomType.bedding_setup,
                smoking_option: roomType.smoking_option,
            },
        };
    }
    booking_store.ratePlanSelections = Object.assign(Object.assign({}, booking_store.ratePlanSelections), { [Number(roomTypeId)]: Object.assign(Object.assign({}, booking_store.ratePlanSelections[Number(roomTypeId)]), { [ratePlanId]: Object.assign(Object.assign({}, booking_store.ratePlanSelections[roomTypeId][ratePlanId]), { reserved: rooms, checkoutVariations: [] }) }) });
    updateInventory(roomTypeId);
}
function getVisibleInventory(roomTypeId, ratePlanId) {
    if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {
        return { reserved: 0, visibleInventory: 0, selected_variation: null };
    }
    return booking_store.ratePlanSelections[roomTypeId][ratePlanId];
}
function modifyBookingStore(key, value) {
    booking_store[key] = value;
}
// export function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {
//   let prePaymentAmount = 0;
//   let totalAmount = 0;
//   const variationService = new VariationService();
//   const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {
//     if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {
//       if (isPrePayment) {
//         return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;
//       }
//       return ratePlan.checkoutVariations.reduce((sum, variation, index) => {
//         const infantBasedVariation = variationService.getVariationBasedOnInfants({
//           variations: ratePlan.ratePlan.variations,
//           baseVariation: variation,
//           infants: ratePlan.infant_nbr[index],
//         });
//         return sum + Number(infantBasedVariation[gross ? 'discounted_gross_amount' : 'discounted_amount']);
//       }, 0);
//     } else if (ratePlan.reserved > 0) {
//       const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];
//       return ratePlan.reserved * (amount ?? 0);
//     }
//     return 0;
//   };
//   Object.values(booking_store.ratePlanSelections).forEach(value => {
//     Object.values(value).forEach(ratePlan => {
//       totalAmount += calculateCost(ratePlan);
//       prePaymentAmount += calculateCost(ratePlan, true);
//     });
//   });
//   return { totalAmount, prePaymentAmount };
// }
function calculateTotalCost(gross = false) {
    let prePaymentAmount = 0;
    let totalAmount = 0;
    const variationService = new VariationService();
    // Helper to calculate cost for a single rate plan
    const calculateCost = (ratePlan, isPrePayment) => {
        var _a;
        if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {
            const variations = ratePlan.checkoutVariations.map((variation, index) => variationService.getVariationBasedOnInfants({
                variations: ratePlan.ratePlan.variations,
                baseVariation: variation,
                infants: ratePlan.infant_nbr[index],
            }));
            return variations.reduce((sum, infantBasedVariation) => {
                const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount || 0 : infantBasedVariation[gross ? 'discounted_gross_amount' : 'discounted_amount'] || 0;
                return sum + amount * ratePlan.reserved;
            }, 0);
        }
        else if (ratePlan.reserved > 0) {
            const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount || 0 : ((_a = ratePlan.selected_variation) === null || _a === void 0 ? void 0 : _a[gross ? 'discounted_gross_amount' : 'discounted_amount']) || 0;
            return amount * ratePlan.reserved;
        }
        return 0;
    };
    // Iterate through rate plan selections
    Object.values(booking_store.ratePlanSelections).forEach(roomTypeSelection => {
        Object.values(roomTypeSelection).forEach(ratePlan => {
            totalAmount += calculateCost(ratePlan, false);
            prePaymentAmount += calculateCost(ratePlan, true);
        });
    });
    return { totalAmount, prePaymentAmount };
}
// export function validateBooking() {
//   return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>
//     Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),
//   );
// }
// export function validateBooking() {
//   return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>
//     Object.values(roomTypeSelection).every(ratePlan => {
//       console.log(ratePlan);
//       return (
//         (ratePlan.guestName.every(name => name.trim() !== '') &&
//           (!ratePlan.is_bed_configuration_enabled || ratePlan.checkoutBedSelection.every(selection => selection !== '-1'))) ||
//         Number(ratePlan.infant_nbr) !== -1
//       );
//     }),
//   );
// }
function validateBooking() {
    return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection => Object.values(roomTypeSelection).every(ratePlan => {
        // console.log(ratePlan);
        return (
        // Check guestName: All names must be non-empty
        ratePlan.guestName.every(name => name.trim() !== '') &&
            // Check bed configuration: If enabled, all selections must be valid
            (!ratePlan.is_bed_configuration_enabled || ratePlan.checkoutBedSelection.every(selection => selection !== '-1')) &&
            // Check infant_nbr: Must be greater than -1
            ratePlan.infant_nbr.every(nb => Number(nb) > -1));
    }));
}
function calculateTotalRooms() {
    return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {
        return (total +
            Object.values(value).reduce((innerTotal, ratePlan) => {
                if (ratePlan.reserved === 0) {
                    return innerTotal;
                }
                return innerTotal + ratePlan.reserved;
            }, 0));
    }, 0);
}

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

var dateFns = {};

var bundleCjs = {};

(function (exports) {

Object.defineProperty(exports, Symbol.toStringTag, {
  value: 'Module'
});
const CLASS_PART_SEPARATOR = '-';
function createClassUtils(config) {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  function getClassGroupId(className) {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
    if (classParts[0] === '' && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return undefined;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return classPartObject.validators.find(({
    validator
  }) => validator(classRest))?.classGroupId;
}
const arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));
    if (property) {
      // I use two dots here because one dot is used as prefix for class groups in plugins
      return 'arbitrary..' + property;
    }
  }
}
/**
 * Exported for testing only
 */
function createClassMap(config) {
  const {
    theme,
    prefix
  } = config;
  const classMap = {
    nextPart: new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach(classDefinition => {
    if (typeof classDefinition === 'string') {
      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === 'function') {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup]) => {
      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path) {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map(classDefinition => {
      if (typeof classDefinition === 'string') {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === 'object') {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}

// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: () => undefined,
      set: () => {}
    };
  }
  let cacheSize = 0;
  let cache = new Map();
  let previousCache = new Map();
  function update(key, value) {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = new Map();
    }
  }
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== undefined) {
        return value;
      }
      if ((value = previousCache.get(key)) !== undefined) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}
const IMPORTANT_MODIFIER = '!';
function createSplitModifiers(config) {
  const separator = config.separator;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  // splitModifiers inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
  return function splitModifiers(className) {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index = 0; index < className.length; index++) {
      let currentCharacter = className[index];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index));
          modifierStart = index + separatorLength;
          continue;
        }
        if (currentCharacter === '/') {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === '[') {
        bracketDepth++;
      } else if (currentCharacter === ']') {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
/**
 * Sorts modifiers according to following schema:
 * - Predefined modifiers are sorted alphabetically
 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
 */
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach(modifier => {
    const isArbitraryVariant = modifier[0] === '[';
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
}
function createConfigUtils(config) {
  return {
    cache: createLruCache(config.cacheSize),
    splitModifiers: createSplitModifiers(config),
    ...createClassUtils(config)
  };
}
const SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  const {
    splitModifiers,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example 'md:!pr'
   */
  const classGroupsInConflict = new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(originalClassName => {
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = splitModifiers(originalClassName);
    let classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(':');
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse()
  // Last class in conflict wins, so we need to filter conflicting classes in reverse order.
  .filter(parsed => {
    if (!parsed.isTailwindClass) {
      return true;
    }
    const {
      modifierId,
      classGroupId,
      hasPostfixModifier
    } = parsed;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(group => classGroupsInConflict.add(modifierId + group));
    return true;
  }).reverse().map(parsed => parsed.originalClassName).join(' ');
}

/**
 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
 *
 * Specifically:
 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
 *
 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
 */
function twJoin() {
  let index = 0;
  let argument;
  let resolvedValue;
  let string = '';
  while (index < arguments.length) {
    if (argument = arguments[index++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += ' ');
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue(mix) {
  if (typeof mix === 'string') {
    return mix;
  }
  let resolvedValue;
  let string = '';
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue(mix[k])) {
        string && (string += ' ');
        string += resolvedValue;
      }
    }
  }
  return string;
}
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
function fromTheme(key) {
  const themeGetter = theme => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
}
const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
const fractionRegex = /^\d+\/\d+$/;
const stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
// Shadow always begins with x and y offset separated by underscore optionally prepended by inset
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
function isLength(value) {
  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, 'length', isLengthOnly);
}
function isNumber(value) {
  return Boolean(value) && !Number.isNaN(Number(value));
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, 'number', isNumber);
}
function isInteger(value) {
  return Boolean(value) && Number.isInteger(Number(value));
}
function isPercent(value) {
  return value.endsWith('%') && isNumber(value.slice(0, -1));
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
const sizeLabels = /*#__PURE__*/new Set(['length', 'size', 'percentage']);
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, sizeLabels, isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, 'position', isNever);
}
const imageLabels = /*#__PURE__*/new Set(['image', 'url']);
function isArbitraryImage(value) {
  return getIsArbitraryValue(value, imageLabels, isImage);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, '', isShadow);
}
function isAny() {
  return true;
}
function getIsArbitraryValue(value, label, testValue) {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === 'string' ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  return lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
}
function isNever() {
  return false;
}
function isShadow(value) {
  return shadowRegex.test(value);
}
function isImage(value) {
  return imageRegex.test(value);
}
const validators = /*#__PURE__*/Object.defineProperty({
  __proto__: null,
  isAny,
  isArbitraryImage,
  isArbitraryLength,
  isArbitraryNumber,
  isArbitraryPosition,
  isArbitraryShadow,
  isArbitrarySize,
  isArbitraryValue,
  isInteger,
  isLength,
  isNumber,
  isPercent,
  isTshirtSize
}, Symbol.toStringTag, {
  value: 'Module'
});
function getDefaultConfig() {
  const colors = fromTheme('colors');
  const spacing = fromTheme('spacing');
  const blur = fromTheme('blur');
  const brightness = fromTheme('brightness');
  const borderColor = fromTheme('borderColor');
  const borderRadius = fromTheme('borderRadius');
  const borderSpacing = fromTheme('borderSpacing');
  const borderWidth = fromTheme('borderWidth');
  const contrast = fromTheme('contrast');
  const grayscale = fromTheme('grayscale');
  const hueRotate = fromTheme('hueRotate');
  const invert = fromTheme('invert');
  const gap = fromTheme('gap');
  const gradientColorStops = fromTheme('gradientColorStops');
  const gradientColorStopPositions = fromTheme('gradientColorStopPositions');
  const inset = fromTheme('inset');
  const margin = fromTheme('margin');
  const opacity = fromTheme('opacity');
  const padding = fromTheme('padding');
  const saturate = fromTheme('saturate');
  const scale = fromTheme('scale');
  const sepia = fromTheme('sepia');
  const skew = fromTheme('skew');
  const space = fromTheme('space');
  const translate = fromTheme('translate');
  const getOverscroll = () => ['auto', 'contain', 'none'];
  const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];
  const getSpacingWithAutoAndArbitrary = () => ['auto', isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ['', isLength, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ['auto', isNumber, isArbitraryValue];
  const getPositions = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];
  const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none'];
  const getBlendModes = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity', 'plus-lighter'];
  const getAlign = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];
  const getZeroAndEmpty = () => ['', '0', isArbitraryValue];
  const getBreaks = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];
  const getNumber = () => [isNumber, isArbitraryNumber];
  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ':',
    theme: {
      colors: [isAny],
      spacing: [isLength, isArbitraryLength],
      blur: ['none', '', isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ['auto', 'square', 'video', isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ['container'],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      'break-after': [{
        'break-after': getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      'break-before': [{
        'break-before': getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      'break-inside': [{
        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      'box-decoration': [{
        'box-decoration': ['slice', 'clone']
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ['border', 'content']
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ['right', 'left', 'none', 'start', 'end']
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ['left', 'right', 'both', 'none', 'start', 'end']
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ['isolate', 'isolation-auto'],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      'object-fit': [{
        object: ['contain', 'cover', 'fill', 'none', 'scale-down']
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      'object-position': [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      'overflow-x': [{
        'overflow-x': getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      'overflow-y': [{
        'overflow-y': getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      'overscroll-x': [{
        'overscroll-x': getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      'overscroll-y': [{
        'overscroll-y': getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      'inset-x': [{
        'inset-x': [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      'inset-y': [{
        'inset-y': [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ['visible', 'invisible', 'collapse'],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ['auto', isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      'flex-direction': [{
        flex: ['row', 'row-reverse', 'col', 'col-reverse']
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      'flex-wrap': [{
        flex: ['wrap', 'wrap-reverse', 'nowrap']
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ['first', 'last', 'none', isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      'grid-cols': [{
        'grid-cols': [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-start-end': [{
        col: ['auto', {
          span: ['full', isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-start': [{
        'col-start': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-end': [{
        'col-end': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      'grid-rows': [{
        'grid-rows': [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-start-end': [{
        row: ['auto', {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-start': [{
        'row-start': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-end': [{
        'row-end': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      'grid-flow': [{
        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      'auto-cols': [{
        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      'auto-rows': [{
        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      'gap-x': [{
        'gap-x': [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      'gap-y': [{
        'gap-y': [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      'justify-content': [{
        justify: ['normal', ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      'justify-items': [{
        'justify-items': ['start', 'end', 'center', 'stretch']
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      'justify-self': [{
        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      'align-content': [{
        content: ['normal', ...getAlign(), 'baseline']
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      'align-items': [{
        items: ['start', 'end', 'center', 'baseline', 'stretch']
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      'align-self': [{
        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      'place-content': [{
        'place-content': [...getAlign(), 'baseline']
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      'place-items': [{
        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      'place-self': [{
        'place-self': ['auto', 'start', 'end', 'center', 'stretch']
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      'space-x': [{
        'space-x': [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      'space-x-reverse': ['space-x-reverse'],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      'space-y': [{
        'space-y': [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      'space-y-reverse': ['space-y-reverse'],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ['auto', 'min', 'max', 'fit', 'svw', 'lvw', 'dvw', isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      'min-w': [{
        'min-w': [isArbitraryValue, spacing, 'min', 'max', 'fit']
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      'max-w': [{
        'max-w': [isArbitraryValue, spacing, 'none', 'full', 'min', 'max', 'fit', 'prose', {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      'min-h': [{
        'min-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      'max-h': [{
        'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      'font-size': [{
        text: ['base', isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      'font-smoothing': ['antialiased', 'subpixel-antialiased'],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      'font-style': ['italic', 'not-italic'],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      'font-weight': [{
        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      'font-family': [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-normal': ['normal-nums'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-ordinal': ['ordinal'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-slashed-zero': ['slashed-zero'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-figure': ['lining-nums', 'oldstyle-nums'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-spacing': ['proportional-nums', 'tabular-nums'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      'line-clamp': [{
        'line-clamp': ['none', isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      'list-image': [{
        'list-image': ['none', isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      'list-style-type': [{
        list: ['none', 'disc', 'decimal', isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      'list-style-position': [{
        list: ['inside', 'outside']
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      'placeholder-color': [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      'placeholder-opacity': [{
        'placeholder-opacity': [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      'text-alignment': [{
        text: ['left', 'center', 'right', 'justify', 'start', 'end']
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      'text-color': [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      'text-opacity': [{
        'text-opacity': [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      'text-decoration-style': [{
        decoration: [...getLineStyles(), 'wavy']
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      'text-decoration-thickness': [{
        decoration: ['auto', 'from-font', isLength, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      'underline-offset': [{
        'underline-offset': ['auto', isLength, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      'text-decoration-color': [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      'text-wrap': [{
        text: ['wrap', 'nowrap', 'balance', 'pretty']
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      'vertical-align': [{
        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ['normal', 'words', 'all', 'keep']
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ['none', 'manual', 'auto']
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ['none', isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      'bg-attachment': [{
        bg: ['fixed', 'local', 'scroll']
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      'bg-clip': [{
        'bg-clip': ['border', 'padding', 'content', 'text']
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      'bg-opacity': [{
        'bg-opacity': [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      'bg-origin': [{
        'bg-origin': ['border', 'padding', 'content']
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      'bg-position': [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      'bg-repeat': [{
        bg: ['no-repeat', {
          repeat: ['', 'x', 'y', 'round', 'space']
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      'bg-size': [{
        bg: ['auto', 'cover', 'contain', isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      'bg-image': [{
        bg: ['none', {
          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      'bg-color': [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-from-pos': [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-via-pos': [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-to-pos': [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-from': [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-via': [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-to': [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-s': [{
        'rounded-s': [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-e': [{
        'rounded-e': [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-t': [{
        'rounded-t': [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-r': [{
        'rounded-r': [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-b': [{
        'rounded-b': [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-l': [{
        'rounded-l': [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-ss': [{
        'rounded-ss': [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-se': [{
        'rounded-se': [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-ee': [{
        'rounded-ee': [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-es': [{
        'rounded-es': [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-tl': [{
        'rounded-tl': [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-tr': [{
        'rounded-tr': [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-br': [{
        'rounded-br': [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-bl': [{
        'rounded-bl': [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w': [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-x': [{
        'border-x': [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-y': [{
        'border-y': [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-s': [{
        'border-s': [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-e': [{
        'border-e': [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-t': [{
        'border-t': [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-r': [{
        'border-r': [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-b': [{
        'border-b': [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-l': [{
        'border-l': [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      'border-opacity': [{
        'border-opacity': [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      'border-style': [{
        border: [...getLineStyles(), 'hidden']
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-x': [{
        'divide-x': [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-x-reverse': ['divide-x-reverse'],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-y': [{
        'divide-y': [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-y-reverse': ['divide-y-reverse'],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      'divide-opacity': [{
        'divide-opacity': [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      'divide-style': [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color': [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-x': [{
        'border-x': [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-y': [{
        'border-y': [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-t': [{
        'border-t': [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-r': [{
        'border-r': [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-b': [{
        'border-b': [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-l': [{
        'border-l': [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      'divide-color': [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      'outline-style': [{
        outline: ['', ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      'outline-offset': [{
        'outline-offset': [isLength, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      'outline-w': [{
        outline: [isLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      'outline-color': [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      'ring-w': [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      'ring-w-inset': ['ring-inset'],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      'ring-color': [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      'ring-opacity': [{
        'ring-opacity': [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      'ring-offset-w': [{
        'ring-offset': [isLength, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      'ring-offset-color': [{
        'ring-offset': [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      'shadow-color': [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      'mix-blend': [{
        'mix-blend': getBlendModes()
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      'bg-blend': [{
        'bg-blend': getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ['', 'none']
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      'drop-shadow': [{
        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      'hue-rotate': [{
        'hue-rotate': [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      'backdrop-filter': [{
        'backdrop-filter': ['', 'none']
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      'backdrop-blur': [{
        'backdrop-blur': [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      'backdrop-brightness': [{
        'backdrop-brightness': [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      'backdrop-contrast': [{
        'backdrop-contrast': [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      'backdrop-grayscale': [{
        'backdrop-grayscale': [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      'backdrop-hue-rotate': [{
        'backdrop-hue-rotate': [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      'backdrop-invert': [{
        'backdrop-invert': [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      'backdrop-opacity': [{
        'backdrop-opacity': [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      'backdrop-saturate': [{
        'backdrop-saturate': [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      'backdrop-sepia': [{
        'backdrop-sepia': [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      'border-collapse': [{
        border: ['collapse', 'separate']
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      'border-spacing': [{
        'border-spacing': [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      'border-spacing-x': [{
        'border-spacing-x': [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      'border-spacing-y': [{
        'border-spacing-y': [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      'table-layout': [{
        table: ['auto', 'fixed']
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ['top', 'bottom']
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ['', 'gpu', 'none']
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      'scale-x': [{
        'scale-x': [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      'scale-y': [{
        'scale-y': [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      'translate-x': [{
        'translate-x': [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      'translate-y': [{
        'translate-y': [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      'skew-x': [{
        'skew-x': [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      'skew-y': [{
        'skew-y': [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      'transform-origin': [{
        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ['auto', colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ['none', 'auto']
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      'caret-color': [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      'pointer-events': [{
        'pointer-events': ['none', 'auto']
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ['none', 'y', 'x', '']
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      'scroll-behavior': [{
        scroll: ['auto', 'smooth']
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-m': [{
        'scroll-m': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mx': [{
        'scroll-mx': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-my': [{
        'scroll-my': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-ms': [{
        'scroll-ms': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-me': [{
        'scroll-me': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mt': [{
        'scroll-mt': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mr': [{
        'scroll-mr': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mb': [{
        'scroll-mb': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-ml': [{
        'scroll-ml': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-p': [{
        'scroll-p': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-px': [{
        'scroll-px': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-py': [{
        'scroll-py': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-ps': [{
        'scroll-ps': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pe': [{
        'scroll-pe': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pt': [{
        'scroll-pt': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pr': [{
        'scroll-pr': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pb': [{
        'scroll-pb': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pl': [{
        'scroll-pl': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      'snap-align': [{
        snap: ['start', 'end', 'center', 'align-none']
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      'snap-stop': [{
        snap: ['normal', 'always']
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      'snap-type': [{
        snap: ['none', 'x', 'y', 'both']
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      'snap-strictness': [{
        snap: ['mandatory', 'proximity']
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ['auto', 'none', 'manipulation']
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      'touch-x': [{
        'touch-pan': ['x', 'left', 'right']
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      'touch-y': [{
        'touch-pan': ['y', 'up', 'down']
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      'touch-pz': ['touch-pinch-zoom'],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ['none', 'text', 'all', 'auto']
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      'will-change': [{
        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, 'none']
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      'stroke-w': [{
        stroke: [isLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, 'none']
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ['sr-only', 'not-sr-only'],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      'forced-color-adjust': [{
        'forced-color-adjust': ['auto', 'none']
      }]
    },
    conflictingClassGroups: {
      overflow: ['overflow-x', 'overflow-y'],
      overscroll: ['overscroll-x', 'overscroll-y'],
      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],
      'inset-x': ['right', 'left'],
      'inset-y': ['top', 'bottom'],
      flex: ['basis', 'grow', 'shrink'],
      gap: ['gap-x', 'gap-y'],
      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],
      px: ['pr', 'pl'],
      py: ['pt', 'pb'],
      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],
      mx: ['mr', 'ml'],
      my: ['mt', 'mb'],
      size: ['w', 'h'],
      'font-size': ['leading'],
      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],
      'fvn-ordinal': ['fvn-normal'],
      'fvn-slashed-zero': ['fvn-normal'],
      'fvn-figure': ['fvn-normal'],
      'fvn-spacing': ['fvn-normal'],
      'fvn-fraction': ['fvn-normal'],
      'line-clamp': ['display', 'overflow'],
      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],
      'rounded-s': ['rounded-ss', 'rounded-es'],
      'rounded-e': ['rounded-se', 'rounded-ee'],
      'rounded-t': ['rounded-tl', 'rounded-tr'],
      'rounded-r': ['rounded-tr', 'rounded-br'],
      'rounded-b': ['rounded-br', 'rounded-bl'],
      'rounded-l': ['rounded-tl', 'rounded-bl'],
      'border-spacing': ['border-spacing-x', 'border-spacing-y'],
      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],
      'border-w-x': ['border-w-r', 'border-w-l'],
      'border-w-y': ['border-w-t', 'border-w-b'],
      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],
      'border-color-x': ['border-color-r', 'border-color-l'],
      'border-color-y': ['border-color-t', 'border-color-b'],
      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],
      'scroll-mx': ['scroll-mr', 'scroll-ml'],
      'scroll-my': ['scroll-mt', 'scroll-mb'],
      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],
      'scroll-px': ['scroll-pr', 'scroll-pl'],
      'scroll-py': ['scroll-pt', 'scroll-pb'],
      touch: ['touch-x', 'touch-y', 'touch-pz'],
      'touch-x': ['touch'],
      'touch-y': ['touch'],
      'touch-pz': ['touch']
    },
    conflictingClassGroupModifiers: {
      'font-size': ['leading']
    }
  };
}

/**
 * @param baseConfig Config where other config will be merged into. This object will be mutated.
 * @param configExtension Partial config to merge into the `baseConfig`.
 */
function mergeConfigs(baseConfig, {
  cacheSize,
  prefix,
  separator,
  extend = {},
  override = {}
}) {
  overrideProperty(baseConfig, 'cacheSize', cacheSize);
  overrideProperty(baseConfig, 'prefix', prefix);
  overrideProperty(baseConfig, 'separator', separator);
  for (const configKey in override) {
    overrideConfigProperties(baseConfig[configKey], override[configKey]);
  }
  for (const key in extend) {
    mergeConfigProperties(baseConfig[key], extend[key]);
  }
  return baseConfig;
}
function overrideProperty(baseObject, overrideKey, overrideValue) {
  if (overrideValue !== undefined) {
    baseObject[overrideKey] = overrideValue;
  }
}
function overrideConfigProperties(baseObject, overrideObject) {
  if (overrideObject) {
    for (const key in overrideObject) {
      overrideProperty(baseObject, key, overrideObject[key]);
    }
  }
}
function mergeConfigProperties(baseObject, mergeObject) {
  if (mergeObject) {
    for (const key in mergeObject) {
      const mergeValue = mergeObject[key];
      if (mergeValue !== undefined) {
        baseObject[key] = (baseObject[key] || []).concat(mergeValue);
      }
    }
  }
}
function extendTailwindMerge(configExtension, ...createConfig) {
  return typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
}
const twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);
exports.createTailwindMerge = createTailwindMerge;
exports.extendTailwindMerge = extendTailwindMerge;
exports.fromTheme = fromTheme;
exports.getDefaultConfig = getDefaultConfig;
exports.mergeConfigs = mergeConfigs;
exports.twJoin = twJoin;
exports.twMerge = twMerge;
exports.validators = validators;

}(bundleCjs));

// import DOMPurify from 'dompurify';
const localeMap = {
    en: locale.enUS,
    ar: locale.ar,
    fr: locale.fr,
    es: locale.es,
    de: locale.de,
    pl: locale.pl,
    ua: locale.uk,
    ru: locale.ru,
    el: locale.el,
};
function matchLocale(locale$1) {
    return localeMap[locale$1.toLowerCase()] || locale.enUS;
}
function getAbbreviatedWeekdays(locale) {
    const baseDate = new Date(2020, 5, 7);
    let weekdays = [];
    for (let i = 0; i < 7; i++) {
        const weekday = dateFns.format(dateFns.addDays(baseDate, i), 'eee', { locale });
        weekdays.push(weekday);
    }
    return weekdays.slice(1, 7).concat(weekdays.slice(0, 1));
}
function cn(...inputs) {
    return bundleCjs.twMerge(clsx(inputs));
}
const formatAmount = (amount, currency = 'USD', decimals = 2) => {
    const numberFormatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency,
        minimumFractionDigits: decimals,
        maximumFractionDigits: decimals,
    });
    return numberFormatter.format(amount);
};
function getDateDifference(date1, date2) {
    return dateFns.differenceInCalendarDays(date2, date1);
}
function renderTime(time) {
    return time < 10 ? time.toString().padStart(2, '0') : time.toString();
}
function getUserPreference(lang = undefined) {
    const p = JSON.parse(localStorage.getItem('user_preference'));
    if (p) {
        const { direction, currency_id } = p;
        changeLocale(direction, matchLocale(p.language_id));
        updateUserPreference({
            currency_id,
            language_id: p.language_id,
        });
    }
    else {
        updateUserPreference({
            language_id: (lang === null || lang === void 0 ? void 0 : lang.toLowerCase()) || 'en',
        });
        if ((lang === null || lang === void 0 ? void 0 : lang.toLowerCase()) === 'ar') {
            changeLocale('RTL', matchLocale(lang === null || lang === void 0 ? void 0 : lang.toLowerCase()));
        }
    }
}
function runScriptAndRemove(scriptContent) {
    const script = document.createElement('script');
    script.textContent = scriptContent;
    document.body.appendChild(script);
    document.body.removeChild(script);
}
// export function injectHTMLAndRunScript(htmlContent: string, uniqueId: string, target: 'head' | 'body' = 'body', position: 'first' | 'last' = 'last'): void {
//   const element = document.createRange().createContextualFragment(htmlContent);
//   const scripts = element.querySelectorAll('script');
//   // Assign a unique ID to each element
//   element.querySelectorAll('*').forEach((child, index) => {
//     child.id = `${uniqueId}-${index}`;
//   });
//   const destination = target === 'head' ? document.head : document.body;
//   if (scripts.length === 0) {
//     // If no script tags and the content is meant to be JavaScript, inject a script element to execute it
//     if (htmlContent.trim().startsWith('<')) {
//       // If the content looks like HTML, append it directly without creating a script
//       if (position === 'first') {
//         destination.insertBefore(element, destination.firstChild);
//       } else {
//         destination.appendChild(element);
//       }
//     } else {
//       // Create a script element to execute plain JavaScript content
//       const script = document.createElement('script');
//       script.textContent = htmlContent;
//       script.onload = function () {
//         script.remove(); // Clean up after execution
//       };
//       if (position === 'first') {
//         destination.insertBefore(script, destination.firstChild);
//       } else {
//         destination.appendChild(script);
//       }
//     }
//   } else {
//     // Handle existing script tags
//     scripts.forEach(script => {
//       const newScript = document.createElement('script');
//       newScript.textContent = script.textContent; // Only use the JavaScript code inside the script tag
//       newScript.onload = function () {
//         newScript.remove(); // Remove the script after execution
//       };
//       script.replaceWith(newScript);
//     });
//     // Inject the rest of the HTML
//     if (position === 'first') {
//       destination.insertBefore(element, destination.firstChild);
//     } else {
//       destination.appendChild(element);
//     }
//   }
// }
function injectHTMLAndRunScript(htmlContent, uniqueId, target = 'body', position = 'last') {
    const element = document.createRange().createContextualFragment(htmlContent);
    const scripts = element.querySelectorAll('script');
    // Assign a unique ID to each element
    element.querySelectorAll('*').forEach((child, index) => {
        child.id = `${uniqueId}-${index}`;
    });
    const destination = target === 'head' ? document.head : document.body;
    if (scripts.length === 0) {
        // If no script tags and the content is meant to be JavaScript, inject a script element to execute it
        if (htmlContent.trim().startsWith('<')) {
            // If the content looks like HTML, append it directly without creating a script
            if (position === 'first') {
                destination.insertBefore(element, destination.firstChild);
            }
            else {
                destination.appendChild(element);
            }
        }
        else {
            // Create a script element to execute plain JavaScript content
            const script = document.createElement('script');
            script.textContent = htmlContent;
            script.onload = function () {
                script.remove(); // Clean up after execution
            };
            if (position === 'first') {
                destination.insertBefore(script, destination.firstChild);
            }
            else {
                destination.appendChild(script);
            }
        }
    }
    else {
        // Handle existing script tags
        scripts.forEach(script => {
            const newScript = document.createElement('script');
            newScript.textContent = script.textContent; // Only use the JavaScript code inside the script tag
            newScript.onload = function () {
                newScript.remove(); // Remove the script after execution
            };
            script.replaceWith(newScript);
        });
        // Inject the rest of the HTML
        if (position === 'first') {
            destination.insertBefore(element, destination.firstChild);
        }
        else {
            destination.appendChild(element);
        }
    }
}
function setDefaultLocale({ currency }) {
    app_store.userPreferences = Object.assign(Object.assign({}, app_store.userPreferences), { currency_id: currency.code.toString() });
    // matchLocale(language_id)
}
function getCookies() {
    const cookies = {};
    const cookiesArray = document.cookie.split('; ');
    cookiesArray.forEach(cookie => {
        const [name, value] = cookie.split('=');
        if (name && value) {
            cookies[decodeURIComponent(name)] = decodeURIComponent(value);
        }
    });
    return cookies;
}
function getCookie(name) {
    const cookies = getCookies();
    return cookies[name] || null;
}
function manageAnchorSession(data, mode = 'add') {
    const anchor = JSON.parse(sessionStorage.getItem('anchor'));
    if (anchor) {
        if (mode === 'add') {
            return sessionStorage.setItem('anchor', JSON.stringify(Object.assign(Object.assign({}, anchor), data)));
        }
        else if (mode === 'remove') {
            const keys = Object.keys(data);
            keys.forEach(key => {
                if (key in anchor) {
                    delete anchor[key];
                }
            });
            return sessionStorage.setItem('anchor', JSON.stringify(anchor));
        }
    }
    else {
        if (mode === 'add') {
            return sessionStorage.setItem('anchor', JSON.stringify(Object.assign({}, data)));
        }
    }
}
function injectHTML(htmlContent, target = 'body', position = 'last') {
    // const safeContent = DOMPurify.sanitize(htmlContent);
    // console.log(safeContent, htmlContent);
    const element = document.createRange().createContextualFragment(htmlContent);
    const destination = target === 'head' ? document.head : document.body;
    if (position === 'first') {
        destination.insertBefore(element, destination.firstChild);
    }
    else {
        destination.appendChild(element);
    }
}
function checkAffiliate(afName) {
    var _a;
    if (!afName) {
        return null;
    }
    const affiliate = (_a = app_store === null || app_store === void 0 ? void 0 : app_store.property) === null || _a === void 0 ? void 0 : _a.affiliates.find(aff => aff.afname.toLowerCase().trim() === afName);
    if (!affiliate) {
        return null;
    }
    return affiliate;
}
function formatFullLocation(property) {
    var _a, _b, _c, _d, _e;
    return [(_a = property === null || property === void 0 ? void 0 : property.area) !== null && _a !== void 0 ? _a : null, (_c = (_b = property === null || property === void 0 ? void 0 : property.city) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : null, (_e = (_d = property === null || property === void 0 ? void 0 : property.country) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : null].filter(f => f !== null).join(', ');
}
function formatImageAlt(alt, roomTypeName = null) {
    return [roomTypeName, alt, `${app_store.property.name}, ${app_store.property.country.name}`].filter(f => f !== null).join(' - ');
}
function validateCoupon(coupon) {
    if (!coupon) {
        return false;
    }
    let isValidCoupon = false;
    const c = app_store.property.promotions.find(p => { var _a, _b; return ((_a = p.key) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === ((_b = coupon.trim()) === null || _b === void 0 ? void 0 : _b.toLowerCase()); });
    if (c) {
        if (dateFns.isBefore(new Date(c.to), new Date())) {
            return false;
        }
        isValidCoupon = true;
        modifyBookingStore('bookingAvailabilityParams', Object.assign(Object.assign({}, booking_store.bookingAvailabilityParams), { coupon, loyalty: false }));
    }
    return isValidCoupon;
}
function validateAgentCode(code) {
    var _a;
    if (!code) {
        return false;
    }
    let isValidCode = false;
    const agent = (_a = app_store.property) === null || _a === void 0 ? void 0 : _a.agents.find(a => a.code.toLowerCase() === code.trim().toLowerCase());
    if (agent) {
        isValidCode = true;
        booking_store.bookingAvailabilityParams = Object.assign(Object.assign({}, booking_store.bookingAvailabilityParams), { agent, agent_code: code });
        app_store.app_data = Object.assign(Object.assign({}, app_store.app_data), { isAgentMode: true });
    }
    return isValidCode;
}
function renderPropertyLocation() {
    var _a, _b, _c, _d;
    const affiliate = app_store.app_data.affiliate;
    if (affiliate) {
        return [((_a = app_store.app_data.affiliate) === null || _a === void 0 ? void 0 : _a.address) || null, app_store.app_data.affiliate.city || null, app_store.app_data.affiliate.country.name || null]
            .filter(f => f !== null)
            .join(', ');
    }
    return [((_b = app_store.property) === null || _b === void 0 ? void 0 : _b.area) || null, ((_c = app_store.property) === null || _c === void 0 ? void 0 : _c.city.name) || null, ((_d = app_store.property) === null || _d === void 0 ? void 0 : _d.country.name) || null].filter(f => f !== null).join(', ');
}
function setBookingCookie() {
    const cookieName = 'ghs_booking';
    const cookieValue = 'true';
    const date = dateFns.addDays(new Date(), 30);
    const expires = 'expires=' + date.toUTCString();
    document.cookie = `${cookieName}=${cookieValue};${expires};path=/`;
}
function destroyBookingCookie() {
    const cookieName = 'ghs_booking';
    const pastDate = new Date(0).toUTCString();
    document.cookie = `${cookieName}=; expires=${pastDate}; path=/`;
}
function checkGhs(source_code, stag) {
    const ghsCookie = getCookie('ghs_booking');
    if (source_code === 'ghs' || stag === 'ghs') {
        destroyBookingCookie();
        setBookingCookie();
        return true;
    }
    if (ghsCookie) {
        return true;
    }
    return false;
}
function detectCardType(value) {
    const startsWith = (prefixes) => prefixes.some(prefix => value.startsWith(prefix));
    if (startsWith(['4'])) {
        return 'VISA';
    }
    else if (startsWith(['5', '2'])) {
        return 'Mastercard';
    }
    else if (startsWith(['34', '37'])) {
        return 'AMEX';
    }
    else {
        return '';
    }
}
/**
 * Utility to modify query string parameters.
 *
 * @param param - The query parameter key to modify
 * @param value - The value to set for the query parameter. If null, the parameter will be removed.
 * @param options - Options to control whether the page should reload or replace the current history state.
 */
function modifyQueryParam(param, value, options = { reload: false, replaceState: false }) {
    if (!app_store.app_data.origin || app_store.app_data.origin !== 'be') {
        return;
    }
    const url = new URL(window.location.href);
    if (value === null) {
        url.searchParams.delete(param); // Remove the query parameter
    }
    else {
        url.searchParams.set(param, value); // Add or update the query parameter
    }
    if (options.reload) {
        // Reload the page by updating the href (replaces the full URL)
        window.location.href = url.toString();
    }
    else if (options.replaceState) {
        // Use replaceState to update the URL without adding a new entry in the history
        history.replaceState(null, '', url.toString());
    }
    else {
        // Use pushState to update the URL without reloading and add an entry in the history
        history.pushState(null, '', url.toString());
    }
}
function calculateInfantNumber(ages) {
    return ages.reduce((prev, curr) => {
        if (curr !== '' && Number(curr) < 3) {
            return prev + 1;
        }
        return prev;
    }, 0);
}

exports.VariationService = VariationService;
exports.app_store = app_store;
exports.booking_store = booking_store;
exports.calculateInfantNumber = calculateInfantNumber;
exports.calculateTotalCost = calculateTotalCost;
exports.calculateTotalRooms = calculateTotalRooms;
exports.changeLocale = changeLocale;
exports.checkAffiliate = checkAffiliate;
exports.checkGhs = checkGhs;
exports.cn = cn;
exports.createStore = createStore;
exports.dateFns = dateFns;
exports.defaultOptions = defaultOptions$1;
exports.destroyBookingCookie = destroyBookingCookie;
exports.detectCardType = detectCardType;
exports.enUS = enUS;
exports.formatAmount = formatAmount;
exports.formatFullLocation = formatFullLocation;
exports.formatImageAlt = formatImageAlt;
exports.getAbbreviatedWeekdays = getAbbreviatedWeekdays;
exports.getDateDifference = getDateDifference;
exports.getUserPreference = getUserPreference;
exports.getVisibleInventory = getVisibleInventory;
exports.injectHTML = injectHTML;
exports.injectHTMLAndRunScript = injectHTMLAndRunScript;
exports.isSameWeek = isSameWeek$1;
exports.locale = locale;
exports.localizedWords = localizedWords;
exports.manageAnchorSession = manageAnchorSession;
exports.matchLocale = matchLocale;
exports.modifyBookingStore = modifyBookingStore;
exports.modifyQueryParam = modifyQueryParam;
exports.onAppDataChange = onAppDataChange;
exports.renderPropertyLocation = renderPropertyLocation;
exports.renderTime = renderTime;
exports.reserveRooms = reserveRooms;
exports.runScriptAndRemove = runScriptAndRemove;
exports.setDefaultLocale = setDefaultLocale;
exports.startOfWeek = startOfWeek$1;
exports.toDate = toDate$1;
exports.updateRoomParams = updateRoomParams;
exports.updateUserPreference = updateUserPreference;
exports.validateAgentCode = validateAgentCode;
exports.validateBooking = validateBooking;
exports.validateCoupon = validateCoupon;

//# sourceMappingURL=utils-c20c306a.js.map