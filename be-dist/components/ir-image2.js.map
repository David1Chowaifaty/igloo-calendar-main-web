{"file":"ir-image2.js","mappings":";;AAAA,MAAM,UAAU,GAAG,s3lBAAs3lB,CAAC;AAC14lB,sBAAe,UAAU;;MCMZ,OAAO;IALpB;;;;QASU,UAAK,GAAW,EAAE,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QAInB,WAAM,GAAY,KAAK,CAAC;KAoDlC;IAhDC,MAAM,iBAAiB;QACrB,IAAI,CAAC,cAAc,EAAE,CAAC;;QAGtB,IAAI,IAAI,CAAC,GAAG,EAAE;YACZ,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;YACxB,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACnB,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,YAAY,KAAK,CAAC,EAAE;;gBAE1C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;aACpB;SACF;KACF;IAED,cAAc;;KAEb;IAED,eAAe;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACpB;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,CAAC,EAAE;YAChF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACpB;KACF;IAED,MAAM;QACJ,QACE,4DAAK,KAAK,EAAC,iBAAiB,IACzB,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,4DAAK,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG,EAC5I,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,4DAAK,GAAG,EAAE,yBAAyB,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG,EAC/J,4DACE,GAAG,EAAE,EAAE;gBACL,IAAI,CAAC,QAAQ,GAAG,EAAsB,CAAC;;aAExC,EACD,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,KAAK,EAAE,mBAAmB;;YAE1B,GAAG,EAAE,IAAI,CAAC,GAAG;;YAEb,MAAM,EAAE,MAAM,IAAI,CAAC,eAAe,EAAE,GACpC,CACE,EACN;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/ir-image/ir-image.css?tag=ir-image&encapsulation=shadow","src/components/ui/ir-image/ir-image.tsx"],"sourcesContent":[":host {\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  display: block;\r\n  border-radius: inherit;\r\n}\r\n.image-container {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border-radius: inherit;\r\n}\r\n\r\nimg {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: opacity 0.5s ease-in-out;\r\n  border-radius: inherit;\r\n}\r\n\r\n.placeholder {\r\n  filter: blur(10px);\r\n  opacity: 1;\r\n}\r\n\r\n.placeholder.hidden {\r\n  opacity: 0;\r\n}\r\n\r\n.original {\r\n  opacity: 0;\r\n}\r\n\r\n.original.visible {\r\n  opacity: 1;\r\n}\r\n","import { Component, Prop, State, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-image',\r\n  styleUrl: 'ir-image.css',\r\n  shadow: true,\r\n})\r\nexport class IrImage {\r\n  @Prop() src: string;\r\n  @Prop() thumbnail: string;\r\n  @Prop() blurhash: string;\r\n  @Prop() width: number = 32;\r\n  @Prop() height: number = 32;\r\n  @Prop() alt: string;\r\n\r\n  @State() blurDataUrl: string;\r\n  @State() loaded: boolean = false;\r\n\r\n  private imageRef: HTMLImageElement;\r\n\r\n  async componentWillLoad() {\r\n    this.decodeBlurHash();\r\n\r\n    // Pre-check if the image is cached before the initial render:\r\n    if (this.src) {\r\n      const img = new Image();\r\n      img.src = this.src;\r\n      if (img.complete && img.naturalWidth !== 0) {\r\n        // If the image is cached, set loaded = true before first render\r\n        this.loaded = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  decodeBlurHash() {\r\n    // ... same as before ...\r\n  }\r\n\r\n  handleImageLoad() {\r\n    this.loaded = true;\r\n  }\r\n\r\n  checkImageCached() {\r\n    if (this.imageRef && this.imageRef.complete && this.imageRef.naturalHeight !== 0) {\r\n      this.loaded = true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"image-container\">\r\n        {this.blurDataUrl && !this.thumbnail && <img src={this.blurDataUrl} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\r\n        {this.thumbnail !== undefined && <img src={`data:image/png;base64,${this.thumbnail}`} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\r\n        <img\r\n          ref={el => {\r\n            this.imageRef = el as HTMLImageElement;\r\n            // Removed checkImageCached() from here\r\n          }}\r\n          src={this.src}\r\n          class={`original  visible`}\r\n          // class={`original ${this.loaded ? 'visible' : ''}`}\r\n          alt={this.alt}\r\n          // loading=\"lazy\"\r\n          onLoad={() => this.handleImageLoad()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}