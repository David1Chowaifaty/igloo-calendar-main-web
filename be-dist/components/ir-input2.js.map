{"file":"ir-input2.js","mappings":";;;AAAA,MAAM,UAAU,GAAG,mvhBAAmvhB,CAAC;AACvwhB,sBAAe,UAAU;;MCOZ,OAAO;;;;;;;uBACQ,EAAE,EAAE;wBACe,KAAK;;;oBAyBrC,MAAM;;;;;;;;;;;;;;;;;qBAiBM,KAAK;;IAQ9B,WAAW,CAAC,KAAmC;QAC7C,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;YAC5B,IAAI,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAClC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC;aAChD;SACF;KACF;IACD,gBAAgB;QACd,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACpC;KACF;IACD,UAAU,CAAC,KAAiB;QAC1B,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACzC,IAAK,KAAK,CAAC,MAA2B,CAAC,KAAK,EAAE;YAC5C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SACzC;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7B;IACD,MAAM;QACJ,QACE,4DAAK,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,mBAAmB,IAAI,CAAC,KAAK,GAAG,OAAO,GAAG,EAAE,IAAI,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAE,kBAAgB,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,EAAE,IACrK,IAAI,CAAC,QAAQ,KACZ,aAAO,OAAO,EAAE,IAAI,CAAC,OAAO,IAC1B,YAAM,IAAI,EAAC,WAAW,GAAQ,CACxB,CACT,EACD,8DACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,IAAI,EAAE,IAAI,CAAC,IAAI;;YAEf,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,YAAY,EAAE,IAAI,CAAC,YAAY,EAC/B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,EAC1E,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAClC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,GACrC,EACF,0DAAG,KAAK,EAAC,aAAa,IAAE,IAAI,CAAC,WAAW,CAAK,CACzC,EACN;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/ir-input/ir-input.css?tag=ir-input&encapsulation=scoped","src/components/ui/ir-input/ir-input.tsx"],"sourcesContent":[".input-container {\r\n  display: flex;\r\n  box-sizing: border-box;\r\n  align-items: center;\r\n  gap: 8px;\r\n  border-radius: var(--radius, 8px);\r\n  border: 1px solid var(--gray-300, #d0d5dd);\r\n  transition: all 0.3s ease-in-out;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  position: relative;\r\n}\r\ninput {\r\n  border: 0;\r\n  border-radius: var(--radius, 8px);\r\n  padding: 8px 14px;\r\n  margin: 0;\r\n  width: 100%;\r\n  font-size: 16px;\r\n  outline: none;\r\n}\r\n.placeholder {\r\n  position: absolute;\r\n  font-size: 16px;\r\n  left: 14px;\r\n  z-index: 2;\r\n  transition: transform 0.3s ease-in-out;\r\n  transform-origin: left top;\r\n  pointer-events: none;\r\n}\r\ninput:focus,\r\n.input-container.has-value input {\r\n  padding-block-start: 1.2rem;\r\n  block-size: 40px;\r\n}\r\ninput:focus + .placeholder,\r\n.input-container.has-value .placeholder {\r\n  transform: translateY(-10px) scale(0.7);\r\n}\r\n.input-container:focus-within {\r\n  border-color: hsl(var(--brand-300, 206, 100%, 76%));\r\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1), 0 0 0 4px hsla(var(--brand-100, 209, 100%, 91%), 0.2);\r\n}\r\n.error {\r\n  border-color: var(--error-300, #fda29b);\r\n}\r\n.disabled,\r\n.disabled input {\r\n  background: var(--gray-50, #f9fafb);\r\n  color: var(--gray-300, #d0d5dd);\r\n  pointer-events: none;\r\n}\r\n\r\n.input-container[data-context='icon'] input {\r\n  border-top-left-radius: 0;\r\n  border-bottom-left-radius: 0;\r\n  padding-left: 0;\r\n}\r\n.placeholder {\r\n  color: var(--gray-600);\r\n}\r\nlabel {\r\n  padding-left: 14px;\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\n\r\n@Component({\r\n  tag: 'ir-input',\r\n  styleUrl: 'ir-input.css',\r\n  scoped: true,\r\n})\r\nexport class IrInput {\r\n  @Prop() inputId: string = v4();\r\n  @Prop({ reflect: true }) leftIcon: boolean = false;\r\n  @Prop() inputStyles: Partial<CSSStyleDeclaration>;\r\n  @Prop() value: string;\r\n  @Prop() type:\r\n    | 'button'\r\n    | 'checkbox'\r\n    | 'color'\r\n    | 'date'\r\n    | 'datetime-local'\r\n    | 'email'\r\n    | 'file'\r\n    | 'hidden'\r\n    | 'image'\r\n    | 'month'\r\n    | 'number'\r\n    | 'password'\r\n    | 'radio'\r\n    | 'range'\r\n    | 'reset'\r\n    | 'search'\r\n    | 'submit'\r\n    | 'tel'\r\n    | 'text'\r\n    | 'time'\r\n    | 'url'\r\n    | 'week' = 'text';\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) placeholder: string;\r\n  @Prop({ reflect: true }) inputid: string;\r\n  @Prop({ reflect: true }) class: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) readonly: boolean;\r\n  @Prop({ reflect: true }) maxlength: number;\r\n  @Prop({ reflect: true }) min: string | number;\r\n  @Prop({ reflect: true }) max: string | number;\r\n  @Prop({ reflect: true }) step: string | number;\r\n  @Prop({ reflect: true }) pattern: string;\r\n  @Prop({ reflect: true }) autocomplete: string;\r\n  @Prop({ reflect: true }) autofocus: boolean;\r\n  @Prop({ reflect: true }) size: number;\r\n  @Prop({ reflect: true }) multiple: boolean;\r\n  @Prop() error: boolean = false;\r\n\r\n  @Event({ bubbles: true, composed: true }) textChanged: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) inputFocus: EventEmitter<FocusEvent>;\r\n  @Event({ bubbles: true, composed: true }) inputBlur: EventEmitter<FocusEvent>;\r\n\r\n  private inputEl: HTMLDivElement;\r\n\r\n  applyStyles(style: Partial<CSSStyleDeclaration>) {\r\n    for (const property in style) {\r\n      if (style.hasOwnProperty(property)) {\r\n        this.inputEl.style[property] = style[property];\r\n      }\r\n    }\r\n  }\r\n  componentDidLoad() {\r\n    if (this.inputStyles) {\r\n      this.applyStyles(this.inputStyles);\r\n    }\r\n  }\r\n  handleBlur(event: FocusEvent) {\r\n    this.inputEl.classList.remove('focused');\r\n    if ((event.target as HTMLInputElement).value) {\r\n      this.inputEl.classList.add('has-value');\r\n    } else {\r\n      this.inputEl.classList.remove('has-value');\r\n    }\r\n    this.inputFocus.emit(event);\r\n  }\r\n  render() {\r\n    return (\r\n      <div ref={el => (this.inputEl = el)} class={`input-container ${this.error ? 'error' : ''} ${this.disabled ? 'disabled' : ''}`} data-context={this.leftIcon ? 'icon' : ''}>\r\n        {this.leftIcon && (\r\n          <label htmlFor={this.inputId}>\r\n            <slot name=\"left-icon\"></slot>\r\n          </label>\r\n        )}\r\n        <input\r\n          type={this.type}\r\n          name={this.name}\r\n          // placeholder={this.placeholder}\r\n          id={this.inputId}\r\n          class={this.class}\r\n          required={this.required}\r\n          disabled={this.disabled}\r\n          readonly={this.readonly}\r\n          maxlength={this.maxlength}\r\n          min={this.min}\r\n          max={this.max}\r\n          step={this.step}\r\n          pattern={this.pattern}\r\n          autocomplete={this.autocomplete}\r\n          autofocus={this.autofocus}\r\n          size={this.size}\r\n          multiple={this.multiple}\r\n          value={this.value}\r\n          onChange={e => this.textChanged.emit((e.target as HTMLInputElement).value)}\r\n          onBlur={this.handleBlur.bind(this)}\r\n          onFocus={e => this.inputFocus.emit(e)}\r\n        />\r\n        <p class=\"placeholder\">{this.placeholder}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}