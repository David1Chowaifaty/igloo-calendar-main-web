{"file":"ir-tooltip2.js","mappings":";;;AAAA,MAAM,YAAY,GAAG,+7hBAA+7hB,CAAC;AACr9hB,wBAAe,YAAY;;MCOd,SAAS;;;;;;wBAIQ,IAAI;;;;IAUhC,gBAAgB;QACd,IAAI,CAAC,oBAAoB,EAAE,CAAC;KAC7B;IAED,oBAAoB;QAClB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,cAAc,GAAG,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE;gBAC7D,SAAS,EAAE,MAAM;gBACjB,SAAS,EAAE;oBACT;wBACE,IAAI,EAAE,QAAQ;wBACd,OAAO,EAAE;4BACP,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;yBACf;qBACF;iBACF;aACF,CAAC,CAAC;SACJ;KACF;IAED,UAAU,CAAC,UAAmB;QAC5B,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACnC;QAED,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC;gBAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,IAAI,CAAC,cAAc,EAAE;oBACvB,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;iBAC9B;qBAAM;oBACL,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAC7B;aACF,EAAE,GAAG,CAAC,CAAC;SACT;aAAM;YACL,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAClB,IAAI,IAAI,CAAC,cAAc,EAAE;gBACvB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;aAC5B;SACF;KACF;IAED,oBAAoB;QAClB,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;SAC/B;KACF;IACD,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,+DAAQ,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAAE,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAC3H,6DAAM,IAAI,EAAC,iBAAiB,IAC1B,4DAAK,KAAK,EAAC,mBAAmB,IAC5B,0DAAG,KAAK,EAAC,eAAe,IAAE,IAAI,CAAC,KAAK,CAAK,EACzC,2EAAiB,SAAS,oBAAgB,KAAK,EAAC,KAAK,EAAC,4BAA4B,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,cAAc,EAAC,OAAO,EAAC,aAAa,IAClJ,6DACE,IAAI,EAAE,cAAc,EACpB,CAAC,EAAC,8PAA8P,GAChQ,CACE,CACF,CACD,CACA,EACT,4DAAK,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,EAAE,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,SAAS,IAC7D,IAAI,CAAC,IAAI,KACR,EAAC,QAAQ,uDACP,4DACE,KAAK,EAAC,yEACW,IAEjB,4DAAK,SAAS,EAAE,IAAI,CAAC,OAAO,GAAQ,CAChC,CACG,CACZ,CACG,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/ir-tooltip/ir-tooltip.css?tag=ir-tooltip&encapsulation=shadow","src/components/ui/ir-tooltip/ir-tooltip.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\n/* [data-popper-placement^='top'] > .tooltip-content::after {\r\n  top: 100%;\r\n  left: 10%;\r\n  margin-left: -6px;\r\n  border-top-color: var(--gray-900);\r\n}\r\n\r\n[data-popper-placement^='bottom'] > .tooltip-content::after {\r\n  bottom: 100%;\r\n  left: 20%;\r\n  margin-left: -6px;\r\n  border-bottom-color: var(--gray-900);\r\n}\r\n\r\n[data-popper-placement^='left'] > .tooltip-content::after {\r\n  right: 100%;\r\n  top: 50%;\r\n  margin-top: -6px;\r\n  border-right-color: var(--gray-900);\r\n}\r\n\r\n[data-popper-placement^='right'] > .tooltip-content::after {\r\n  left: 100%;\r\n  top: 50%;\r\n  margin-top: -6px;\r\n  border-left-color: var(--gray-900);\r\n} */\r\n.tooltip-content {\r\n  position: relative;\r\n  background: var(--gray-900, #101828);\r\n  color: white;\r\n  box-shadow:\r\n    0 12px 16px -4px rgba(16, 24, 40, 0.08),\r\n    0 4px 6px -2px rgba(16, 24, 40, 0.03);\r\n}\r\n.tooltip-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.25rem;\r\n}\r\n/* .tooltip-content::after {\r\n  border: solid transparent;\r\n  content: '';\r\n  height: 0;\r\n  width: 0;\r\n  position: absolute;\r\n  pointer-events: none;\r\n  border-width: 6px;\r\n} */\r\n.tooltip-label {\r\n  font-size: 0.75rem;\r\n  color: #1d2939;\r\n}\r\n","import { createPopper } from '@popperjs/core';\r\nimport { Component, Fragment, Host, Prop, State, h, Element } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-tooltip',\r\n  styleUrl: 'ir-tooltip.css',\r\n  shadow: true,\r\n})\r\nexport class IrTooltip {\r\n  @Element() el: HTMLElement;\r\n\r\n  @Prop({ reflect: true }) message: string;\r\n  @Prop() withHtml: boolean = true;\r\n  @Prop() label: string;\r\n\r\n  @State() open: boolean;\r\n\r\n  private popperInstance: any;\r\n  private tooltipTimeout: NodeJS.Timeout;\r\n  private trigger: HTMLButtonElement;\r\n  private content: HTMLDivElement;\r\n\r\n  componentDidLoad() {\r\n    this.createPopperInstance();\r\n  }\r\n\r\n  createPopperInstance() {\r\n    if (this.trigger && this.content) {\r\n      this.popperInstance = createPopper(this.trigger, this.content, {\r\n        placement: 'auto',\r\n        modifiers: [\r\n          {\r\n            name: 'offset',\r\n            options: {\r\n              offset: [0, 8],\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleOpen(shouldOpen: boolean) {\r\n    if (this.tooltipTimeout) {\r\n      clearTimeout(this.tooltipTimeout);\r\n    }\r\n\r\n    if (shouldOpen) {\r\n      this.tooltipTimeout = setTimeout(() => {\r\n        this.open = true;\r\n        if (this.popperInstance) {\r\n          this.popperInstance.update();\r\n        } else {\r\n          this.createPopperInstance();\r\n        }\r\n      }, 300);\r\n    } else {\r\n      this.open = false;\r\n      if (this.popperInstance) {\r\n        this.popperInstance.destroy();\r\n        this.popperInstance = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.popperInstance) {\r\n      this.popperInstance.destroy();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <button ref={el => (this.trigger = el)} onMouseEnter={() => this.toggleOpen(true)} onMouseLeave={() => this.toggleOpen(false)}>\r\n          <slot name=\"tooltip-trigger\">\r\n            <div class=\"tooltip-container\">\r\n              <p class=\"tooltip-label\">{this.label}</p>\r\n              <svg data-toggle=\"tooltip\" data-placement=\"top\" xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" class=\"tooltip-icon\" viewBox=\"0 0 512 512\">\r\n                <path\r\n                  fill={'currentColor'}\r\n                  d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </slot>\r\n        </button>\r\n        <div ref={el => (this.content = el)} class=\"z-50\" role=\"tooltip\">\r\n          {this.open && (\r\n            <Fragment>\r\n              <div\r\n                class=\"tooltip-content max-w-xs rounded-lg\r\n              px-3 py-2 text-xs \"\r\n              >\r\n                <div innerHTML={this.message}></div>\r\n              </div>\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}