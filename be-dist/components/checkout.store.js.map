{"file":"checkout.store.js","mappings":";;;;AA8BA,MAAM,YAAY,GAAkB;IAClC,YAAY,EAAE,EAAE;IAChB,gBAAgB,EAAE,CAAC;IACnB,iBAAiB,EAAE,KAAK;IACxB,MAAM,EAAE;QACN,YAAY,EAAEA,KAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,SAAS,CAAC;KACxE;IACD,OAAO,EAAE,IAAI;IACb,kBAAkB,EAAE,IAAI;CACzB,CAAC;MAEW,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,EAAE,oBAAoB,EAAE,GAAG,WAAW,CAAgB,YAAY,EAAE;SAElG,kBAAkB,CAAC,GAAwB,EAAE,KAAU;IACrE,cAAc,CAAC,YAAY,mCACtB,cAAc,CAAC,YAAY,KAC9B,CAAC,GAAG,GAAG,KAAK,GACb,CAAC;AACJ,CAAC;SACe,oBAAoB,CAAC,GAA0B,EAAE,KAAU;IACzE,IAAI,GAAG,KAAK,UAAU,IAAI,KAAK,KAAK,IAAI,EAAE;QACxC,cAAc,CAAC,MAAM,GAAG;YACtB,YAAY,EAAEA,KAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,SAAS,CAAC;YACvE,QAAQ,EAAE,IAAI;SACf,CAAC;KACH;SAAM;QACL,cAAc,CAAC,MAAM,mCAChB,cAAc,CAAC,MAAM,KACxB,CAAC,GAAG,GAAG,KAAK,GACb,CAAC;KACH;AACH,CAAC;SACe,2BAA2B,CAAC,MAAgC;IAC1E,cAAc,CAAC,MAAM,mCAChB,cAAc,CAAC,MAAM,GACrB,MAAM,CACV,CAAC;AACJ;;;;","names":["moment"],"sources":["src/stores/checkout.store.ts"],"sourcesContent":["import { TPickupFormData } from '@/models/pickup';\nimport { TUserFormData } from '@/models/user_form';\nimport { createStore } from '@stencil/store';\nimport booking_store from './booking';\nimport moment from 'moment';\nexport interface ICardProcessing {\n  code: string;\n  cardNumber: string;\n  cardHolderName: string;\n  expiry_month: string;\n  expiry_year: string;\n}\nexport interface ICardProcessingWithoutCVC extends ICardProcessing {\n  code: '004';\n}\nexport interface ICardProcessingWithCVC extends ICardProcessing {\n  code: '001';\n  cvc: string;\n}\n\nexport type TPayment = ICardProcessingWithCVC | { code: string };\ninterface CheckoutStore {\n  userFormData: TUserFormData;\n  pickup: TPickupFormData;\n  modifiedGuestName: boolean;\n  payment: TPayment | null;\n  agreed_to_services: boolean;\n  prepaymentAmount: number;\n}\n\nconst initialState: CheckoutStore = {\n  userFormData: {},\n  prepaymentAmount: 0,\n  modifiedGuestName: false,\n  pickup: {\n    arrival_date: moment(booking_store.bookingAvailabilityParams.from_date),\n  },\n  payment: null,\n  agreed_to_services: true,\n};\n\nexport const { state: checkout_store, onChange: onCheckoutDataChange } = createStore<CheckoutStore>(initialState);\n\nexport function updateUserFormData(key: keyof TUserFormData, value: any) {\n  checkout_store.userFormData = {\n    ...checkout_store.userFormData,\n    [key]: value,\n  };\n}\nexport function updatePickupFormData(key: keyof TPickupFormData, value: any) {\n  if (key === 'location' && value === null) {\n    checkout_store.pickup = {\n      arrival_date: moment(booking_store.bookingAvailabilityParams.from_date),\n      location: null,\n    };\n  } else {\n    checkout_store.pickup = {\n      ...checkout_store.pickup,\n      [key]: value,\n    };\n  }\n}\nexport function updatePartialPickupFormData(params: Partial<TPickupFormData>) {\n  checkout_store.pickup = {\n    ...checkout_store.pickup,\n    ...params,\n  };\n}\n"],"version":3}