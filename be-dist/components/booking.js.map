{"file":"booking.js","mappings":"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","names":[],"sources":["src/stores/booking.ts"],"sourcesContent":["import { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation;\r\n  ratePlan: RatePlan;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    pre_payment_amount: number;\r\n  };\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n}\r\ninterface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  tax_statement: null,\r\n  roomTypes: undefined,\r\n  enableBooking: false,\r\n  ratePlanSelections: {},\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n  },\r\n};\r\n\r\nexport const { state: booking_store, onChange: onRoomTypeChange } = createStore<BookingStore>(initialState);\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (roomType.is_active) {\r\n      ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n      roomType.rateplans.forEach(ratePlan => {\r\n        if (ratePlan.is_active && ratePlan.variations && ratePlan.variations.length > 0) {\r\n          const currentRatePlanSelection = currentSelections[roomType.id] && currentSelections[roomType.id][ratePlan.id];\r\n          ratePlanSelections[roomType.id][ratePlan.id] = currentRatePlanSelection\r\n            ? {\r\n                ...currentRatePlanSelection,\r\n                ratePlan,\r\n                visibleInventory: currentRatePlanSelection.visibleInventory,\r\n                selected_variation: ratePlan.variations[ratePlan.variations.length - 1],\r\n                guestName: currentRatePlanSelection.guestName,\r\n                roomtype: {\r\n                  id: roomType.id,\r\n                  name: roomType.name,\r\n                  physicalrooms: null,\r\n                  rateplans: null,\r\n                  availabilities: null,\r\n                  inventory: roomType.inventory,\r\n                  rate: roomType.rate,\r\n                  smoking_option: roomType.smoking_option,\r\n                  bedding_setup: roomType.bedding_setup,\r\n                  pre_payment_amount: roomType.pre_payment_amount,\r\n                },\r\n              }\r\n            : {\r\n                reserved: 0,\r\n                visibleInventory: roomType.inventory === 1 ? 2 : roomType.inventory,\r\n                selected_variation: ratePlan.variations[ratePlan.variations.length - 1],\r\n                ratePlan,\r\n                guestName: [],\r\n\r\n                is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n                roomtype: {\r\n                  id: roomType.id,\r\n                  name: roomType.name,\r\n                  physicalrooms: null,\r\n                  rateplans: null,\r\n                  availabilities: null,\r\n                  inventory: roomType.inventory,\r\n                  rate: roomType.rate,\r\n                  smoking_option: roomType.smoking_option,\r\n                  bedding_setup: roomType.bedding_setup,\r\n                  pre_payment_amount: roomType.pre_payment_amount,\r\n                },\r\n                checkoutVariations: [],\r\n                checkoutBedSelection: [],\r\n                checkoutSmokingSelection: [],\r\n              };\r\n        }\r\n      });\r\n    }\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? (roomTypeData.inventory === 1 ? 2 : roomTypeData.inventory) - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport function reserveRooms(roomTypeId: number, ratePlanId: number, rooms: number) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        pre_payment_amount: roomType.pre_payment_amount,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: { ...booking_store.ratePlanSelections[roomTypeId][ratePlanId], reserved: rooms },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number) {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return { reserved: 0, visibleInventory: 0, selected_variation: null };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  totalAmount = Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan: IRatePlanSelection) => {\r\n        let cost = 0;\r\n        if (ratePlan.checkoutVariations.length > 0) {\r\n          cost = ratePlan.checkoutVariations.reduce((old, v) => old + v.amount, 0);\r\n        } else {\r\n          cost = ratePlan.reserved > 0 ? ratePlan.reserved * (ratePlan.selected_variation.amount ?? 0) : 0;\r\n        }\r\n        return innerTotal + cost;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n  prePaymentAmount = Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan: IRatePlanSelection) => {\r\n        let cost = 0;\r\n        if (ratePlan.checkoutVariations.length > 0) {\r\n          cost = ratePlan.checkoutVariations.reduce((old, v) => old + v.amount, 0);\r\n        } else {\r\n          cost = ratePlan.reserved > 0 ? ratePlan.reserved * (ratePlan.roomtype.pre_payment_amount ?? 0) : 0;\r\n        }\r\n        return innerTotal + cost;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport default booking_store;\r\n"],"version":3}