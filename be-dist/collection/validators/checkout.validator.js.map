{"version":3,"file":"checkout.validator.js","sourceRoot":"","sources":["../../src/validators/checkout.validator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,MAAM,kBAAkB,GAAG;IACzB,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,mBAAmB;IAC/B,IAAI,EAAE,kBAAkB;CACzB,CAAC;AAEF,MAAM,WAAW,GAAG;IAClB,IAAI,EAAE,YAAY;IAClB,UAAU,EAAE,YAAY;IACxB,IAAI,EAAE,YAAY;CACnB,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,MAAc,EAAE,EAAE;IAC5C,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpD,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE,CAAC;QAC/C,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC;IACnD,MAAM,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC/C,IAAI,IAAI,GAAG,WAAW,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,KAAK,GAAG,YAAY,CAAC,EAAE,CAAC;QACzE,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC;KAC/B,MAAM,CAAC;IACN,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAC3B,GAAG,CAAC,EAAE;QACJ,OAAO,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3H,CAAC,EACD;QACE,OAAO,EAAE,qBAAqB;KAC/B,CACF;IACD,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;IACtB,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,kBAAkB,EAAE;QAChD,OAAO,EAAE,qBAAqB;KAC/B,CAAC;IACF,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QAChC,OAAO,EAAE,iCAAiC;KAC3C,CAAC;CACH,CAAC;KACD,WAAW,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;IACzB,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAuC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjJ,IAAI,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAoC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAClF,GAAG,CAAC,QAAQ,CAAC;YACX,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,CAAC,KAAK,CAAC;YACb,OAAO,EAAE,cAAc;SACxB,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import { z } from 'zod';\r\n\r\nconst cardNumberPatterns = {\r\n  VISA: /^4[0-9]{12}(?:[0-9]{3})?$/,\r\n  Mastercard: /^5[1-5][0-9]{14}$/,\r\n  AMEX: /^3[47][0-9]{13}$/,\r\n};\r\n\r\nconst cvcPatterns = {\r\n  VISA: /^[0-9]{3}$/,\r\n  Mastercard: /^[0-9]{3}$/,\r\n  AMEX: /^[0-9]{4}$/,\r\n};\r\n\r\nconst validateExpiryDate = (expiry: string) => {\r\n  const [month, year] = expiry.split('/').map(Number);\r\n  if (!month || !year || month < 1 || month > 12) {\r\n    return false;\r\n  }\r\n  const currentYear = new Date().getFullYear() % 100;\r\n  const currentMonth = new Date().getMonth() + 1;\r\n  if (year < currentYear || (year === currentYear && month < currentMonth)) {\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport const ZCreditCardSchema = z\r\n  .object({\r\n    cardNumber: z.string().refine(\r\n      val => {\r\n        return cardNumberPatterns.VISA.test(val) || cardNumberPatterns.Mastercard.test(val) || cardNumberPatterns.AMEX.test(val);\r\n      },\r\n      {\r\n        message: 'Invalid card number',\r\n      },\r\n    ),\r\n    cvc: z.string().min(3),\r\n    expiryDate: z.string().refine(validateExpiryDate, {\r\n      message: 'Invalid expiry date',\r\n    }),\r\n    cardHolderName: z.string().min(1, {\r\n      message: 'Cardholder name cannot be empty',\r\n    }),\r\n  })\r\n  .superRefine((data, ctx) => {\r\n    const cardType = Object.keys(cardNumberPatterns).find(type => cardNumberPatterns[type as keyof typeof cardNumberPatterns].test(data.cardNumber));\r\n\r\n    if (cardType && !cvcPatterns[cardType as keyof typeof cvcPatterns].test(data.cvc)) {\r\n      ctx.addIssue({\r\n        code: 'custom',\r\n        path: ['cvc'],\r\n        message: \"'Invalid CVC\",\r\n      });\r\n    }\r\n  });\r\n"]}