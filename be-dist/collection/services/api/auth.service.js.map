{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../src/services/api/auth.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAC1D,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAE3C,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,OAAO,WAAY,SAAQ,KAAK;IAC7B,KAAK,CAAC,KAAK,CAAC,MAAwB;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,iBAAiB,EAAE,CAAC;QAChC,CAAC;QACD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,gCAAgC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;QACnF,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QACxC,CAAC;QACD,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACpD,SAAS,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;IACM,KAAK,CAAC,MAAM,CAAC,MAAwB;QAC1C,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,iBAAiB,EAAE,CAAC;QAChC,CAAC;QACD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,gCAAgC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;QACnF,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;QACxC,CAAC;QACD,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;QACpD,SAAS,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/C,CAAC;CACF","sourcesContent":["import { MissingTokenError, Token } from '@/models/Token';\nimport app_store from '@/stores/app.store';\nimport { TSignInValidator, TSignUpValidator } from '@/validators/auth.validator';\nimport axios from 'axios';\n\nexport class AuthService extends Token {\n  public async login(params: TSignInValidator) {\n    const token = this.getToken();\n    if (!token) {\n      throw new MissingTokenError();\n    }\n    const { data } = await axios.post(`/Exposed_Guest_SignIn?Ticket=${token}`, params);\n    if (data['ExceptionMsg'] !== '') {\n      throw new Error(data['ExceptionMsg']);\n    }\n    localStorage.setItem('ir-token', data['My_Result']);\n    app_store.app_data.token = data['My_Result'];\n  }\n  public async signUp(params: TSignUpValidator) {\n    const token = this.getToken();\n    if (!token) {\n      throw new MissingTokenError();\n    }\n    const { data } = await axios.post(`/Exposed_Guest_SignUp?Ticket=${token}`, params);\n    if (data['ExceptionMsg'] !== '') {\n      throw new Error(data['ExceptionMsg']);\n    }\n    localStorage.setItem('ir-token', data['My_Result']);\n    app_store.app_data.token = data['My_Result'];\n  }\n}\n"]}