{"version":3,"file":"property.service.js","sourceRoot":"","sources":["../../../src/services/api/property.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropertyHelpers } from './../app/property-helpers.service';\r\nimport { TExposedBookingAvailability } from '@/components/ir-booking-engine/ir-booking-page/ir-availability-header/availability';\r\nimport { Booking, Room } from '@/models/booking.dto';\r\nimport { AllowedPaymentMethod, ISetupEntries, RoomType } from '@/models/property';\r\nimport app_store from '@/stores/app.store';\r\nimport booking_store, { IRatePlanSelection, IRoomTypeSelection } from '@/stores/booking';\r\nimport { checkout_store, ICardProcessingWithCVC, updateUserFormData } from '@/stores/checkout.store';\r\nimport { getCurrencyByCode, injectHTML, normalize } from '@/utils/utils';\r\nimport axios from 'axios';\r\nimport { Colors } from '../app/colors.service';\r\nimport { TGuest } from '@/models/user_form';\r\nimport { DataStructure } from '@/models/common';\r\nimport VariationService from '../app/variation.service';\r\n\r\ntype AvailabilityResponse = Awaited<ReturnType<PropertyService['getExposedBookingAvailability']>>;\r\n\r\nexport class PropertyService {\r\n  private propertyHelpers = new PropertyHelpers();\r\n  private static initialized = false;\r\n  colors: Colors = new Colors();\r\n\r\n  public async getExposedProperty(params: { id: number; language: string; aname: string | null; perma_link: string | null }, initTheme: boolean = true) {\r\n    const { data } = await axios.post(`/Get_Exposed_Property`, {\r\n      ...params,\r\n      currency: app_store.userPreferences.currency_id,\r\n      include_sales_rate_plans: true,\r\n    });\r\n    const result = data as DataStructure;\r\n    if (result.ExceptionMsg !== '') {\r\n      throw new Error(result.ExceptionMsg);\r\n    }\r\n    if (result.My_Result.tags && !PropertyService.initialized) {\r\n      PropertyService.initialized = true;\r\n      result.My_Result.tags.map(({ key, value }) => {\r\n        if (!value) {\r\n          return;\r\n        }\r\n        switch (key) {\r\n          case 'header':\r\n            return injectHTML(value, 'head', 'first');\r\n          case 'body':\r\n            return injectHTML(value, 'body', 'first');\r\n          case 'footer':\r\n            return injectHTML(value, 'body', 'last');\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!app_store.fetchedBooking) {\r\n      booking_store.roomTypes = [...(result.My_Result?.roomtypes ?? [])];\r\n    }\r\n    // } else {\r\n    //   const oldBookingStoreRoomTypes = [...booking_store.roomTypes];\r\n    //   booking_store.roomTypes = result.My_Result.roomtypes?.map(rt => {\r\n    //     const selectedRt = oldBookingStoreRoomTypes.find(r => r.id === rt.id);\r\n    //     return {\r\n    //       ...rt,\r\n    //       rateplans: rt.rateplans.map(rp => {\r\n    //         const currentRp = selectedRt.rateplans.find(s => s.id === rp.id);\r\n    //         if (currentRp) {\r\n    //           return { ...currentRp, short_name: rp.short_name };\r\n    //         }\r\n    //         return null;\r\n    //       }),\r\n    //     };\r\n    //   });\r\n    // }\r\n\r\n    if (!app_store.fetchedBooking) {\r\n      booking_store.roomTypes = [...(result.My_Result?.roomtypes ?? [])];\r\n    }\r\n    if (params.aname || params.perma_link) {\r\n      app_store.app_data = { ...app_store.app_data, property_id: result.My_Result.id };\r\n    }\r\n    // if (!app_store.app_data.geoTimezone) {\r\n    //   const { data } = await axios.get(\r\n    //     `https://api.geotimezone.com/public/timezone?latitude=${result.My_Result.location.latitude}&longitude=${result.My_Result.location.longitude}`,\r\n    //   );\r\n    //   app_store.app_data.geoTimezone = data;\r\n    // }\r\n    app_store.app_data.displayMode = result.My_Result.be_listing_mode === 'grid' ? 'grid' : 'default';\r\n    app_store.property = { ...result.My_Result };\r\n    app_store.app_data.property_id = result.My_Result.id;\r\n    booking_store.tax_statement = { message: data.My_Result.tax_statement };\r\n    if (initTheme) {\r\n      this.colors.initTheme(result.My_Result);\r\n    }\r\n    return result.My_Result;\r\n  }\r\n  public async getExposedNonBookableNights(params: { from_date: string; to_date: string; porperty_id: number; aname: string; perma_link: string }) {\r\n    const { data } = await axios.post(`/Get_Exposed_Non_Bookable_Nights`, params);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const nights = {};\r\n    data.My_Result?.forEach(nbn => {\r\n      nights[nbn.night] = true;\r\n    });\r\n    app_store.nonBookableNights = nights;\r\n    return data.My_Result;\r\n  }\r\n  public async getExposedBookingAvailability(props: TExposedBookingAvailability): Promise<DataStructure> {\r\n    const roomtypeIds = props.room_type_ids || this.propertyHelpers.collectRoomTypeIds(props);\r\n    const rateplanIds = props.rate_plan_ids || this.propertyHelpers.collectRatePlanIds(props);\r\n    const data = await this.propertyHelpers.fetchAvailabilityData(props, roomtypeIds, rateplanIds);\r\n    if (props.update_store) {\r\n      this.propertyHelpers.updateBookingStore(data);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  public async getExposedBooking(params: { booking_nbr: string; language: string; currency: string }, withExtras: boolean = true) {\r\n    const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n      ...params,\r\n      extras: withExtras\r\n        ? [\r\n            { key: 'payment_code', value: '' },\r\n            {\r\n              key: 'prepayment_amount',\r\n              value: '',\r\n            },\r\n            { key: 'payment_code', value: '' },\r\n            { key: 'agent_payment_mode', value: '' },\r\n          ]\r\n        : null,\r\n    });\r\n    const result = data as DataStructure;\r\n    if (result.ExceptionMsg !== '') {\r\n      throw new Error(result.ExceptionMsg);\r\n    }\r\n    return result.My_Result as Booking;\r\n  }\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    if (app_store.setup_entries) {\r\n      return app_store.setup_entries;\r\n    }\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n      TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res: any[] = data.My_Result;\r\n    const setupEntries = {\r\n      arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n      ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n      bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n    };\r\n    app_store.setup_entries = setupEntries;\r\n    updateUserFormData('arrival_time', setupEntries.arrivalTime[0].CODE_NAME);\r\n    return setupEntries;\r\n  }\r\n\r\n  // private async filterRooms(roomTypes: RoomType[] | null) {\r\n  //   let rooms = [];\r\n  //   const hasDifferentCurrency = app_store.userPreferences.currency_id.toLocaleLowerCase() !== app_store.property?.currency?.code.toLocaleLowerCase();\r\n  //   if (app_store.userPreferences.currency_id.toLocaleLowerCase() !== app_store.property?.currency?.code.toLocaleLowerCase()) {\r\n  //     // const data = await this.getExposedBookingAvailability({ ...checkAvailabilityPayload, currency_ref: app_store.property.currency.code });\r\n  //     // roomTypes = data.My_Result as RoomType[];\r\n  //   }\r\n  //   const variationService = new VariationService();\r\n  //   Object.values(booking_store.ratePlanSelections).map(rt => {\r\n  //     Object.values(rt).map((rp: IRatePlanSelection) => {\r\n  //       if (rp.reserved > 0) {\r\n  //         const roomType = roomTypes?.find(rt => rt === rp.roomtype);\r\n  //         const ratePlan = roomType?.rateplans.find(r => rp.ratePlan.id === r.id);\r\n  //         [...new Array(rp.reserved)].map((_, index) => {\r\n  //           const { first_name, last_name } = this.propertyHelpers.extractFirstNameAndLastName(index, rp.guestName);\r\n  //           const variation = variationService.getVariationBasedOnInfants({\r\n  //             baseVariation: hasDifferentCurrency\r\n  //               ? ratePlan?.variations.find(\r\n  //                   v =>\r\n  //                     v.adult_nbr === rp.checkoutVariations[index].adult_nbr &&\r\n  //                     v.child_nbr === rp.checkoutVariations[index].child_nbr &&\r\n  //                     v.infant_nbr === rp.checkoutVariations[index].infant_nbr,\r\n  //                 )\r\n  //               : rp.checkoutVariations[index],\r\n  //             variations: hasDifferentCurrency ? ratePlan?.variations : rp.ratePlan.variations,\r\n  //             infants: rp.infant_nbr[index],\r\n  //           });\r\n  //           rooms.push({\r\n  //             identifier: null,\r\n  //             roomtype: rp.roomtype,\r\n  //             rateplan: rp.ratePlan,\r\n  //             prepayment_amount_gross: hasDifferentCurrency ? variation?.prepayment_amount_gross : rp?.selected_variation?.prepayment_amount_gross,\r\n  //             unit: null,\r\n  //             smoking_option: rp.checkoutSmokingSelection[index],\r\n  //             occupancy: {\r\n  //               adult_nbr: rp.checkoutVariations[index].adult_nbr,\r\n  //               children_nbr: rp.checkoutVariations[index].child_nbr - rp.infant_nbr[index],\r\n  //               infant_nbr: rp.infant_nbr[index],\r\n  //             },\r\n  //             bed_preference: rp.is_bed_configuration_enabled ? rp.checkoutBedSelection[index] : null,\r\n  //             from_date: booking_store.bookingAvailabilityParams.from_date.locale('en').format('YYYY-MM-DD'),\r\n  //             to_date: booking_store.bookingAvailabilityParams.to_date.locale('en').format('YYYY-MM-DD'),\r\n  //             notes: null,\r\n  //             days: variation.nights.map(n => ({\r\n  //               date: n.night,\r\n  //               amount: n.discounted_amount,\r\n  //               cost: null,\r\n  //             })),\r\n  //             guest: {\r\n  //               email: null,\r\n  //               first_name,\r\n  //               last_name,\r\n  //               country_id: null,\r\n  //               city: null,\r\n  //               mobile: null,\r\n  //               address: null,\r\n  //               dob: null,\r\n  //               subscribe_to_news_letter: null,\r\n  //               cci: null,\r\n  //             },\r\n  //           });\r\n  //         });\r\n  //       }\r\n  //     });\r\n  //   });\r\n  //   return rooms;\r\n  // }\r\n  /**\r\n   * Builds the array of room payloads for reservation based on the user's current selections.\r\n   *\r\n   * For each reserved entry in `booking_store.ratePlanSelections`, this method:\r\n   *  1) Resolves the effective `RoomType` and `RatePlan` (preferring the provided `roomTypes`\r\n   *     argument if available, otherwise falling back to `booking_store.roomTypes`).\r\n   *  2) Detects currency context differences between the user's currency and the property's currency.\r\n   *  3) Locates a base variation for each reserved unit (matching adult/child/infant counts). When\r\n   *     in a different-currency context, variations are taken from the effective rate plan instead of\r\n   *     the selection object. If no exact variation is found, the checkout variation is used.\r\n   *  4) Adjusts the variation with infants via `VariationService.getVariationBasedOnInfants`.\r\n   *  5) Produces a normalized \"room\" object used by the booking API.\r\n   *\r\n   * @private\r\n   * @param {RoomType[] | null} roomTypes - Room types in the effective currency context; falls back to `booking_store.roomTypes` if `null`.\r\n   * @returns {Room[]} Array of normalized `Room` payloads ready for `/DoReservation`.\r\n   *\r\n   * @example\r\n   * // Use effective availability (e.g., after currency switch) to build reservation rooms:\r\n   * const rooms = this.filterRooms(freshAvailabilityRoomTypes);\r\n   * // Send in booking body: { booking: { rooms }, ... }\r\n   */\r\n  private filterRooms(roomTypes: RoomType[] | null): Room[] {\r\n    const rooms: any[] = [];\r\n    const variationService = new VariationService();\r\n    const hasDifferentCurrency = normalize(app_store.userPreferences.currency_id) !== normalize(app_store.property?.currency?.code);\r\n\r\n    const effectiveRoomTypes = roomTypes ?? booking_store.roomTypes ?? [];\r\n    const roomTypeLookup = new Map<number, RoomType>();\r\n    effectiveRoomTypes.forEach(rt => {\r\n      if (rt) roomTypeLookup.set(rt.id, rt);\r\n    });\r\n\r\n    Object.values(booking_store.ratePlanSelections).forEach(ratePlanSelections => {\r\n      Object.values(ratePlanSelections).forEach((rp: IRatePlanSelection) => {\r\n        if (!rp?.reserved) return;\r\n\r\n        const selectedRoomType = roomTypeLookup.get(rp.roomtype.id) ?? null;\r\n        const selectedRatePlan = selectedRoomType?.rateplans?.find(plan => plan.id === rp.ratePlan.id) ?? rp.ratePlan;\r\n        const currencyVariations = hasDifferentCurrency ? (selectedRatePlan?.variations ?? []) : (rp.ratePlan.variations ?? []);\r\n\r\n        for (let index = 0; index < rp.reserved; index += 1) {\r\n          const checkoutVariation = rp.checkoutVariations?.[index];\r\n          if (!checkoutVariation) continue;\r\n\r\n          const infants = rp.infant_nbr?.[index] ?? 0;\r\n          const baseVariation = hasDifferentCurrency\r\n            ? (currencyVariations.find(\r\n                v => v.adult_nbr === checkoutVariation.adult_nbr && v.child_nbr === checkoutVariation.child_nbr && (v.infant_nbr ?? 0) === (checkoutVariation.infant_nbr ?? 0),\r\n              ) ?? checkoutVariation)\r\n            : checkoutVariation;\r\n\r\n          const resolvedVariation =\r\n            variationService.getVariationBasedOnInfants({\r\n              baseVariation,\r\n              variations: currencyVariations.length ? currencyVariations : (rp.ratePlan.variations ?? []),\r\n              infants,\r\n            }) ?? baseVariation;\r\n\r\n          const { first_name, last_name } = this.propertyHelpers.extractFirstNameAndLastName(index, rp.guestName);\r\n          const nights = resolvedVariation?.nights ?? checkoutVariation?.nights ?? [];\r\n\r\n          rooms.push({\r\n            identifier: null,\r\n            roomtype: selectedRoomType ?? rp.roomtype,\r\n            rateplan: selectedRatePlan,\r\n            prepayment_amount_gross: hasDifferentCurrency\r\n              ? (resolvedVariation?.prepayment_amount_gross ?? 0)\r\n              : (rp.selected_variation?.prepayment_amount_gross ?? resolvedVariation?.prepayment_amount_gross ?? 0),\r\n            unit: null,\r\n            smoking_option: rp.checkoutSmokingSelection?.[index] ?? null,\r\n            occupancy: {\r\n              adult_nbr: checkoutVariation.adult_nbr,\r\n              children_nbr: Math.max(0, (checkoutVariation.child_nbr ?? 0) - infants),\r\n              infant_nbr: infants,\r\n            },\r\n            bed_preference: rp.is_bed_configuration_enabled ? (rp.checkoutBedSelection?.[index] ?? null) : null,\r\n            from_date: booking_store.bookingAvailabilityParams.from_date.locale('en').format('YYYY-MM-DD'),\r\n            to_date: booking_store.bookingAvailabilityParams.to_date.locale('en').format('YYYY-MM-DD'),\r\n            notes: null,\r\n            days: nights.map(n => ({\r\n              date: n.night,\r\n              amount: n.discounted_amount,\r\n              cost: null,\r\n            })),\r\n            guest: {\r\n              email: null,\r\n              first_name,\r\n              last_name,\r\n              country_id: null,\r\n              city: null,\r\n              mobile: null,\r\n              address: null,\r\n              dob: null,\r\n              subscribe_to_news_letter: null,\r\n              cci: null,\r\n            },\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    return rooms;\r\n  }\r\n\r\n  public async editExposedGuest(guest: TGuest, book_nbr: string): Promise<any> {\r\n    const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n\r\n  // Returns a Currency object from app_store.currencies or null if no change is needed.\r\n  // Priority: user's currency (if allowed) → hotel's currency (if allowed) → first allowed currency.\r\n  // If the chosen currency equals the user's currency, returns null to indicate no switch is needed.\r\n  private getMostEffectiveCurrency = (paymentMethod: AllowedPaymentMethod): (typeof app_store.currencies)[number] | null => {\r\n    const allowed = normalize(paymentMethod?.allowed_currencies || '');\r\n    if (!allowed) return null;\r\n\r\n    const allowedList = allowed\r\n      .split(',')\r\n      .map(c => normalize(c))\r\n      .filter(Boolean);\r\n\r\n    if (allowedList.length === 0) return null;\r\n\r\n    // Resolve user + hotel currency objects (fall back to 'usd' only if needed)\r\n    const userCode = normalize(app_store.userPreferences?.currency_id) || 'usd';\r\n    const hotelCode = normalize(app_store.property?.currency?.code);\r\n    const hotelCurrency = hotelCode ? getCurrencyByCode(hotelCode) : null;\r\n\r\n    // 1) If the user's currency is allowed → no change.\r\n    if (allowedList.includes(userCode)) return null;\r\n\r\n    // 2) If the hotel's currency is allowed → switch to hotel currency.\r\n    if (hotelCode && allowedList.includes(hotelCode) && hotelCurrency) return hotelCurrency;\r\n\r\n    // 3) Otherwise, pick the first allowed currency we can resolve from the store.\r\n    for (const code of allowedList) {\r\n      const cur = getCurrencyByCode(code);\r\n      if (cur) {\r\n        // If this equals user currency (rare: user not in allowedList but store normalization mismatch), treat as no change.\r\n        if (normalize(cur.code) === userCode) return null;\r\n        return cur;\r\n      }\r\n    }\r\n\r\n    // If none of the allowed codes exist in app_store.currencies, don't switch.\r\n    return null;\r\n  };\r\n  /**\r\n   * Collects the IDs of room types and rate plans that have at least one room reserved\r\n   * in the current `booking_store.ratePlanSelections`.\r\n   *\r\n   * Iterates over the nested selection map and includes only entries where\r\n   * `reserved > 0`.\r\n   *\r\n   * @private\r\n   * @returns {{ roomTypeIds: number[]; ratePlanIds: number[] }}\r\n   * An object containing:\r\n   *  - `roomTypeIds`: unique room type IDs with reservations.\r\n   *  - `ratePlanIds`: unique rate plan IDs with reservations.\r\n   *\r\n   * @example\r\n   * const { roomTypeIds, ratePlanIds } = this.collectBookedRoomsId();\r\n   * // Use these arrays to build availability or pricing payloads.\r\n   */\r\n  private collectBookedRoomsId(): { roomTypeIds: number[]; ratePlanIds: number[] } {\r\n    const roomTypeIds = new Set<number>();\r\n    const ratePlanIds = new Set<number>();\r\n\r\n    for (const roomtypeId in booking_store.ratePlanSelections) {\r\n      for (const rateplanId in booking_store.ratePlanSelections[roomtypeId]) {\r\n        const rateplan = booking_store.ratePlanSelections[roomtypeId][rateplanId];\r\n        if (rateplan.reserved > 0) {\r\n          roomTypeIds.add(Number(roomtypeId));\r\n          ratePlanIds.add(Number(rateplanId));\r\n        }\r\n      }\r\n    }\r\n    return { ratePlanIds: Array.from(ratePlanIds), roomTypeIds: Array.from(roomTypeIds) };\r\n  }\r\n\r\n  /**\r\n   * Recalculates the total prepayment amount for the currently selected rooms.\r\n   *\r\n   * Walks through the provided `roomTypes`, finds the matching user-selected\r\n   * rate plans/variations from `booking_store.ratePlanSelections`, and sums\r\n   * each stay’s `prepayment_amount_gross`. If an exact base variation is not\r\n   * found (by adult/child/infant counts), the checkout variation is used as a fallback.\r\n   * Infant counts are applied via `VariationService.getVariationBasedOnInfants`.\r\n   *\r\n   * @private\r\n   * @param {RoomType[]} roomTypes - The room types returned from availability (in the currency context used for recalculation).\r\n   * @returns {number} Total prepayment amount (sum of `prepayment_amount_gross`) for all reserved rooms.\r\n   *\r\n   * @example\r\n   * // After fetching availability in a different currency:\r\n   * const total = this.recalculatePrepaymentAmount(data.My_Result);\r\n   * console.log('New prepayment amount:', total);\r\n   */\r\n  private recalculatePrepaymentAmount(roomTypes: RoomType[]): number {\r\n    let total = 0;\r\n    const variationService = new VariationService();\r\n\r\n    for (const roomType of roomTypes as RoomType[]) {\r\n      const selectedRoomType = booking_store.ratePlanSelections[roomType.id] as IRoomTypeSelection | undefined;\r\n      if (!selectedRoomType) continue;\r\n\r\n      for (const ratePlan of roomType.rateplans) {\r\n        const selectedRatePlan = selectedRoomType[ratePlan.id];\r\n        if (!selectedRatePlan) continue;\r\n\r\n        const { checkoutVariations, infant_nbr } = selectedRatePlan;\r\n        checkoutVariations.forEach((checkoutVariation, index) => {\r\n          const baseVariation =\r\n            ratePlan.variations.find(\r\n              v => v.adult_nbr === checkoutVariation.adult_nbr && v.child_nbr === checkoutVariation.child_nbr && v.infant_nbr === checkoutVariation.infant_nbr,\r\n            ) ?? checkoutVariation;\r\n\r\n          if (!baseVariation) return;\r\n\r\n          const variation = variationService.getVariationBasedOnInfants({\r\n            baseVariation,\r\n            variations: ratePlan.variations,\r\n            infants: infant_nbr?.[index] ?? 0,\r\n          });\r\n\r\n          total += variation?.prepayment_amount_gross ?? 0;\r\n        });\r\n      }\r\n    }\r\n    return total;\r\n  }\r\n\r\n  public async bookUser(\r\n    paymentMethod: AllowedPaymentMethod,\r\n  ): Promise<{ booking: Booking; prepaymentAmount: number; mostEffectiveCurrency: (typeof app_store.currencies)[number] | null }> {\r\n    let prePaymentAmount = checkout_store.prepaymentAmount;\r\n    const mostEffectiveCurrency = this.getMostEffectiveCurrency(paymentMethod);\r\n    const { ratePlanIds, roomTypeIds } = this.collectBookedRoomsId();\r\n    let checkAvailabilityPayload = {\r\n      propertyid: app_store.app_data.property_id,\r\n      from_date: booking_store.bookingAvailabilityParams.from_date,\r\n      to_date: booking_store.bookingAvailabilityParams.to_date,\r\n      room_type_ids: roomTypeIds,\r\n      rate_plan_ids: ratePlanIds,\r\n      adult_nbr: booking_store.bookingAvailabilityParams.adult_nbr,\r\n      child_nbr: booking_store.bookingAvailabilityParams.child_nbr,\r\n      language: app_store.userPreferences.language_id,\r\n      is_in_loyalty_mode: booking_store.bookingAvailabilityParams.loyalty ? true : !!booking_store.bookingAvailabilityParams.coupon,\r\n      promo_key: booking_store.bookingAvailabilityParams.coupon || '',\r\n      is_in_agent_mode: !!booking_store.bookingAvailabilityParams.agent || false,\r\n      agent_id: booking_store.bookingAvailabilityParams.agent?.id || 0,\r\n      is_in_affiliate_mode: !!app_store.app_data.affiliate,\r\n      affiliate_id: app_store.app_data.affiliate ? app_store.app_data.affiliate.id : null,\r\n      update_store: false,\r\n    };\r\n\r\n    let roomTypes: RoomType[] | null = null;\r\n    const normalizedUserCurrency = normalize(app_store.userPreferences?.currency_id) || 'usd';\r\n    const normalizedMethodCurrency = mostEffectiveCurrency ? normalize(mostEffectiveCurrency.code) : null;\r\n    const normalizedPropertyCurrency = normalize(app_store.property?.currency?.code);\r\n    const hasDifferentCurrency = normalizedUserCurrency !== normalizedPropertyCurrency;\r\n\r\n    const wantsMethodCurrency = prePaymentAmount > 0 && normalizedMethodCurrency && normalizedMethodCurrency !== normalizedUserCurrency;\r\n    const needsPropertyAvailability = hasDifferentCurrency && (!wantsMethodCurrency || normalizedMethodCurrency !== normalizedPropertyCurrency);\r\n\r\n    let methodAvailability: AvailabilityResponse | null = null;\r\n    let propertyAvailability: AvailabilityResponse | null = null;\r\n\r\n    const availabilityCalls: Promise<void>[] = [];\r\n\r\n    if (wantsMethodCurrency && mostEffectiveCurrency) {\r\n      availabilityCalls.push(\r\n        this.getExposedBookingAvailability({ ...checkAvailabilityPayload, currency_ref: mostEffectiveCurrency.code }).then(data => {\r\n          methodAvailability = data;\r\n          if (normalizedMethodCurrency === normalizedPropertyCurrency) {\r\n            roomTypes = [...data.My_Result];\r\n          }\r\n        }),\r\n      );\r\n    }\r\n\r\n    if (needsPropertyAvailability) {\r\n      availabilityCalls.push(\r\n        this.getExposedBookingAvailability({ ...checkAvailabilityPayload, currency_ref: '' }).then(data => {\r\n          propertyAvailability = data;\r\n          if (!roomTypes) {\r\n            roomTypes = [...data.My_Result];\r\n          }\r\n        }),\r\n      );\r\n    }\r\n    if (availabilityCalls.length) {\r\n      await Promise.all(availabilityCalls);\r\n    }\r\n    if (methodAvailability && wantsMethodCurrency && mostEffectiveCurrency) {\r\n      prePaymentAmount = this.recalculatePrepaymentAmount(methodAvailability.My_Result);\r\n    }\r\n    if (!roomTypes && propertyAvailability) {\r\n      roomTypes = [...propertyAvailability.My_Result];\r\n    }\r\n    try {\r\n      let guest: any = {\r\n        email: checkout_store.userFormData.email,\r\n        first_name: checkout_store.userFormData.firstName,\r\n        last_name: checkout_store.userFormData.lastName,\r\n        country_id: checkout_store.userFormData.country_id,\r\n        city: null,\r\n        mobile: checkout_store.userFormData.mobile_number,\r\n        address: '',\r\n        country_phone_prefix: checkout_store.userFormData.country_phone_prefix,\r\n        dob: null,\r\n        subscribe_to_news_letter: true,\r\n        cci:\r\n          booking_store.bookingAvailabilityParams.agent && booking_store.bookingAvailabilityParams.agent?.payment_mode?.code === '001'\r\n            ? null\r\n            : checkout_store.payment?.code === '001'\r\n              ? {\r\n                  nbr: (checkout_store.payment as ICardProcessingWithCVC)?.cardNumber?.replace(/ /g, ''),\r\n                  holder_name: (checkout_store.payment as ICardProcessingWithCVC)?.cardHolderName,\r\n                  expiry_month: (checkout_store.payment as ICardProcessingWithCVC)?.expiry_month.split('/')[0],\r\n                  expiry_year: (checkout_store.payment as ICardProcessingWithCVC)?.expiry_year.split('/')[1],\r\n                  cvc: (checkout_store.payment as ICardProcessingWithCVC).cvc,\r\n                }\r\n              : null,\r\n      };\r\n      // const now = moment();\r\n      const rooms = this.filterRooms(roomTypes);\r\n      const body = {\r\n        assign_units: false,\r\n        check_in: false,\r\n        is_pms: false,\r\n        is_direct: true,\r\n        language: app_store?.userPreferences?.language_id ?? 'en',\r\n        agent: booking_store.bookingAvailabilityParams.agent ? { id: booking_store.bookingAvailabilityParams.agent?.id } : null,\r\n        is_in_loyalty_mode: booking_store.bookingAvailabilityParams.loyalty,\r\n        promo_key: booking_store.bookingAvailabilityParams.coupon ?? null,\r\n        booking: {\r\n          booking_nbr: '',\r\n          from_date: booking_store.bookingAvailabilityParams.from_date.locale('en').format('YYYY-MM-DD'),\r\n          to_date: booking_store.bookingAvailabilityParams.to_date.locale('en').format('YYYY-MM-DD'),\r\n          remark: checkout_store.userFormData.message || null,\r\n          property: {\r\n            id: app_store.app_data.property_id,\r\n          },\r\n          // booked_on: {\r\n          //   date: now.format('YYYY-MM-DD'),\r\n          //   hour: now.hour(),\r\n          //   minute: now.minute(),\r\n          // },\r\n          source: { code: app_store.app_data.isFromGhs ? 'ghs' : new URL(window.location.href).origin, tag: app_store.app_data.stag, description: '' },\r\n          referrer_site: app_store.app_data.affiliate ? `https://${app_store.app_data.affiliate.sites[0].url}` : 'www.igloorooms.com',\r\n          // currency: app_store.currencies.find(currency => currency.code.toString().toLowerCase() === app_store.userPreferences.currency_id.toLowerCase()),\r\n          currency: app_store.property.currency,\r\n          arrival: { code: checkout_store.userFormData.arrival_time },\r\n          guest,\r\n          rooms,\r\n        },\r\n        extras: [\r\n          {\r\n            key: 'payment_code',\r\n            value: checkout_store.payment.code,\r\n          },\r\n          prePaymentAmount > 0\r\n            ? {\r\n                key: 'prepayment_amount',\r\n                value: prePaymentAmount,\r\n              }\r\n            : null,\r\n          booking_store.bookingAvailabilityParams.agent\r\n            ? {\r\n                key: 'agent_payment_mode',\r\n                value: booking_store.bookingAvailabilityParams.agent.payment_mode.code,\r\n              }\r\n            : null,\r\n          {\r\n            key: 'selected_currency',\r\n            value: app_store.property.currency.code,\r\n          },\r\n        ].filter(f => f !== null),\r\n        pickup_info: checkout_store.pickup.location ? this.propertyHelpers.convertPickup(checkout_store.pickup) : null,\r\n      };\r\n\r\n      // if (f) {\r\n      //   throw new Error('');\r\n      // }\r\n      const { data } = await axios.post(`/DoReservation`, body);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return { booking: data['My_Result'], prepaymentAmount: prePaymentAmount, mostEffectiveCurrency: mostEffectiveCurrency };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getExposedGuest() {\r\n    const { data } = await axios.post(`/Get_Exposed_Guest`, {\r\n      email: null,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res = data.My_Result;\r\n    if (res === null) {\r\n      app_store.is_signed_in = false;\r\n      return;\r\n    }\r\n    // app_store.is_signed_in = true;\r\n    checkout_store.userFormData = {\r\n      ...checkout_store.userFormData,\r\n      country_id: res.country_id,\r\n      email: res.email,\r\n      firstName: res.first_name,\r\n      lastName: res.last_name,\r\n      mobile_number: res.mobile,\r\n      country_phone_prefix: res.country_phone_prefix,\r\n      id: res.id,\r\n    };\r\n  }\r\n}\r\n"]}