{"version":3,"file":"GoogleConversions.js","sourceRoot":"","sources":["../../../../src/services/app/Analytics/GoogleConversions.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,MAAM,OAAO,gBAAgB;IAG3B,YAAoB,YAAoB;QAApB,iBAAY,GAAZ,YAAY,CAAQ;QACtC,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAEM,IAAI;QACT,IAAI,gBAAgB,CAAC,WAAW;YAAE,OAAO;QAEzC,MAAM,MAAM,GAAG;uEACoD,IAAI,CAAC,YAAY;;;;;0BAK9D,IAAI,CAAC,YAAY;;KAEtC,CAAC;QACF,UAAU,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAEpC,gBAAgB,CAAC,WAAW,GAAG,IAAI,CAAC;IACtC,CAAC;IAEM,WAAW,CAAC,EAAE,SAAS,EAAE,OAAO,EAAgB;QACrD,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;YACxB,SAAS;YACT,OAAO;SACR,CAAC,CAAC;IACL,CAAC;IACM,aAAa,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAkB;QACtD,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE;YAChC,KAAK;YACL,QAAQ;SACT,CAAC,CAAC;IACL,CAAC;IAEO,MAAM,CAAC,eAAe;QAC5B,OAAO,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC;IAC5E,CAAC;IAEM,aAAa,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,cAAc,EAAE,KAAK,EAAwB;QACxF,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE;YAC1B,KAAK;YACL,QAAQ;YACR,UAAU;YACV,cAAc;SACf,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACK,UAAU,CAAC,SAAiB,EAAE,WAAoC;QACxE,IAAI,gBAAgB,CAAC,eAAe,EAAE,EAAE,CAAC;YACvC,MAAM,CAAC,IAAK,CAAC,OAAO,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;YAC9C,OAAO,CAAC,GAAG,CAAC,sBAAsB,SAAS,EAAE,EAAE,WAAW,IAAI,EAAE,CAAC,CAAC;QACpE,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,8DAA8D,EAAE,SAAS,EAAE,WAAW,IAAI,EAAE,CAAC,CAAC;QAC7G,CAAC;IACH,CAAC;IACM,eAAe,KAAI,CAAC;;AA/Db,4BAAW,GAAG,KAAK,CAAC","sourcesContent":["import { injectHTML } from '@/utils/utils';\r\nimport { CheckoutParams, GooglePurchaseParams, IConversion, SearchParams } from './types';\r\n\r\nexport class GoogleConversion implements IConversion {\r\n  public static initialized = false;\r\n\r\n  constructor(private conversionId: string) {\r\n    this.init();\r\n  }\r\n\r\n  public init() {\r\n    if (GoogleConversion.initialized) return;\r\n\r\n    const script = `\r\n      <script async src=\"https://www.googletagmanager.com/gtag/js?id=${this.conversionId}\"></script>\r\n      <script>\r\n        window.dataLayer = window.dataLayer || [];\r\n        function gtag() { dataLayer.push(arguments); }\r\n        gtag('js', new Date());\r\n        gtag('config', '${this.conversionId}');\r\n      </script>\r\n    `;\r\n    injectHTML(script, 'head', 'first');\r\n\r\n    GoogleConversion.initialized = true;\r\n  }\r\n\r\n  public trackSearch({ from_date, to_date }: SearchParams) {\r\n    this.trackEvent('search', {\r\n      from_date,\r\n      to_date,\r\n    });\r\n  }\r\n  public trackCheckout({ currency, value }: CheckoutParams): void {\r\n    this.trackEvent('begin_checkout', {\r\n      value,\r\n      currency,\r\n    });\r\n  }\r\n\r\n  private static isGtagAvailable(): boolean {\r\n    return typeof window !== 'undefined' && typeof window.gtag === 'function';\r\n  }\r\n\r\n  public trackPurchase({ currency, roomnights, transaction_id, value }: GooglePurchaseParams): void {\r\n    this.trackEvent('purchase', {\r\n      value,\r\n      currency,\r\n      roomnights,\r\n      transaction_id,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sends an event to Google Analytics.\r\n   *\r\n   * @param eventName The name of the event.\r\n   * @param eventParams Optional parameters to send with the event.\r\n   */\r\n  private trackEvent(eventName: string, eventParams?: { [key: string]: any }): void {\r\n    if (GoogleConversion.isGtagAvailable()) {\r\n      window.gtag!('event', eventName, eventParams);\r\n      console.log(`GA4 Event Tracked: ${eventName}`, eventParams || {});\r\n    } else {\r\n      console.warn('Google Analytics (gtag) is not available. Event not tracked:', eventName, eventParams || {});\r\n    }\r\n  }\r\n  public trackConversion() {}\r\n}\r\n"]}