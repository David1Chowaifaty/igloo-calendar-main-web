{"version":3,"file":"VariationSorter.js","sourceRoot":"","sources":["../../../src/services/app/VariationSorter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Variation } from '@/models/property';\r\n\r\nexport class VariationSorter {\r\n  public sortVariations(variations: Variation[]): Variation[] {\r\n    const maxAdults = Math.max(...variations.map(v => v.adult_nbr));\r\n    const maxChildren = Math.max(...variations.filter(v => v.adult_nbr === maxAdults).map(v => v.child_nbr));\r\n    return this.mergeSort(variations, maxAdults, maxChildren);\r\n  }\r\n\r\n  private mergeSort(items: Variation[], maxAdults: number, maxChildren: number): Variation[] {\r\n    if (items.length <= 1) {\r\n      return items;\r\n    }\r\n\r\n    const middle = Math.floor(items.length / 2);\r\n    const left = items.slice(0, middle);\r\n    const right = items.slice(middle);\r\n\r\n    return this.merge(this.mergeSort(left, maxAdults, maxChildren), this.mergeSort(right, maxAdults, maxChildren), maxAdults, maxChildren);\r\n  }\r\n\r\n  private merge(left: Variation[], right: Variation[], maxAdults: number, maxChildren: number): Variation[] {\r\n    let resultArray: Variation[] = [],\r\n      leftIndex = 0,\r\n      rightIndex = 0;\r\n\r\n    while (leftIndex < left.length && rightIndex < right.length) {\r\n      if (this.compareVariations(left[leftIndex], right[rightIndex], maxAdults, maxChildren) === -1) {\r\n        resultArray.push(left[leftIndex]);\r\n        leftIndex++; // move left array cursor\r\n      } else {\r\n        resultArray.push(right[rightIndex]);\r\n        rightIndex++; // move right array cursor\r\n      }\r\n    }\r\n\r\n    return resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\r\n  }\r\n\r\n  private compareVariations(a: Variation, b: Variation, maxAdults: number, maxChildren: number): number {\r\n    // Check for the special case where the max adult and max child should be sorted last\r\n    const isAMax = a.adult_nbr === maxAdults && a.child_nbr === maxChildren;\r\n    const isBMax = b.adult_nbr === maxAdults && b.child_nbr === maxChildren;\r\n\r\n    if (isAMax && !isBMax) return 1;\r\n    if (!isAMax && isBMax) return -1;\r\n\r\n    // Normal sorting based on adults first, then children\r\n    if (a.adult_nbr !== b.adult_nbr) {\r\n      return a.adult_nbr - b.adult_nbr;\r\n    }\r\n\r\n    return a.child_nbr - b.child_nbr;\r\n  }\r\n}\r\n"]}