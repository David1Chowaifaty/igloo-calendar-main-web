{"version":3,"file":"property-helpers.service.js","sourceRoot":"","sources":["../../../src/services/app/property-helpers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { RoomType } from '@/models/property';\nimport booking_store from '@/stores/booking';\n\nexport class PropertyHelpers {\n  private static readonly MODE_MODIFY_RT = 'modify_rt';\n  private static readonly MODE_DEFAULT = 'default';\n\n  public validateModeProps(props: any) {\n    if (props.mode === PropertyHelpers.MODE_MODIFY_RT && (!props.rp_id || !props.rt_id)) {\n      throw new Error('Missing property: rp_id or rt_id is required in modify_rt mode');\n    }\n  }\n\n  public updateBookingStore(data: any, props: any) {\n    try {\n      let roomtypes = [...booking_store.roomTypes];\n      const newRoomtypes = data.My_Result.roomtypes;\n      if (props.mode === PropertyHelpers.MODE_DEFAULT) {\n        roomtypes = this.updateInventory(roomtypes, newRoomtypes);\n        roomtypes = this.sortRoomTypes(roomtypes, {\n          adult_nbr: props.params.adult_nbr,\n          child_nbr: props.params.child_nbr,\n        });\n      } else {\n        roomtypes = this.updateRoomTypeRatePlans(roomtypes, newRoomtypes, props);\n      }\n      booking_store.roomTypes = roomtypes;\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\n      booking_store.enableBooking = true;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  private updateInventory(roomtypes: RoomType[], newRoomtypes: RoomType[]): RoomType[] {\n    const newRoomtypesMap = new Map(newRoomtypes.map(rt => [rt.id, rt]));\n    return roomtypes.reduce((updatedRoomtypes, rt) => {\n      const newRoomtype = newRoomtypesMap.get(rt.id);\n      if (!newRoomtype) {\n        return updatedRoomtypes;\n      }\n      const updatedRoomtype = {\n        ...rt,\n        inventory: newRoomtype.inventory,\n        rateplans: rt.rateplans.reduce((updatedRatePlans, rp) => {\n          const newRatePlan = newRoomtype.rateplans.find(newRP => newRP.id === rp.id);\n          if (!newRatePlan || !newRatePlan.is_active || !newRatePlan.is_booking_engine_enabled) {\n            return updatedRatePlans;\n          }\n          console.log(rp.variations);\n          updatedRatePlans.push({\n            ...newRatePlan,\n            variations: rp.variations,\n            selected_variation: newRatePlan.variations ? newRatePlan.variations[0] : null,\n          });\n          return updatedRatePlans;\n        }, []),\n      };\n      updatedRoomtypes.push(updatedRoomtype);\n      return updatedRoomtypes;\n    }, []);\n  }\n\n  // private sortRoomTypes(roomTypes: RoomType[], userCriteria: { adult_nbr: number; child_nbr: number }): RoomType[] {\n  //   return roomTypes.sort((a, b) => {\n  //     // Move room types with zero inventory to the end\n  //     if (a.inventory === 0 && b.inventory !== 0) return 1;\n  //     if (a.inventory !== 0 && b.inventory === 0) return -1;\n\n  //     // Check for exact matching variations\n  //     const matchA = a.rateplans.some(plan => plan.variations.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr));\n  //     const matchB = b.rateplans.some(plan => plan.variations.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr));\n\n  //     if (matchA && !matchB) return -1;\n  //     if (!matchA && matchB) return 1;\n\n  //     // If no matches, sort by the highest variation in any attribute, let's use `amount` as an example\n  //     const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations.map(variation => variation.amount)));\n  //     const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations.map(variation => variation.amount)));\n\n  //     if (maxVariationA > maxVariationB) return -1;\n  //     if (maxVariationA < maxVariationB) return 1;\n\n  //     return 0; // If none of the above conditions apply, maintain original order\n  //   });\n  // }\n  private sortRoomTypes(roomTypes: RoomType[], userCriteria: { adult_nbr: number; child_nbr: number }): RoomType[] {\n    return roomTypes.sort((a, b) => {\n      // Move room types with zero inventory to the end\n      if (a.inventory === 0 && b.inventory !== 0) return 1;\n      if (a.inventory !== 0 && b.inventory === 0) return -1;\n\n      // Check for exact matching variations\n      const matchA = a.rateplans.some(plan => plan.variations.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr));\n      const matchB = b.rateplans.some(plan => plan.variations.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr));\n\n      if (matchA && !matchB) return -1;\n      if (!matchA && matchB) return 1;\n\n      // Sort by the highest variation in any attribute, for example `amount`\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations.map(variation => variation.adult_nbr + variation.child_nbr)));\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations.map(variation => variation.adult_nbr + variation.child_nbr)));\n\n      if (maxVariationA > maxVariationB) return -1;\n      if (maxVariationA < maxVariationB) return 1;\n\n      // If variations are equal, sort alphabetically by name\n      return a.name.localeCompare(b.name);\n    });\n  }\n\n  private updateRoomTypeRatePlans(roomtypes: RoomType[], newRoomtypes: RoomType[], props: any) {\n    const selectedRoomTypeIdx = roomtypes.findIndex(rt => rt.id === props.rt_id);\n    if (selectedRoomTypeIdx === -1) {\n      throw new Error('Invalid RoomType');\n    }\n    const selectednewRoomTypeIdx = newRoomtypes.findIndex(rt => rt.id === props.rt_id);\n    if (selectedRoomTypeIdx === -1) {\n      throw new Error('Invalid RoomType');\n    }\n    if (selectednewRoomTypeIdx === -1) {\n      throw new Error('Invalid New RoomType');\n    }\n    const newRatePlan = newRoomtypes[selectednewRoomTypeIdx].rateplans?.find(rp => rp.id === props.rp_id);\n    if (!newRatePlan) {\n      throw new Error('Invalid New Rateplan');\n    }\n    const newVariation = newRatePlan.variations.find(v => v.adult_child_offering === props.adultChildConstraint);\n    console.log(newRatePlan.variations, props.adultChildConstraint);\n    if (!newVariation) {\n      throw new Error('Missing variation');\n    }\n    roomtypes[selectedRoomTypeIdx] = {\n      ...roomtypes[selectedRoomTypeIdx],\n      rateplans: roomtypes[selectedRoomTypeIdx].rateplans.map(rp => {\n        return {\n          ...rp,\n          variations: rp.variations.map(v => {\n            if (v.adult_child_offering === props.adultChildConstraint && rp.id === props.rp_id) {\n              return newVariation;\n            }\n            return v;\n          }),\n        };\n      }),\n    };\n    return roomtypes;\n  }\n}\n"]}