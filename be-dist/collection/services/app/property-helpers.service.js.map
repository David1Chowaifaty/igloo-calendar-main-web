{"version":3,"file":"property-helpers.service.js","sourceRoot":"","sources":["../../../src/services/app/property-helpers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DataStructure } from '@/models/common';\r\nimport { TPickupFormData } from '@/models/pickup';\r\nimport { RoomType, Variation } from '@/models/property';\r\nimport booking_store from '@/stores/booking';\r\nimport axios from 'axios';\r\nimport { addDays, format } from 'date-fns';\r\n\r\nexport class PropertyHelpers {\r\n  public convertPickup(pickup: TPickupFormData) {\r\n    let res: any = {};\r\n    const [hour, minute] = pickup.arrival_time.split(':');\r\n    res = {\r\n      booking_nbr: null,\r\n      is_remove: false,\r\n      currency: pickup.currency,\r\n      date: pickup.arrival_date.format('YYYY-MM-DD'),\r\n      details: pickup.flight_details || null,\r\n      hour: Number(hour),\r\n      minute: Number(minute),\r\n      nbr_of_units: pickup.number_of_vehicles,\r\n      selected_option: pickup.selected_option,\r\n      total: Number(pickup.due_upon_booking),\r\n    };\r\n    return res;\r\n  }\r\n\r\n  public updateBookingStore(data: any) {\r\n    try {\r\n      const newRoomtypes = data.My_Result;\r\n      const { adult_nbr, child_nbr } = data.My_Params_Check_Availability;\r\n      const sortedRoomTypes = this.sortRoomTypes(newRoomtypes, { adult_nbr, child_nbr });\r\n      booking_store.roomTypes = [...sortedRoomTypes.map(rt => ({ ...rt, rateplans: rt.rateplans?.map(rp => ({ ...rp, variations: this.sortVariations(rp?.variations ?? []) })) }))];\r\n      booking_store.enableBooking = true;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public collectRoomTypeIds(props: any): number[] {\r\n    return props.rt_id ? [props.rt_id] : [];\r\n  }\r\n\r\n  public collectRatePlanIds(props: any): number[] {\r\n    return props.rp_id ? [props.rp_id] : [];\r\n  }\r\n  public generateDays(from_date: Date, to_date: Date, amount: number) {\r\n    const endDate = to_date;\r\n    let currentDate = from_date;\r\n    const days: {\r\n      date: string;\r\n      amount: number;\r\n      cost: null;\r\n    }[] = [];\r\n\r\n    while (currentDate < endDate) {\r\n      days.push({\r\n        date: format(currentDate, 'yyyy-MM-dd'),\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      currentDate = addDays(currentDate, 1);\r\n    }\r\n    return days;\r\n  }\r\n\r\n  public extractFirstNameAndLastName(index: number, guestName: string[]) {\r\n    const names = guestName[index].split(' ');\r\n    return { first_name: names[0] || null, last_name: names[1] || null };\r\n  }\r\n  public async fetchAvailabilityData(props: any, roomtypeIds: number[], rateplanIds: number[]): Promise<any> {\r\n    const response = await axios.post(`/Check_Availability`, {\r\n      ...props,\r\n      from_date: props.from_date.locale('en').format('YYYY-MM-DD'),\r\n      to_date: props.to_date.locale('en').format('YYYY-MM-DD'),\r\n      room_type_ids: roomtypeIds,\r\n      rate_plan_ids: rateplanIds,\r\n      skip_getting_assignable_units: true,\r\n      is_specific_variation: true,\r\n      is_backend: false,\r\n    });\r\n    const result = response.data as DataStructure;\r\n    if (result.ExceptionMsg !== '') {\r\n      throw new Error(result.ExceptionMsg);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private sortRoomTypes(roomTypes: RoomType[], userCriteria: { adult_nbr: number; child_nbr: number }): RoomType[] {\r\n    return roomTypes.sort((a, b) => {\r\n      // Priority to available rooms\r\n      if (a.is_available_to_book && !b.is_available_to_book) return -1;\r\n      if (!a.is_available_to_book && b.is_available_to_book) return 1;\r\n\r\n      // Check for exact matching variations based on user criteria\r\n      const matchA = a.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      const matchB = b.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      if (matchA && !matchB) return -1;\r\n      if (!matchA && matchB) return 1;\r\n\r\n      // Sort by the highest variation amount\r\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n\r\n      if (maxVariationA < maxVariationB) return -1;\r\n      if (maxVariationA > maxVariationB) return 1;\r\n\r\n      //Sort by roomtype name\r\n      const rtName1 = a.name.toLowerCase();\r\n      const rtName2 = b.name.toLowerCase();\r\n      if (rtName1 < rtName2) {\r\n        return -1;\r\n      }\r\n      if (rtName1 > rtName2) {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n  // private sortRoomTypes(roomTypes: RoomType[], userCriteria: { adult_nbr: number; child_nbr: number }): RoomType[] {\r\n  //   return roomTypes.sort((a, b) => {\r\n  //     // Priority to available rooms\r\n  //     if (a.is_available_to_book && !b.is_available_to_book) return -1;\r\n  //     if (!a.is_available_to_book && b.is_available_to_book) return 1;\r\n\r\n  //     // Check for variations where is_calculated is true and amount is 0 or null\r\n  //     const zeroCalculatedA = a.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n  //     const zeroCalculatedB = b.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n\r\n  //     // Prioritize these types to be before inventory 0 but after all available ones\r\n  //     if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n  //     if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n  //     // Check for exact matching variations based on user criteria\r\n  //     const matchA = a.rateplans?.some(plan =>\r\n  //       plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n  //     );\r\n  //     const matchB = b.rateplans?.some(plan =>\r\n  //       plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n  //     );\r\n\r\n  //     if (matchA && !matchB) return -1;\r\n  //     if (!matchA && matchB) return 1;\r\n\r\n  //     // Sort by the highest variation amount\r\n  //     const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n  //     const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n\r\n  //     if (maxVariationA < maxVariationB) return -1;\r\n  //     if (maxVariationA > maxVariationB) return 1;\r\n\r\n  //     return 0;\r\n  //   });\r\n  // }\r\n\r\n  private sortVariations(variations: Variation[]): Variation[] {\r\n    return variations.sort((a, b) => {\r\n      // Sort by adult_nbr in descending order first\r\n      if (b.adult_nbr !== a.adult_nbr) {\r\n        return b.adult_nbr - a.adult_nbr;\r\n      }\r\n      // If adult_nbr is the same, sort by child_nbr in descending order\r\n      return b.child_nbr - a.child_nbr;\r\n    });\r\n  }\r\n}\r\n"]}