{"version":3,"file":"variation.service.js","sourceRoot":"","sources":["../../../src/services/app/variation.service.ts"],"names":[],"mappings":"AACA,OAAO,cAAc,MAAM,6BAA6B,CAAC;AAEzD,MAAM,CAAC,OAAO,OAAO,gBAAgB;IACnC;;;;;;;OAOG;IACI,6BAA6B,CAAC,MAA8E;QACjH,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;OAOG;IACI,wBAAwB,CAAC,MAA8E;;QAC5G,OAAO,CAAA,MAAA,IAAI,CAAC,0BAA0B,CAAC,MAAM,CAAC,0CAAE,iBAAiB,KAAI,CAAC,CAAC;IACzE,CAAC;IAED;;;;;;;OAOG;IACI,0BAA0B,CAAC,EAAE,UAAU,EAAE,aAAa,EAAE,OAAO,EAA0E;QAC9I,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QACD,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,aAAa,CAAC;QAC/C,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,SAAS,IAAI,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC;IAC3I,CAAC;IAED;;;;;;OAMG;IACK,eAAe,CAAC,EAAE,SAAS,EAAE,SAAS,EAAa,EAAE,UAAkB;;QAC7E,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3C,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACtI,MAAM,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;QACtI,MAAM,WAAW,GAAG,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC,MAAA,CAAC,MAAA,cAAc,CAAC,OAAO,CAAC,aAAa,CAAC,mCAAI,SAAS,CAAC,0CAAE,WAAW,EAAE,CAAC,CAAC,CAAC,MAAA,CAAC,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,CAAC,YAAY,CAAC,mCAAI,QAAQ,CAAC,0CAAE,WAAW,EAAE,CAAC;QAChL,MAAM,KAAK,GAAG,CAAC,GAAG,WAAW,IAAI,UAAU,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,GAAG,YAAY,IAAI,WAAW,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACpJ,OAAO,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC5D,CAAC;CACF","sourcesContent":["import { Variation } from '@/models/property';\r\nimport localizedWords from '@/stores/localization.store';\r\n\r\nexport default class VariationService {\r\n  /**\r\n   * Formats a variation based on the number of infants and returns a formatted string.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to adjust the variation for.\r\n   * @returns {string} A formatted string describing the variation adjusted for infants.\r\n   */\r\n  public formatVariationBasedOnInfants(params: { baseVariation: Variation; variations: Variation[]; infants: number }): string {\r\n    if (!params.baseVariation) {\r\n      return;\r\n    }\r\n    const variation = this.getVariationBasedOnInfants(params);\r\n    return this.formatVariation(variation, params.infants);\r\n  }\r\n\r\n  /**\r\n   * Calculates the discounted amount for a variation adjusted for the number of infants.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to consider for adjustments.\r\n   * @returns {number} The discounted amount for the selected variation, or 0 if no discounted amount is available.\r\n   */\r\n  public calculateVariationAmount(params: { baseVariation: Variation; variations: Variation[]; infants: number }): number {\r\n    return this.getVariationBasedOnInfants(params)?.discounted_amount || 0;\r\n  }\r\n\r\n  /**\r\n   * Finds the appropriate variation from a list of variations based on the number of infants.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to adjust for.\r\n   * @returns {Variation} The matching variation or the base variation if no match is found.\r\n   */\r\n  public getVariationBasedOnInfants({ variations, baseVariation, infants }: { baseVariation: Variation; variations: Variation[]; infants: number }): Variation {\r\n    if (!baseVariation) {\r\n      return;\r\n    }\r\n    const { adult_nbr, child_nbr } = baseVariation;\r\n    return variations.find(v => v.adult_nbr === adult_nbr && v.child_nbr === Math.max(0, child_nbr - Math.max(0, infants))) || baseVariation;\r\n  }\r\n\r\n  /**\r\n   * Formats a variation object into a human-readable string, adjusted for the number of infants.\r\n   * @param {Variation} variation - The variation object to format.\r\n   * @param {number} infant_nbr - The number of infants to adjust for.\r\n   * @returns {string} A formatted string representing the variation.\r\n   * @private\r\n   */\r\n  private formatVariation({ child_nbr, adult_nbr }: Variation, infant_nbr: number): string {\r\n    const adultNumber = Number(adult_nbr) || 0;\r\n    const infantNumber = Math.max(Number(infant_nbr) || 0, 0);\r\n    const adultLabel = adultNumber > 1 ? localizedWords.entries.Lcz_Adults.toLowerCase() : localizedWords.entries.Lcz_Adult.toLowerCase();\r\n    const childLabel = child_nbr > 1 ? localizedWords.entries.Lcz_Children.toLowerCase() : localizedWords.entries.Lcz_Child.toLowerCase();\r\n    const infantLabel = infantNumber > 1 ? (localizedWords.entries['Lcz_Infants'] ?? 'infants')?.toLowerCase() : (localizedWords?.entries['Lcz_Infant'] ?? 'infant')?.toLowerCase();\r\n    const parts = [`${adultNumber} ${adultLabel}`, child_nbr ? `${child_nbr} ${childLabel}` : '', infantNumber ? `${infantNumber} ${infantLabel}` : ''];\r\n    return parts.filter(Boolean).join('&nbsp&nbsp&nbsp&nbsp');\r\n  }\r\n}\r\n"]}