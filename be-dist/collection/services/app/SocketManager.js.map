{"version":3,"file":"SocketManager.js","sourceRoot":"","sources":["../../../src/services/app/SocketManager.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAU,MAAM,kBAAkB,CAAC;AAC9C,MAAM,aAAa;IAKjB;QAFO,gBAAW,GAAY,KAAK,CAAC;QAGlC,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,gBAAgB;QACtB,+BAA+B;QAC/B,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACtB,CAAC;QAED,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,kCAAkC,EAAE;YACnD,YAAY,EAAE,IAAI;YAClB,oBAAoB,EAAE,CAAC;YACvB,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;YAC7B,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YAC9C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE;YACtC,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE;YACpC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;YACrC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,WAAW;QACvB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YAC5B,aAAa,CAAC,QAAQ,GAAG,IAAI,aAAa,EAAE,CAAC;QAC/C,CAAC;QACD,OAAO,aAAa,CAAC,QAAQ,CAAC;IAChC,CAAC;IAEM,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC;IACH,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;CACF;AAED,eAAe,aAAa,CAAC","sourcesContent":["import { io, Socket } from 'socket.io-client';\r\nclass SocketManager {\r\n  private static instance: SocketManager;\r\n  public socket: Socket;\r\n  public isConnected: boolean = false;\r\n\r\n  private constructor() {\r\n    this.initializeSocket();\r\n  }\r\n\r\n  private initializeSocket() {\r\n    // Close existing socket if any\r\n    if (this.socket) {\r\n      this.socket.close();\r\n    }\r\n\r\n    this.socket = io('https://realtime.igloorooms.com/', {\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 2000,\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to the socket server');\r\n      this.isConnected = true;\r\n    });\r\n\r\n    this.socket.on('connect_error', error => {\r\n      console.error('Connection error:', error);\r\n    });\r\n\r\n    this.socket.on('disconnect', reason => {\r\n      console.log('Disconnected:', reason);\r\n      this.isConnected = false;\r\n    });\r\n  }\r\n\r\n  public static getInstance(): SocketManager {\r\n    if (!SocketManager.instance) {\r\n      SocketManager.instance = new SocketManager();\r\n    }\r\n    return SocketManager.instance;\r\n  }\r\n\r\n  public reconnect() {\r\n    if (!this.isConnected) {\r\n      console.log('Attempting to reconnect...');\r\n      this.socket.connect();\r\n    }\r\n  }\r\n\r\n  public close() {\r\n    this.socket.close();\r\n  }\r\n}\r\n\r\nexport default SocketManager;\r\n"]}