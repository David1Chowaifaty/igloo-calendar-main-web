{"version":3,"file":"availability.service.js","sourceRoot":"","sources":["../../../src/services/app/availability.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { RoomType } from '@/models/property';\r\nimport { Queue } from '@/models/queue';\r\nimport booking_store from '@/stores/booking';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { z } from 'zod';\r\n// import { VariationSorter } from './VariationSorter';\r\n\r\ninterface IPAYLOAD {\r\n  ROOM_CATEGORY_ID: number;\r\n  ROOM_TYPE_ID: number;\r\n  ADULTS_NBR: number;\r\n  CHILD_NBR: number;\r\n  ADULT_CHILD_OFFERING: string;\r\n  TOTAL_BEFORE_DISCOUNT: string;\r\n  ALLOT_RATE_V: number;\r\n  DISCOUNTED_ALLOTMENT_RATE: string;\r\n  DISCOUNT: number;\r\n  NIGHTS_NBR: number;\r\n  AMOUNT_PER_NIGHT: string;\r\n  AMOUNT_PER_NIGHT_VAL: number;\r\n  CURRENCY_SYMBOL: string;\r\n  IS_LMD: boolean;\r\n}\r\n\r\nclass SocketManager {\r\n  private static instance: SocketManager;\r\n  public socket: Socket;\r\n  public isConnected: boolean = false;\r\n\r\n  private constructor() {\r\n    this.initializeSocket();\r\n  }\r\n\r\n  private initializeSocket() {\r\n    this.socket = io('https://realtime.igloorooms.com/', {\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 2000,\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to the socket server');\r\n      this.isConnected = true;\r\n    });\r\n\r\n    this.socket.on('connect_error', error => {\r\n      console.error('Connection error:', error);\r\n    });\r\n\r\n    this.socket.on('disconnect', reason => {\r\n      console.log('Disconnected:', reason);\r\n      this.isConnected = false;\r\n      // this.reconnect();\r\n    });\r\n  }\r\n\r\n  public static getInstance(): SocketManager {\r\n    if (!SocketManager.instance) {\r\n      SocketManager.instance = new SocketManager();\r\n    }\r\n    return SocketManager.instance;\r\n  }\r\n\r\n  public reconnect() {\r\n    console.log('Attempting to reconnect...');\r\n    this.initializeSocket();\r\n  }\r\n\r\n  public close() {\r\n    this.socket.close();\r\n  }\r\n}\r\n\r\nexport default SocketManager;\r\n\r\nexport class AvailabiltyService {\r\n  private socketManager: SocketManager;\r\n  private queue = new Queue<string>();\r\n  private intervalId: NodeJS.Timeout | null = null;\r\n  private readonly PROCESSING_INTERVAL = 400;\r\n  private subscribers: ((b: boolean) => void)[] = [];\r\n  private roomTypes: RoomType[] = [];\r\n  // private variationSorter = new VariationSorter();\r\n  constructor() {\r\n    this.socketManager = SocketManager.getInstance();\r\n  }\r\n\r\n  public subscribe(callback: (b: boolean) => void) {\r\n    this.subscribers.push(callback);\r\n  }\r\n\r\n  public unsubscribe(callback: (b: boolean) => void) {\r\n    this.subscribers = this.subscribers.filter(sub => sub !== callback);\r\n  }\r\n  public disconnectSocket() {\r\n    this.socketManager.socket.on('disconnect', reason => {\r\n      console.log('Disconnected:', reason);\r\n      if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n      }\r\n    });\r\n    this.socketManager.socket.close();\r\n  }\r\n  public initSocket(id?: string, view: boolean = false): void {\r\n    if (!this.socketManager.isConnected) {\r\n      this.socketManager.reconnect();\r\n    }\r\n    if (!view) {\r\n      this.resetVariations();\r\n    }\r\n\r\n    this.socketManager.socket.on('MSG', (msg: string) => {\r\n      try {\r\n        const message_obj = JSON.parse(msg);\r\n        if (message_obj && message_obj.KEY && message_obj.KEY.toString() === id) {\r\n          if (view) {\r\n            return console.log(JSON.parse(message_obj.PAYLOAD));\r\n          }\r\n          // console.log(currentTime - this.duration);\r\n\r\n          this.notifySubscribers();\r\n          this.queue.enqueue(message_obj.PAYLOAD);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing message:', error);\r\n      }\r\n    });\r\n    this.startProcessingQueue();\r\n  }\r\n\r\n  private startProcessingQueue(): void {\r\n    this.intervalId = setInterval(() => this.processQueue(), this.PROCESSING_INTERVAL);\r\n  }\r\n\r\n  private async processQueue(): Promise<void> {\r\n    const payloads: IPAYLOAD[] = [];\r\n\r\n    while (!this.queue.isEmpty()) {\r\n      const payload = this.queue.dequeue();\r\n      if (payload) {\r\n        payloads.push(JSON.parse(payload));\r\n      }\r\n    }\r\n\r\n    if (payloads.length > 0) {\r\n      await this.processPayloads(payloads);\r\n    }\r\n  }\r\n  private notifySubscribers() {\r\n    this.subscribers.forEach(callback => callback(false));\r\n  }\r\n  private resetVariations() {\r\n    booking_store.resetBooking = true;\r\n    this.roomTypes = [...booking_store.roomTypes];\r\n    this.roomTypes = this.roomTypes.map(rt => {\r\n      return {\r\n        ...rt,\r\n        rateplans: rt.rateplans.map(rp => ({\r\n          ...rp,\r\n          variations: [],\r\n        })),\r\n      };\r\n    });\r\n  }\r\n  private validateNumberString(input: string): number {\r\n    const schema = z.string().refine(\r\n      val => {\r\n        const numberString = val.replace(/,/g, '');\r\n        return !isNaN(Number(numberString));\r\n      },\r\n      {\r\n        message: 'Invalid number format',\r\n      },\r\n    );\r\n    const result = schema.safeParse(input);\r\n    if (!result.success) {\r\n      throw new Error(`${input} is an invalid number format`);\r\n    }\r\n    return Number(result.data.replace(/,/g, ''));\r\n  }\r\n  // private sortVariations(variations: Variation[]) {\r\n  //   return variations.sort((a, b) => {\r\n  //     const parsedA = { adults: a.adult_nbr, children: a.child_nbr };\r\n  //     const parsedB = { adults: b.adult_nbr, children: b.child_nbr };\r\n\r\n  //     if (parsedA.adults !== parsedB.adults) {\r\n  //       return parsedA.adults - parsedB.adults;\r\n  //     }\r\n\r\n  //     return parsedA.children - parsedB.children;\r\n  //   });\r\n  // }\r\n\r\n  private async processPayloads(payloads: IPAYLOAD[]): Promise<void> {\r\n    try {\r\n      console.log('payload', payloads);\r\n      if (!booking_store.enableBooking) {\r\n        booking_store.enableBooking = true;\r\n      }\r\n      payloads.forEach(payload => {\r\n        const selectedRoomTypeIndex = this.roomTypes.findIndex(rt => rt.id === payload.ROOM_CATEGORY_ID);\r\n        if (selectedRoomTypeIndex === -1) {\r\n          console.error('Invalid room type');\r\n          return;\r\n        }\r\n        let roomType = this.roomTypes[selectedRoomTypeIndex];\r\n        const selectedRatePlanIndex = roomType.rateplans.findIndex(rp => rp.id === payload.ROOM_TYPE_ID);\r\n        if (selectedRatePlanIndex === -1) {\r\n          // console.error('Invalid rate plan');\r\n          return;\r\n        }\r\n        let rateplan = roomType.rateplans[selectedRatePlanIndex];\r\n        let oldVariation = rateplan.variations || [];\r\n\r\n        const variation = {\r\n          adult_child_offering: payload.ADULT_CHILD_OFFERING,\r\n          adult_nbr: Number(payload.ADULTS_NBR ?? 0),\r\n          amount: (() => {\r\n            const amount = this.validateNumberString((payload.ALLOT_RATE_V ?? 0)?.toString()) ?? 0;\r\n            return amount === 0 ? null : amount;\r\n          })(),\r\n          child_nbr: Number(payload.CHILD_NBR ?? 0),\r\n          amount_per_night: this.validateNumberString((payload.AMOUNT_PER_NIGHT_VAL ?? 0)?.toString() ?? '').toString() ?? '',\r\n          discount_pct: this.validateNumberString((payload.DISCOUNT ?? 0)?.toString()) ?? 0,\r\n          is_lmd: payload.IS_LMD,\r\n          nights_nbr: this.validateNumberString((payload.NIGHTS_NBR ?? 0)?.toString()) ?? 0,\r\n          total_before_discount: this.validateNumberString((payload.TOTAL_BEFORE_DISCOUNT ?? 0)?.toString()) ?? 0,\r\n        };\r\n        const variationIndex = oldVariation.findIndex(v => v.adult_child_offering === payload.ADULT_CHILD_OFFERING);\r\n        if (variationIndex === -1) {\r\n          oldVariation.push(variation);\r\n        } else {\r\n          oldVariation[variationIndex] = variation;\r\n        }\r\n        // oldVariation = this.variationSorter.sortVariations(oldVariation);\r\n\r\n        rateplan = { ...rateplan, variations: oldVariation };\r\n        roomType.rateplans[selectedRatePlanIndex] = rateplan;\r\n\r\n        this.roomTypes[selectedRoomTypeIndex] = { ...roomType, inventory: 1 };\r\n      });\r\n      booking_store.resetBooking = true;\r\n      booking_store.roomTypes = [...this.roomTypes];\r\n    } catch (error) {\r\n      console.error('Error processing payloads:', error);\r\n    }\r\n  }\r\n}\r\n"]}