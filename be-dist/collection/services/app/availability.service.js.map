{"version":3,"file":"availability.service.js","sourceRoot":"","sources":["../../../src/services/app/availability.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Queue } from '@/models/queue';\r\nimport booking_store from '@/stores/booking';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\ninterface IPAYLOAD {\r\n  ROOM_CATEGORY_ID: number;\r\n  ROOM_TYPE_ID: number;\r\n  ADULTS_NBR: number;\r\n  CHILD_NBR: number;\r\n  ADULT_CHILD_OFFERING: string;\r\n  TOTAL_BEFORE_DISCOUNT: string;\r\n  ALLOT_RATE_V: number;\r\n  DISCOUNTED_ALLOTMENT_RATE: string;\r\n  DISCOUNT: number;\r\n  NIGHTS_NBR: number;\r\n  AMOUNT_PER_NIGHT: string;\r\n  AMOUNT_PER_NIGHT_VAL: number;\r\n  CURRENCY_SYMBOL: string;\r\n  IS_LMD: boolean;\r\n}\r\n\r\nexport class AvailabiltyService {\r\n  private socket: Socket;\r\n  private queue = new Queue<string>();\r\n  private intervalId: NodeJS.Timeout | null = null;\r\n  private readonly PROCESSING_INTERVAL = 400;\r\n  private subscribers: ((b: boolean) => void)[] = [];\r\n\r\n  constructor() {\r\n    this.socket = io('https://realtime.igloorooms.com/', {\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 2000,\r\n    });\r\n    this.socket.on('connect', () => {\r\n      console.log('Connected to the socket server');\r\n    });\r\n    this.socket.on('connect_error', error => {\r\n      console.error('Connection error:', error);\r\n    });\r\n  }\r\n\r\n  public subscribe(callback: (b: boolean) => void) {\r\n    this.subscribers.push(callback);\r\n  }\r\n\r\n  public unsubscribe(callback: (b: boolean) => void) {\r\n    this.subscribers = this.subscribers.filter(sub => sub !== callback);\r\n  }\r\n  public disconnectSocket() {\r\n    this.socket.on('disconnect', reason => {\r\n      console.log('Disconnected:', reason);\r\n      if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n      }\r\n    });\r\n    this.socket.close();\r\n  }\r\n  public initSocket(id?: string): void {\r\n    this.socket.on('MSG', (msg: string) => {\r\n      try {\r\n        const message_obj = JSON.parse(msg);\r\n        if (message_obj && message_obj.KEY && message_obj.KEY.toString() === id) {\r\n          this.notifySubscribers();\r\n          this.queue.enqueue(message_obj.PAYLOAD);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing message:', error);\r\n      }\r\n    });\r\n    this.startProcessingQueue();\r\n  }\r\n\r\n  private startProcessingQueue(): void {\r\n    this.intervalId = setInterval(() => this.processQueue(), this.PROCESSING_INTERVAL);\r\n  }\r\n\r\n  private async processQueue(): Promise<void> {\r\n    const payloads: IPAYLOAD[] = [];\r\n\r\n    while (!this.queue.isEmpty()) {\r\n      const payload = this.queue.dequeue();\r\n      if (payload) {\r\n        payloads.push(JSON.parse(payload));\r\n      }\r\n    }\r\n\r\n    if (payloads.length > 0) {\r\n      await this.processPayloads(payloads);\r\n    }\r\n  }\r\n  private notifySubscribers() {\r\n    this.subscribers.forEach(callback => callback(false));\r\n  }\r\n  private async processPayloads(payloads: IPAYLOAD[]): Promise<void> {\r\n    try {\r\n      if (!booking_store.enableBooking) {\r\n        booking_store.enableBooking = true;\r\n      }\r\n      const roomtypes = [...booking_store.roomTypes];\r\n\r\n      payloads.forEach(payload => {\r\n        const selectedRoomTypeIndex = roomtypes.findIndex(rt => rt.id === payload.ROOM_CATEGORY_ID);\r\n        if (selectedRoomTypeIndex === -1) {\r\n          console.error('Invalid room type');\r\n          return;\r\n        }\r\n\r\n        let roomType = roomtypes[selectedRoomTypeIndex];\r\n\r\n        const selectedRatePlanIndex = roomType.rateplans.findIndex(rp => rp.id === payload.ROOM_TYPE_ID);\r\n        if (selectedRatePlanIndex === -1) {\r\n          console.error('Invalid rate plan');\r\n          return;\r\n        }\r\n\r\n        let rateplan = roomType.rateplans[selectedRatePlanIndex];\r\n        const oldVariation = rateplan.variations || [];\r\n        oldVariation.push({\r\n          adult_child_offering: payload.ADULT_CHILD_OFFERING,\r\n          adult_nbr: payload.ADULTS_NBR,\r\n          amount: payload.ALLOT_RATE_V,\r\n          child_nbr: payload.CHILD_NBR,\r\n          amount_per_night: payload.AMOUNT_PER_NIGHT_VAL as any,\r\n          discount_pct: payload.DISCOUNT,\r\n          is_lmd: payload.IS_LMD,\r\n          nights_nbr: payload.NIGHTS_NBR,\r\n          total_before_discount: payload.TOTAL_BEFORE_DISCOUNT as any,\r\n        });\r\n\r\n        rateplan = { ...rateplan, variations: oldVariation };\r\n        roomType.rateplans[selectedRatePlanIndex] = rateplan;\r\n\r\n        roomtypes[selectedRoomTypeIndex] = { ...roomType, inventory: 1 };\r\n      });\r\n\r\n      booking_store.roomTypes = [...roomtypes];\r\n    } catch (error) {\r\n      console.error('Error processing payloads:', error);\r\n    }\r\n  }\r\n}\r\n"]}