{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../src/utils/modal.ts"],"names":[],"mappings":"AAIA,IAAI,YAAY,GAAkB,EAAE,CAAC;AAErC,MAAM,CAAC,OAAO,OAAO,KAAK;IAIxB,YAAY,OAAoB,EAAE,OAAsB;QACtD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,QAAQ;QACN,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC3D,CAAC;IAED,UAAU;QACR,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC;QACpE,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC;IAChE,CAAC;IAED,aAAa,CAAC,KAAY;;QACxB,MAAM,MAAM,GAAG,KAAK,CAAC,MAAqB,CAAC;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACnD,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,IAAI,OAAO,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,UAAU,CAAA,KAAK,UAAU,EAAE,CAAC;YAClH,MAAA,IAAI,CAAC,OAAO,0CAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;CACF","sourcesContent":["interface ModalOptions {\r\n  onFocusOut?: (event: Event) => void;\r\n}\r\n\r\nlet activeModals: HTMLElement[] = [];\r\n\r\nexport default class Modal {\r\n  element: HTMLElement;\r\n  options?: ModalOptions;\r\n\r\n  constructor(element: HTMLElement, options?: ModalOptions) {\r\n    this.element = element;\r\n    this.options = options;\r\n    this.handleFocusIn = this.handleFocusIn.bind(this);\r\n  }\r\n\r\n  activate() {\r\n    activeModals.push(this.element);\r\n    document.addEventListener('focusin', this.handleFocusIn);\r\n  }\r\n\r\n  deactivate() {\r\n    activeModals = activeModals.filter(modal => modal !== this.element);\r\n    document.removeEventListener('focusin', this.handleFocusIn);\r\n  }\r\n\r\n  isActive() {\r\n    return activeModals[activeModals.length - 1] === this.element;\r\n  }\r\n\r\n  handleFocusIn(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    const tagName = this.element.tagName.toLowerCase();\r\n    if (this.isActive() && target.closest(tagName) !== this.element && typeof this.options?.onFocusOut === 'function') {\r\n      this.options?.onFocusOut(event);\r\n    }\r\n  }\r\n}\r\n"]}