{"version":3,"file":"scroll.js","sourceRoot":"","sources":["../../src/utils/scroll.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAErC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AAExB,EAAE;AACF,qHAAqH;AACrH,+BAA+B;AAC/B,EAAE;AACF,MAAM,UAAU,iBAAiB,CAAC,SAAsB;IACtD,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACrB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;AACjD,CAAC;AAED,EAAE;AACF,oHAAoH;AACpH,EAAE;AACF,MAAM,UAAU,mBAAmB,CAAC,SAAsB;IACxD,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAExB,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;QACrB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IACpD,CAAC;AACH,CAAC;AAED,EAAE;AACF,yGAAyG;AACzG,EAAE;AACF,MAAM,UAAU,cAAc,CAAC,OAAoB,EAAE,SAAsB,EAAE,YAAgD,UAAU,EAAE,WAA8B,QAAQ;IAC7K,MAAM,MAAM,GAAG,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC7C,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC;IACnD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC;IACtD,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,CAAC;IAClC,MAAM,IAAI,GAAG,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IAC1D,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,CAAC;IACjC,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC;IAE1D,IAAI,SAAS,KAAK,YAAY,IAAI,SAAS,KAAK,MAAM,EAAE,CAAC;QACvD,IAAI,UAAU,GAAG,IAAI,EAAE,CAAC;YACtB,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;QACrD,CAAC;aAAM,IAAI,UAAU,GAAG,OAAO,CAAC,WAAW,GAAG,IAAI,EAAE,CAAC;YACnD,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,UAAU,GAAG,SAAS,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;QACnG,CAAC;IACH,CAAC;IAED,IAAI,SAAS,KAAK,UAAU,IAAI,SAAS,KAAK,MAAM,EAAE,CAAC;QACrD,IAAI,SAAS,GAAG,IAAI,EAAE,CAAC;YACrB,SAAS,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAAC;QACnD,CAAC;aAAM,IAAI,SAAS,GAAG,OAAO,CAAC,YAAY,GAAG,IAAI,EAAE,CAAC;YACnD,SAAS,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,SAAS,GAAG,SAAS,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;QACnG,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { getOffset } from './offset';\r\n\r\nconst locks = new Set();\r\n\r\n//\r\n// Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\r\n// without premature unlocking.\r\n//\r\nexport function lockBodyScrolling(lockingEl: HTMLElement) {\r\n  locks.add(lockingEl);\r\n  document.body.classList.add('six-scroll-lock');\r\n}\r\n\r\n//\r\n// Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.\r\n//\r\nexport function unlockBodyScrolling(lockingEl: HTMLElement) {\r\n  locks.delete(lockingEl);\r\n\r\n  if (locks.size === 0) {\r\n    document.body.classList.remove('six-scroll-lock');\r\n  }\r\n}\r\n\r\n//\r\n// Scrolls an element into view of its container. If the element is already in view, nothing will happen.\r\n//\r\nexport function scrollIntoView(element: HTMLElement, container: HTMLElement, direction: 'horizontal' | 'vertical' | 'both' = 'vertical', behavior: 'smooth' | 'auto' = 'smooth') {\r\n  const offset = getOffset(element, container);\r\n  const offsetTop = offset.top + container.scrollTop;\r\n  const offsetLeft = offset.left + container.scrollLeft;\r\n  const minX = container.scrollLeft;\r\n  const maxX = container.scrollLeft + container.offsetWidth;\r\n  const minY = container.scrollTop;\r\n  const maxY = container.scrollTop + container.offsetHeight;\r\n\r\n  if (direction === 'horizontal' || direction === 'both') {\r\n    if (offsetLeft < minX) {\r\n      container.scrollTo({ left: offsetLeft, behavior });\r\n    } else if (offsetLeft + element.clientWidth > maxX) {\r\n      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });\r\n    }\r\n  }\r\n\r\n  if (direction === 'vertical' || direction === 'both') {\r\n    if (offsetTop < minY) {\r\n      container.scrollTo({ top: offsetTop, behavior });\r\n    } else if (offsetTop + element.clientHeight > maxY) {\r\n      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });\r\n    }\r\n  }\r\n}\r\n"]}