{"version":3,"file":"ir-tooltip.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-tooltip/ir-tooltip.tsx"],"names":[],"mappings":"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","sourcesContent":["import { createPopper } from '@popperjs/core';\nimport { Component, Fragment, Host, Prop, State, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'ir-tooltip',\n  styleUrl: 'ir-tooltip.css',\n  shadow: true,\n})\nexport class IrTooltip {\n  @Element() el: HTMLElement;\n  @Prop({ reflect: true }) message: string;\n  @Prop() withHtml: boolean = true;\n  @Prop() customSlot: boolean = false;\n  @State() open: boolean;\n\n  private popperInstance: any;\n  private tooltipTimeout: NodeJS.Timeout;\n  private trigger: HTMLButtonElement;\n  private content: HTMLDivElement;\n\n  componentDidLoad() {\n    this.createPopperInstance();\n  }\n\n  createPopperInstance() {\n    if (this.trigger && this.content) {\n      this.popperInstance = createPopper(this.trigger, this.content, {\n        placement: 'bottom-start',\n        modifiers: [\n          {\n            name: 'offset',\n            options: {\n              offset: [0, 8],\n            },\n          },\n        ],\n      });\n    }\n  }\n\n  toggleOpen(shouldOpen: boolean) {\n    if (this.tooltipTimeout) {\n      clearTimeout(this.tooltipTimeout);\n    }\n\n    if (shouldOpen) {\n      this.tooltipTimeout = setTimeout(() => {\n        this.open = true;\n        if (this.popperInstance) {\n          this.popperInstance.update();\n        } else {\n          this.createPopperInstance();\n        }\n      }, 300);\n    } else {\n      this.open = false;\n      if (this.popperInstance) {\n        this.popperInstance.destroy();\n        this.popperInstance = null;\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.popperInstance) {\n      this.popperInstance.destroy();\n    }\n  }\n  render() {\n    return (\n      <Host>\n        <button ref={el => (this.trigger = el)} onMouseEnter={() => this.toggleOpen(true)} onMouseLeave={() => this.toggleOpen(false)}>\n          {!this.customSlot ? (\n            <svg data-toggle=\"tooltip\" data-placement=\"top\" xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" class=\"tooltip-icon\" viewBox=\"0 0 512 512\">\n              <path\n                fill={'currentColor'}\n                d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"\n              />\n            </svg>\n          ) : (\n            <slot name=\"tooltip-trigger\"></slot>\n          )}\n        </button>\n        <div ref={el => (this.content = el)} class=\"z-50\" role=\"tooltip\">\n          {this.open && (\n            <Fragment>\n              <div\n                class=\"tooltip-content px-3 py-2\n              text-sm rounded-lg max-w-72 \"\n              >\n                <div innerHTML={this.message}></div>\n              </div>\n            </Fragment>\n          )}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}