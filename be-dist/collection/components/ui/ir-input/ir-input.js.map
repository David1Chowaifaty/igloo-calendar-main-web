{"version":3,"file":"ir-input.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-input/ir-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\n\r\n@Component({\r\n  tag: 'ir-input',\r\n  styleUrl: 'ir-input.css',\r\n  scoped: true,\r\n})\r\nexport class IrInput {\r\n  @Prop() inputId: string = v4();\r\n  @Prop({ reflect: true }) leftIcon: boolean = false;\r\n  @Prop() inputStyles: Partial<CSSStyleDeclaration>;\r\n  @Prop() value: string;\r\n  @Prop() type:\r\n    | 'button'\r\n    | 'checkbox'\r\n    | 'color'\r\n    | 'date'\r\n    | 'datetime-local'\r\n    | 'email'\r\n    | 'file'\r\n    | 'hidden'\r\n    | 'image'\r\n    | 'month'\r\n    | 'number'\r\n    | 'password'\r\n    | 'radio'\r\n    | 'range'\r\n    | 'reset'\r\n    | 'search'\r\n    | 'submit'\r\n    | 'tel'\r\n    | 'text'\r\n    | 'time'\r\n    | 'url'\r\n    | 'week' = 'text';\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) placeholder: string;\r\n  @Prop({ reflect: true }) inputid: string;\r\n  @Prop({ reflect: true }) class: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) readonly: boolean;\r\n  @Prop({ reflect: true }) maxlength: number;\r\n  @Prop({ reflect: true }) min: string | number;\r\n  @Prop({ reflect: true }) max: string | number;\r\n  @Prop({ reflect: true }) step: string | number;\r\n  @Prop({ reflect: true }) pattern: string;\r\n  @Prop({ reflect: true }) autocomplete: string;\r\n  @Prop({ reflect: true }) autofocus: boolean;\r\n  @Prop({ reflect: true }) size: number;\r\n  @Prop({ reflect: true }) multiple: boolean;\r\n  @Prop() error: boolean = false;\r\n\r\n  @Event({ bubbles: true, composed: true }) textChanged: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) inputFocus: EventEmitter<FocusEvent>;\r\n  @Event({ bubbles: true, composed: true }) inputBlur: EventEmitter<FocusEvent>;\r\n\r\n  private inputEl: HTMLDivElement;\r\n\r\n  applyStyles(style: Partial<CSSStyleDeclaration>) {\r\n    for (const property in style) {\r\n      if (style.hasOwnProperty(property)) {\r\n        this.inputEl.style[property] = style[property];\r\n      }\r\n    }\r\n  }\r\n  componentDidLoad() {\r\n    if (this.inputStyles) {\r\n      this.applyStyles(this.inputStyles);\r\n    }\r\n  }\r\n  handleBlur(event: FocusEvent) {\r\n    this.inputEl.classList.remove('focused');\r\n    if ((event.target as HTMLInputElement).value) {\r\n      this.inputEl.classList.add('has-value');\r\n    } else {\r\n      this.inputEl.classList.remove('has-value');\r\n    }\r\n    this.inputFocus.emit(event);\r\n  }\r\n  render() {\r\n    return (\r\n      <div ref={el => (this.inputEl = el)} class={`input-container ${this.error ? 'error' : ''} ${this.disabled ? 'disabled' : ''}`} data-context={this.leftIcon ? 'icon' : ''}>\r\n        {this.leftIcon && (\r\n          <label htmlFor={this.inputId}>\r\n            <slot name=\"left-icon\"></slot>\r\n          </label>\r\n        )}\r\n        <input\r\n          type={this.type}\r\n          name={this.name}\r\n          // placeholder={this.placeholder}\r\n          id={this.inputId}\r\n          class={this.class}\r\n          required={this.required}\r\n          disabled={this.disabled}\r\n          readonly={this.readonly}\r\n          maxlength={this.maxlength}\r\n          min={this.min}\r\n          max={this.max}\r\n          step={this.step}\r\n          pattern={this.pattern}\r\n          autocomplete={this.autocomplete}\r\n          autofocus={this.autofocus}\r\n          size={this.size}\r\n          multiple={this.multiple}\r\n          value={this.value}\r\n          onChange={e => this.textChanged.emit((e.target as HTMLInputElement).value)}\r\n          onBlur={this.handleBlur.bind(this)}\r\n          onFocus={e => this.inputFocus.emit(e)}\r\n        />\r\n        <p class=\"placeholder\">{this.placeholder}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}