{"version":3,"file":"ir-textarea.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-textarea/ir-textarea.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAgB,MAAM,eAAe,CAAC;AACxE,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAO1B,MAAM,OAAO,UAAU;;uBACK,EAAE,EAAE;wBACe,KAAK;;;;;;;;;;;;;;;;;;qBAkBzB,KAAK;;;IAK9B,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAE,aAAa,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE;YACtD,8DAAO,OAAO,EAAE,IAAI,CAAC,OAAO,IAAG,IAAI,CAAC,KAAK,CAAS;YAClD,iEACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAChC,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EACrC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EACnC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,GAClE,CACR,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\n\r\n@Component({\r\n  tag: 'ir-textarea',\r\n  styleUrl: 'ir-textarea.css',\r\n  shadow: true,\r\n})\r\nexport class IrTextarea {\r\n  @Prop() inputId: string = v4();\r\n  @Prop({ reflect: true }) leftIcon: boolean = false;\r\n  @Prop() value: string;\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) placeholder: string;\r\n  @Prop({ reflect: true }) inputid: string;\r\n  @Prop({ reflect: true }) class: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) readonly: boolean;\r\n  @Prop({ reflect: true }) maxlength: number;\r\n  @Prop({ reflect: true }) min: string | number;\r\n  @Prop({ reflect: true }) max: string | number;\r\n  @Prop({ reflect: true }) step: string | number;\r\n  @Prop({ reflect: true }) pattern: string;\r\n  @Prop({ reflect: true }) autocomplete: string;\r\n  @Prop({ reflect: true }) autofocus: boolean;\r\n  @Prop({ reflect: true }) size: number;\r\n  @Prop({ reflect: true }) multiple: boolean;\r\n  @Prop() error: boolean = false;\r\n  @Prop() label: string;\r\n  @Event({ bubbles: true, composed: true }) textChanged: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) inputFocus: EventEmitter<FocusEvent>;\r\n  @Event({ bubbles: true, composed: true }) inputBlur: EventEmitter<FocusEvent>;\r\n  render() {\r\n    return (\r\n      <div class={`container ${this.value ? 'has-value' : ''}`}>\r\n        <label htmlFor={this.inputid}>{this.label}</label>\r\n        <textarea\r\n          name={this.name}\r\n          autoFocus={this.autofocus}\r\n          disabled={this.disabled}\r\n          value={this.value}\r\n          class={this.error ? 'error' : ''}\r\n          id={this.inputId}\r\n          maxLength={this.maxlength}\r\n          onFocus={e => this.inputFocus.emit(e)}\r\n          onBlur={e => this.inputBlur.emit(e)}\r\n          onInput={e => this.textChanged.emit((e.target as HTMLTextAreaElement).value)}\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}