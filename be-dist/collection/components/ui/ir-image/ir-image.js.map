{"version":3,"file":"ir-image.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-image/ir-image.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAOlC,MAAM,OAAO,OAAO;;;;;qBAIM,EAAE;sBACD,EAAE;;;sBAIA,KAAK;;IAEhC,iBAAiB;QACf,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAE5B,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,iBAAiB,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACxF,GAAG,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAElC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QACxC,CAAC;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAC,iBAAiB;YACzB,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,4DAAK,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG;YAC5I,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,4DAAK,GAAG,EAAE,yBAAyB,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG;YAC/J,4DAAK,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,OAAO,EAAC,MAAM,EAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,GAAI,CACzI,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, State, h } from '@stencil/core';\nimport { decode } from 'blurhash';\n\n@Component({\n  tag: 'ir-image',\n  styleUrl: 'ir-image.css',\n  shadow: true,\n})\nexport class IrImage {\n  @Prop() src: string;\n  @Prop() thumbnail: string;\n  @Prop() blurhash: string;\n  @Prop() width: number = 32;\n  @Prop() height: number = 32;\n  @Prop() alt: string;\n\n  @State() blurDataUrl: string;\n  @State() loaded: boolean = false;\n\n  componentWillLoad() {\n    this.decodeBlurHash();\n  }\n\n  decodeBlurHash() {\n    if (this.blurhash) {\n      const pixels = decode(this.blurhash, this.width, this.height);\n      const canvas = document.createElement('canvas');\n      canvas.width = this.width;\n      canvas.height = this.height;\n\n      const ctx = canvas.getContext('2d');\n      const imageData = new ImageData(new Uint8ClampedArray(pixels), this.width, this.height);\n      ctx.putImageData(imageData, 0, 0);\n\n      this.blurDataUrl = canvas.toDataURL();\n    }\n  }\n\n  handleImageLoad() {\n    this.loaded = true;\n  }\n\n  render() {\n    return (\n      <div class=\"image-container\">\n        {this.blurDataUrl && !this.thumbnail && <img src={this.blurDataUrl} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\n        {this.thumbnail !== undefined && <img src={`data:image/png;base64,${this.thumbnail}`} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\n        <img src={this.src} class={`original ${this.loaded ? 'visible' : ''}`} alt={this.alt} loading=\"lazy\" onLoad={() => this.handleImageLoad()} />\n      </div>\n    );\n  }\n}\n"]}