{"version":3,"file":"ir-image.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-image/ir-image.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAC1D,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAOlC,MAAM,OAAO,OAAO;;;;;qBAIM,EAAE;sBACD,EAAE;;;sBAIA,KAAK;;IAIhC,iBAAiB;QACf,IAAI,CAAC,cAAc,EAAE,CAAC;IACxB,CAAC;IAED,cAAc;QACZ,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1B,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAE5B,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,iBAAiB,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACxF,GAAG,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAElC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;QACxC,CAAC;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,CAAC,EAAE,CAAC;YACjF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAC,iBAAiB;YACzB,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,4DAAK,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG;YAC5I,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,4DAAK,GAAG,EAAE,yBAAyB,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG;YAC/J,4DACE,GAAG,EAAE,EAAE,CAAC,EAAE;oBACR,IAAI,CAAC,QAAQ,GAAG,EAAsB,CAAC;oBACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,uCAAuC;gBAClE,CAAC,EACD,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,KAAK,EAAE,YAAY,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,EACjD,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,OAAO,EAAC,MAAM,EACd,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,GACpC,CACE,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, State, h } from '@stencil/core';\r\nimport { decode } from 'blurhash';\r\n\r\n@Component({\r\n  tag: 'ir-image',\r\n  styleUrl: 'ir-image.css',\r\n  shadow: true,\r\n})\r\nexport class IrImage {\r\n  @Prop() src: string;\r\n  @Prop() thumbnail: string;\r\n  @Prop() blurhash: string;\r\n  @Prop() width: number = 32;\r\n  @Prop() height: number = 32;\r\n  @Prop() alt: string;\r\n\r\n  @State() blurDataUrl: string;\r\n  @State() loaded: boolean = false;\r\n\r\n  private imageRef: HTMLImageElement;\r\n\r\n  componentWillLoad() {\r\n    this.decodeBlurHash();\r\n  }\r\n\r\n  decodeBlurHash() {\r\n    if (this.blurhash) {\r\n      const pixels = decode(this.blurhash, this.width, this.height);\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = this.width;\r\n      canvas.height = this.height;\r\n\r\n      const ctx = canvas.getContext('2d');\r\n      const imageData = new ImageData(new Uint8ClampedArray(pixels), this.width, this.height);\r\n      ctx.putImageData(imageData, 0, 0);\r\n\r\n      this.blurDataUrl = canvas.toDataURL();\r\n    }\r\n  }\r\n\r\n  handleImageLoad() {\r\n    this.loaded = true;\r\n  }\r\n\r\n  checkImageCached() {\r\n    if (this.imageRef && this.imageRef.complete && this.imageRef.naturalHeight !== 0) {\r\n      this.loaded = true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"image-container\">\r\n        {this.blurDataUrl && !this.thumbnail && <img src={this.blurDataUrl} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\r\n        {this.thumbnail !== undefined && <img src={`data:image/png;base64,${this.thumbnail}`} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\r\n        <img\r\n          ref={el => {\r\n            this.imageRef = el as HTMLImageElement;\r\n            this.checkImageCached(); // Check if the image is already cached\r\n          }}\r\n          src={this.src}\r\n          class={`original ${this.loaded ? 'visible' : ''}`}\r\n          alt={this.alt}\r\n          loading=\"lazy\"\r\n          onLoad={() => this.handleImageLoad()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}