{"version":3,"file":"ir-image.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-image/ir-image.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAO1D,MAAM,OAAO,OAAO;IALpB;QASU,UAAK,GAAW,EAAE,CAAC;QACnB,WAAM,GAAW,EAAE,CAAC;QAInB,WAAM,GAAY,KAAK,CAAC;KAoDlC;IAhDC,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,8DAA8D;QAC9D,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;YACxB,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACnB,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,YAAY,KAAK,CAAC,EAAE,CAAC;gBAC3C,gEAAgE;gBAChE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;YACrB,CAAC;QACH,CAAC;IACH,CAAC;IAED,cAAc;QACZ,yBAAyB;IAC3B,CAAC;IAED,eAAe;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,CAAC,EAAE,CAAC;YACjF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACrB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAC,iBAAiB;YACzB,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,4DAAK,GAAG,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG;YAC5I,IAAI,CAAC,SAAS,KAAK,SAAS,IAAI,4DAAK,GAAG,EAAE,yBAAyB,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,eAAe,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAC,aAAa,GAAG;YAC/J,4DACE,GAAG,EAAE,EAAE,CAAC,EAAE;oBACR,IAAI,CAAC,QAAQ,GAAG,EAAsB,CAAC;oBACvC,uCAAuC;gBACzC,CAAC,EACD,GAAG,EAAE,IAAI,CAAC,GAAG,EACb,KAAK,EAAE,mBAAmB;gBAC1B,qDAAqD;gBACrD,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,iBAAiB;gBACjB,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,EAAE,GACpC,CACE,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, State, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-image',\r\n  styleUrl: 'ir-image.css',\r\n  shadow: true,\r\n})\r\nexport class IrImage {\r\n  @Prop() src: string;\r\n  @Prop() thumbnail: string;\r\n  @Prop() blurhash: string;\r\n  @Prop() width: number = 32;\r\n  @Prop() height: number = 32;\r\n  @Prop() alt: string;\r\n\r\n  @State() blurDataUrl: string;\r\n  @State() loaded: boolean = false;\r\n\r\n  private imageRef: HTMLImageElement;\r\n\r\n  async componentWillLoad() {\r\n    this.decodeBlurHash();\r\n\r\n    // Pre-check if the image is cached before the initial render:\r\n    if (this.src) {\r\n      const img = new Image();\r\n      img.src = this.src;\r\n      if (img.complete && img.naturalWidth !== 0) {\r\n        // If the image is cached, set loaded = true before first render\r\n        this.loaded = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  decodeBlurHash() {\r\n    // ... same as before ...\r\n  }\r\n\r\n  handleImageLoad() {\r\n    this.loaded = true;\r\n  }\r\n\r\n  checkImageCached() {\r\n    if (this.imageRef && this.imageRef.complete && this.imageRef.naturalHeight !== 0) {\r\n      this.loaded = true;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"image-container\">\r\n        {this.blurDataUrl && !this.thumbnail && <img src={this.blurDataUrl} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\r\n        {this.thumbnail !== undefined && <img src={`data:image/png;base64,${this.thumbnail}`} class={`placeholder ${this.loaded ? 'hidden' : ''}`} alt=\"placeholder\" />}\r\n        <img\r\n          ref={el => {\r\n            this.imageRef = el as HTMLImageElement;\r\n            // Removed checkImageCached() from here\r\n          }}\r\n          src={this.src}\r\n          class={`original  visible`}\r\n          // class={`original ${this.loaded ? 'visible' : ''}`}\r\n          alt={this.alt}\r\n          // loading=\"lazy\"\r\n          onLoad={() => this.handleImageLoad()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}