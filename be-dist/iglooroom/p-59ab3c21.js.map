{"version":3,"names":["PropertyHelpers","constructor","this","paymentService","PaymentService","validateModeProps","props","mode","MODE_MODIFY_RT","rp_id","rt_id","Error","convertPickup","pickup","res","hour","minute","arrival_time","split","booking_nbr","is_remove","currency","date","arrival_date","details","flight_details","Number","nbr_of_units","number_of_vehicles","selected_option","total","due_upon_booking","updateBookingStore","data","roomtypes","booking_store","roomTypes","newRoomtypes","My_Result","MODE_DEFAULT","updateInventory","sortRoomTypes","adult_nbr","params","child_nbr","updateRoomTypeRatePlans","tax_statement","message","enableBooking","error","console","collectRoomTypeIds","collectRatePlanIds","generateDays","from_date","to_date","amount","endDate","currentDate","days","push","format","cost","addDays","extractFirstNameAndLastName","index","guestName","names","first_name","last_name","fetchAvailabilityData","roomtypeIds","rateplanIds","response","axios","post","Object","assign","identifier","room_type_ids","rate_plan_ids","skip_getting_assignable_units","is_specific_variation","is_backend","result","ExceptionMsg","modifyBookingStore","nbr","validateFreeCancelationZone","GetExposedApplicablePolicies","book_date","Date","currency_id","app_store","currencies","find","c","code","toLowerCase","userPreferences","id","language","language_id","property_id","app_data","rate_plan_id","room_type_id","log","isInFreeCancelationZone","processAlicablePolicies","newRoomtypesMap","Map","map","rt","reduce","updatedRoomtypes","newRoomtype","get","updatedRoomtype","inventory","pre_payment_amount","rateplans","updateRatePlan","ratePlans","agentExists","bookingAvailabilityParams","agent","updatedRatePlans","rp","newRP","_a","newRatePlan","is_active","is_booking_engine_enabled","variations","selected_variation","_b","length","userCriteria","sort","a","b","allRateplansClosedA","every","plan","is_closed","allRateplansClosedB","zeroCalculatedA","_c","some","variation","is_calculated","zeroCalculatedB","_d","matchA","_e","matchB","_f","maxVariationA","Math","max","flatMap","maxVariationB","selectedRoomTypeIdx","findIndex","selectednewRoomTypeIdx","newVariation","v","adult_child_offering","adultChildConstraint","Colors","hexToRgb","hex","replace","r","parseInt","substring","g","rgbToHsl","rgb","cmin","min","cmax","delta","h","s","l","round","abs","toFixed","hexToHSL","generateColorShades","baseHex","baseL","shades","i","initTheme","property","base_theme_color","radius","space_theme","button_bg_color","button_border_radius","root","document","documentElement","shade_number","forEach","shade","style","setProperty","PropertyService","propertyHelpers","colors","getExposedProperty","include_sales_rate_plans","tags","key","value","injectHTML","fetchedBooking","aname","perma_link","displayMode","be_listing_mode","getExposedNonBookableNights","nights","nbn","night","nonBookableNights","getExposedBookingAvailability","getExposedBooking","withExtras","extras","fetchSetupEntries","setup_entries","TBL_NAMES","setupEntries","arrivalTime","filter","e","TBL_NAME","ratePricingMode","bedPreferenceType","updateUserFormData","CODE_NAME","filterRooms","rooms","values","ratePlanSelections","reserved","Array","_","roomtype","rateplan","ratePlan","unit","smoking_option","checkoutSmokingSelection","occupancy","checkoutVariations","children_nbr","infant_nbr","bed_preference","is_bed_configuration_enabled","checkoutBedSelection","notes","getDateDifference","guest","email","country_id","city","mobile","address","dob","subscribe_to_news_letter","cci","editExposedGuest","book_nbr","bookUser","prePaymentAmount","checkout_store","prepaymentAmount","payment","userFormData","firstName","lastName","mobile_number","country_phone_prefix","cardNumber","holder_name","cardHolderName","expiry_month","expiry_year","cvc","body","assign_units","check_in","is_pms","is_direct","is_in_loyalty_mode","loyalty","promo_key","coupon","booking","remark","source","isFromGhs","window","location","href","tag","stag","description","referrer_site","affiliate","sites","url","toString","arrival","f","pickup_info","getExposedGuest","is_signed_in"],"sources":["src/services/app/property-helpers.service.ts","src/services/app/colors.service.ts","src/services/api/property.service.ts"],"sourcesContent":["import { DataStructure } from '@/models/commun';\r\nimport { TPickupFormData } from '@/models/pickup';\r\nimport { RatePlan, RoomType } from '@/models/property';\r\nimport booking_store, { modifyBookingStore } from '@/stores/booking';\r\nimport axios from 'axios';\r\nimport { addDays, format } from 'date-fns';\r\nimport { PaymentService } from '../api/payment.service';\r\nimport app_store from '@/stores/app.store';\r\n\r\nexport class PropertyHelpers {\r\n  private static readonly MODE_MODIFY_RT = 'modify_rt';\r\n  private static readonly MODE_DEFAULT = 'default';\r\n  private paymentService = new PaymentService();\r\n  public validateModeProps(props: any) {\r\n    if (props.mode === PropertyHelpers.MODE_MODIFY_RT && (!props.rp_id || !props.rt_id)) {\r\n      throw new Error('Missing property: rp_id or rt_id is required in modify_rt mode');\r\n    }\r\n  }\r\n  public convertPickup(pickup: TPickupFormData) {\r\n    let res: any = {};\r\n    const [hour, minute] = pickup.arrival_time.split(':');\r\n    res = {\r\n      booking_nbr: null,\r\n      is_remove: false,\r\n      currency: pickup.currency,\r\n      date: pickup.arrival_date,\r\n      details: pickup.flight_details || null,\r\n      hour: Number(hour),\r\n      minute: Number(minute),\r\n      nbr_of_units: pickup.number_of_vehicles,\r\n      selected_option: pickup.selected_option,\r\n      total: Number(pickup.due_upon_booking),\r\n    };\r\n    return res;\r\n  }\r\n  public updateBookingStore(data: any, props: any) {\r\n    try {\r\n      let roomtypes = [...booking_store.roomTypes];\r\n      const newRoomtypes = data.My_Result.roomtypes;\r\n      if (props.mode === PropertyHelpers.MODE_DEFAULT) {\r\n        roomtypes = this.updateInventory(roomtypes, newRoomtypes);\r\n        roomtypes = this.sortRoomTypes(roomtypes, {\r\n          adult_nbr: props.params.adult_nbr,\r\n          child_nbr: props.params.child_nbr,\r\n        });\r\n      } else {\r\n        roomtypes = this.updateRoomTypeRatePlans(roomtypes, newRoomtypes, props);\r\n      }\r\n      booking_store.roomTypes = roomtypes;\r\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\r\n      booking_store.enableBooking = true;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  public collectRoomTypeIds(props: any): number[] {\r\n    return props.rt_id ? [props.rt_id] : [];\r\n  }\r\n\r\n  public collectRatePlanIds(props: any): number[] {\r\n    return props.rp_id ? [props.rp_id] : [];\r\n  }\r\n  public generateDays(from_date: Date, to_date: Date, amount: number) {\r\n    const endDate = to_date;\r\n    let currentDate = from_date;\r\n    const days: {\r\n      date: string;\r\n      amount: number;\r\n      cost: null;\r\n    }[] = [];\r\n\r\n    while (currentDate < endDate) {\r\n      days.push({\r\n        date: format(currentDate, 'yyyy-MM-dd'),\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      currentDate = addDays(currentDate, 1);\r\n    }\r\n    return days;\r\n  }\r\n\r\n  public extractFirstNameAndLastName(index: number, guestName: string[]) {\r\n    const names = guestName[index].split(' ');\r\n    return { first_name: names[0] || null, last_name: names[1] || null };\r\n  }\r\n  public async fetchAvailabilityData(props: any, roomtypeIds: number[], rateplanIds: number[]): Promise<any> {\r\n    const response = await axios.post(`/Get_Exposed_Booking_Availability`, {\r\n      ...props.params,\r\n      identifier: props.identifier,\r\n      room_type_ids: roomtypeIds,\r\n      rate_plan_ids: rateplanIds,\r\n      skip_getting_assignable_units: true,\r\n      is_specific_variation: true,\r\n      is_backend: false,\r\n    });\r\n    const result = response.data as DataStructure;\r\n    if (result.ExceptionMsg !== '') {\r\n      throw new Error(result.ExceptionMsg);\r\n    }\r\n    if (result.My_Result.booking_nbr) {\r\n      modifyBookingStore('fictus_booking_nbr', {\r\n        nbr: result.My_Result.booking_nbr,\r\n      });\r\n      this.validateFreeCancelationZone(result.My_Result.booking_nbr);\r\n    }\r\n    return result;\r\n  }\r\n  private async validateFreeCancelationZone(booking_nbr: string) {\r\n    // console.log(app_store.currencies.find(c => c.code.toLowerCase() === app_store.userPreferences.currency_id?.toLowerCase()));\r\n    const result = await this.paymentService.GetExposedApplicablePolicies({\r\n      book_date: new Date(),\r\n      params: {\r\n        booking_nbr,\r\n        currency_id: app_store.currencies.find(c => c.code.toLowerCase() === (app_store.userPreferences.currency_id.toLowerCase() || 'usd')).id,\r\n        language: app_store.userPreferences.language_id,\r\n        property_id: app_store.app_data.property_id,\r\n        rate_plan_id: 0,\r\n        room_type_id: 0,\r\n      },\r\n    });\r\n    console.log('applicable policies', result);\r\n    if (!result) {\r\n      booking_store.isInFreeCancelationZone = true;\r\n    }\r\n    if (result) {\r\n      const { isInFreeCancelationZone } = this.paymentService.processAlicablePolicies(result.data, new Date());\r\n      booking_store.isInFreeCancelationZone = isInFreeCancelationZone;\r\n    }\r\n  }\r\n  private updateInventory(roomtypes: RoomType[], newRoomtypes: RoomType[]): RoomType[] {\r\n    const newRoomtypesMap = new Map(newRoomtypes.map(rt => [rt.id, rt]));\r\n    return roomtypes.reduce((updatedRoomtypes, rt) => {\r\n      const newRoomtype = newRoomtypesMap.get(rt.id);\r\n      if (!newRoomtype) {\r\n        return updatedRoomtypes;\r\n      }\r\n      // console.log('new roomtypes', newRoomtypes);\r\n      const updatedRoomtype = {\r\n        ...rt,\r\n        inventory: newRoomtype.inventory,\r\n        pre_payment_amount: newRoomtype.pre_payment_amount,\r\n        rateplans: this.updateRatePlan(rt.rateplans, newRoomtype),\r\n      };\r\n      updatedRoomtypes.push(updatedRoomtype);\r\n      return updatedRoomtypes;\r\n    }, []);\r\n  }\r\n  // private updateRatePlan(ratePlans: RatePlan[], newRoomtype: RoomType) {\r\n  //   return ratePlans.reduce((updatedRatePlans, rp) => {\r\n  //     const newRatePlan = newRoomtype.rateplans.find(newRP => newRP.id === rp.id);\r\n  //     if (!newRatePlan || !newRatePlan.is_active || !newRatePlan.is_booking_engine_enabled) {\r\n  //       return updatedRatePlans;\r\n  //     }\r\n  //     updatedRatePlans.push({\r\n  //       ...newRatePlan,\r\n  //       is_targeting_travel_agency: newRatePlan.is_targeting_travel_agency,\r\n  //       variations: rp.variations,\r\n  //       // variations: rp.variations.map(v => {\r\n  //       //   if (!newRatePlan.variations) {\r\n  //       //     return v;\r\n  //       //   }\r\n  //       //   if (v.adult_child_offering === newRatePlan.variations[0].adult_child_offering) {\r\n  //       //     return newRatePlan.variations[0];\r\n  //       //   }\r\n  //       //   return v;\r\n  //       // }),\r\n  //       selected_variation: newRatePlan.variations ? newRatePlan.variations[0] : null,\r\n  //       // selected_variation: newRatePlan.variations ? rp.variations.find(v => v.adult_child_offering === newRatePlan.variations[0].adult_child_offering) : null,\r\n  //     });\r\n  //     return updatedRatePlans;\r\n  //   }, []);\r\n  // }\r\n  private updateRatePlan(ratePlans: RatePlan[], newRoomtype: RoomType): RatePlan[] {\r\n    const agentExists = !!booking_store.bookingAvailabilityParams.agent;\r\n\r\n    return ratePlans.reduce((updatedRatePlans: RatePlan[], rp: RatePlan) => {\r\n      const newRP = newRoomtype.rateplans?.find(newRatePlan => newRatePlan.id === rp.id);\r\n\r\n      if (!newRP || !newRP.is_active || !newRP.is_booking_engine_enabled) {\r\n        return updatedRatePlans;\r\n      }\r\n      // console.log('terst selected variation', newRP, newRP.variations, 'res', newRP.variations?.length > 0 ? newRP.variations[0] : null);\r\n      updatedRatePlans.push({\r\n        ...newRP,\r\n        variations: agentExists ? newRP.variations : rp.variations,\r\n        selected_variation: newRP.variations?.length > 0 ? newRP.variations[0] : null,\r\n      });\r\n\r\n      return updatedRatePlans;\r\n    }, []);\r\n  }\r\n  // private updateRatePlan(ratePlans: RatePlan[], newRoomtype: RoomType): RatePlan[] {\r\n  //   const agentExists = !!booking_store.bookingAvailabilityParams.agent;\r\n\r\n  //   return ratePlans.reduce((updatedRatePlans: RatePlan[], rp: RatePlan) => {\r\n  //     const newRP = newRoomtype.rateplans?.find(newRP => newRP.id === rp.id);\r\n  //     const newRatePlan = agentExists ? newRoomtype.rateplans?.find(newRP => newRP.id === rp.id) : ratePlans.find(newRP => newRP.id === rp.id);\r\n\r\n  //     if (!newRatePlan || !newRP || !newRatePlan.is_active || !newRatePlan.is_booking_engine_enabled) {\r\n  //       return updatedRatePlans;\r\n  //     }\r\n  //     updatedRatePlans.push({\r\n  //       ...newRatePlan,\r\n  //       short_name: newRP.short_name,\r\n  //       is_targeting_travel_agency: newRatePlan.is_targeting_travel_agency,\r\n  //       variations: agentExists ? newRatePlan.variations : rp.variations,\r\n  //       selected_variation: newRatePlan.variations ? newRatePlan.variations[0] : null,\r\n  //     });\r\n\r\n  //     return updatedRatePlans;\r\n  //   }, []);\r\n  // }\r\n\r\n  //---------------------------\r\n  //         SORTING\r\n  //---------------------------\r\n\r\n  // private sortRoomTypes(roomTypes: RoomType[], userCriteria: { adult_nbr: number; child_nbr: number }): RoomType[] {\r\n  //   return roomTypes.sort((a, b) => {\r\n  //     // Move room types with zero inventory to the end\r\n  //     if (a.inventory === 0 && b.inventory !== 0) return 1;\r\n  //     if (a.inventory !== 0 && b.inventory === 0) return -1;\r\n\r\n  //     // Check for variations where is_calculated is true and amount is 0\r\n  //     const zeroCalculatedA = a.rateplans?.some(plan => plan?.variations?.some(variation => variation.is_calculated && (variation.amount === 0 || variation.amount === null)));\r\n  //     const zeroCalculatedB = b.rateplans?.some(plan => plan?.variations?.some(variation => variation.is_calculated && (variation.amount === 0 || variation.amount === null)));\r\n\r\n  //     // Prioritize these types to be before inventory 0 but after all others\r\n  //     if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n  //     if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n  //     // Check for exact matching variations\r\n  //     const matchA = a.rateplans?.some(plan =>\r\n  //       plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n  //     );\r\n  //     const matchB = b.rateplans?.some(plan =>\r\n  //       plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n  //     );\r\n\r\n  //     if (matchA && !matchB) return -1;\r\n  //     if (!matchA && matchB) return 1;\r\n\r\n  //     // Sort by the highest variation in any attribute, for example `amount`\r\n  //     const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan?.variations?.map(variation => variation.amount)));\r\n  //     const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan?.variations?.map(variation => variation.amount)));\r\n\r\n  //     if (maxVariationA < maxVariationB) return -1;\r\n  //     if (maxVariationA > maxVariationB) return 1;\r\n\r\n  //     return 0;\r\n  //   });\r\n  // }\r\n  private sortRoomTypes(roomTypes: RoomType[], userCriteria: { adult_nbr: number; child_nbr: number }): RoomType[] {\r\n    return roomTypes.sort((a, b) => {\r\n      // Move room types with zero inventory to the end\r\n      if (a.inventory === 0 && b.inventory !== 0) return 1;\r\n      if (a.inventory !== 0 && b.inventory === 0) return -1;\r\n\r\n      // Move room types with all rate plans closed to the end\r\n      const allRateplansClosedA = a.rateplans?.every(plan => plan.is_closed);\r\n      const allRateplansClosedB = b.rateplans?.every(plan => plan.is_closed);\r\n\r\n      if (allRateplansClosedA && !allRateplansClosedB) return 1;\r\n      if (!allRateplansClosedA && allRateplansClosedB) return -1;\r\n\r\n      // Check for variations where is_calculated is true and amount is 0\r\n      const zeroCalculatedA = a.rateplans?.some(plan => plan?.variations?.some(variation => variation.is_calculated && (variation.amount === 0 || variation.amount === null)));\r\n      const zeroCalculatedB = b.rateplans?.some(plan => plan?.variations?.some(variation => variation.is_calculated && (variation.amount === 0 || variation.amount === null)));\r\n\r\n      // Prioritize these types to be before inventory 0 but after all others\r\n      if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n      if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n      // Check for exact matching variations\r\n      const matchA = a.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      const matchB = b.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n\r\n      if (matchA && !matchB) return -1;\r\n      if (!matchA && matchB) return 1;\r\n\r\n      // Sort by the highest variation in any attribute, for example `amount`\r\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan?.variations?.map(variation => variation.amount)));\r\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan?.variations?.map(variation => variation.amount)));\r\n\r\n      if (maxVariationA < maxVariationB) return -1;\r\n      if (maxVariationA > maxVariationB) return 1;\r\n\r\n      return 0;\r\n    });\r\n  }\r\n  private updateRoomTypeRatePlans(roomtypes: RoomType[], newRoomtypes: RoomType[], props: any) {\r\n    const selectedRoomTypeIdx = roomtypes.findIndex(rt => rt.id === props.rt_id);\r\n    if (selectedRoomTypeIdx === -1) {\r\n      throw new Error('Invalid RoomType');\r\n    }\r\n    const selectednewRoomTypeIdx = newRoomtypes.findIndex(rt => rt.id === props.rt_id);\r\n    if (selectedRoomTypeIdx === -1) {\r\n      throw new Error('Invalid RoomType');\r\n    }\r\n    if (selectednewRoomTypeIdx === -1) {\r\n      throw new Error('Invalid New RoomType');\r\n    }\r\n    const newRatePlan = newRoomtypes[selectednewRoomTypeIdx].rateplans?.find(rp => rp.id === props.rp_id);\r\n    if (!newRatePlan) {\r\n      throw new Error('Invalid New Rateplan');\r\n    }\r\n    const newVariation = newRatePlan.variations.find(v => v.adult_child_offering === props.adultChildConstraint);\r\n    if (!newVariation) {\r\n      throw new Error('Missing variation');\r\n    }\r\n    roomtypes[selectedRoomTypeIdx] = {\r\n      ...roomtypes[selectedRoomTypeIdx],\r\n      rateplans: roomtypes[selectedRoomTypeIdx].rateplans.map(rp => {\r\n        return {\r\n          ...rp,\r\n          variations: rp.variations.map(v => {\r\n            if (v.adult_child_offering === props.adultChildConstraint && rp.id === props.rp_id) {\r\n              return newVariation;\r\n            }\r\n            return v;\r\n          }),\r\n        };\r\n      }),\r\n    };\r\n    return roomtypes;\r\n  }\r\n}\r\n","import { IExposedProperty } from '@/models/property';\r\n\r\ntype HSLColor = {\r\n  h: number;\r\n  s: number;\r\n  l: number;\r\n};\r\nexport class Colors {\r\n  public hexToRgb(hex) {\r\n    hex = hex.replace(/^#/, '');\r\n    var r = parseInt(hex.substring(0, 2), 16);\r\n    var g = parseInt(hex.substring(2, 4), 16);\r\n    var b = parseInt(hex.substring(4, 6), 16);\r\n    return { r, g, b };\r\n  }\r\n  public rgbToHsl(rgb) {\r\n    let r = parseInt(rgb.r);\r\n    let g = parseInt(rgb.g);\r\n    let b = parseInt(rgb.b);\r\n\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    let cmin = Math.min(r, g, b),\r\n      cmax = Math.max(r, g, b),\r\n      delta = cmax - cmin,\r\n      h = 0,\r\n      s = 0,\r\n      l = 0;\r\n\r\n    if (delta == 0) h = 0;\r\n    else if (cmax == r) h = ((g - b) / delta) % 6;\r\n    else if (cmax == g) h = (b - r) / delta + 2;\r\n    else h = (r - g) / delta + 4;\r\n\r\n    h = Math.round(h * 60);\r\n    if (h < 0) h += 360;\r\n    l = (cmax + cmin) / 2;\r\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\r\n    s = +(s * 100).toFixed(1);\r\n    l = +(l * 100).toFixed(1);\r\n\r\n    return { h: Math.round(h), s: Math.round(s), l: Math.round(l) };\r\n  }\r\n  public hexToHSL(hex: string): HSLColor {\r\n    const rgb = this.hexToRgb(hex);\r\n    return this.rgbToHsl(rgb);\r\n  }\r\n  public generateColorShades(baseHex: string): string[] {\r\n    const { h, s, l: baseL } = this.hexToHSL(baseHex);\r\n    let shades = [];\r\n    for (let i = -3; i <= 6; i++) {\r\n      let l = baseL + i * 4;\r\n      shades.push({ h, s, l: Math.min(Math.max(l, 0), 100) });\r\n    }\r\n    return shades;\r\n  }\r\n  public initTheme(property: IExposedProperty) {\r\n    let base_theme_color = '#e93e57';\r\n    let radius = null;\r\n    if (property.space_theme) {\r\n      base_theme_color = property.space_theme.button_bg_color;\r\n      radius = property.space_theme.button_border_radius;\r\n    }\r\n    const root = document.documentElement;\r\n    const shades = this.generateColorShades(base_theme_color);\r\n    let shade_number = 900;\r\n    shades.forEach((shade: any, index) => {\r\n      root.style.setProperty(`--brand-${shade_number}`, `${shade.h}, ${shade.s}%, ${shade.l}%`);\r\n      if (index === 9) {\r\n        shade_number = 25;\r\n      } else if (index === 8) {\r\n        shade_number = 50;\r\n      } else {\r\n        shade_number = shade_number - 100;\r\n      }\r\n    });\r\n    if (!radius) {\r\n      return;\r\n    }\r\n    root.style.setProperty('--radius', radius + 'px');\r\n  }\r\n}\r\n","import { PropertyHelpers } from './../app/property-helpers.service';\r\nimport { TExposedBookingAvailability } from '@/components/ir-booking-engine/ir-booking-page/ir-availibility-header/availability';\r\nimport { Booking } from '@/models/booking.dto';\r\nimport { DataStructure } from '@/models/commun';\r\nimport { ISetupEntries } from '@/models/property';\r\nimport app_store from '@/stores/app.store';\r\nimport booking_store, { IRatePlanSelection } from '@/stores/booking';\r\nimport { checkout_store, ICardProcessingWithCVC, updateUserFormData } from '@/stores/checkout.store';\r\nimport { getDateDifference, injectHTML } from '@/utils/utils';\r\nimport axios from 'axios';\r\nimport { format } from 'date-fns';\r\nimport { Colors } from '../app/colors.service';\r\nimport { TGuest } from '@/models/user_form';\r\n\r\nexport class PropertyService {\r\n  private propertyHelpers = new PropertyHelpers();\r\n  colors: Colors = new Colors();\r\n\r\n  public async getExposedProperty(params: { id: number; language: string; aname: string | null; perma_link: string | null }, initTheme: boolean = true) {\r\n    const { data } = await axios.post(`/Get_Exposed_Property`, {\r\n      ...params,\r\n      currency: app_store.userPreferences.currency_id,\r\n      include_sales_rate_plans: true,\r\n    });\r\n    const result = data as DataStructure;\r\n    if (result.ExceptionMsg !== '') {\r\n      throw new Error(result.ExceptionMsg);\r\n    }\r\n    if (result.My_Result.tags) {\r\n      result.My_Result.tags.map(({ key, value }) => {\r\n        if (!value) {\r\n          return;\r\n        }\r\n        switch (key) {\r\n          case 'header':\r\n            return injectHTML(value, 'head', 'first');\r\n          case 'body':\r\n            return injectHTML(value, 'body', 'first');\r\n          case 'footer':\r\n            return injectHTML(value, 'body', 'last');\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!app_store.fetchedBooking) {\r\n      booking_store.roomTypes = [...(result.My_Result?.roomtypes ?? [])];\r\n    }\r\n    // } else {\r\n    //   const oldBookingStoreRoomTypes = [...booking_store.roomTypes];\r\n    //   booking_store.roomTypes = result.My_Result.roomtypes?.map(rt => {\r\n    //     const selectedRt = oldBookingStoreRoomTypes.find(r => r.id === rt.id);\r\n    //     return {\r\n    //       ...rt,\r\n    //       rateplans: rt.rateplans.map(rp => {\r\n    //         const currentRp = selectedRt.rateplans.find(s => s.id === rp.id);\r\n    //         if (currentRp) {\r\n    //           return { ...currentRp, short_name: rp.short_name };\r\n    //         }\r\n    //         return null;\r\n    //       }),\r\n    //     };\r\n    //   });\r\n    // }\r\n    if (params.aname || params.perma_link) {\r\n      app_store.app_data = { ...app_store.app_data, property_id: result.My_Result.id };\r\n    }\r\n    app_store.app_data.displayMode = result.My_Result.be_listing_mode === 'grid' ? 'grid' : 'default';\r\n    app_store.property = { ...result.My_Result };\r\n    app_store.app_data.property_id = result.My_Result.id;\r\n    if (initTheme) {\r\n      this.colors.initTheme(result.My_Result);\r\n      // app_store.app_data.displayMode = 'grid';\r\n    }\r\n    return result.My_Result;\r\n  }\r\n  public async getExposedNonBookableNights(params: { from_date: string; to_date: string; porperty_id: number; aname: string; perma_link: string }) {\r\n    const { data } = await axios.post(`/Get_Exposed_Non_Bookable_Nights`, params);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const nights = {};\r\n    data.My_Result?.forEach(nbn => {\r\n      nights[nbn.night] = true;\r\n    });\r\n    app_store.nonBookableNights = nights;\r\n    return data.My_Result;\r\n  }\r\n  public async getExposedBookingAvailability(props: {\r\n    params: TExposedBookingAvailability;\r\n    identifier: string;\r\n    rp_id?: number;\r\n    rt_id?: number;\r\n    mode: 'modify_rt' | 'default';\r\n    adultChildConstraint?: string;\r\n  }): Promise<DataStructure> {\r\n    this.propertyHelpers.validateModeProps(props);\r\n\r\n    const roomtypeIds = this.propertyHelpers.collectRoomTypeIds(props);\r\n    const rateplanIds = this.propertyHelpers.collectRatePlanIds(props);\r\n    const data = await this.propertyHelpers.fetchAvailabilityData(props, roomtypeIds, rateplanIds);\r\n\r\n    this.propertyHelpers.updateBookingStore(data, props);\r\n\r\n    return data;\r\n  }\r\n\r\n  public async getExposedBooking(params: { booking_nbr: string; language: string; currency: string }, withExtras: boolean = true) {\r\n    const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n      ...params,\r\n      extras: withExtras\r\n        ? [\r\n            { key: 'payment_code', value: '' },\r\n            {\r\n              key: 'prepayment_amount',\r\n              value: '',\r\n            },\r\n            { key: 'payment_code', value: '' },\r\n          ]\r\n        : null,\r\n    });\r\n    const result = data as DataStructure;\r\n    if (result.ExceptionMsg !== '') {\r\n      throw new Error(result.ExceptionMsg);\r\n    }\r\n    return result.My_Result as Booking;\r\n  }\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    if (app_store.setup_entries) {\r\n      return app_store.setup_entries;\r\n    }\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n      TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res: any[] = data.My_Result;\r\n    const setupEntries = {\r\n      arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n      ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n      bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n    };\r\n    app_store.setup_entries = setupEntries;\r\n    updateUserFormData('arrival_time', setupEntries.arrivalTime[0].CODE_NAME);\r\n    return setupEntries;\r\n  }\r\n\r\n  private filterRooms() {\r\n    let rooms = [];\r\n    Object.values(booking_store.ratePlanSelections).map(rt => {\r\n      Object.values(rt).map((rp: IRatePlanSelection) => {\r\n        if (rp.reserved > 0) {\r\n          [...new Array(rp.reserved)].map((_, index) => {\r\n            const { first_name, last_name } = this.propertyHelpers.extractFirstNameAndLastName(index, rp.guestName);\r\n            rooms.push({\r\n              identifier: null,\r\n              roomtype: rp.roomtype,\r\n              rateplan: rp.ratePlan,\r\n              unit: null,\r\n              smoking_option: rp.checkoutSmokingSelection[index],\r\n              occupancy: {\r\n                adult_nbr: rp.checkoutVariations[index].adult_nbr,\r\n                children_nbr: rp.checkoutVariations[index].child_nbr,\r\n                infant_nbr: null,\r\n              },\r\n              bed_preference: rp.is_bed_configuration_enabled ? rp.checkoutBedSelection[index] : null,\r\n              from_date: format(booking_store.bookingAvailabilityParams.from_date, 'yyyy-MM-dd'),\r\n              to_date: format(booking_store.bookingAvailabilityParams.to_date, 'yyyy-MM-dd'),\r\n              notes: null,\r\n              days: this.propertyHelpers.generateDays(\r\n                booking_store.bookingAvailabilityParams.from_date,\r\n                booking_store.bookingAvailabilityParams.to_date,\r\n                +rp.checkoutVariations[index].amount / getDateDifference(booking_store.bookingAvailabilityParams.from_date, booking_store.bookingAvailabilityParams.to_date),\r\n              ),\r\n              guest: {\r\n                email: null,\r\n                first_name,\r\n                last_name,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n                cci: null,\r\n              },\r\n            });\r\n          });\r\n        }\r\n      });\r\n    });\r\n    return rooms;\r\n  }\r\n  public async editExposedGuest(guest: TGuest, book_nbr: string): Promise<any> {\r\n    const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n\r\n  public async bookUser() {\r\n    const prePaymentAmount = checkout_store.prepaymentAmount;\r\n    try {\r\n      console.log('payment', checkout_store.payment);\r\n      let guest: any = {\r\n        email: checkout_store.userFormData.email,\r\n        first_name: checkout_store.userFormData.firstName,\r\n        last_name: checkout_store.userFormData.lastName,\r\n        country_id: checkout_store.userFormData.country_id,\r\n        city: null,\r\n        mobile: checkout_store.userFormData.mobile_number,\r\n        address: '',\r\n        country_phone_prefix: checkout_store.userFormData.country_phone_prefix,\r\n        dob: null,\r\n        subscribe_to_news_letter: true,\r\n        cci:\r\n          checkout_store.payment?.code === '001'\r\n            ? {\r\n                nbr: (checkout_store.payment as ICardProcessingWithCVC)?.cardNumber.replace(/ /g, ''),\r\n                holder_name: (checkout_store.payment as ICardProcessingWithCVC)?.cardHolderName,\r\n                expiry_month: (checkout_store.payment as ICardProcessingWithCVC)?.expiry_month.split('/')[0],\r\n                expiry_year: (checkout_store.payment as ICardProcessingWithCVC)?.expiry_year.split('/')[1],\r\n                cvc: (checkout_store.payment as ICardProcessingWithCVC).cvc,\r\n              }\r\n            : null,\r\n      };\r\n      const body = {\r\n        assign_units: false,\r\n        check_in: false,\r\n        is_pms: false,\r\n        is_direct: true,\r\n        agent: booking_store.bookingAvailabilityParams.agent ? { id: booking_store.bookingAvailabilityParams.agent } : null,\r\n        is_in_loyalty_mode: booking_store.bookingAvailabilityParams.loyalty,\r\n        promo_key: booking_store.bookingAvailabilityParams.coupon ?? null,\r\n        booking: {\r\n          booking_nbr: '',\r\n          from_date: format(booking_store.bookingAvailabilityParams.from_date, 'yyyy-MM-dd'),\r\n          to_date: format(booking_store.bookingAvailabilityParams.to_date, 'yyyy-MM-dd'),\r\n          remark: checkout_store.userFormData.message || null,\r\n          property: {\r\n            id: app_store.app_data.property_id,\r\n          },\r\n          source: { code: app_store.app_data.isFromGhs ? 'ghs' : window.location.href, tag: app_store.app_data.stag, description: '' },\r\n          referrer_site: app_store.app_data.affiliate ? `https://${app_store.app_data.affiliate.sites[0].url}` : 'www.igloorooms.com',\r\n          currency: app_store.currencies.find(currency => currency.code.toString().toLowerCase() === app_store.userPreferences.currency_id.toLowerCase()),\r\n          arrival: { code: checkout_store.userFormData.arrival_time },\r\n          guest,\r\n          rooms: this.filterRooms(),\r\n        },\r\n        extras: [\r\n          prePaymentAmount > 0\r\n            ? {\r\n                key: 'payment_code',\r\n                value: checkout_store.payment.code,\r\n              }\r\n            : null,\r\n          prePaymentAmount > 0\r\n            ? {\r\n                key: 'prepayment_amount',\r\n                value: prePaymentAmount,\r\n              }\r\n            : null,\r\n          {\r\n            key: 'selected_currency',\r\n            value: app_store.userPreferences.currency_id,\r\n          },\r\n        ].filter(f => f !== null),\r\n        pickup_info: checkout_store.pickup.location ? this.propertyHelpers.convertPickup(checkout_store.pickup) : null,\r\n      };\r\n      console.log('body');\r\n      const { data } = await axios.post(`/DoReservation`, body);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getExposedGuest() {\r\n    const { data } = await axios.post(`/Get_Exposed_Guest`, {\r\n      email: null,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res = data.My_Result;\r\n    if (res === null) {\r\n      app_store.is_signed_in = false;\r\n      return;\r\n    }\r\n    // app_store.is_signed_in = true;\r\n    checkout_store.userFormData = {\r\n      ...checkout_store.userFormData,\r\n      country_id: res.country_id,\r\n      email: res.email,\r\n      firstName: res.first_name,\r\n      lastName: res.last_name,\r\n      mobile_number: res.mobile,\r\n      country_phone_prefix: res.country_phone_prefix,\r\n      id: res.id,\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}