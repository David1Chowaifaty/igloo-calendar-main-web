{"version":3,"names":["validateCreditCardNumber","number","replace","sum","shouldDouble","i","length","digit","parseInt","charAt","ZCreditCardSchemaWithCvc","z","object","cardNumber","string","refine","arg","message","cvc","regex","cardHolderName","min","expiryDate","ICardProcessingWithoutCVC","code","literal","expiry_month","expiry_year","ICardProcessingWithCVC","union"],"sources":["src/validators/checkout.validator.ts"],"sourcesContent":["import { z } from 'zod';\r\n\r\n// const cardNumberPatterns = {\r\n//   VISA: /^4[0-9]{12}(?:[0-9]{3})?$/,\r\n//   Mastercard: /^5[1-5][0-9]{14}$/,\r\n//   AMEX: /^3[47][0-9]{13}$/,\r\n// };\r\n\r\n// const cvcPatterns = {\r\n//   VISA: /^[0-9]{3}$/,\r\n//   Mastercard: /^[0-9]{3}$/,\r\n//   AMEX: /^[0-9]{4}$/,\r\n// };\r\n\r\n// const validateExpiryDate = (expiry: string) => {\r\n//   const [month, year] = expiry.split('/').map(Number);\r\n//   if (!month || !year || month < 1 || month > 12) {\r\n//     return false;\r\n//   }\r\n//   const currentYear = new Date().getFullYear() % 100;\r\n//   const currentMonth = new Date().getMonth() + 1;\r\n//   if (year < currentYear || (year === currentYear && month < currentMonth)) {\r\n//     return false;\r\n//   }\r\n//   return true;\r\n// };\r\nfunction validateCreditCardNumber(number) {\r\n  // Remove all non-digit characters\r\n  number = number.replace(/\\D/g, '');\r\n\r\n  let sum = 0;\r\n  let shouldDouble = false;\r\n\r\n  // Traverse the number from right to left\r\n  for (let i = number.length - 1; i >= 0; i--) {\r\n    let digit = parseInt(number.charAt(i), 10);\r\n\r\n    if (shouldDouble) {\r\n      // Double the digit\r\n      digit *= 2;\r\n\r\n      // If the result is a two-digit number, add the digits together\r\n      if (digit > 9) {\r\n        digit -= 9;\r\n      }\r\n    }\r\n\r\n    sum += digit;\r\n    shouldDouble = !shouldDouble;\r\n  }\r\n\r\n  // If the sum is divisible by 10, the number is valid\r\n  return sum % 10 === 0;\r\n}\r\nexport const ZCreditCardSchemaWithCvc = z.object({\r\n  cardNumber: z.string().refine(arg => validateCreditCardNumber(arg), {\r\n    message: 'Invalid credit card number',\r\n  }),\r\n  cvc: z.string().regex(/^\\d{3,4}$/, 'CVV must be 3 or 4 digits'),\r\n  cardHolderName: z.string().min(1, 'Holder name is required'),\r\n  expiryDate: z.string().regex(/^(0[1-9]|1[0-2])\\/\\d{2}$/, 'Expiry date must be in MM/YY format'),\r\n});\r\nexport const ZCreditCardSchemaWithoutCvc = z.object({\r\n  cardNumber: z.string().regex(/^\\d{15,16}$/, 'Card number must be 15 or 16 digits'),\r\n  cardHolderName: z.string().min(1, 'Holder name is required'),\r\n  expiryDate: z.string().regex(/^(0[1-9]|1[0-2])\\/\\d{2}$/, 'Expiry date must be in MM/YY format'),\r\n});\r\n// export const ZCreditCardSchema = z\r\n//   .object({\r\n//     cardNumber: z.string().refine(\r\n//       val => {\r\n//         return cardNumberPatterns.VISA.test(val) || cardNumberPatterns.Mastercard.test(val) || cardNumberPatterns.AMEX.test(val);\r\n//       },\r\n//       {\r\n//         message: 'Invalid card number',\r\n//       },\r\n//     ),\r\n//     cvc: z.string().min(3),\r\n//     expiryDate: z.string().refine(validateExpiryDate, {\r\n//       message: 'Invalid expiry date',\r\n//     }),\r\n//     cardHolderName: z.string().min(1, {\r\n//       message: 'Cardholder name cannot be empty',\r\n//     }),\r\n//   })\r\n//   .superRefine((data, ctx) => {\r\n//     const cardType = Object.keys(cardNumberPatterns).find(type => cardNumberPatterns[type as keyof typeof cardNumberPatterns].test(data.cardNumber));\r\n\r\n//     if (cardType && !cvcPatterns[cardType as keyof typeof cvcPatterns].test(data.cvc)) {\r\n//       ctx.addIssue({\r\n//         code: 'custom',\r\n//         path: ['cvc'],\r\n//         message: \"'Invalid CVC\",\r\n//       });\r\n//     }\r\n//   });\r\n\r\nconst ICardProcessingWithoutCVC = z.object({\r\n  code: z.literal('004'),\r\n  cardNumber: z.string(),\r\n  cardHolderName: z.string(),\r\n  expiry_month: z.string(),\r\n  expiry_year: z.string(),\r\n});\r\n\r\nconst ICardProcessingWithCVC = z.object({\r\n  code: z.literal('001'),\r\n  cardNumber: z.string(),\r\n  cardHolderName: z.string(),\r\n  expiry_month: z.string(),\r\n  expiry_year: z.string(),\r\n  cvc: z.string(),\r\n});\r\n\r\nexport const ICardProcessing = z.union([ICardProcessingWithoutCVC, ICardProcessingWithCVC]);\r\n"],"mappings":"oCA0BA,SAASA,EAAyBC,GAEhCA,EAASA,EAAOC,QAAQ,MAAO,IAE/B,IAAIC,EAAM,EACV,IAAIC,EAAe,MAGnB,IAAK,IAAIC,EAAIJ,EAAOK,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC3C,IAAIE,EAAQC,SAASP,EAAOQ,OAAOJ,GAAI,IAEvC,GAAID,EAAc,CAEhBG,GAAS,EAGT,GAAIA,EAAQ,EAAG,CACbA,GAAS,C,EAIbJ,GAAOI,EACPH,GAAgBA,C,CAIlB,OAAOD,EAAM,KAAO,CACtB,C,MACaO,EAA2BC,EAAEC,OAAO,CAC/CC,WAAYF,EAAEG,SAASC,QAAOC,GAAOhB,EAAyBgB,IAAM,CAClEC,QAAS,+BAEXC,IAAKP,EAAEG,SAASK,MAAM,YAAa,6BACnCC,eAAgBT,EAAEG,SAASO,IAAI,EAAG,2BAClCC,WAAYX,EAAEG,SAASK,MAAM,2BAA4B,yCAEhBR,EAAEC,OAAO,CAClDC,WAAYF,EAAEG,SAASK,MAAM,cAAe,uCAC5CC,eAAgBT,EAAEG,SAASO,IAAI,EAAG,2BAClCC,WAAYX,EAAEG,SAASK,MAAM,2BAA4B,yCAgC3D,MAAMI,EAA4BZ,EAAEC,OAAO,CACzCY,KAAMb,EAAEc,QAAQ,OAChBZ,WAAYF,EAAEG,SACdM,eAAgBT,EAAEG,SAClBY,aAAcf,EAAEG,SAChBa,YAAahB,EAAEG,WAGjB,MAAMc,EAAyBjB,EAAEC,OAAO,CACtCY,KAAMb,EAAEc,QAAQ,OAChBZ,WAAYF,EAAEG,SACdM,eAAgBT,EAAEG,SAClBY,aAAcf,EAAEG,SAChBa,YAAahB,EAAEG,SACfI,IAAKP,EAAEG,WAGsBH,EAAEkB,MAAM,CAACN,EAA2BK,W","ignoreList":[]}