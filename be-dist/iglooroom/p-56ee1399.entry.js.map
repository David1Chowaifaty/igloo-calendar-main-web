{"version":3,"names":["irInputCss","IrInputStyle0","IrInput","v4","applyStyles","style","property","hasOwnProperty","this","inputEl","initializeOrUpdateMask","input","el","querySelector","mask","maskInstance","updateOptions","value","updateValue","IMask","on","textChanged","emit","componentDidLoad","inputStyles","maskPropChanged","newValue","oldValue","destroy","valueChanged","onErrorChange","setAttribute","hasAttribute","removeAttribute","handleBlur","event","classList","remove","target","add","inputBlur","disconnectedCallback","render","h","key","ref","class","disabled","leftIcon","htmlFor","inputId","name","type","placeholder","id","required","readonly","maxlength","min","max","step","pattern","autocomplete","autofocus","size","multiple","onInput","e","onBlur","bind","onFocus","inputFocus","slot","title","tooltip","labelBackground","label","rightIcon"],"sources":["src/components/ui/ir-input/ir-input.css?tag=ir-input&encapsulation=scoped","src/components/ui/ir-input/ir-input.tsx"],"sourcesContent":[":host([data-state='error']) .input-container {\r\n  border-color: red;\r\n}\r\n.input-container {\r\n  border-radius: 8px;\r\n  border: 1px solid var(--gray-300, #d0d5dd);\r\n  transition: all 0.3s ease-in-out;\r\n  width: 100%;\r\n  position: relative;\r\n  background: hsl(0, 0%, 100%);\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 !important;\r\n}\r\n.placeholder {\r\n  position: absolute;\r\n  pointer-events: none;\r\n  transition: all 0.3s ease-in-out;\r\n  color: var(--gray-500, #667085);\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\ninput {\r\n  width: 100%;\r\n  border-radius: 0.5rem;\r\n  padding: 0.625rem 0.875rem;\r\n  font-size: 1rem;\r\n  outline: none;\r\n}\r\n\r\n:host([placeholder]) .placeholder,\r\ninput:focus + .placeholder,\r\n.input-container.has-value .placeholder {\r\n  transform: translateY(-1.4rem);\r\n  background: linear-gradient(180deg, var(--label-background, #ffffff) 0%, #ffffff 100%);\r\n  padding-inline: 0.3rem;\r\n  font-size: 0.75rem;\r\n  line-height: 1rem;\r\n  pointer-events: all;\r\n}\r\n.input-container:focus-within {\r\n  outline: none;\r\n  border-color: black;\r\n}\r\n.input-container:focus-within .placeholder {\r\n  color: black;\r\n}\r\n:host([data-state='error']) .input-container,\r\n.error {\r\n  border-color: var(--error-500, #f04438);\r\n}\r\n:host([data-state='error']) .placeholder,\r\n.error .placeholder {\r\n  color: var(--error-500, #f04438);\r\n}\r\n.disabled,\r\n.disabled input {\r\n  background: var(--gray-50, #f9fafb);\r\n  color: var(--gray-300, #d0d5dd);\r\n  pointer-events: none;\r\n}\r\n\r\nlabel {\r\n  position: absolute;\r\n  pointer-events: none;\r\n  height: 100%;\r\n  display: flex;\r\n  width: fit-content;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: var(--gray-600, #475467);\r\n}\r\n.right-icon:dir(ltr),\r\n.placeholder:dir(rtl),\r\n.left-icon:dir(rtl) {\r\n  right: calc(0.875rem - 0.3rem);\r\n}\r\n.placeholder:dir(ltr),\r\n.left-icon:dir(ltr),\r\n.right-icon:dir(rtl) {\r\n  left: calc(0.875rem - 0.3rem);\r\n}\r\n\r\n.input-container[data-context='icon']:dir(ltr) input {\r\n  padding-left: 2.3rem;\r\n}\r\n.input-container[data-context='icon']:dir(ltr) .placeholder {\r\n  left: 2rem;\r\n}\r\n.input-container[data-context='icon']:dir(rtl) input {\r\n  padding-right: 2.3rem;\r\n}\r\n.input-container[data-context='icon']:dir(rtl) .placeholder {\r\n  right: 2rem;\r\n}\r\n:host[mode='default'] .placeholder {\r\n  display: none;\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter, Element, Watch } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\nimport IMask, { InputMask } from 'imask';\r\n@Component({\r\n  tag: 'ir-input',\r\n  styleUrl: 'ir-input.css',\r\n  scoped: true,\r\n})\r\nexport class IrInput {\r\n  @Element() el: HTMLIrInputElement;\r\n  @Prop() inputId: string = v4();\r\n  @Prop({ reflect: true }) leftIcon: boolean = false;\r\n  @Prop({ reflect: true }) rightIcon: boolean = false;\r\n  @Prop() inputStyles: Partial<CSSStyleDeclaration>;\r\n  @Prop() value: string;\r\n  @Prop() type:\r\n    | 'button'\r\n    | 'checkbox'\r\n    | 'color'\r\n    | 'date'\r\n    | 'datetime-local'\r\n    | 'email'\r\n    | 'file'\r\n    | 'hidden'\r\n    | 'image'\r\n    | 'month'\r\n    | 'number'\r\n    | 'password'\r\n    | 'radio'\r\n    | 'range'\r\n    | 'reset'\r\n    | 'search'\r\n    | 'submit'\r\n    | 'tel'\r\n    | 'text'\r\n    | 'time'\r\n    | 'url'\r\n    | 'week' = 'text';\r\n  @Prop({ reflect: true }) name: string;\r\n  @Prop({ reflect: true }) placeholder: string;\r\n  @Prop({ reflect: true }) inputid: string;\r\n  @Prop({ reflect: true }) class: string;\r\n  @Prop({ reflect: true }) required: boolean;\r\n  @Prop({ reflect: true }) disabled: boolean;\r\n  @Prop({ reflect: true }) readonly: boolean;\r\n  @Prop({ reflect: true }) maxlength: number;\r\n  @Prop({ reflect: true }) min: string | number;\r\n  @Prop({ reflect: true }) max: string | number;\r\n  @Prop({ reflect: true }) step: string | number;\r\n  @Prop({ reflect: true }) pattern: string;\r\n  @Prop({ reflect: true }) autocomplete: string;\r\n  @Prop({ reflect: true }) autofocus: boolean;\r\n  @Prop({ reflect: true }) size: number;\r\n  @Prop({ reflect: true }) multiple: boolean;\r\n  @Prop() label: string;\r\n  @Prop() error: boolean = false;\r\n  @Prop() mask: Record<string, unknown>;\r\n  @Prop() labelBackground: string;\r\n  @Prop() mode: 'double-line' | 'default' = 'double-line';\r\n  @Prop() tooltip: string;\r\n\r\n  @Event({ bubbles: true, composed: true }) textChanged: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) inputFocus: EventEmitter<FocusEvent>;\r\n  @Event({ bubbles: true, composed: true }) inputBlur: EventEmitter<FocusEvent>;\r\n\r\n  private inputEl: HTMLDivElement;\r\n  private maskInstance: InputMask<any>;\r\n  input: HTMLInputElement;\r\n\r\n  applyStyles(style: Partial<CSSStyleDeclaration>) {\r\n    for (const property in style) {\r\n      if (style.hasOwnProperty(property)) {\r\n        this.inputEl.style[property] = style[property];\r\n      }\r\n    }\r\n  }\r\n  private initializeOrUpdateMask() {\r\n    const input = this.el.querySelector('input') as HTMLInputElement;\r\n    if (this.mask) {\r\n      if (this.maskInstance) {\r\n        this.maskInstance.updateOptions(this.mask);\r\n        if (this.value) this.maskInstance.updateValue();\r\n      } else {\r\n        this.maskInstance = IMask(input, this.mask);\r\n        this.maskInstance.on('accept', () => {\r\n          this.textChanged.emit(this.maskInstance.value);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.inputStyles) {\r\n      this.applyStyles(this.inputStyles);\r\n    }\r\n    if (this.mask) {\r\n      this.initializeOrUpdateMask();\r\n      this.input = this.el.querySelector(`input`) as HTMLInputElement;\r\n      const mask = IMask(this.input, this.mask);\r\n      mask.on('accept', () => {\r\n        this.textChanged.emit(mask.value);\r\n      });\r\n      mask.updateValue();\r\n    }\r\n  }\r\n  @Watch('mask')\r\n  maskPropChanged(newValue: Record<string, unknown>, oldValue: Record<string, unknown>) {\r\n    if (newValue !== oldValue) {\r\n      if (this.maskInstance) {\r\n        this.maskInstance.destroy();\r\n      }\r\n      this.initializeOrUpdateMask();\r\n    }\r\n  }\r\n\r\n  @Watch('value')\r\n  valueChanged(newValue: string, oldValue: string) {\r\n    if (newValue !== oldValue) {\r\n      if (this.maskInstance && newValue !== '') {\r\n        this.maskInstance.value = newValue;\r\n        this.maskInstance.updateValue();\r\n      }\r\n    }\r\n  }\r\n  @Watch('error')\r\n  onErrorChange(newValue: boolean, oldValue: boolean) {\r\n    if (newValue !== oldValue) {\r\n      if (newValue) {\r\n        this.el.setAttribute('data-state', 'error');\r\n      } else {\r\n        if (this.el.hasAttribute('data-state')) {\r\n          this.el.removeAttribute('data-state');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleBlur(event: FocusEvent) {\r\n    this.inputEl.classList.remove('focused');\r\n    if ((event.target as HTMLInputElement).value) {\r\n      this.inputEl.classList.add('has-value');\r\n    } else {\r\n      this.inputEl.classList.remove('has-value');\r\n    }\r\n    this.inputBlur.emit(event);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.maskInstance) {\r\n      this.maskInstance.destroy();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={el => (this.inputEl = el)} class={`input-container  ${this.disabled ? 'disabled' : ''}`} data-context={this.leftIcon ? 'icon' : ''}>\r\n        {this.leftIcon && (\r\n          <label htmlFor={this.inputId} class=\"left-icon\">\r\n            <slot name=\"left-icon\"></slot>\r\n          </label>\r\n        )}\r\n        <input\r\n          type={this.type}\r\n          name={this.name}\r\n          placeholder={this.placeholder}\r\n          id={this.inputId}\r\n          class={this.class}\r\n          required={this.required}\r\n          disabled={this.disabled}\r\n          readonly={this.readonly}\r\n          maxlength={this.maxlength}\r\n          min={this.min}\r\n          max={this.max}\r\n          step={this.step}\r\n          pattern={this.pattern}\r\n          autocomplete={this.autocomplete}\r\n          autofocus={this.autofocus}\r\n          size={this.size}\r\n          multiple={this.multiple}\r\n          value={this.value}\r\n          onInput={e => this.textChanged.emit((e.target as HTMLInputElement).value)}\r\n          onBlur={this.handleBlur.bind(this)}\r\n          onFocus={e => this.inputFocus.emit(e)}\r\n        />\r\n\r\n        <p slot=\"tooltip-trigger\" title={this.tooltip} class=\"placeholder\" style={{ '--label-background': this.labelBackground }}>\r\n          {this.label}\r\n        </p>\r\n        {this.rightIcon && (\r\n          <label htmlFor={this.inputId} class=\"right-icon\">\r\n            <slot name=\"right-icon\"></slot>\r\n          </label>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}