{"file":"payment.service-3c37bbce.js","mappings":";;;;MAca,cAAc;IAClB,MAAM,UAAU,CAAC,OAAgB,EAAE,QAAgB;QACxD,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAMA,WAAK,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,OAAO,kCAAO,OAAO,KAAE,QAAQ,GAAE,EAAE,CAAC,CAAC;YACxF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACpC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;KACF;IAEM,MAAM,aAAa,CAAC,EAAU;QACnC,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAMA,WAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YAC7D,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACpC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;KACF;IACM,MAAM,+BAA+B,CAAC,MAAoD;QAC/F,IAAI;YACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAMA,WAAK,CAAC,IAAI,CAAC,qCAAqC,EAAE,MAAM,CAAC,CAAC;YACjF,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;gBAC5B,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;aACpC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SACxB;KACF;;;;;","names":["axios"],"sources":["src/services/payment.service.ts"],"sourcesContent":["import axios from 'axios';\nimport { Payment } from '@/components/ir-booking-details/types';\nexport interface IPaymentAction {\n  amount: number;\n  currency: {\n    code: string;\n    id: number;\n    symbol: string;\n  };\n  due_on: string;\n  reason: string;\n  pay_type_code: string;\n  type: 'OVERDUE' | 'FUTURE';\n}\nexport class PaymentService {\n  public async AddPayment(payment: Payment, book_nbr: string): Promise<any> {\n    try {\n      const { data } = await axios.post(`/Do_Payment`, { payment: { ...payment, book_nbr } });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n\n  public async CancelPayment(id: number): Promise<any> {\n    try {\n      const { data } = await axios.post(`/Cancel_Payment`, { id });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async GetExposedCancellationDueAmount(params: { booking_nbr: string; currency_id: number }): Promise<IPaymentAction[]> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Cancelation_Due_Amount`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n}\n"],"version":3}