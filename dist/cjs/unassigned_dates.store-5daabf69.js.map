{"file":"unassigned_dates.store-5daabf69.js","mappings":";;;;AAgBA,MAAM,YAAY,GAA0B;IAC1C,gBAAgB,EAAE,EAAE;CACrB,CAAC;IACS,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,2BAA2B,EAAE,GAAGA,iBAAW,CAAwB,YAAY,EAAE;SAEjH,kBAAkB,CAAC,IAAqB;IACtD,gBAAgB,CAAC,gBAAgB,mCAAQ,gBAAgB,CAAC,gBAAgB,GAAK,IAAI,CAAE,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AAwBxF,CAAC;SACe,kBAAkB;IAChC,OAAO,gBAAgB,CAAC,gBAAgB,CAAC;AAC3C,CAAC;SACe,qBAAqB,CAAC,SAAiB,EAAE,OAAe;IACtE,MAAM,aAAa,GAAG,sBAAsB,CAAC,SAAS,CAAC,CAAC;IACxD,MAAM,WAAW,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACpD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,GAAG;QACxD,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,aAAa,IAAI,YAAY,IAAI,YAAY,IAAI,WAAW,EAAE;YAChE,OAAO,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;SAC/C;KACF,CAAC,CAAC;AACL,CAAC;AACD,SAAS,sBAAsB,CAAC,OAAe;IAC7C,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/B,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1B,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;AACxB;;;;;;;","names":["createStore"],"sources":["src/stores/unassigned_dates.store.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\n\ntype EventCategories = {};\n\ntype EventInfo = {\n  categories: EventCategories;\n  dateStr: string;\n};\n\ntype UnassignedDates = {\n  [timestamp: string]: EventInfo;\n};\ninterface IUnassignedDatesStore {\n  unassigned_dates: UnassignedDates;\n}\n\nconst initialState: IUnassignedDatesStore = {\n  unassigned_dates: {},\n};\nexport let { state: unassigned_dates, onChange: handleUnAssignedDatesChange } = createStore<IUnassignedDatesStore>(initialState);\n\nexport function addUnassignedDates(data: UnassignedDates) {\n  unassigned_dates.unassigned_dates = { ...unassigned_dates.unassigned_dates, ...data };\n  /*\n   try {\n      //console.log(\"called\")\n      let categorisedRooms = {};\n      const result = await this.toBeAssignedService.getUnassignedRooms(\n        this.propertyid,\n        dateToFormattedString(new Date(+key)),\n        calendarData.roomsInfo,\n        calendarData.formattedLegendData,\n      );\n      result.forEach(room => {\n        if (!categorisedRooms.hasOwnProperty(room.RT_ID)) {\n          categorisedRooms[room.RT_ID] = [room];\n        } else {\n          categorisedRooms[room.RT_ID].push(room);\n        }\n      });\n      this.unassignedDates[key].categories = categorisedRooms;\n    } catch (error) {\n      //  toastr.error(error);\n    }\n  */\n  // console.log(unassigned_dates.unassigned_dates);\n}\nexport function getUnassignedDates() {\n  return unassigned_dates.unassigned_dates;\n}\nexport function removeUnassignedDates(from_date: string, to_date: string) {\n  const fromTimestamp = convertToDateTimestamp(from_date);\n  const toTimestamp = convertToDateTimestamp(to_date);\n  Object.keys(unassigned_dates.unassigned_dates).forEach(key => {\n    const keyTimestamp = parseInt(key);\n    if (fromTimestamp <= keyTimestamp && keyTimestamp <= toTimestamp) {\n      delete unassigned_dates.unassigned_dates[key];\n    }\n  });\n}\nfunction convertToDateTimestamp(dateStr: string) {\n  const date = new Date(dateStr);\n  date.setHours(0, 0, 0, 0);\n  return date.getTime();\n}\n\nexport default unassigned_dates;\n"],"version":3}