{"file":"channel.store-65161dac.js","mappings":"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","names":["createStore"],"sources":["src/stores/channel.store.ts"],"sourcesContent":["import { IChannel, IExposedChannel, IMap } from '@/models/calendarData';\nimport { createStore } from '@stencil/store';\nexport interface IChannelSettings {\n  hotel_id: string;\n  hotel_title: string;\n}\nexport interface IChannelStore {\n  channels: IExposedChannel[];\n  connected_channels: IChannel[];\n  selectedChannel: IExposedChannel | null;\n  mappedChannels: IMap[];\n  isConnectedToChannel: boolean;\n  channel_settings: IChannelSettings | null;\n  property_id: number | null;\n  channel_id: number;\n  is_active: boolean;\n}\nconst initialState: IChannelStore = {\n  channels: [],\n  selectedChannel: null,\n  mappedChannels: [],\n  connected_channels: [],\n  isConnectedToChannel: false,\n  channel_settings: null,\n  property_id: null,\n  channel_id: -1,\n  is_active: false,\n};\nexport const { state: channels_data, onChange: onChannelChange, dispose } = createStore<IChannelStore>(initialState);\nexport function setChannelIdAndActiveState(id: number, is_active: boolean) {\n  channels_data.channel_id = id;\n  channels_data.is_active = is_active;\n}\nexport function selectChannel(channel_id: string) {\n  if (channel_id === '') {\n    channels_data.selectedChannel = null;\n    return;\n  }\n  const selectedChannel = channels_data.channels.find(c => c.id.toString() === channel_id);\n  if (selectedChannel) {\n    channels_data.selectedChannel = selectedChannel;\n  } else {\n    channels_data.selectedChannel = {\n      id: channel_id,\n      name: '',\n      properties: [],\n    };\n  }\n  setMappedChannel();\n}\nexport function updateChannelSettings(key: keyof IChannelSettings, value: string) {\n  if (!channels_data.channel_settings) {\n    channels_data.channel_settings = {\n      hotel_id: '',\n      hotel_title: '',\n    };\n  }\n  channels_data.channel_settings[key] = value;\n}\nexport function setMappedChannel() {\n  let selectedChannelMap = channels_data.connected_channels.find(c => c.channel.id.toString() === channels_data.selectedChannel.id.toString());\n  if (!selectedChannelMap) {\n    channels_data.mappedChannels = [];\n    return;\n  }\n  channels_data.mappedChannels = [...selectedChannelMap.map];\n}\nexport function resetStore() {\n  channels_data.selectedChannel = null;\n  channels_data.mappedChannels = [];\n  channels_data.isConnectedToChannel = false;\n  channels_data.channel_settings = null;\n}\nexport function addMapping(ir_id: string, fr_id: string, isRoomType: boolean) {\n  channels_data.mappedChannels.push({\n    channel_id: fr_id,\n    ir_id,\n    type: isRoomType ? 'room_type' : 'rate_plan',\n  });\n}\nexport function testConnection() {\n  // const hotelConnection = channels_data.selectedChannel.properties.find(property => property.id === 'd09e6374-1ebf-45e0-a130-64c8c9930987');\n  const hotelConnection = channels_data.selectedChannel.properties.find(property => property.id === channels_data.channel_settings.hotel_id);\n  if (!hotelConnection) {\n    if (channels_data.isConnectedToChannel) {\n      channels_data.isConnectedToChannel = false;\n    }\n    return false;\n  }\n  channels_data.selectedChannel.property = hotelConnection;\n  if (channels_data.mappedChannels.length === 0) {\n    channels_data.mappedChannels.push({ ir_id: (channels_data.property_id ?? -1).toString(), channel_id: channels_data.channel_settings.hotel_id, type: 'property' });\n  }\n  channels_data.isConnectedToChannel = true;\n  return true;\n}\n\nexport function saveChannel() {\n  console.log(channels_data.channel_settings, channels_data.mappedChannels, channels_data.selectedChannel);\n}\nexport default channels_data;\n"],"version":3}