{"file":"Token-e80634a3.js","mappings":";;;;AAEA,MAAM,IAAI;IAMR;QAHQ,YAAO,GAAG,mCAAmC,CAAC;QAIpD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;KACF;IACM,MAAM,IAAI;QACfA,WAAK,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC;QACtCA,WAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACtC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAMA,WAAK,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAC9D,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACzC;IACM,SAAS,CAAC,QAA4C;QAC3D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACjC;IACM,WAAW,CAAC,QAA4C;QAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,KAAK,QAAQ,CAAC,CAAC;KACrE;IACM,kBAAkB,CAAC,KAAc;QACtC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;KAC/B;IAEO,OAAO,iBAAiB,CAAC,eAAwB;QACvD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;KACjE;IACM,eAAe;QACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC;KAC9B;;AAjCc,eAAU,GAAG,KAAH,CAAS;AACnB,qBAAgB,GAAG,KAAH,CAAS;AAEzB,gBAAW,GAA8C,EAA9C;;ACN5B;AAGA,MAAM,KAAM,SAAQ,IAAI;;IAKtB;QACE,KAAK,EAAE,CAAC;;;;;;;;;;;;KAYT;IAEM,QAAQ,CAAC,KAAa;QAC3B,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;KACrB;IACM,eAAe;QACpB,OAAO,KAAK,CAAC,eAAe,EAAE,CAAC;KAChC;IACM,QAAQ;QACb,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YAChB,MAAM,IAAI,iBAAiB,EAAE,CAAC;SAC/B;QACD,OAAO,KAAK,CAAC,KAAK,CAAC;KACpB;;AA9Bc,WAAK,GAAkB,EAAE,CAAC;MAiC9B,iBAAkB,SAAQ,KAAK;IAC1C,YAAY,OAAO,GAAG,iBAAiB;QACrC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;KACjC;;;;;;","names":["axios"],"sources":["src/models/Auth.ts","src/models/Token.ts"],"sourcesContent":["import axios from 'axios';\n\nclass Auth {\n  private static isAuthUsed = false;\n  private static _isAuthenticated = false;\n  private baseUrl = 'https://gateway.igloorooms.com/IR';\n  private static subscribers: Array<(isAuthenticated: boolean) => void> = [];\n\n  constructor() {\n    if (!Auth.isAuthUsed) {\n      this.init();\n    }\n  }\n  public async init() {\n    axios.defaults.withCredentials = true;\n    axios.defaults.baseURL = this.baseUrl;\n    Auth.isAuthUsed = true;\n    const { data } = await axios.post('/Is_Already_Athenticated');\n    this.setIsAuthenticated(data.My_Result);\n  }\n  public subscribe(callback: (isAuthenticated: boolean) => void) {\n    Auth.subscribers.push(callback);\n  }\n  public unsubscribe(callback: (isAuthenticated: boolean) => void) {\n    Auth.subscribers = Auth.subscribers.filter(sub => sub !== callback);\n  }\n  public setIsAuthenticated(value: boolean) {\n    Auth._isAuthenticated = value;\n    Auth.notifySubscribers(value);\n  }\n\n  private static notifySubscribers(isAuthenticated: boolean) {\n    Auth.subscribers.forEach(callback => callback(isAuthenticated));\n  }\n  public isAuthenticated() {\n    return Auth._isAuthenticated;\n  }\n}\n\nexport default Auth;\n","// import axios from 'axios';\r\nimport Auth from './Auth';\r\n\r\nclass Token extends Auth {\r\n  private static token: string | null = '';\r\n\r\n  // private static isInterceptorAdded = false;\r\n\r\n  constructor() {\r\n    super();\r\n    // if (!Token.isInterceptorAdded) {\r\n    //   // axios.defaults.withCredentials = true;\r\n    //   axios.interceptors.request.use(config => {\r\n    //     if (Token.token) {\r\n    //       config.params = config.params || {};\r\n    //       config.params.Ticket = Token.token;\r\n    //     }\r\n    //     return config;\r\n    //   });\r\n    //   Token.isInterceptorAdded = true;\r\n    // }\r\n  }\r\n\r\n  public setToken(token: string) {\r\n    Token.token = token;\r\n  }\r\n  public isAuthenticated() {\r\n    return super.isAuthenticated();\r\n  }\r\n  public getToken() {\r\n    if (!Token.token) {\r\n      throw new MissingTokenError();\r\n    }\r\n    return Token.token;\r\n  }\r\n}\r\nexport default Token;\r\nexport class MissingTokenError extends Error {\r\n  constructor(message = 'Missing token!!') {\r\n    super(message);\r\n    this.name = 'MissingTokenError';\r\n  }\r\n}\r\n"],"version":3}