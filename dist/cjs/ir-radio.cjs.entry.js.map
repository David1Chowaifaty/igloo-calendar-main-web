{"file":"ir-radio.entry.cjs.js","mappings":";;;;;;;AAAA,MAAM,UAAU,GAAG,+BAA+B,CAAC;AACnD,sBAAe,UAAU;;MCOZ,OAAO;IALpB;;;;;;QASU,YAAO,GAAY,KAAK,CAAC;;;;QAUzB,eAAU,GAAGA,KAAE,EAAE,CAAC;;;;QAyBjB,mBAAc,GAAG,KAAK,CAAC;KA0DjC;IAjDC,iBAAiB;QACf,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC;KACpC;IACD,gBAAgB;QACd,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;SAC1E;KACF;;;;IAKD,mBAAmB,CAAC,QAAiB;QACnC,IAAI,QAAQ,KAAK,IAAI,CAAC,cAAc,EAAE;YACpC,OAAO;SACR;QACD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC;KACpC;;;;IAKO,iBAAiB;QACvB,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;QAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;SACjF;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC5C;IACD,MAAM;QACJ,QACEC,kEAAK,KAAK,EAAC,aAAa,IACtBA,oEAAO,KAAK,EAAC,iCAAiC,IAC5CA,qEAAO,IAAI,CAAC,KAAK,CAAQ,EACzBA,oEACE,IAAI,EAAC,OAAO,EACZ,KAAK,EAAC,KAAK,EACX,KAAK,EAAC,EAAE,EACR,QAAQ,EAAE;gBACR,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B,EACD,OAAO,EAAE,IAAI,CAAC,cAAc,EAC5B,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,GAC/B,EACFA,mEAAM,KAAK,EAAC,WAAW,GAAQ,CACzB,CACJ,EACN;KACH;;;;;;;;;","names":["v4","h"],"sources":["src/components/ui/ir-radio/ir-radio.css?tag=ir-radio&encapsulation=scoped","src/components/ui/ir-radio/ir-radio.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Event, EventEmitter, Prop, State, h, Watch } from '@stencil/core';\nimport { v4 } from 'uuid';\n\n@Component({\n  tag: 'ir-radio',\n  styleUrl: 'ir-radio.css',\n  scoped: true,\n})\nexport class IrRadio {\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Prop() checked: boolean = false;\n\n  /**\n   * The label text associated with the checkbox.\n   */\n  @Prop() label: string;\n\n  /**\n   * The unique ID of the checkbox element.\n   */\n  @Prop() radioBoxId = v4();\n\n  /**\n   * The name attribute of the checkbox, used for form submission.\n   */\n  @Prop() name: string;\n\n  /**\n   * Whether the checkbox is in an indeterminate state.\n   */\n  @Prop() indeterminate: boolean;\n\n  /**\n   * Disables the checkbox when true.\n   */\n  @Prop() disabled: boolean;\n\n  /**\n   * CSS class applied to the label element.\n   */\n  @Prop() labelClass: string;\n\n  /**\n   * Internal state tracking whether the checkbox is currently checked.\n   */\n  @State() currentChecked = false;\n\n  /**\n   * Emitted when the checkbox's checked state changes.\n   */\n  @Event() checkChange: EventEmitter<boolean>;\n\n  private radioRef: HTMLInputElement;\n\n  componentWillLoad() {\n    this.currentChecked = this.checked;\n  }\n  componentDidLoad() {\n    if (this.radioRef) {\n      this.radioRef.setAttribute('aria-checked', JSON.stringify(this.checked));\n    }\n  }\n  /**\n   * Watcher for the `checked` property. Syncs internal state with external prop changes.\n   */\n  @Watch('checked')\n  handleCheckedChange(newValue: boolean) {\n    if (newValue === this.currentChecked) {\n      return;\n    }\n    this.currentChecked = this.checked;\n  }\n\n  /**\n   * Handles user interaction with the checkbox and updates its state.\n   */\n  private handleCheckChange() {\n    this.currentChecked = !this.currentChecked;\n    if (this.radioRef) {\n      this.radioRef.setAttribute('aria-checked', JSON.stringify(this.currentChecked));\n    }\n    this.checkChange.emit(this.currentChecked);\n  }\n  render() {\n    return (\n      <div class=\"input-group\">\n        <label class=\"check-container radio-container\">\n          <span>{this.label}</span>\n          <input\n            type=\"radio\"\n            value=\"000\"\n            title=\"\"\n            onChange={() => {\n              this.handleCheckChange();\n            }}\n            checked={this.currentChecked}\n            ref={el => (this.radioRef = el)}\n          />\n          <span class=\"checkmark\"></span>\n        </label>\n      </div>\n    );\n  }\n}\n"],"version":3}