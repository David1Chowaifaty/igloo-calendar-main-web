{"file":"booking.service-b1d45257.js","mappings":"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","names":["createStore","axios","locales","moment","isBlockUnit","dateDifference","extras","convertDateToCustomFormat","convertDateToTime","calendar_data","dateToFormattedString"],"sources":["src/stores/booking.store.ts","src/utils/booking.ts","src/services/booking.service.ts"],"sourcesContent":["import { Booking, Guest } from '@/models/booking.dto';\r\nimport { TEventType } from '@/models/igl-book-property';\r\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation | null;\r\n  ratePlan: RatePlan;\r\n  guest: RatePlanGuest[] | null;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  is_amount_modified?: boolean;\r\n  view_mode: '002' | '001';\r\n  rp_amount: number;\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    is_bed_configuration_enabled: boolean;\r\n  };\r\n}\r\nexport interface RatePlanGuest {\r\n  first_name: string;\r\n  last_name: string;\r\n  unit: string | null;\r\n  bed_preference: string | null;\r\n  infant_nbr: number | null;\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface ISelectedVariation {\r\n  variation: Variation;\r\n  state: 'default' | 'modified';\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  infant_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n  agent_code?: string;\r\n}\r\nexport interface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  checkout_guest: Guest | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  event_type: { type: TEventType };\r\n  guest: RatePlanGuest;\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n  booking: Booking;\r\n  resetBooking: boolean;\r\n  isInFreeCancelationZone: boolean;\r\n  fictus_booking_nbr: { nbr: string | null };\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  checkout_guest: null,\r\n  guest: null,\r\n  tax_statement: null,\r\n  roomTypes: [],\r\n  enableBooking: false,\r\n  resetBooking: false,\r\n  ratePlanSelections: {},\r\n  isInFreeCancelationZone: false,\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n    infant_nbr: 0,\r\n  },\r\n  booking: null,\r\n  fictus_booking_nbr: null,\r\n  event_type: { type: 'PLUS_BOOKING' },\r\n};\r\n\r\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\r\nexport function resetBookingStore() {\r\n  reset();\r\n}\r\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\r\n  if (!variations) {\r\n    return null;\r\n  }\r\n  if (!selected_variation || booking_store.resetBooking) {\r\n    return variations[0];\r\n  }\r\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\r\n}\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (!roomType.is_active) return;\r\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n    roomType.rateplans.forEach(ratePlan => {\r\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\r\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\r\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\r\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\r\n      ratePlanSelections[roomType.id][ratePlan.id] =\r\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\r\n          ? {\r\n              ...currentRatePlanSelection,\r\n              ratePlan,\r\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\r\n              visibleInventory: roomType.inventory,\r\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\r\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\r\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\r\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\r\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\r\n              roomtype: {\r\n                ...currentRatePlanSelection.roomtype,\r\n              },\r\n            }\r\n          : {\r\n              reserved: 0,\r\n              rp_amount: 0,\r\n              view_mode: '001',\r\n              guest: null,\r\n              visibleInventory: roomType.inventory,\r\n              selected_variation: ratePlan?.variations[0] ?? null,\r\n              ratePlan,\r\n              guestName: [],\r\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n              roomtype: {\r\n                ...roomType,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n              },\r\n              checkoutVariations: [],\r\n              checkoutBedSelection: [],\r\n              checkoutSmokingSelection: [],\r\n            };\r\n    });\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n  booking_store.resetBooking = false;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  console.log(ratePlanId, roomTypeId, params);\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n  console.log(booking_store.ratePlanSelections);\r\n}\r\n\r\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  let newGuest = Array.from({ length: rooms }, () => ({ first_name: '', last_name: '', unit: null, bed_preference: null, infant_nbr: null }));\r\n  console.log('guest', guest);\r\n  if (guest) {\r\n    newGuest = guest;\r\n  }\r\n  console.log('newGuest', newGuest);\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    console.log('new guest', newGuest);\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      view_mode: '001',\r\n      rp_amount: 0,\r\n      guest: newGuest,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        reserved: rooms,\r\n        checkoutVariations: [],\r\n        guest: newGuest,\r\n      },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return {\r\n      reserved: 0,\r\n      guest: null,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan: null,\r\n      guestName: [],\r\n      is_bed_configuration_enabled: false,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      rp_amount: 0,\r\n      view_mode: '001',\r\n      roomtype: null,\r\n    };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\r\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\r\n      if (isPrePayment) {\r\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\r\n      }\r\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\r\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\r\n      }, 0);\r\n    } else if (ratePlan.reserved > 0) {\r\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\r\n      return ratePlan.reserved * (amount ?? 0);\r\n    }\r\n    return 0;\r\n  };\r\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\r\n    Object.values(value).forEach(ratePlan => {\r\n      totalAmount += calculateCost(ratePlan);\r\n      prePaymentAmount += calculateCost(ratePlan, true);\r\n    });\r\n  });\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport function validateBooking() {\r\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\r\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\r\n  );\r\n}\r\nexport function calculateTotalRooms() {\r\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan) => {\r\n        if (ratePlan.reserved === 0) {\r\n          return innerTotal;\r\n        }\r\n        return innerTotal + ratePlan.reserved;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n}\r\nexport default booking_store;\r\n","import { Extras, Room } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: cell.room?.roomtype?.id,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n    ROOM_INFO: {\r\n      occupancy: cell.room.occupancy,\r\n      sharing_persons: cell.room.sharing_persons,\r\n      unit: cell.room.unit,\r\n      in_out: cell.room.in_out,\r\n    },\r\n    BASE_STATUS_CODE: cell.booking.status?.code,\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\r\n  const { in_out, status_code, from_date, to_date } = params;\r\n  if (calendar_data.checkin_enabled) {\r\n    if (in_out?.code === '001') {\r\n      return bookingStatus['000'];\r\n    } else if (in_out?.code === '002') {\r\n      if (!calendar_data.is_automatic_check_in_out) {\r\n        const now = moment();\r\n        const toDate = moment(to_date, 'YYYY-MM-DD');\r\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n        const isNowAfterOrSameAsHotelHour = compareTime(\r\n          now.toDate(),\r\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n        );\r\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\r\n          return bookingStatus['003'];\r\n        } else {\r\n          return bookingStatus['002'];\r\n        }\r\n      }\r\n    }\r\n    return bookingStatus[status_code || '001'];\r\n  } else {\r\n    const now = moment();\r\n    const toDate = moment(to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n    const isNowAfterOrSameAsHotelHour = compareTime(\r\n      now.toDate(),\r\n      createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n    );\r\n    if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[status_code || '001'];\r\n    }\r\n  }\r\n}\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: getRoomStatus({\r\n        in_out: room.in_out,\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n        status_code: data.status?.code,\r\n      }),\r\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n      PHONE: data.guest.mobile_without_prefix ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n      ROOM_INFO: {\r\n        occupancy: room.occupancy,\r\n        sharing_persons: room.sharing_persons,\r\n        unit: room.unit,\r\n        in_out: room.in_out,\r\n      },\r\n      BASE_STATUS_CODE: data.status?.code,\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\nexport function compareTime(date1: Date, date2: Date) {\r\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\r\n}\r\n/**\r\n * Creates a Date object for today at the specified hour in a given time zone.\r\n * The offset is the number of hours that the target time zone is ahead of UTC.\r\n *\r\n * For example, if offset = 3 and hour = 9, then the function returns a Date\r\n * which, when converted to the target time zone, represents 9:00.\r\n *\r\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\r\n * @param hour - The desired hour in the target time zone (0-23)\r\n * @returns Date object representing the target time (in UTC)\r\n */\r\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\r\n  const now = new Date();\r\n  const offsetMs = offset * 60 * 60 * 1000;\r\n  const targetTzDate = new Date(now.getTime() + offsetMs);\r\n  const year = targetTzDate.getUTCFullYear();\r\n  const month = targetTzDate.getUTCMonth();\r\n  const day = targetTzDate.getUTCDate();\r\n  const utcHour = hour - offset;\r\n  return new Date(Date.UTC(year, month, day, utcHour));\r\n}\r\n","import { HandleExposedRoomGuestsRequest } from './../models/booking.dto';\r\nimport { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString, extras } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, ExtraService, Guest, IBookingPickupInfo, IPmsLog, RoomInOut } from '../models/booking.dto';\r\nimport booking_store from '@/stores/booking.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\nexport interface IBookingParams {\r\n  bookedByInfoData: any;\r\n  check_in: boolean;\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  guestData;\r\n  totalNights: number;\r\n  source: { code: string; description: string };\r\n  propertyid: number;\r\n  rooms: any[];\r\n  currency: { id: number; code: string };\r\n  pickup_info: IBookingPickupInfo | null;\r\n  bookingNumber?: string;\r\n  defaultGuest?: any;\r\n  arrivalTime?: any;\r\n  pr_id?: number;\r\n  identifier?: string;\r\n  extras: { key: string; value: string }[] | null;\r\n}\r\nexport interface ExposedBookingEvent {\r\n  date: string;\r\n  hour: number;\r\n  id: number;\r\n  minute: number;\r\n  second: number;\r\n  user: string;\r\n  type: string;\r\n}\r\nexport class BookingService {\r\n  public async handleExposedRoomInOut(props: { booking_nbr: string; room_identifier: string; status: RoomInOut['code'] }) {\r\n    const { data } = await axios.post(`/Handle_Exposed_Room_InOut`, props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Calendar`, {\r\n        propertyid,\r\n        from_date,\r\n        to_date,\r\n        extras,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const months: MonthType[] = data.My_Result.months;\r\n      const customMonths: { daysCount: number; monthName: string }[] = [];\r\n      const myBooking = await getMyBookings(months);\r\n      const days: DayData[] = months\r\n        .map(month => {\r\n          customMonths.push({\r\n            daysCount: month.days.length,\r\n            monthName: month.description,\r\n          });\r\n          return month.days.map(day => ({\r\n            day: convertDateToCustomFormat(day.description, month.description),\r\n            currentDate: convertDateToTime(day.description, month.description),\r\n            dayDisplayName: day.description,\r\n            rate: day.room_types,\r\n            unassigned_units_nbr: day.unassigned_units_nbr,\r\n            occupancy: day.occupancy,\r\n          }));\r\n        })\r\n        .flat();\r\n\r\n      return Promise.resolve({\r\n        ExceptionCode: null,\r\n        ExceptionMsg: '',\r\n        My_Params_Get_Rooming_Data: {\r\n          AC_ID: propertyid,\r\n          FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n          TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n        },\r\n        days,\r\n        months: customMonths,\r\n        myBookings: myBooking,\r\n        defaultMonths: months,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async handleExposedRoomGuests(props: HandleExposedRoomGuestsRequest) {\r\n    const { data } = await axios.post('/Handle_Exposed_Room_Guests', props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Guest`, { email });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async changeExposedBookingStatus(props: { book_nbr: string; status: string }) {\r\n    try {\r\n      const { data } = await axios.post(`/Change_Exposed_Booking_Status`, props);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_PMS_Logs`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBookingEvents(booking_nbr: string | number): Promise<ExposedBookingEvent[] | null> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking_Events`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(props: {\r\n    from_date: string;\r\n    to_date: string;\r\n    propertyid: number;\r\n    adultChildCount: { adult: number; child: number };\r\n    language: string;\r\n    room_type_ids: number[];\r\n    room_type_ids_to_update?: number[];\r\n    rate_plan_ids?: number[];\r\n    currency: { id: number; code: string };\r\n    is_in_agent_mode?: boolean;\r\n    agent_id?: string | number;\r\n  }): Promise<BookingDetails> {\r\n    try {\r\n      const { adultChildCount, currency, ...rest } = props;\r\n      const { data } = await axios.post(`/Check_Availability`, {\r\n        ...rest,\r\n        adult_nbr: adultChildCount.adult,\r\n        child_nbr: adultChildCount.child,\r\n        currency_ref: currency.code,\r\n        skip_getting_assignable_units: !calendar_data.is_frontdesk_enabled,\r\n        is_backend: true,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const results = this.modifyRateplans(this.sortRoomTypes(data['My_Result'], { adult_nbr: Number(adultChildCount.adult), child_nbr: Number(adultChildCount.child) }));\r\n      booking_store.roomTypes = [...results];\r\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\r\n      return results;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private sortRoomTypes(roomTypes, userCriteria: { adult_nbr: number; child_nbr: number }) {\r\n    return roomTypes.sort((a, b) => {\r\n      // Priority to available rooms\r\n      if (a.is_available_to_book && !b.is_available_to_book) return -1;\r\n      if (!a.is_available_to_book && b.is_available_to_book) return 1;\r\n\r\n      // Check for variations where is_calculated is true and amount is 0 or null\r\n      const zeroCalculatedA = a.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n      const zeroCalculatedB = b.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n\r\n      // Prioritize these types to be before inventory 0 but after all available ones\r\n      if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n      if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n      // Check for exact matching variations based on user criteria\r\n      const matchA = a.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      const matchB = b.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n\r\n      if (matchA && !matchB) return -1;\r\n      if (!matchA && matchB) return 1;\r\n\r\n      // Sort by the highest variation amount\r\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n\r\n      if (maxVariationA < maxVariationB) return -1;\r\n      if (maxVariationA > maxVariationB) return 1;\r\n\r\n      return 0;\r\n    });\r\n  }\r\n  private modifyRateplans(roomTypes) {\r\n    return roomTypes?.map(rt => ({ ...rt, rateplans: rt.rateplans?.map(rp => ({ ...rp, variations: this.sortVariations(rp?.variations ?? []) })) }));\r\n  }\r\n  private sortVariations(variations) {\r\n    return variations.sort((a, b) => {\r\n      if (a.adult_nbr !== b.adult_nbr) {\r\n        return b.adult_nbr - a.adult_nbr;\r\n      }\r\n      return b.child_nbr - a.child_nbr;\r\n    });\r\n  }\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Countries`, {\r\n        language,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getSetupEntriesByTableName(TBL_NAME: string) {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME`, {\r\n      TBL_NAME,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res: IEntries[] = data.My_Result;\r\n    return res;\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n        TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const res: any[] = data.My_Result;\r\n      return {\r\n        arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n        ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n        bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doBookingExtraService({ booking_nbr, service, is_remove }: { service: ExtraService; booking_nbr: number | string; is_remove: boolean }) {\r\n    const { data } = await axios.post(`/Do_Booking_Extra_Service`, { ...service, booking_nbr, is_remove });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Country_By_IP`, {\r\n        IP: '',\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const { data } = await axios.post(`/Block_Exposed_Unit`, params);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      console.log(data);\r\n      return data['My_Params_Block_Exposed_Unit'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const { data } = await axios.post(`/GET_EXPOSED_GUEST`, {\r\n        email,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string, withExtras: boolean = true): Promise<Booking> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n        booking_nbr,\r\n        language,\r\n        extras: withExtras ? extras : null,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Guests`, {\r\n        email,\r\n        property_id,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Bookings`, {\r\n        booking_nbr,\r\n        property_id,\r\n        from_date,\r\n        to_date,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Get_PCI_Card_Info_URL`, {\r\n        BOOK_NBR,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doReservation(body: any) {\r\n    const { data } = await axios.post(`/DoReservation`, { ...body, extras: body.extras ? body.extras : extras });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    console.log(data['My_Result']);\r\n    return data['My_Result'];\r\n  }\r\n\r\n  public async bookUser({\r\n    bookedByInfoData,\r\n    check_in,\r\n    currency,\r\n    extras = null,\r\n    fromDate,\r\n    guestData,\r\n    pickup_info,\r\n    propertyid,\r\n    rooms,\r\n    source,\r\n    toDate,\r\n    totalNights,\r\n    arrivalTime,\r\n    bookingNumber,\r\n    defaultGuest,\r\n    identifier,\r\n    pr_id,\r\n  }: IBookingParams) {\r\n    try {\r\n      const fromDateStr = dateToFormattedString(fromDate);\r\n      const toDateStr = dateToFormattedString(toDate);\r\n      let guest: any = {\r\n        email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n        first_name: bookedByInfoData.firstName,\r\n        last_name: bookedByInfoData.lastName,\r\n        country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n        city: null,\r\n        mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n        phone_prefix: null,\r\n        address: '',\r\n        dob: null,\r\n        subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n        cci: bookedByInfoData.cardNumber\r\n          ? {\r\n              nbr: bookedByInfoData.cardNumber,\r\n              holder_name: bookedByInfoData.cardHolderName,\r\n              expiry_month: bookedByInfoData.expiryMonth,\r\n              expiry_year: bookedByInfoData.expiryYear,\r\n            }\r\n          : null,\r\n      };\r\n      if (defaultGuest) {\r\n        guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\r\n      }\r\n      if (bookedByInfoData.id) {\r\n        guest = { ...guest, id: bookedByInfoData.id };\r\n      }\r\n      const body = {\r\n        assign_units: true,\r\n        check_in,\r\n        is_pms: true,\r\n        is_direct: true,\r\n        is_in_loyalty_mode: false,\r\n        promo_key: null,\r\n        extras,\r\n        booking: {\r\n          booking_nbr: bookingNumber || '',\r\n          from_date: fromDateStr,\r\n          to_date: toDateStr,\r\n          remark: bookedByInfoData.message || null,\r\n          property: {\r\n            id: propertyid,\r\n          },\r\n          source,\r\n          currency,\r\n          arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n          guest,\r\n          rooms: [\r\n            ...guestData.map(data => ({\r\n              identifier: identifier || null,\r\n              roomtype: {\r\n                id: data.roomCategoryId,\r\n                name: data.roomCategoryName,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n                inventory: data.inventory,\r\n                rate: data.rate / totalNights,\r\n              },\r\n              rateplan: {\r\n                id: data.ratePlanId,\r\n                name: data.ratePlanName,\r\n                rate_restrictions: null,\r\n                variations: null,\r\n                cancelation: data.cancelation,\r\n                guarantee: data.guarantee,\r\n              },\r\n              unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n              occupancy: {\r\n                adult_nbr: data.adultCount,\r\n                children_nbr: data.childrenCount,\r\n                infant_nbr: null,\r\n              },\r\n              bed_preference: data.preference,\r\n              from_date: fromDateStr,\r\n              to_date: toDateStr,\r\n              notes: null,\r\n              days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n              guest: {\r\n                email: null,\r\n                first_name: data.guestName,\r\n                last_name: null,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n              },\r\n            })),\r\n            ...rooms,\r\n          ],\r\n        },\r\n        pickup_info,\r\n      };\r\n      console.log('book user payload', body);\r\n      // const result = await this.doReservation(body);\r\n      // return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"version":3}