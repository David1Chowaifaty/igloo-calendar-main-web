{"file":"utils.js","mappings":"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","names":["moment","z","calendarData"],"sources":["src/stores/calendar-dates.store.ts","src/utils/booking.ts","src/utils/utils.ts"],"sourcesContent":["import { DayData } from '@/models/DayType';\r\nimport { createStore } from '@stencil/store';\r\nexport interface ICalendarDates {\r\n  days: DayData[];\r\n  months: { daysCount: number; monthName: string }[];\r\n  fromDate: string;\r\n  toDate: string;\r\n}\r\nconst initialState: ICalendarDates = {\r\n  days: [],\r\n  months: [],\r\n  fromDate: '',\r\n  toDate: '',\r\n};\r\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\r\n\r\nexport default calendar_dates;\r\n","import { Extras, Room } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: cell.room?.roomtype?.id,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n    ROOM_INFO: {\r\n      occupancy: cell.room.occupancy,\r\n      sharing_persons: cell.room.sharing_persons,\r\n      unit: cell.room.unit,\r\n      in_out: cell.room.in_out,\r\n    },\r\n    BASE_STATUS_CODE: cell.booking.status?.code,\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\r\n  const { in_out, status_code, from_date, to_date } = params;\r\n  if (calendar_data.checkin_enabled) {\r\n    if (in_out?.code === '001') {\r\n      return bookingStatus['000'];\r\n    } else if (in_out?.code === '002') {\r\n      if (!calendar_data.is_automatic_check_in_out) {\r\n        const now = moment();\r\n        const toDate = moment(to_date, 'YYYY-MM-DD');\r\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n        const isNowAfterOrSameAsHotelHour = compareTime(\r\n          now.toDate(),\r\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n        );\r\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\r\n          return bookingStatus['003'];\r\n        } else {\r\n          return bookingStatus['002'];\r\n        }\r\n      }\r\n    }\r\n    return bookingStatus[status_code || '001'];\r\n  } else {\r\n    const now = moment();\r\n    const toDate = moment(to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n    const isNowAfterOrSameAsHotelHour = compareTime(\r\n      now.toDate(),\r\n      createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n    );\r\n    if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[status_code || '001'];\r\n    }\r\n  }\r\n}\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: getRoomStatus({\r\n        in_out: room.in_out,\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n        status_code: data.status?.code,\r\n      }),\r\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n      PHONE: data.guest.mobile_without_prefix ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n      ROOM_INFO: {\r\n        occupancy: room.occupancy,\r\n        sharing_persons: room.sharing_persons,\r\n        unit: room.unit,\r\n        in_out: room.in_out,\r\n      },\r\n      BASE_STATUS_CODE: data.status?.code,\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\nexport function compareTime(date1: Date, date2: Date) {\r\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\r\n}\r\n/**\r\n * Creates a Date object for today at the specified hour in a given time zone.\r\n * The offset is the number of hours that the target time zone is ahead of UTC.\r\n *\r\n * For example, if offset = 3 and hour = 9, then the function returns a Date\r\n * which, when converted to the target time zone, represents 9:00.\r\n *\r\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\r\n * @param hour - The desired hour in the target time zone (0-23)\r\n * @returns Date object representing the target time (in UTC)\r\n */\r\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\r\n  const now = new Date();\r\n  const offsetMs = offset * 60 * 60 * 1000;\r\n  const targetTzDate = new Date(now.getTime() + offsetMs);\r\n  const year = targetTzDate.getUTCFullYear();\r\n  const month = targetTzDate.getUTCMonth();\r\n  const day = targetTzDate.getUTCDate();\r\n  const utcHour = hour - offset;\r\n  return new Date(Date.UTC(year, month, day, utcHour));\r\n}\r\n","import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\nimport { z } from 'zod';\r\nimport { compareTime, createDateWithOffsetAndHour } from '@/utils/booking';\r\nimport calendarData from '@/stores/calendar-data';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\nexport function renderTime(time: number) {\r\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\r\n}\r\nexport function validateEmail(email: string) {\r\n  if (email === '') {\r\n    return true;\r\n  }\r\n  const parsedEmailResults = z.string().email().safeParse(email);\r\n  return !parsedEmailResults.success;\r\n}\r\nexport function formatAmount(currency: string, amount: number) {\r\n  return currency + ' ' + amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n}\r\n\r\nexport const extras = [\r\n  {\r\n    key: 'private_note',\r\n    value: '',\r\n  },\r\n  {\r\n    key: 'is_backend',\r\n    value: true,\r\n  },\r\n  {\r\n    key: 'ERROR_EMAIL',\r\n    value: '',\r\n  },\r\n  {\r\n    key: 'agent_payment_mode',\r\n    value: '',\r\n  },\r\n  { key: 'payment_code', value: '' },\r\n];\r\n\r\nexport function manageAnchorSession(data: Record<string, unknown>, mode: 'add' | 'remove' = 'add') {\r\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\r\n  if (anchor) {\r\n    if (mode === 'add') {\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...anchor, ...data }));\r\n    } else if (mode === 'remove') {\r\n      const keys = Object.keys(data);\r\n      keys.forEach(key => {\r\n        if (key in anchor) {\r\n          delete anchor[key];\r\n        }\r\n      });\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify(anchor));\r\n    }\r\n  } else {\r\n    if (mode === 'add') {\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...data }));\r\n    }\r\n  }\r\n}\r\nexport function checkUserAuthState() {\r\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\r\n  if (anchor) {\r\n    return anchor.login || null;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport interface CheckInParams {\r\n  from_date: string;\r\n  to_date: string;\r\n  isCheckedIn?: boolean;\r\n}\r\n\r\n/**\r\n * Determines whether a booking is eligible for check-in.\r\n *\r\n * @param params - An object containing the booking event, calendar data, current check-in status, and a flag indicating if check-in or checkout is allowed.\r\n * @returns True if check-in is allowed; otherwise, false.\r\n */\r\nexport function canCheckIn({ from_date, to_date, isCheckedIn }: CheckInParams): boolean {\r\n  if (!calendarData.checkin_enabled || calendarData.is_automatic_check_in_out) {\r\n    return false;\r\n  }\r\n  if (isCheckedIn) {\r\n    return false;\r\n  }\r\n  const now = moment();\r\n  if (\r\n    (moment().isSameOrAfter(new Date(from_date), 'days') && moment().isBefore(new Date(to_date), 'days')) ||\r\n    (moment().isSame(new Date(to_date), 'days') &&\r\n      !compareTime(now.toDate(), createDateWithOffsetAndHour(calendarData.checkin_checkout_hours?.offset, calendarData.checkin_checkout_hours?.hour)))\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n"],"version":3}