{"file":"ir-textarea2.js","mappings":";;AAAA,MAAM,aAAa,GAAG,mGAAmG;;MCO5G,UAAU,iBAAAA,kBAAA,CAAA,MAAA,UAAA,SAAA,WAAA,CAAA;AALvB,IAAA,WAAA,GAAA;;;;AAMU,QAAA,IAAI,CAAA,IAAA,GAAG,CAAC;AACR,QAAA,IAAI,CAAA,IAAA,GAAG,CAAC;AACR,QAAA,IAAI,CAAA,IAAA,GAAG,EAAE;AACT,QAAA,IAAK,CAAA,KAAA,GAAG,SAAS;AACjB,QAAA,IAAW,CAAA,WAAA,GAAG,eAAe;AAC7B,QAAA,IAAK,CAAA,KAAA,GAAG,EAAE;AACV,QAAA,IAAS,CAAA,SAAA,GAAW,GAAG;AAEvB,QAAA,IAAO,CAAA,OAAA,GAA0B,SAAS;AAC1C,QAAA,IAAU,CAAA,UAAA,GAAgD,CAAC;AAI1D,QAAA,IAAK,CAAA,KAAA,GAAG,KAAK;AA6CvB;AAxCC,IAAA,uBAAuB,CAAC,QAAQ,EAAA;AAC9B,QAAA,IAAI,CAAC,KAAK,GAAG,QAAQ,KAAK,MAAM;;AAElC,IAAA,iBAAiB;AACjB,IAAA,oBAAoB;IACpB,MAAM,GAAA;AACJ,QAAA,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YAC9B,QACE,CAAA,CAAA,UAAA,EAAA,EAAU,KAAK,EAAC,aAAa,EAAA,EAC3B,CAAA,CAAA,KAAA,EAAA,EAAK,KAAK,EAAE,CAAA,wBAAA,EAA2B,IAAI,CAAC,UAAU,CAAA,iBAAA,CAAmB,EAAA,EACvE,CAAM,CAAA,MAAA,EAAA,EAAA,KAAK,EAAC,kCAAkC,EAAA,EAAE,IAAI,CAAC,KAAK,CAAQ,CAC9D,EACN,CACe,CAAA,UAAA,EAAA,EAAA,aAAA,EAAA,IAAI,CAAC,MAAM,EACxB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,CAAA,YAAA,CAAc,EACrB,KAAK,EAAI,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAE,MAAM,EAAK,EAAA,IAAI,CAAC,MAAM,CACvC,EAAA,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,EAAA,YAAA,EAChE,IAAI,CAAC,KAAK,EAAA,CACZ,CACH;;QAGf,QACE,CAAA,CAAA,KAAA,EAAA,EAAK,KAAK,EAAE,YAAY,EAAA,EACtB,CAAQ,CAAA,OAAA,EAAA,IAAA,EAAA,IAAI,CAAC,KAAK,CAAS,EAC3B,CAAA,CAAA,UAAA,EAAA,EAAA,aAAA,EACe,IAAI,CAAC,MAAM,EACxB,KAAK,EAAE,IAAI,CAAC,MAAM,EAClB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,CAAgB,aAAA,EAAA,IAAI,CAAC,iBAAiB,CAAI,CAAA,EAAA,IAAI,CAAC,KAAK,GAAG,eAAe,GAAG,EAAE,CAAE,CAAA,EACpF,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC,CAAC,MAA8B,CAAC,KAAK,CAAC,EACjE,CAAA,CACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement"],"sources":["src/components/ui/ir-textarea/ir-textarea.css?tag=ir-textarea&encapsulation=scoped","src/components/ui/ir-textarea/ir-textarea.tsx"],"sourcesContent":[".prepend-textarea {\r\n  padding: 0 !important ;\r\n}\r\n.ta-prepend-text {\r\n  width: 100%;\r\n}\r\n","import { Component, Event, EventEmitter, Prop, State, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-textarea',\r\n  styleUrl: 'ir-textarea.css',\r\n  scoped: true,\r\n})\r\nexport class IrTextArea {\r\n  @Prop() rows = 3;\r\n  @Prop() cols = 5;\r\n  @Prop() text = '';\r\n  @Prop() label = '<label>';\r\n  @Prop() placeholder = '<placeholder>';\r\n  @Prop() value = '';\r\n  @Prop() maxLength: number = 250;\r\n  @Prop() textareaClassname: string;\r\n  @Prop() variant: 'default' | 'prepend' = 'default';\r\n  @Prop() labelWidth: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 = 3;\r\n  @Prop() styles: { [key: string]: string };\r\n  @Prop() testId: string;\r\n\r\n  @State() error = false;\r\n\r\n  @Event() textChange: EventEmitter<string>;\r\n\r\n  @Watch('aria-invalid')\r\n  handleAriaInvalidChange(newValue) {\r\n    this.error = newValue === 'true';\r\n  }\r\n  connectedCallback() {}\r\n  disconnectedCallback() {}\r\n  render() {\r\n    if (this.variant === 'prepend') {\r\n      return (\r\n        <fieldset class=\"input-group\">\r\n          <div class={`input-group-prepend col-${this.labelWidth} prepend-textarea`}>\r\n            <span class=\"input-group-text ta-prepend-text\">{this.label}</span>\r\n          </div>\r\n          <textarea\r\n            data-testid={this.testId}\r\n            value={this.value}\r\n            class={`form-control`}\r\n            style={{ height: '7rem', ...this.styles }}\r\n            maxLength={this.maxLength}\r\n            onChange={e => this.textChange.emit((e.target as HTMLTextAreaElement).value)}\r\n            aria-label={this.label}\r\n          ></textarea>\r\n        </fieldset>\r\n      );\r\n    }\r\n    return (\r\n      <div class={'form-group'}>\r\n        <label>{this.label}</label>\r\n        <textarea\r\n          data-testid={this.testId}\r\n          style={this.styles}\r\n          maxLength={this.maxLength}\r\n          rows={this.rows}\r\n          value={this.value}\r\n          class={`form-control ${this.textareaClassname} ${this.error ? 'border-danger' : ''}`}\r\n          placeholder={this.placeholder}\r\n          onInput={e => this.textChange.emit((e.target as HTMLTextAreaElement).value)}\r\n        ></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}