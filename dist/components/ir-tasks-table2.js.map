{"file":"ir-tasks-table2.js","mappings":"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","names":["__stencil_proxyCustomElement","moment"],"sources":["src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-table/ir-tasks-table.css?tag=ir-tasks-table&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-table/ir-tasks-table.tsx"],"sourcesContent":[":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.selected-row {\r\n  background-color: rgba(0, 0, 255, 0.1);\r\n}\r\n.selected-row:hover {\r\n  background-color: rgba(0, 0, 255, 0.15);\r\n}\r\n.header-content {\r\n  height: 100%;\r\n}\r\n.sortable {\r\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n}\r\n.sortable svg {\r\n  color: var(--blue);\r\n}\r\n.task-row,\r\n.table th,\r\n.table td {\r\n  white-space: nowrap;\r\n  max-width: max-content !important;\r\n  /* background: white; */\r\n  border: 0;\r\n}\r\n.task-row {\r\n  padding: 0.25rem 0.5rem !important;\r\n}\r\n.extra-padding {\r\n  padding: 0.25rem 1rem !important;\r\n}\r\n.highlighted-unit {\r\n  background: #000;\r\n  color: white;\r\n  padding: 0.2rem 0.3rem;\r\n  border-radius: 4px;\r\n}\r\n.table th,\r\n.table td {\r\n  text-align: start;\r\n}\r\n.table-container {\r\n  max-height: 80vh;\r\n}\r\n/* td,\r\nth {\r\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n  max-width: max-content !important;\r\n \r\n  text-align: start;\r\n}\r\ntr {\r\n  border-bottom: 1px solid #e0e0e0;\r\n} */\r\n.task-table-row {\r\n  background: white !important;\r\n}\r\n.task-table-row:hover {\r\n  background: #e2e6ea3f !important;\r\n}\r\n.selected {\r\n  background: #e3f3fa !important;\r\n}\r\n.sortable:hover {\r\n  color: #212529;\r\n  background-color: #e2e6ea;\r\n  border-color: #dae0e5;\r\n  cursor: pointer;\r\n}\r\n.sortable:active {\r\n  color: #212529;\r\n  background-color: #dae0e5;\r\n  border-color: #d3d9df;\r\n}\r\n","import { Component, Event, EventEmitter, Listen, Prop, State, Watch, h } from '@stencil/core';\r\nimport { Task } from '@/models/housekeeping';\r\nimport moment from 'moment';\r\n\r\n@Component({\r\n  tag: 'ir-tasks-table',\r\n  styleUrl: 'ir-tasks-table.css',\r\n  scoped: true,\r\n})\r\nexport class IrTasksTable {\r\n  @Prop({ mutable: true }) tasks: Task[] = [];\r\n\r\n  /**\r\n   * Tracks which task IDs are currently selected via checkboxes.\r\n   */\r\n  @State() selectedIds: Task['id'][] = [];\r\n\r\n  /**\r\n   * Controls whether the \"Confirm Clean\" modal is shown.\r\n   */\r\n  @State() showConfirmModal: boolean = false;\r\n\r\n  /**\r\n   * The key we are sorting by (e.g., \"date\", \"unit\", \"status\", \"housekeeper\").\r\n   */\r\n  @State() sortKey: string = 'date';\r\n\r\n  /**\r\n   * The sort direction: ASC or DESC.\r\n   */\r\n  @State() sortDirection: 'ASC' | 'DESC' = 'ASC';\r\n  @State() checkableTasks: Task[] = [];\r\n\r\n  @Event({ bubbles: true, composed: true }) animateCleanedButton: EventEmitter<null>;\r\n  @Event({ bubbles: true, composed: true }) rowSelectChange: EventEmitter<Task[]>;\r\n  @Event({ bubbles: true, composed: true }) sortingChanged: EventEmitter<{ field: string; direction: 'ASC' | 'DESC' }>;\r\n\r\n  componentWillLoad() {\r\n    this.sortTasks('date', 'ASC');\r\n    if (this.tasks) {\r\n      this.assignCheckableTasks();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts the tasks by the given key. If no direction is provided,\r\n   * it toggles between ascending and descending.\r\n   */\r\n  private handleSort(key: string) {\r\n    let newDirection = this.sortDirection;\r\n    // If we're clicking the same column, flip the direction. If a new column, default to ASC.\r\n    if (this.sortKey === key) {\r\n      newDirection = this.sortDirection === 'ASC' ? 'DESC' : 'ASC';\r\n    } else {\r\n      newDirection = 'ASC';\r\n    }\r\n    this.sortingChanged.emit({ field: key, direction: newDirection });\r\n    this.sortTasks(key, newDirection);\r\n  }\r\n\r\n  @Listen('clearSelectedHkTasks', { target: 'body' })\r\n  handleClearSelectedHkTasks(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.selectedIds = [];\r\n  }\r\n\r\n  @Watch('tasks')\r\n  handleTasksChange(newTasks: Task[]) {\r\n    if (newTasks?.length) {\r\n      this.selectedIds = [];\r\n      this.assignCheckableTasks();\r\n    }\r\n  }\r\n  /**\r\n   * Helper to sort tasks array in state.\r\n   */\r\n  /**\r\n   * Sorts the tasks by the given key in ASC or DESC order.\r\n   * If values for `key` are duplicates, it sorts by `date` ascending.\r\n   * If `date` is also the same, it finally sorts by `unit.name` ascending.\r\n   */\r\n  private sortTasks(key: string, direction: 'ASC' | 'DESC') {\r\n    const sorted = [...this.tasks].sort((a, b) => {\r\n      // Primary comparison: a[key] vs b[key]\r\n      let aPrimary = a[key];\r\n      let bPrimary = b[key];\r\n      if (key === 'status') {\r\n        aPrimary = a[key].description;\r\n        bPrimary = b[key].description;\r\n      }\r\n\r\n      if (aPrimary < bPrimary) {\r\n        return direction === 'ASC' ? -1 : 1;\r\n      }\r\n      if (aPrimary > bPrimary) {\r\n        return direction === 'ASC' ? 1 : -1;\r\n      }\r\n\r\n      // First tiebreaker: compare by date (always ascending)\r\n      if (a.date < b.date) return -1;\r\n      if (a.date > b.date) return 1;\r\n\r\n      // Second tiebreaker: compare by unit.name (always ascending)\r\n      if (a.unit?.name < b.unit?.name) return -1;\r\n      if (a.unit?.name > b.unit?.name) return 1;\r\n\r\n      return 0;\r\n    });\r\n\r\n    // Update component state\r\n    this.tasks = sorted;\r\n    this.sortKey = key;\r\n    this.sortDirection = direction;\r\n  }\r\n\r\n  /**\r\n   * Helper to toggle selection for a single row.\r\n   */\r\n  private toggleSelection(id: Task['id']) {\r\n    if (this.selectedIds.includes(id)) {\r\n      this.selectedIds = this.selectedIds.filter(item => item !== id);\r\n    } else {\r\n      this.selectedIds = [...this.selectedIds, id];\r\n      this.animateCleanedButton.emit(null);\r\n    }\r\n    this.emitSelectedTasks();\r\n  }\r\n\r\n  private emitSelectedTasks() {\r\n    if (this.tasks.length === 0) {\r\n      return;\r\n    }\r\n    const filteredTasks = this.tasks.filter(t => this.selectedIds.includes(t.id));\r\n    this.rowSelectChange.emit(filteredTasks);\r\n  }\r\n\r\n  /**\r\n   * Checks if every row is selected.\r\n   */\r\n  private get allSelected(): boolean {\r\n    return this.checkableTasks.length > 0 && this.selectedIds.length === this.checkableTasks.length;\r\n  }\r\n\r\n  /**\r\n   * Toggles selection on all visible tasks at once.\r\n   */\r\n  private toggleSelectAll() {\r\n    if (this.allSelected) {\r\n      this.selectedIds = [];\r\n    } else {\r\n      this.selectedIds = this.checkableTasks.map(t => t.id);\r\n      this.animateCleanedButton.emit(null);\r\n    }\r\n    this.emitSelectedTasks();\r\n  }\r\n\r\n  /**\r\n   * Assigns checkable tasks based on predefined criteria.\r\n   *\r\n   * This method filters tasks and determines which ones are eligible\r\n   * to be selected using checkboxes. A task is considered \"checkable\"\r\n   * if its date is today or earlier.\r\n   *\r\n   * The filtered tasks are stored in `this.checkableTasks`, ensuring\r\n   * only relevant tasks can be interacted with by users.\r\n   */\r\n  private assignCheckableTasks() {\r\n    const tasks = [];\r\n    this.tasks.forEach(task => {\r\n      if (this.isCheckable(task)) {\r\n        tasks.push(task);\r\n      }\r\n    });\r\n    this.checkableTasks = [...tasks];\r\n  }\r\n\r\n  /**\r\n   * Determines if a task is checkable.\r\n   *\r\n   * A task is considered checkable if its date is today or any day before.\r\n   * This prevents users from selecting tasks with future dates.\r\n   *\r\n   * @param {string} date - The task's date in 'YYYY-MM-DD' format.\r\n   * @returns {boolean} - Returns `true` if the task's date is today or earlier, otherwise `false`.\r\n   */\r\n  private isCheckable(task: Task): boolean {\r\n    if (!task.hkm_id) {\r\n      return false;\r\n    }\r\n    return moment(task.date, 'YYYY-MM-DD').isSameOrBefore(moment(), 'days');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"card table-container h-100 p-1 m-0 table-responsive\">\r\n        <table class=\"table\" data-testid=\"hk_tasks_table\">\r\n          <thead class=\"table-header\">\r\n            <tr>\r\n              <th class={'task-row'}>\r\n                <ir-checkbox\r\n                  indeterminate={this.selectedIds.length > 0 && this.selectedIds.length < this.checkableTasks.length}\r\n                  checked={this.allSelected}\r\n                  onCheckChange={() => this.toggleSelectAll()}\r\n                ></ir-checkbox>\r\n              </th>\r\n              <th class=\"extra-padding\">Period</th>\r\n              <th class=\"extra-padding\">Unit</th>\r\n              <th class={'sortable extra-padding'} onClick={() => this.handleSort('status')}>\r\n                <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\r\n                  <span>Status</span>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    class=\"lucide lucide-arrow-up-down\"\r\n                  >\r\n                    <path d=\"m21 16-4 4-4-4\" />\r\n                    <path d=\"M17 20V4\" />\r\n                    <path d=\"m3 8 4-4 4 4\" />\r\n                    <path d=\"M7 4v16\" />\r\n                  </svg>\r\n                </div>\r\n              </th>\r\n              <th class=\"extra-padding\">Hint</th>\r\n              <th>A</th>\r\n              <th>C</th>\r\n              <th>I</th>\r\n              <th style={{ textAlign: 'start' }} class={'sortable extra-padding'} onClick={() => this.handleSort('housekeeper')}>\r\n                <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\r\n                  <span>Housekeeper</span>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    class=\"lucide lucide-arrow-up-down\"\r\n                  >\r\n                    <path d=\"m21 16-4 4-4-4\" />\r\n                    <path d=\"M17 20V4\" />\r\n                    <path d=\"m3 8 4-4 4 4\" />\r\n                    <path d=\"M7 4v16\" />\r\n                  </svg>\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {this.tasks.length === 0 && (\r\n              <tr>\r\n                <td colSpan={9} class=\"text-center\">\r\n                  <div style={{ height: '300px' }} class=\"d-flex align-items-center justify-content-center\">\r\n                    <span> No Tasks Found</span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n            {this.tasks.map(task => {\r\n              const isSelected = this.selectedIds.includes(task.id);\r\n              const isCheckable = this.isCheckable(task);\r\n              return (\r\n                <tr\r\n                  data-date={task.date}\r\n                  data-testid={`hk_task_row`}\r\n                  data-assigned={task.housekeeper ? 'true' : 'false'}\r\n                  style={isCheckable && { cursor: 'pointer' }}\r\n                  onClick={() => {\r\n                    if (!isCheckable) {\r\n                      return;\r\n                    }\r\n                    this.toggleSelection(task.id);\r\n                  }}\r\n                  class={{ 'selected': isSelected, 'task-table-row': true }}\r\n                  key={task.id}\r\n                >\r\n                  <td class=\"task-row \">{isCheckable && <ir-checkbox checked={isSelected}></ir-checkbox>}</td>\r\n                  <td class=\"task-row extra-padding\">{task.formatted_date}</td>\r\n                  <td class=\"task-row extra-padding\">\r\n                    <span class={{ 'highlighted-unit': task.is_highlight }}>{task.unit.name}</span>\r\n                  </td>\r\n                  <td class=\"task-row extra-padding\">{task.status.description}</td>\r\n                  <td class=\"task-row extra-padding\">{task.hint}</td>\r\n                  <td class=\"task-row\">{task.adult}</td>\r\n                  <td class=\"task-row\">{task.child}</td>\r\n                  <td class=\"task-row\">{task.infant}</td>\r\n                  <td class=\"w-50 task-row extra-padding\" style={{ textAlign: 'start' }}>\r\n                    {task.housekeeper ?? 'Unassigned'}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}