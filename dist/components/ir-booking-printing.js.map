{"file":"ir-booking-printing.js","mappings":";;;;;AAAA,MAAM,oBAAoB,GAAG,sBAAsB,CAAC;AACpD,gCAAe,oBAAoB;;MCUtBA,mBAAiB;;;;;QASpB,mBAAc,GAAG,IAAI,cAAc,EAAE,CAAC;QACtC,gBAAW,GAAG,IAAI,WAAW,EAAE,CAAC;wBATb,EAAE;sBACJ,EAAE;6BACK,EAAE;uBACR,EAAE;;oBAEU,SAAS;;;IAO/C,MAAM,aAAa;QACjB,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;IACD,MAAM,aAAa;QACjB,IAAI;YACF,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC9K,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACpB,OAAO,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;gBACxC,OAAO,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;aAC7C;YACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACtB;KACF;IACD,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,8DAAa,CACR,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["IrBookingPrinting"],"sources":["src/components/ir-booking-printing/ir-booking-printing.css?tag=ir-booking-printing&encapsulation=shadow","src/components/ir-booking-printing/ir-booking-printing.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n","import { Booking } from '@/models/booking.dto';\r\nimport { BookingService } from '@/services/booking.service';\r\nimport { RoomService } from '@/services/room.service';\r\nimport locales from '@/stores/locales.store';\r\nimport { Component, Host, Prop, State, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-booking-printing',\r\n  styleUrl: 'ir-booking-printing.css',\r\n  shadow: true,\r\n})\r\nexport class IrBookingPrinting {\r\n  @Prop() language: string = '';\r\n  @Prop() ticket: string = '';\r\n  @Prop() bookingNumber: string = '';\r\n  @Prop() baseurl: string = '';\r\n  @Prop() propertyid: number;\r\n  @Prop() mode: 'invoice' | 'default' = 'default';\r\n\r\n  @State() booking: Booking;\r\n  private bookingService = new BookingService();\r\n  private roomService = new RoomService();\r\n\r\n  @Watch('ticket')\r\n  async ticketChanged() {\r\n    this.bookingService.setToken(this.ticket);\r\n    this.roomService.setToken(this.ticket);\r\n    this.initializeApp();\r\n  }\r\n  async initializeApp() {\r\n    try {\r\n      const [languageTexts, booking] = await Promise.all([this.roomService.fetchLanguage(this.language), this.bookingService.getExposedBooking(this.bookingNumber, this.language)]);\r\n      if (!locales.entries) {\r\n        locales.entries = languageTexts.entries;\r\n        locales.direction = languageTexts.direction;\r\n      }\r\n      this.booking = booking;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <slot></slot>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}