{"file":"ir-label2.js","mappings":";;AAAA,MAAM,UAAU,GAAG,04BAA04B,CAAC;AAC95B,sBAAe,UAAU;;MCMZ,OAAO;IALpB;;;QAaU,YAAO,GAAsB,MAAM,CAAC;;QAGpC,wBAAmB,GAAY,KAAK,CAAC;;QAGrC,UAAK,GAAyD,IAAI,CAAC;;QAGnE,mBAAc,GAAY,KAAK,CAAC;;QAGhC,eAAU,GAAW,EAAE,CAAC;;QAGxB,uBAAkB,GAAY,KAAK,CAAC;KAsD7C;IA5CC,MAAM;;;QAEJ,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YAClE,OAAO,IAAI,CAAC;SACb;QAED,QACE,EAAC,IAAI,IAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,oBAAoB,GAAG,EAAE,IAEjD,WAAK,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,KAAK,QAAQ,GAAG,sBAAsB,GAAG,oBAAoB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc,IACpH,IAAI,CAAC,SAAS,IAAI,SAAG,KAAK,EAAC,aAAa,IAAE,IAAI,CAAC,SAAS,CAAK,EAG9D,YAAM,IAAI,EAAC,QAAQ,GAAG,EAGrB,IAAI,CAAC,KAAK,KACT,WACE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EACnB,GAAG,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,mCAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EACrC,KAAK,EAAE,WAAW,IAAI,CAAC,cAAc,GAAG,SAAS,GAAG,MAAM,IAAI,MAAA,IAAI,CAAC,KAAK,CAAC,KAAK,mCAAI,EAAE,IAAI,MAAA,IAAI,CAAC,UAAU,mCAAI,EAAE,EAAE,GAC/G,CACH,EAGA,IAAI,CAAC,OAAO,IACX,IAAI,CAAC,mBAAmB,IACtB,SAAG,KAAK,EAAC,eAAe,EAAC,SAAS,EAAE,IAAI,CAAC,OAAO,GAAM,KAEtD,SAAG,KAAK,EAAC,eAAe,IAAE,IAAI,CAAC,OAAO,CAAK,CAC5C,KAED,SAAG,KAAK,EAAC,mBAAmB,IAAE,IAAI,CAAC,WAAW,CAAK,CACpD,EAGD,eAAQ,EAGR,YAAM,IAAI,EAAC,QAAQ,GAAG,CAClB,CACD,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/ir-label/ir-label.css?tag=ir-label&encapsulation=scoped","src/components/ui/ir-label/ir-label.tsx"],"sourcesContent":[".logo {\n  height: 1.5rem;\n  width: 1.5rem;\n}\n:host {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n}\n.icon {\n  margin-left: 3px;\n  padding: 0;\n  margin-top: 0;\n  display: flex;\n  align-items: center;\n}\n.label_message {\n  margin: 0 3px;\n  padding: 0;\n}\n.label_title {\n  min-width: max-content;\n  padding: 0;\n  margin: 0;\n  font-weight: 600;\n}\n.label_placeholder {\n  color: #cacfe7;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n.icon-container {\n  margin: 0;\n  padding: 0;\n}\n.country {\n  height: 16px;\n  width: 23px;\n  border-radius: 3px;\n}\nsvg {\n  margin: 0;\n  padding: 0;\n}\n.label_wrapper_inline {\n  display: inline;\n  max-width: 100%;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.label_wrapper_flex {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  max-width: 100%;\n  margin-bottom: 5px;\n}\n\n.label_title {\n  font-weight: 600;\n  white-space: nowrap;\n  display: inline;\n}\n\n.label_message {\n  display: inline; /* Keeps the message inline */\n  white-space: normal; /* Allows wrapping of the message text */\n  word-break: break-word; /* Breaks long words/URLs to prevent overflow */\n}\n","import { Component, Prop, h, Host } from '@stencil/core';\n\n@Component({\n  tag: 'ir-label',\n  styleUrl: 'ir-label.css',\n  scoped: true,\n})\nexport class IrLabel {\n  // -- Props --\n  /** The text to display as the label's title */\n  @Prop() labelText: string;\n\n  /** The main text or HTML content to display */\n  @Prop() content: string;\n\n  @Prop() display: 'inline' | 'flex' = 'flex';\n\n  /** If true, will render `content` as HTML */\n  @Prop() renderContentAsHtml: boolean = false;\n\n  /** Object representing the image used within the label */\n  @Prop() image?: { src: string; alt: string; style?: string } | null = null;\n\n  /** Renders a country-type image style (vs. a 'logo') */\n  @Prop() isCountryImage: boolean = false;\n\n  /** Additional CSS classes or style for the image */\n  @Prop() imageStyle: string = '';\n\n  /** If true, label will ignore checking for an empty content */\n  @Prop() ignoreEmptyContent: boolean = false;\n\n  /** Placeholder text to display if content is empty */\n  @Prop() placeholder: string;\n\n  /** inline styles for the component container */\n  @Prop() containerStyle: {\n    [key: string]: string;\n  };\n\n  render() {\n    // If we have no content and no placeholder, and we are NOT ignoring the empty content, return null.\n    if (!this.placeholder && !this.content && !this.ignoreEmptyContent) {\n      return null;\n    }\n\n    return (\n      <Host class={this.image ? 'align-items-center' : ''}>\n        {/* Label title */}\n        <div class={`${this.display === 'inline' ? 'label_wrapper_inline' : 'label_wrapper_flex'} `} style={this.containerStyle}>\n          {this.labelText && <p class=\"label_title\">{this.labelText}</p>}\n\n          {/* Slot BEFORE content (prefix slot) */}\n          <slot name=\"prefix\" />\n\n          {/* Optional image */}\n          {this.image && (\n            <img\n              src={this.image.src}\n              alt={this.image.alt ?? this.image.src}\n              class={`p-0 m-0 ${this.isCountryImage ? 'country' : 'logo'} ${this.image.style ?? ''} ${this.imageStyle ?? ''}`}\n            />\n          )}\n\n          {/* Main content or placeholder */}\n          {this.content ? (\n            this.renderContentAsHtml ? (\n              <p class=\"label_message\" innerHTML={this.content}></p>\n            ) : (\n              <p class=\"label_message\">{this.content}</p>\n            )\n          ) : (\n            <p class=\"label_placeholder\">{this.placeholder}</p>\n          )}\n\n          {/* Default slot goes after the main content, but before suffix */}\n          <slot />\n\n          {/* Slot AFTER content (suffix slot) */}\n          <slot name=\"suffix\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}