{"file":"ir-interactive-title2.js","mappings":";;AAAA,MAAM,qBAAqB,GAAG,+yCAA+yC,CAAC;AAC90C,iCAAe,qBAAqB;;MCMvB,kBAAkB;IAL/B;;;;;;;QAiBU,kBAAa,GAAW,MAAM,CAAC;;;;QAU/B,aAAQ,GAAW,EAAE,CAAC;KA+E/B;IAlEC,iBAAiB;QACf,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;KACvC;IACD,gBAAgB;QACd,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;;;;;;IAMO,iBAAiB;QACvB,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAgB,CAAC;QAC5E,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAgB,CAAC;QAEpE,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACzC,OAAO;SACR;QACD,MAAM,cAAc,GAAG,YAAY,CAAC,WAAW,CAAC;QAChD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;QAClD,MAAM,SAAS,GAAG,WAAW,GAAG,WAAW,CAAC,WAAW,GAAG,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG,SAAS,GAAG,SAAS,GAAG,cAAc,CAAC;QAE7D,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;YACtE,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC;YAElD,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC;gBACtB,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,IAAI,CAAC,YAAY;gBAC1B,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;SACJ;aAAM;YACL,CAAC,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;SACpC;KACF;IAED,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,KAAK,EAAE,EAAE,mBAAmB,EAAE,IAAI,CAAC,aAAa,EAAE,IACtD,0DACE,KAAK,EAAC,eAAe,EACrB,KAAK,EAAE;gBACL,UAAU,EAAE,QAAQ;gBACpB,QAAQ,EAAE,QAAQ;gBAClB,YAAY,EAAE,UAAU;aACzB,IAED,6DAAM,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC,EAAE,KAAK,EAAC,cAAc,IAC9D,IAAI,CAAC,YAAY,CACb,EAEN,IAAI,CAAC,QAAQ,KACZ,4DAAK,KAAK,EAAC,oBAAoB,EAAC,KAAK,EAAE,QAAQ,IAC7C,4DAAK,KAAK,EAAC,4BAA4B,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,MAAM,EAAC,OAAO,EAAC,aAAa,IACpF,6DACE,IAAI,EAAC,cAAc,EACnB,CAAC,EAAC,6eAA6e,GAC/e,CACE,CACF,CACP,CACC,CACC,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/ir-interactive-title/ir-interactive-title.css?tag=ir-interactive-title&encapsulation=scoped","src/components/ui/ir-interactive-title/ir-interactive-title.tsx"],"sourcesContent":[":host {\n  display: block;\n  width: 100%;\n  --hk-green: green;\n}\n* {\n  box-sizing: border-box;\n}\n.popover-title {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  z-index: 10;\n  left: 0;\n  display: flex;\n  align-items: center;\n}\n.popover-container {\n  position: absolute;\n  bottom: 0px;\n  left: var(--ir-popover-left, 10px);\n  background: rgb(0, 0, 0);\n  color: white;\n  min-width: 100%;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 10px;\n  z-index: 9999;\n  padding: 3.5px 7px;\n  border-radius: 5px;\n  pointer-events: none;\n  opacity: 0;\n  transition: all 100ms ease;\n  font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.45;\n  text-decoration: none;\n  text-shadow: none;\n  font-size: 0.875rem;\n}\n.popover-container[data-state='show'] {\n  opacity: 1;\n}\n.hk-dot {\n  inset: 0;\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: fit-content;\n  padding: 4px;\n  left: auto;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  padding-inline: var(--ir-popover-left);\n  background: var(--ir-interactive-hk-bg, white);\n  color: var(--dot-color, black);\n}\n/* .hk-dot::after {\n  content: '';\n  height: 8px;\n  aspect-ratio: 1;\n  border-radius: 9999999px;\n  background: var(--dot-color, #ffffff);\n} */\n","import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'ir-interactive-title',\n  styleUrl: 'ir-interactive-title.css',\n  scoped: true,\n})\nexport class IrInteractiveTitle {\n  @Element() el: HTMLElement;\n\n  /**\n   * The full title string that may be cropped in the UI.\n   */\n  @Prop() popoverTitle: string;\n\n  /**\n   * CSS offset for the left position of the popover.\n   * Used as a CSS variable `--ir-popover-left`.\n   */\n  @Prop() irPopoverLeft: string = '10px';\n\n  /**\n   * Whether to show the housekeeping (HK) status dot.\n   */\n  @Prop() hkStatus: boolean;\n\n  /**\n   * The number of characters to display before cropping the title with ellipsis.\n   */\n  @Prop() cropSize: number = 15;\n\n  /**\n   * The visible title (possibly cropped).\n   * Computed during lifecycle based on content overflow.\n   */\n  private croppedTitle: string;\n\n  /**\n   * Reference to the span DOM element that holds the cropped title text.\n   */\n  private croppedTitleEl: HTMLSpanElement;\n\n  componentWillLoad() {\n    this.croppedTitle = this.popoverTitle;\n  }\n  componentDidLoad() {\n    this.initializePopover();\n  }\n  /**\n   * Measures the width of the title and icon to determine if the text overflows.\n   * If it does, crops the title and attaches a popover to the title element.\n   * Otherwise, removes any existing popover.\n   */\n  private initializePopover() {\n    const titleElement = this.el.querySelector('.popover-title') as HTMLElement;\n    const iconElement = this.el.querySelector('.hk-dot') as HTMLElement;\n\n    if (!titleElement || !this.croppedTitleEl) {\n      return;\n    }\n    const containerWidth = titleElement.offsetWidth;\n    const textWidth = this.croppedTitleEl.scrollWidth;\n    const iconWidth = iconElement ? iconElement.offsetWidth : 0;\n    const isOverflowing = textWidth + iconWidth > containerWidth;\n\n    if (isOverflowing) {\n      this.croppedTitle = this.popoverTitle.slice(0, this.cropSize) + '...';\n      this.croppedTitleEl.innerHTML = this.croppedTitle;\n\n      $(titleElement).popover({\n        trigger: 'hover',\n        content: this.popoverTitle,\n        placement: 'top',\n      });\n    } else {\n      $(titleElement).popover('dispose');\n    }\n  }\n\n  render() {\n    return (\n      <Host style={{ '--ir-popover-left': this.irPopoverLeft }}>\n        <p\n          class=\"popover-title\"\n          style={{\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          <span ref={el => (this.croppedTitleEl = el)} class=\"croppedTitle\">\n            {this.croppedTitle}\n          </span>\n          {/* {this.hkStatus && this.hkStatusColors[this.hkStatus] && <div title=\"occupied\" style={{ '--dot-color': this.hkStatusColors[this.hkStatus] }} class={`hk-dot`}></div>} */}\n          {this.hkStatus && (\n            <div title=\"This unit is dirty\" class={`hk-dot`}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"12\" width=\"13.5\" viewBox=\"0 0 576 512\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M566.6 54.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192-34.7-34.7c-4.2-4.2-10-6.6-16-6.6c-12.5 0-22.6 10.1-22.6 22.6l0 29.1L364.3 320l29.1 0c12.5 0 22.6-10.1 22.6-22.6c0-6-2.4-11.8-6.6-16l-34.7-34.7 192-192zM341.1 353.4L222.6 234.9c-42.7-3.7-85.2 11.7-115.8 42.3l-8 8C76.5 307.5 64 337.7 64 369.2c0 6.8 7.1 11.2 13.2 8.2l51.1-25.5c5-2.5 9.5 4.1 5.4 7.9L7.3 473.4C2.7 477.6 0 483.6 0 489.9C0 502.1 9.9 512 22.1 512l173.3 0c38.8 0 75.9-15.4 103.4-42.8c30.6-30.6 45.9-73.1 42.3-115.8z\"\n                />\n              </svg>\n            </div>\n          )}\n        </p>\n      </Host>\n    );\n  }\n}\n"],"version":3}