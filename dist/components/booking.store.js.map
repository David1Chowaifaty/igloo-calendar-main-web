{"file":"booking.store.js","mappings":"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","names":[],"sources":["src/stores/booking.store.ts"],"sourcesContent":["import { Booking, Guest } from '@/models/booking.dto';\r\nimport { TEventType } from '@/models/igl-book-property';\r\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation | null;\r\n  ratePlan: RatePlan;\r\n  guest: RatePlanGuest[] | null;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  is_amount_modified?: boolean;\r\n  view_mode: '002' | '001';\r\n  rp_amount: number;\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    is_bed_configuration_enabled: boolean;\r\n  };\r\n}\r\nexport interface RatePlanGuest {\r\n  first_name: string;\r\n  last_name: string;\r\n  unit: string | null;\r\n  bed_preference: string | null;\r\n  infant_nbr: number | null;\r\n  roomtype_id?: number;\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface ISelectedVariation {\r\n  variation: Variation;\r\n  state: 'default' | 'modified';\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  infant_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n  agent_code?: string;\r\n}\r\nexport interface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  checkout_guest: Guest | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  event_type: { type: TEventType };\r\n  guest: RatePlanGuest;\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n  booking: Booking;\r\n  resetBooking: boolean;\r\n  isInFreeCancelationZone: boolean;\r\n  fictus_booking_nbr: { nbr: string | null };\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  checkout_guest: null,\r\n  guest: null,\r\n  tax_statement: null,\r\n  roomTypes: [],\r\n  enableBooking: false,\r\n  resetBooking: false,\r\n  ratePlanSelections: {},\r\n  isInFreeCancelationZone: false,\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n    infant_nbr: 0,\r\n  },\r\n  booking: null,\r\n  fictus_booking_nbr: null,\r\n  event_type: { type: 'PLUS_BOOKING' },\r\n};\r\n\r\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\r\nexport function resetBookingStore() {\r\n  reset();\r\n}\r\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\r\n  if (!variations) {\r\n    return null;\r\n  }\r\n  if (!selected_variation || booking_store.resetBooking) {\r\n    return variations[0];\r\n  }\r\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\r\n}\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (!roomType.is_active) return;\r\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n    roomType.rateplans.forEach(ratePlan => {\r\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\r\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\r\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\r\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\r\n      ratePlanSelections[roomType.id][ratePlan.id] =\r\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\r\n          ? {\r\n              ...currentRatePlanSelection,\r\n              ratePlan,\r\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\r\n              visibleInventory: roomType.inventory,\r\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\r\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\r\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\r\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\r\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\r\n              roomtype: {\r\n                ...currentRatePlanSelection.roomtype,\r\n              },\r\n            }\r\n          : {\r\n              reserved: 0,\r\n              rp_amount: 0,\r\n              view_mode: '001',\r\n              guest: null,\r\n              visibleInventory: roomType.inventory,\r\n              selected_variation: ratePlan?.variations[0] ?? null,\r\n              ratePlan,\r\n              guestName: [],\r\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n              roomtype: {\r\n                ...roomType,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n              },\r\n              checkoutVariations: [],\r\n              checkoutBedSelection: [],\r\n              checkoutSmokingSelection: [],\r\n            };\r\n    });\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n  booking_store.resetBooking = false;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  let newGuest = Array.from({ length: rooms }, () => ({ first_name: '', last_name: '', unit: null, bed_preference: null, infant_nbr: null }));\r\n  if (guest) {\r\n    newGuest = guest;\r\n  }\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      view_mode: '001',\r\n      rp_amount: 0,\r\n      guest: newGuest,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        reserved: rooms,\r\n        checkoutVariations: [],\r\n        guest: newGuest,\r\n      },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return {\r\n      reserved: 0,\r\n      guest: null,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan: null,\r\n      guestName: [],\r\n      is_bed_configuration_enabled: false,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      rp_amount: 0,\r\n      view_mode: '001',\r\n      roomtype: null,\r\n    };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\r\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\r\n      if (isPrePayment) {\r\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\r\n      }\r\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\r\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\r\n      }, 0);\r\n    } else if (ratePlan.reserved > 0) {\r\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\r\n      return ratePlan.reserved * (amount ?? 0);\r\n    }\r\n    return 0;\r\n  };\r\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\r\n    Object.values(value).forEach(ratePlan => {\r\n      totalAmount += calculateCost(ratePlan);\r\n      prePaymentAmount += calculateCost(ratePlan, true);\r\n    });\r\n  });\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport function validateBooking() {\r\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\r\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\r\n  );\r\n}\r\nexport function calculateTotalRooms() {\r\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan) => {\r\n        if (ratePlan.reserved === 0) {\r\n          return innerTotal;\r\n        }\r\n        return innerTotal + ratePlan.reserved;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n}\r\nexport function resetReserved(): void {\r\n  const updatedSelections = Object.entries(booking_store.ratePlanSelections).reduce((acc, [roomTypeId, ratePlans]) => {\r\n    const roomType = booking_store.roomTypes.find(rt => rt.id.toString() === roomTypeId.toString());\r\n    acc[roomTypeId] = Object.entries(ratePlans).reduce((rpAcc, [ratePlanId, ratePlan]) => {\r\n      rpAcc[ratePlanId] = { ...ratePlan, reserved: 0, visibleInventory: roomType?.inventory ?? ratePlan.visibleInventory };\r\n      return rpAcc;\r\n    }, {} as any);\r\n    return acc;\r\n  }, {} as any);\r\n  booking_store.ratePlanSelections = { ...updatedSelections };\r\n}\r\nexport default booking_store;\r\n"],"version":3}