{"file":"ir-sales-by-channel2.js","mappings":"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","names":["moment"],"sources":["src/components/ir-sales-by-channel/ir-sales-by-channel.css?tag=ir-sales-by-channel&encapsulation=scoped","src/components/ir-sales-by-channel/ir-sales-by-channel.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport Token from '@/models/Token';\nimport { AllowedProperties, PropertyService } from '@/services/property.service';\nimport { RoomService } from '@/services/room.service';\nimport locales from '@/stores/locales.store';\nimport moment from 'moment';\nimport { ChannelReport, ChannelReportResult, ChannelSaleFilter } from './types';\n@Component({\n  tag: 'ir-sales-by-channel',\n  styleUrl: 'ir-sales-by-channel.css',\n  scoped: true,\n})\nexport class IrSalesByChannel {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: string;\n\n  @State() isLoading: 'filter' | 'export' | null = null;\n  @State() isPageLoading = true;\n\n  @State() salesData: ChannelReportResult;\n  @State() channelSalesFilters: ChannelSaleFilter;\n  @State() allowedProperties: AllowedProperties;\n\n  private token = new Token();\n  private roomService = new RoomService();\n  private propertyService = new PropertyService();\n\n  private baseFilters: ChannelSaleFilter = {\n    FROM_DATE: moment().add(-7, 'days').format('YYYY-MM-DD'),\n    TO_DATE: moment().format('YYYY-MM-DD'),\n    BOOK_CASE: '001',\n    WINDOW: 7,\n    include_previous_year: false,\n  };\n\n  componentWillLoad() {\n    this.channelSalesFilters = this.baseFilters;\n    if (this.ticket) {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n\n  private async initializeApp() {\n    try {\n      const requests = [this.propertyService.getExposedAllowedProperties(), this.roomService.fetchLanguage(this.language)];\n      const [properties] = await Promise.all(requests);\n      this.allowedProperties = [...(properties as any)];\n\n      this.baseFilters = { ...this.baseFilters, LIST_AC_ID: this.allowedProperties.map(p => p.id) };\n      this.channelSalesFilters = { ...this.baseFilters };\n\n      await this.getChannelSales();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isPageLoading = false;\n    }\n  }\n\n  private async getChannelSales(isExportToExcel = false) {\n    try {\n      const { include_previous_year, ...filterParams } = this.channelSalesFilters;\n      this.isLoading = isExportToExcel ? 'export' : 'filter';\n      const currentSales = await this.propertyService.getChannelSales({\n        // AC_ID: this.propertyid,\n        is_export_to_excel: isExportToExcel,\n        ...filterParams,\n      });\n      const shouldFetchPreviousYear = !isExportToExcel && include_previous_year;\n      let enrichedSales: ChannelReportResult = [];\n      if (shouldFetchPreviousYear) {\n        const previousYearSales = await this.propertyService.getChannelSales({\n          // AC_ID: this.propertyid.toString(),\n          is_export_to_excel: isExportToExcel,\n          ...filterParams,\n          FROM_DATE: moment(filterParams.FROM_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n          TO_DATE: moment(filterParams.TO_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n        });\n\n        enrichedSales = currentSales.map(current => {\n          const previous = previousYearSales.find(prev => prev.SOURCE.toLowerCase() === current.SOURCE.toLowerCase());\n          return {\n            ...current,\n            last_year: previous ? previous : null,\n          };\n        });\n      } else {\n        enrichedSales = currentSales.map(record => ({\n          ...record,\n          last_year: null,\n        }));\n      }\n      /**\n       * Groups sales records by SOURCE and currency.id, summing numeric fields\n       * and recalculating PCT based on the total REVENUE.\n       */\n      const groupSalesRecordsBySource = (records: ChannelReportResult): ChannelReportResult => {\n        if (!records || records.length === 0) return records;\n\n        // Helper to extract currency ID from various possible formats\n        const getCurrencyId = (r: ChannelReport): number | null => {\n          return r?.currency?.id ?? null;\n        };\n\n        // Create unique key for grouping\n        const createKey = (r: ChannelReport): string => {\n          const source = r.SOURCE.toString().toLowerCase().trim();\n          const currencyId = getCurrencyId(r);\n          return `${source}__${currencyId ?? 'null'}`;\n        };\n\n        // Sum two values safely\n        const sumValues = (a: number | undefined, b: number | undefined): number => {\n          return (a ?? 0) + (b ?? 0);\n        };\n\n        // Merge numeric fields from last_year objects\n        const mergeLastYear = (base: ChannelReport['last_year'], incoming: ChannelReport['last_year']): ChannelReport['last_year'] => {\n          if (!incoming) return base;\n          if (!base) return { ...incoming };\n\n          return {\n            NIGHTS: sumValues(base.NIGHTS, incoming.NIGHTS),\n            PCT: sumValues(base.PCT, incoming.PCT), // Will recalculate later\n            REVENUE: sumValues(base.REVENUE, incoming.REVENUE),\n            SOURCE: base.SOURCE,\n            PROPERTY_ID: base.PROPERTY_ID,\n            PROPERTY_NAME: base.PROPERTY_NAME,\n            currency: base.currency,\n          };\n        };\n\n        // Group records by key\n        const grouped = new Map<string, ChannelReport>();\n\n        for (const record of records) {\n          const key = createKey(record);\n          const existing = grouped.get(key);\n\n          if (!existing) {\n            // First record for this key - clone it\n            grouped.set(key, { ...record });\n          } else {\n            // Merge with existing record\n            const merged: ChannelReport = {\n              ...existing,\n              NIGHTS: sumValues(existing.NIGHTS, record.NIGHTS),\n              PCT: 0, // Will recalculate after summing all REVENUE\n              REVENUE: sumValues(existing.REVENUE, record.REVENUE),\n              last_year: mergeLastYear(existing.last_year, record.last_year),\n            };\n            grouped.set(key, merged);\n          }\n        }\n\n        // Convert to array\n        const result = Array.from(grouped.values());\n\n        // Recalculate PCT based on total REVENUE\n        const totalRevenue = result.reduce((sum, r) => sum + (r.REVENUE ?? 0), 0);\n\n        if (totalRevenue > 0) {\n          for (const record of result) {\n            record.PCT = (record.REVENUE / totalRevenue) * 100;\n\n            // Also recalculate last_year PCT if it exists\n            if (record.last_year) {\n              const lastYearTotal = result.reduce((sum, r) => sum + (r.last_year?.REVENUE ?? 0), 0);\n              if (lastYearTotal > 0) {\n                record.last_year.PCT = (record.last_year.REVENUE / lastYearTotal) * 100;\n              }\n            }\n          }\n        }\n\n        return result;\n      };\n\n      this.salesData = [...groupSalesRecordsBySource(enrichedSales)];\n    } catch (error) {\n      console.error('Failed to fetch sales data:', error);\n    } finally {\n      this.isLoading = null;\n    }\n  }\n  render() {\n    if (this.isPageLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">Sales by Channel</h3>\n            <ir-button\n              size=\"sm\"\n              btn_color=\"outline\"\n              isLoading={this.isLoading === 'export'}\n              text={locales.entries.Lcz_Export}\n              onClickHandler={async e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                await this.getChannelSales(true);\n              }}\n              btnStyle={{ height: '100%' }}\n              iconPosition=\"right\"\n              icon_name=\"file\"\n              icon_style={{ '--icon-size': '14px' }}\n            ></ir-button>\n          </div>\n          {/* <ir-sales-by-country-summary salesReports={this.salesData}></ir-sales-by-country-summary> */}\n          <div class=\"d-flex flex-column flex-lg-row mt-1 \" style={{ gap: '1rem' }}>\n            <ir-sales-by-channel-filters\n              isLoading={this.isLoading === 'filter'}\n              onApplyFilters={e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                this.channelSalesFilters = { ...e.detail };\n                this.getChannelSales();\n              }}\n              allowedProperties={this.allowedProperties}\n              baseFilters={this.baseFilters}\n            ></ir-sales-by-channel-filters>\n            <ir-sales-by-channel-table allowedProperties={this.allowedProperties} class=\"card mb-0\" records={this.salesData}></ir-sales-by-channel-table>\n          </div>\n        </section>\n      </Host>\n    );\n  }\n}\n"],"version":3}