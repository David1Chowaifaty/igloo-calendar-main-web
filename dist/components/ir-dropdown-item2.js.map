{"file":"ir-dropdown-item2.js","mappings":";;AAAA,MAAM,iBAAiB,GAAG,wcAAwc,CAAC;AACne,6BAAe,iBAAiB;;MCOnB,cAAc;IAL3B;;;;;;QAQU,yBAAoB,GAAY,IAAI,CAAC;QACrC,kBAAa,GAAY,KAAK,CAAC;;;;QAqBC,WAAM,GAAY,KAAK,CAAC;QA2DxD,gBAAW,GAAG,CAAC,KAAY;YACjC,KAAK,CAAC,eAAe,EAAE,CAAC;YAExB,IAAI,CAAC,IAAI,CAAC,oBAAoB;gBAAE,OAAO;YAEvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1C,CAAC;KASH;IAzDC,gBAAgB;QACd,IAAI,IAAI,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACpD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;YAE1B,qBAAqB,CAAC;gBACpB,IAAI,IAAI,CAAC,oBAAoB,EAAE;oBAC7B,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;iBAClC;aACF,CAAC,CAAC;SACJ;KACF;IAED,oBAAoB;QAClB,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;;QAGlC,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE;;YAE/C,MAAM,cAAc,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACtD,IAAI,cAAc,IAAI,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;gBACvD,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;aACpC;SACF;QACD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KAC5B;IAGD,MAAM,YAAY,CAAC,KAAa;;QAC9B,IAAI,CAAC,IAAI,CAAC,oBAAoB;YAAE,OAAO,KAAK,CAAC;QAE7C,MAAM,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,GAAG,GAAG,CAAC,MAAA,MAAA,IAAI,CAAC,KAAK,mCAAI,IAAI,CAAC,EAAE,CAAC,WAAW,mCAAI,EAAE,EAAE,WAAW,EAAE,CAAC;QACpE,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KACxB;IAGD,MAAM,SAAS,CAAC,IAAa;QAC3B,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACpB;KACF;IAUD,MAAM;QACJ,QACE,EAAC,IAAI,qDAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAC,IAAI,mBAAe,OAAO,EAAC,KAAK,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,gBAAc,IAAI,CAAC,KAAK,IAC/J,IAAI,CAAC,YAAY,GAAG,YAAM,SAAS,EAAE,IAAI,CAAC,YAAY,GAAS,GAAG,eAAa,CAC3E,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/ui/ir-dropdown-item/ir-dropdown-item.css?tag=ir-dropdown-item&encapsulation=scoped","src/components/ui/ir-dropdown-item/ir-dropdown-item.tsx"],"sourcesContent":["/* ir-m-combobox-item.css */\n:host {\n  display: block;\n  cursor: pointer;\n}\n:host([hidden]) {\n  display: none !important;\n}\n:host(.active),\n:host(.focused),\n:host([aria-selected='true']),\n:host:active {\n  /* keep in sync with your combobox .dropdown-item.active styles */\n  outline: none;\n  background-color: var(--blue, #1e9ff2) !important;\n  color: white !important;\n}\n:host(.dropdown-item) {\n  padding: 0.5rem 1rem !important;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n","import { Component, Element, Event, EventEmitter, Host, Method, Prop, h } from '@stencil/core';\nimport { DropdownItem } from '../ir-dropdown/ir-dropdown';\n\n@Component({\n  tag: 'ir-dropdown-item',\n  styleUrl: 'ir-dropdown-item.css',\n  scoped: true,\n})\nexport class IrDropdownItem {\n  @Element() el: HTMLIrDropdownItemElement;\n\n  private isComponentConnected: boolean = true;\n  private hasRegistered: boolean = false;\n\n  /**\n   * Required value for the option\n   */\n  @Prop() value!: string;\n\n  /**\n   * Optional label (falls back to textContent)\n   */\n  @Prop() label?: string;\n\n  /**\n   * Optional html_content (when you want rich content);\n   * If omitted, the component will render its own slot content.\n   */\n  @Prop() html_content?: string;\n\n  /**\n   * When true, visually hide the item (used for filtering).\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /**\n   * Emit when this item is chosen. Parent listens and closes dropdown.\n   */\n  @Event({ eventName: 'dropdownItemSelect' }) dropdownItemSelect: EventEmitter<DropdownItem['value']>;\n\n  /**\n   * Inform the parent this item exists (parent will index and manage focus)\n   */\n  @Event({ eventName: 'dropdownItemRegister' }) dropdownItemRegister: EventEmitter<void>;\n\n  /**\n   * Inform the parent this item is gone\n   */\n  @Event({ eventName: 'dropdownItemUnregister' }) dropdownItemUnregister: EventEmitter<void>;\n\n  componentDidLoad() {\n    if (this.isComponentConnected && !this.hasRegistered) {\n      this.hasRegistered = true;\n      // Use RAF to ensure parent is ready\n      requestAnimationFrame(() => {\n        if (this.isComponentConnected) {\n          this.dropdownItemRegister.emit();\n        }\n      });\n    }\n  }\n\n  disconnectedCallback() {\n    this.isComponentConnected = false;\n\n    // Only emit unregister if we previously registered and parent might still be connected\n    if (this.hasRegistered && this.el.parentElement) {\n      // Check if parent dropdown still exists in DOM\n      const parentDropdown = this.el.closest('ir-dropdown');\n      if (parentDropdown && document.contains(parentDropdown)) {\n        this.dropdownItemUnregister.emit();\n      }\n    }\n    this.hasRegistered = false;\n  }\n\n  @Method()\n  async matchesQuery(query: string): Promise<boolean> {\n    if (!this.isComponentConnected) return false;\n\n    const q = query.toLowerCase();\n    const hay = (this.label ?? this.el.textContent ?? '').toLowerCase();\n    return hay.includes(q);\n  }\n\n  @Method()\n  async setHidden(next: boolean) {\n    if (this.isComponentConnected) {\n      this.hidden = next;\n    }\n  }\n\n  private handleClick = (event: Event) => {\n    event.stopPropagation();\n\n    if (!this.isComponentConnected) return;\n\n    this.dropdownItemSelect.emit(this.value);\n  };\n\n  render() {\n    return (\n      <Host role=\"option\" tabindex=\"-1\" aria-selected=\"false\" class={{ 'dropdown-item': true, 'hidden': this.hidden }} onClick={this.handleClick} data-value={this.value}>\n        {this.html_content ? <span innerHTML={this.html_content}></span> : <slot></slot>}\n      </Host>\n    );\n  }\n}\n"],"version":3}