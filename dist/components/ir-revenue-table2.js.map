{"file":"ir-revenue-table2.js","mappings":"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","names":[],"sources":["src/components/ir-daily-revenue/ir-revenue-table/ir-revenue-table.css?tag=ir-revenue-table&encapsulation=scoped","src/components/ir-daily-revenue/ir-revenue-table/ir-revenue-table.tsx"],"sourcesContent":[":host {\n  overflow-x: hidden;\n  font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif !important;\n}\n:host * {\n  font-family: inherit !important;\n  font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif !important;\n}\n.revenue-table__header,\n.revenue-table__method_header {\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n.revenue-table__header {\n  background: #ececec;\n  color: #374151;\n}\n.revenue-table__header p,\n.revenue-table__method_header p {\n  padding: 0;\n  margin: 0;\n  font-size: 1rem;\n  font-weight: 700;\n}\n.revenue-table__method_header {\n  color: black;\n}\n.revenue-table__title-section {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-bottom: 0.875rem;\n}\n.revenue-table__table {\n  min-height: 50vh;\n}\n/*lg*/\n@media (min-width: 1024px) {\n  .revenue-table__header,\n  .revenue-table__method_header {\n    width: 100%;\n    justify-content: flex-start;\n  }\n  .revenue-table__header p:first-child,\n  .revenue-table__method_header p:first-child {\n    width: calc(40vw + 1.375rem + 0.5rem + 1rem);\n  }\n}\n","import { Component, Fragment, h, Prop } from '@stencil/core';\nimport { DailyPaymentFilter, FolioPayment, GroupedFolioPayment } from '../types';\nimport { PaymentEntries } from '@/components/ir-booking-details/types';\nimport { PAYMENT_TYPES_WITH_METHOD } from '@/components/ir-booking-details/ir-payment-details/global.variables';\nimport { formatAmount } from '@/utils/utils';\nimport calendar_data from '@/stores/calendar-data';\n\n@Component({\n  tag: 'ir-revenue-table',\n  styleUrl: 'ir-revenue-table.css',\n  scoped: true,\n})\nexport class IrRevenueTable {\n  @Prop() payments: GroupedFolioPayment = new Map();\n  @Prop() paymentEntries: PaymentEntries;\n  @Prop() filters: DailyPaymentFilter;\n\n  private payTypesObj: {};\n  private payMethodObj: {};\n  private groupType: 'method' | 'type' = 'method';\n\n  componentWillLoad() {\n    const buildPaymentLookup = (key: keyof PaymentEntries) => {\n      let pt = {};\n      this.paymentEntries[key].forEach(p => {\n        pt = { ...pt, [p.CODE_NAME]: p.CODE_VALUE_EN };\n      });\n      return pt;\n    };\n\n    this.payTypesObj = buildPaymentLookup('types');\n    this.payMethodObj = buildPaymentLookup('methods');\n  }\n\n  /**\n   * Groups payments by method, then by type.\n   * - Never throws on bad input (null/undefined, non-Map, malformed keys, non-array values).\n   * - Keys are parsed defensively; unknown parts fall back to \"UNKNOWN\".\n   */\n  private regroupPaymentsByMethod(): Map<string, Map<string, FolioPayment[]>> {\n    const result = new Map<string, Map<string, FolioPayment[]>>();\n\n    // Early return on empty/invalid source\n    const src = this.payments;\n    if (!(src instanceof Map) || src.size === 0) return result;\n\n    // Helper: parse \"TYPE_METHOD\" into [type, method] safely\n    const parseKey = (key: unknown): [string, string] => {\n      if (typeof key !== 'string') return ['UNKNOWN', 'UNKNOWN'];\n      // Allow extra underscores on the method side: TYPE_METHOD_WITH_UNDERSCORES\n      const [type, ...rest] = key.split('_');\n      const method = rest.join('_');\n      const safeType = (type && type.trim()) || 'UNKNOWN';\n      const safeMethod = (method && method.trim()) || 'UNKNOWN';\n      return [safeType, safeMethod];\n    };\n\n    for (const [rawKey, rawList] of src.entries()) {\n      const [paymentType, paymentMethod] = parseKey(rawKey);\n\n      // Normalize value to a clean array of FolioPayment\n      const list: FolioPayment[] = Array.isArray(rawList) ? (rawList.filter(Boolean) as FolioPayment[]) : [];\n\n      // Skip silently if nothing to add\n      if (list.length === 0) {\n        // Still ensure the buckets exist so consumers can rely on them if needed\n        if (!result.has(paymentMethod)) result.set(paymentMethod, new Map());\n        if (!result.get(paymentMethod)!.has(paymentType)) {\n          result.get(paymentMethod)!.set(paymentType, []);\n        }\n        continue;\n      }\n\n      const typeMap = result.get(paymentMethod) ?? new Map<string, FolioPayment[]>();\n      const existing = typeMap.get(paymentType) ?? [];\n      typeMap.set(paymentType, existing.concat(list));\n      result.set(paymentMethod, typeMap);\n    }\n\n    return result;\n  }\n\n  render() {\n    const hasPayments = this.payments instanceof Map && this.payments.size > 0;\n\n    return (\n      <div class=\"card p-1 revenue-table__table\">\n        {hasPayments ? (\n          <Fragment>\n            <div class=\"revenue-table__header\">\n              <p>Method</p>\n              <p>Amount</p>\n            </div>\n            {this.groupType === 'type' &&\n              Array.from((this.payments as Map<string, FolioPayment[]>).entries()).map(([key, list]) => {\n                const [paymentType, paymentMethod] = key.split('_');\n                const groupName = PAYMENT_TYPES_WITH_METHOD.includes(paymentType)\n                  ? `${this.payTypesObj[paymentType] ?? paymentType}: ${this.payMethodObj[paymentMethod] ?? paymentMethod}`\n                  : this.payTypesObj[paymentType] ?? paymentType;\n\n                return <ir-revenue-row key={key} payments={list} groupName={groupName}></ir-revenue-row>;\n              })}\n            {this.groupType === 'method' &&\n              Array.from(this.regroupPaymentsByMethod().entries()).flatMap(([methodKey, byType]) => {\n                const total = Array.from(byType.entries()).reduce((prev, [_, list]) => prev + list.reduce((p, c) => p + c.amount, 0), 0);\n                return (\n                  <div key={`method_${methodKey}`}>\n                    <div class=\"revenue-table__method_header\">\n                      <p>{this.payMethodObj[methodKey] ?? methodKey}</p>\n                      <p>{formatAmount(calendar_data.currency.symbol, total)}</p>\n                    </div>\n                    {Array.from(byType.entries()).map(([typeKey, list]) => {\n                      const groupName = PAYMENT_TYPES_WITH_METHOD.includes(typeKey) ? `${this.payTypesObj[typeKey] ?? typeKey}` : this.payTypesObj[typeKey] ?? typeKey;\n\n                      return (\n                        <div key={`type_${typeKey}`} class=\"px-1\">\n                          <ir-revenue-row payments={list} groupName={groupName}></ir-revenue-row>\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              })}\n          </Fragment>\n        ) : (\n          <p class=\"text-center my-auto mx-auto\">There are no payment transactions recorded for the selected date.</p>\n        )}\n      </div>\n    );\n  }\n}\n"],"version":3}