{"file":"ir-otp2.js","mappings":"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","names":[],"sources":["src/components/ir-otp-modal/ir-otp/ir-otp.css?tag=ir-otp&encapsulation=scoped","src/components/ir-otp-modal/ir-otp/ir-otp.tsx"],"sourcesContent":[".otp-input-wrapper {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.otp-digit {\r\n  --otp-size: 3rem;\r\n  width: var(--otp-size) !important;\r\n  height: var(--otp-size) !important;\r\n  padding: 0;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  background-color: #fff;\r\n  padding: 0 !important;\r\n}\r\n\r\n.otp-digit:disabled {\r\n  background-color: #e9ecef;\r\n  cursor: not-allowed;\r\n}\r\n\r\n/* Remove up/down arrows from number inputs */\r\ninput[type='number']::-webkit-inner-spin-button,\r\ninput[type='number']::-webkit-outer-spin-button {\r\n  -webkit-appearance: none;\r\n  margin: 0;\r\n}\r\n\r\ninput[type='number'] {\r\n  -moz-appearance: textfield;\r\n}\r\n\r\n/* Make inputs responsive */\r\n@media (max-width: 480px) {\r\n  .otp-digit {\r\n    width: 35px;\r\n    height: 45px;\r\n    font-size: 20px;\r\n  }\r\n\r\n  .otp-input-wrapper {\r\n    gap: 6px;\r\n  }\r\n}\r\n\r\n@media (max-width: 360px) {\r\n  .otp-digit {\r\n    width: 30px;\r\n    height: 40px;\r\n    font-size: 18px;\r\n  }\r\n\r\n  .otp-input-wrapper {\r\n    gap: 4px;\r\n  }\r\n}\r\n","import { Component, Event, EventEmitter, h, Host, Prop, State, Watch } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-otp',\r\n  styleUrl: 'ir-otp.css',\r\n  scoped: true,\r\n})\r\nexport class IrOtp {\r\n  /**\r\n   * The length of the OTP code\r\n   */\r\n  @Prop() length: number = 6;\r\n  /**\r\n   * The default OTP code\r\n   */\r\n  @Prop() defaultValue: string;\r\n\r\n  /**\r\n   * Whether the input is disabled\r\n   */\r\n  @Prop() disabled: boolean = false;\r\n\r\n  /**\r\n   * Placeholder character to display\r\n   */\r\n  @Prop() placeholder: string = '';\r\n\r\n  /**\r\n   * Input type - can be 'text', 'password', 'number', or 'tel'\r\n   */\r\n  @Prop() type: 'text' | 'password' | 'number' | 'tel' = 'number';\r\n\r\n  /**\r\n   * Auto focus on the first input when component loads\r\n   */\r\n  @Prop() autoFocus: boolean = true;\r\n\r\n  /**\r\n   * Whether to mask the input (show dots instead of text)\r\n   */\r\n  @Prop() secure: boolean = false;\r\n\r\n  /**\r\n   * Allow only numbers (0-9) as input\r\n   */\r\n  @Prop() numbersOnly: boolean = false;\r\n\r\n  /**\r\n   * Event emitted when the OTP value changes\r\n   */\r\n  @Event() otpChange: EventEmitter<string>;\r\n\r\n  /**\r\n   * Event emitted when the OTP is complete\r\n   */\r\n  @Event() otpComplete: EventEmitter<string>;\r\n\r\n  /**\r\n   * Current OTP value as an array of characters\r\n   */\r\n  @State() otpValues: string[] = [];\r\n\r\n  /**\r\n   * Reference to input elements\r\n   */\r\n  private inputRefs: HTMLInputElement[] = [];\r\n\r\n  /**\r\n   * Initialize the component\r\n   */\r\n  componentWillLoad() {\r\n    this.otpValues = Array(this.length).fill('');\r\n    if (this.defaultValue) {\r\n      this.setValue(this.defaultValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the first input after component renders\r\n   */\r\n  componentDidLoad() {\r\n    if (this.autoFocus && this.inputRefs[0]) {\r\n      setTimeout(() => {\r\n        this.inputRefs[0].focus();\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Watch for length changes and update the OTP values array\r\n   */\r\n  @Watch('length')\r\n  handleLengthChange(newLength: number) {\r\n    if (newLength < 1) return;\r\n\r\n    const oldLength = this.otpValues.length;\r\n\r\n    if (newLength > oldLength) {\r\n      // Add empty slots\r\n      this.otpValues = [...this.otpValues, ...Array(newLength - oldLength).fill('')];\r\n    } else if (newLength < oldLength) {\r\n      // Remove extra slots\r\n      this.otpValues = this.otpValues.slice(0, newLength);\r\n    }\r\n\r\n    this.emitChanges();\r\n  }\r\n\r\n  /**\r\n   * Update the current OTP value at the specified index\r\n   */\r\n  handleInput = (event: Event, index: number) => {\r\n    const input = event.target as HTMLInputElement;\r\n    let value = input.value;\r\n\r\n    // For number input type, restrict to digits only\r\n    if (this.numbersOnly) {\r\n      value = value.replace(/[^0-9]/g, '');\r\n    }\r\n\r\n    // Take only the last character if someone enters multiple\r\n    if (value.length > 1) {\r\n      value = value.slice(-1);\r\n      input.value = value;\r\n    }\r\n\r\n    this.otpValues[index] = value;\r\n    this.emitChanges();\r\n\r\n    // Move to next input if this one is filled\r\n    if (value && index < this.length - 1) {\r\n      this.inputRefs[index + 1].focus();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle keyboard navigation\r\n   */\r\n  handleKeyDown = (event: KeyboardEvent, index: number) => {\r\n    switch (event.key) {\r\n      case 'Backspace':\r\n        if (!this.otpValues[index] && index > 0) {\r\n          // If current field is empty and backspace is pressed, go to previous field\r\n          this.inputRefs[index - 1].focus();\r\n          // Prevent default to avoid browser navigation\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case 'Delete':\r\n        // Clear current input on delete\r\n        this.otpValues[index] = '';\r\n        this.emitChanges();\r\n        break;\r\n      case 'ArrowLeft':\r\n        // Move to previous input on left arrow\r\n        if (index > 0) {\r\n          this.inputRefs[index - 1].focus();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case 'ArrowRight':\r\n        // Move to next input on right arrow\r\n        if (index < this.length - 1) {\r\n          this.inputRefs[index + 1].focus();\r\n          event.preventDefault();\r\n        }\r\n        break;\r\n      case 'Home':\r\n        // Move to first input\r\n        this.inputRefs[0].focus();\r\n        event.preventDefault();\r\n        break;\r\n      case 'End':\r\n        // Move to last input\r\n        this.inputRefs[this.length - 1].focus();\r\n        event.preventDefault();\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handle paste event to populate the OTP fields\r\n   */\r\n  handlePaste = (event: ClipboardEvent, index: number) => {\r\n    event.preventDefault();\r\n    const pastedData = event.clipboardData?.getData('text') || '';\r\n\r\n    // If numbersOnly is enabled, filter non-number characters\r\n    const filteredData = this.numbersOnly ? pastedData.replace(/[^0-9]/g, '') : pastedData;\r\n\r\n    // Fill OTP values with pasted data\r\n    for (let i = 0; i < Math.min(filteredData.length, this.length - index); i++) {\r\n      this.otpValues[index + i] = filteredData[i];\r\n    }\r\n\r\n    // Update inputs with new values\r\n    this.inputRefs.forEach((input, idx) => {\r\n      input.value = this.otpValues[idx] || '';\r\n    });\r\n\r\n    // Focus on the next empty input or the last one\r\n    const nextEmptyIndex = this.otpValues.findIndex(val => !val);\r\n    if (nextEmptyIndex !== -1 && nextEmptyIndex < this.length) {\r\n      this.inputRefs[nextEmptyIndex].focus();\r\n    } else {\r\n      this.inputRefs[this.length - 1].focus();\r\n    }\r\n\r\n    this.emitChanges();\r\n  };\r\n\r\n  /**\r\n   * Focus handler to select all text when focused\r\n   */\r\n  handleFocus = (event: FocusEvent) => {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.value) {\r\n      setTimeout(() => input.select(), 0);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Helper method to emit change events\r\n   */\r\n  private emitChanges() {\r\n    const otpValue = this.otpValues.join('');\r\n    this.otpChange.emit(otpValue);\r\n\r\n    // If all fields are filled, trigger the complete event\r\n    if (this.otpValues.every(val => val !== '') && this.otpValues.length === this.length) {\r\n      this.otpComplete.emit(otpValue);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Manually clear all inputs\r\n   */\r\n  public clear() {\r\n    this.otpValues = Array(this.length).fill('');\r\n    this.inputRefs.forEach(input => {\r\n      input.value = '';\r\n    });\r\n    this.emitChanges();\r\n\r\n    // Focus the first input after clearing\r\n    if (this.inputRefs[0]) {\r\n      this.inputRefs[0].focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set OTP values programmatically\r\n   */\r\n  public setValue(value: string) {\r\n    const valueArray = value.split('');\r\n\r\n    for (let i = 0; i < this.length; i++) {\r\n      this.otpValues[i] = i < valueArray.length ? valueArray[i] : '';\r\n    }\r\n\r\n    // Update the actual input elements\r\n    this.inputRefs.forEach((input, idx) => {\r\n      input.value = this.otpValues[idx] || '';\r\n    });\r\n\r\n    this.emitChanges();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host class=\"otp-input-container\">\r\n        <div class=\"otp-input-wrapper\">\r\n          {Array(this.length)\r\n            .fill(null)\r\n            .map((_, index) => (\r\n              <input\r\n                ref={el => (this.inputRefs[index] = el as HTMLInputElement)}\r\n                type={this.type}\r\n                inputmode={this.numbersOnly ? 'numeric' : 'text'}\r\n                class=\"otp-digit form-control input-sm\"\r\n                maxlength=\"1\"\r\n                placeholder={this.placeholder}\r\n                disabled={this.disabled}\r\n                autocomplete=\"one-time-code\"\r\n                value={this.otpValues[index]}\r\n                onInput={e => this.handleInput(e, index)}\r\n                onKeyDown={e => this.handleKeyDown(e, index)}\r\n                onPaste={e => this.handlePaste(e, index)}\r\n                onFocus={this.handleFocus}\r\n                aria-label={`Digit ${index + 1} of ${this.length}`}\r\n              />\r\n            ))}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"version":3}