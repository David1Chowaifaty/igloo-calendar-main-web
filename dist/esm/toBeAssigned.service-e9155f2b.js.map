{"file":"toBeAssigned.service-e9155f2b.js","mappings":"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","names":["moment"],"sources":["src/services/toBeAssigned.service.ts"],"sourcesContent":["import axios from 'axios';\nimport { IAvailableRoom, IRoomCategory, IUnassignedDates, InnerRecord } from '../models/tobeassigned';\nimport { dateDifference, dateToFormattedString, extras } from '../utils/utils';\nimport moment from 'moment';\nimport { Booking } from '@/models/booking.dto';\n\nexport class ToBeAssignedService {\n  public async getUnassignedDates(propertyid: number, from_date: string, to_date: string) {\n    try {\n      const { data } = await axios.post(`/Get_UnAssigned_Dates`, {\n        propertyid,\n        from_date,\n        to_date,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return this.convertUnassignedDates(data.My_Result);\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async getUnassignedRooms(calendarFromDates: { from_date: string; to_date: string }, propertyid: number, specific_date: string, roomInfo: any, formattedLegendData: any) {\n    try {\n      const { data } = await axios.post(`/Get_Aggregated_UnAssigned_Rooms`, {\n        propertyid,\n        specific_date,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return this.transformToAssignable(calendarFromDates, data, roomInfo, formattedLegendData);\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async assignUnit(props: { booking_nbr: string; identifier: string; pr_id: number; check_in: boolean }): Promise<Booking> {\n    try {\n      const { data } = await axios.post(`/Assign_Exposed_Room`, {\n        ...props,\n        extras,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      console.log(data);\n      return data['My_Result'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  private cleanSpacesAndSpecialChars(str: string) {\n    const regex = /[^a-zA-Z0-9]+/g;\n    return str.replace(regex, '');\n  }\n\n  private transformToAssignable(calendarFromDates: { from_date: string; to_date: string }, data: any, roomInfo, formattedLegendData): IRoomCategory[] {\n    const result: IRoomCategory[] = [];\n    data.My_Result.forEach((customer: any) => {\n      customer.unassigned_rooms.forEach((room: any) => {\n        let roomCategory: IRoomCategory = {\n          roomTypeName: room.room_type_name,\n          ID: room.identifier,\n          NAME: room.guest_name,\n          identifier: room.identifier,\n          FROM_DATE: room.unassigned_date,\n          TO_DATE: room.unassigned_date,\n          BOOKING_NUMBER: room.book_nbr,\n          STATUS: 'IN-HOUSE',\n          defaultDateRange: {\n            fromDate: undefined,\n            toDate: undefined,\n            fromDateTimeStamp: 0,\n            toDateTimeStamp: 0,\n            fromDateStr: '',\n            toDateStr: '',\n            dateDifference: 0,\n          },\n          NO_OF_DAYS: 1,\n          roomsInfo: roomInfo,\n          legendData: formattedLegendData,\n          availableRooms: [],\n          RT_ID: this.getRoomTypeId(room.room_type_name, roomInfo),\n        };\n        this.updateAvailableRooms(calendarFromDates, room, roomCategory, formattedLegendData, roomInfo);\n        this.addDefaultDateRange(roomCategory);\n        result.push(roomCategory);\n      });\n    });\n    return result;\n  }\n  addDefaultDateRange(roomCategory: IRoomCategory) {\n    roomCategory.defaultDateRange.fromDate = new Date(roomCategory.FROM_DATE + 'T00:00:00');\n    roomCategory.defaultDateRange.fromDateStr = dateToFormattedString(roomCategory.defaultDateRange.fromDate);\n    roomCategory.defaultDateRange.fromDateTimeStamp = roomCategory.defaultDateRange.fromDate.getTime();\n\n    roomCategory.defaultDateRange.toDate = new Date(roomCategory.TO_DATE + 'T00:00:00');\n    roomCategory.defaultDateRange.toDateStr = dateToFormattedString(roomCategory.defaultDateRange.toDate);\n    roomCategory.defaultDateRange.toDateTimeStamp = roomCategory.defaultDateRange.toDate.getTime();\n\n    roomCategory.defaultDateRange.dateDifference = roomCategory.NO_OF_DAYS;\n  }\n  private getRoomTypeId(roomName: string, roomInfo: any) {\n    return roomInfo.find(room => this.cleanSpacesAndSpecialChars(room.name) === this.cleanSpacesAndSpecialChars(roomName))?.id || null;\n  }\n  private updateAvailableRooms(calendarFromDates: { from_date: string; to_date: string }, room: any, roomCategory: IRoomCategory, formattedLegendData, roomsInfo): void {\n    const rooms: IAvailableRoom[] = [];\n    room.assignable_units.forEach((unit: any) => {\n      if (unit.Is_Fully_Available && !unit.Is_Not_Available) {\n        const days = dateDifference(unit.from_date, unit.to_date);\n        const fromDate = moment(new Date(calendarFromDates.from_date)).isAfter(moment(new Date(unit.from_date))) ? calendarFromDates.from_date : unit.from_date;\n        const toDate =\n          moment(new Date(calendarFromDates.to_date)).isBefore(moment(new Date(unit.to_date))) &&\n          moment(new Date(calendarFromDates.to_date)).isAfter(moment(new Date(unit.from_date)))\n            ? calendarFromDates.to_date\n            : unit.to_date;\n        rooms.push({\n          RT_ID: roomCategory.RT_ID,\n          STATUS: 'PENDING-CONFIRMATION',\n          FROM_DATE: fromDate,\n          roomName: unit.name,\n          PR_ID: unit.pr_id,\n          TO_DATE: toDate,\n          NO_OF_DAYS: days,\n          ID: 'NEW_TEMP_EVENT',\n          NAME: '',\n          NOTES: '',\n          BALANCE: '',\n          INTERNAL_NOTE: '',\n          hideBubble: true,\n          legendData: formattedLegendData,\n          roomsInfo,\n        });\n        roomCategory.TO_DATE = unit.to_date;\n        roomCategory.NO_OF_DAYS = days;\n      }\n    });\n    roomCategory.availableRooms = rooms;\n  }\n\n  private convertUnassignedDates(dates: IUnassignedDates[]): Record<number, InnerRecord> {\n    let convertedDates: Record<number, InnerRecord> = {};\n    dates.forEach(date => {\n      let newDate = new Date(date.date);\n      newDate.setHours(0, 0, 0, 0);\n      convertedDates[newDate.getTime()] = {\n        categories: {},\n        dateStr: date.description,\n      };\n    });\n    return convertedDates;\n  }\n}\n"],"version":3}