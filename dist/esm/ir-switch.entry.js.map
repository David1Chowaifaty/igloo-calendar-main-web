{"file":"ir-switch.entry.js","mappings":";;AAAA,MAAM,WAAW,GAAG,8vCAA8vC,CAAC;AACnxC,uBAAe,WAAW;;MCMb,QAAQ;IALrB;;;QAM2B,YAAO,GAAG,KAAK,CAAC;QAEjC,aAAQ,GAAY,KAAK,CAAC;QAK1B,QAAG,GAAG,EAAE,CAAC;KAiDlB;IA/CC,iBAAiB;QACf,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;KACtC;IAED,gBAAgB;QACd,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QACD,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;KAC/E;IAED,gBAAgB,CAAC,MAAc;QAC7B,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,MAAM,UAAU,GAAG,gEAAgE,CAAC;QACpF,MAAM,gBAAgB,GAAG,UAAU,CAAC,MAAM,CAAC;QAC3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/B,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAgB,CAAC,CAAC,CAAC;SAC3E;QACD,OAAO,MAAM,CAAC;KACf;IAED,iBAAiB;QACf,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC,CAAC;QAC9E,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACrC;IAED,MAAM;QACJ,QACE,EAAC,IAAI,uDACH,+DACE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,EACjC,IAAI,EAAC,QAAQ,EACb,EAAE,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,EAC7B,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAC1C,IAAI,EAAC,QAAQ,gBACD,IAAI,CAAC,OAAO,GAAG,SAAS,GAAG,WAAW,EAClD,KAAK,EAAE,IAAI,EACX,KAAK,EAAC,YAAY,IAElB,6DAAM,KAAK,EAAC,aAAa,gBAAa,IAAI,CAAC,OAAO,GAAG,SAAS,GAAG,WAAW,GAAS,CAC9E,EACT,8DAAO,IAAI,EAAC,UAAU,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,iBAAc,MAAM,EAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC,cAAc,GAAG,CAC9G,EACP;KACH;;;;;;","names":[],"sources":["src/components/ui/ir-switch/ir-switch.css?tag=ir-switch&encapsulation=scoped","src/components/ui/ir-switch/ir-switch.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  box-sizing: border-box;\n  --ir-root-width: 36px;\n  --ir-root-height: 20px;\n}\n\n.hidden-input {\n  transform: translateX(-100%);\n  position: absolute;\n  pointer-events: none;\n  opacity: 0;\n  margin: 0;\n  width: var(--ir-root-width);\n  height: var(--ir-root-height);\n}\n.SwitchRoot {\n  all: unset;\n  padding: 0;\n  margin: 0;\n  width: var(--ir-root-width);\n  height: var(--ir-root-height);\n  background-color: var(--ir-root-inactive-color, #ff4961);\n  position: relative;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 10px;\n  --webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  border-radius: 9999px;\n  box-sizing: border-box;\n}\n.SwitchRoot:disabled {\n  opacity: 80%;\n}\n.SwitchRoot:focus-visible {\n  outline: 1px solid var(--ir-root-active-color, rgb(55, 188, 155));\n  outline-offset: 1px;\n}\n.SwitchRoot[data-state='checked'] {\n  background-color: var(--ir-root-active-color, rgb(55, 188, 155));\n}\n.SwitchThumb {\n  padding: 0;\n  margin: 0;\n  display: block;\n  width: calc(var(--ir-root-height) - 3px);\n  height: calc(var(--ir-root-height) - 3px);\n  border-radius: 9999px;\n  background: white;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px;\n  transition: transform 100ms ease 0s;\n  transform: translateX(2px);\n  will-change: transform;\n}\n.SwitchThumb[data-state='checked'] {\n  transform: translateX(calc(var(--ir-root-height) - 3px));\n}\n","import { Component, Event, EventEmitter, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-switch',\n  styleUrl: 'ir-switch.css',\n  scoped: true,\n})\nexport class IrSwitch {\n  @Prop({ mutable: true }) checked = false;\n  @Prop() switchId: string;\n  @Prop() disabled: boolean = false;\n\n  @Event() checkChange: EventEmitter<boolean>;\n\n  private switchRoot: HTMLButtonElement;\n  private _id = '';\n\n  componentWillLoad() {\n    this._id = this.generateRandomId(10);\n  }\n\n  componentDidLoad() {\n    if (!this.switchRoot) {\n      return;\n    }\n    this.switchRoot.setAttribute('aria-checked', this.checked ? 'true' : 'false');\n  }\n\n  generateRandomId(length: number) {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  }\n\n  handleCheckChange() {\n    this.checked = !this.checked;\n    this.switchRoot.setAttribute('aria-checked', this.checked ? 'true' : 'false');\n    this.checkChange.emit(this.checked);\n  }\n\n  render() {\n    return (\n      <Host>\n        <button\n          disabled={this.disabled}\n          ref={el => (this.switchRoot = el)}\n          type=\"button\"\n          id={this.switchId || this._id}\n          onClick={this.handleCheckChange.bind(this)}\n          role=\"switch\"\n          data-state={this.checked ? 'checked' : 'unchecked'}\n          value={'on'}\n          class=\"SwitchRoot\"\n        >\n          <span class=\"SwitchThumb\" data-state={this.checked ? 'checked' : 'unchecked'}></span>\n        </button>\n        <input type=\"checkbox\" checked={this.checked} aria-hidden=\"true\" tabIndex={-1} value={'on'} class=\"hidden-input\" />\n      </Host>\n    );\n  }\n}\n"],"version":3}