{"file":"ir-radio.ir-weekday-selector.entry.js","mappings":"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","names":[],"sources":["src/components/ui/ir-radio/ir-radio.css?tag=ir-radio&encapsulation=scoped","src/components/ui/ir-radio/ir-radio.tsx","src/components/ui/ir-weekday-selector/ir-weekday-selector.css?tag=ir-weekday-selector&encapsulation=scoped","src/components/ui/ir-weekday-selector/ir-weekday-selector.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n.checkmark {\n  top: 50% !important;\n  transform: translateY(-50%) !important;\n}\n","import { Component, Event, EventEmitter, Prop, State, h, Watch, Element } from '@stencil/core';\nimport { v4 } from 'uuid';\n\n@Component({\n  tag: 'ir-radio',\n  styleUrl: 'ir-radio.css',\n  scoped: true,\n})\nexport class IrRadio {\n  @Element() el: HTMLIrRadioElement;\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Prop() checked: boolean = false;\n\n  /**\n   * The label text associated with the checkbox.\n   */\n  @Prop() label: string;\n\n  /**\n   * The unique ID of the checkbox element.\n   */\n  @Prop() radioBoxId = v4();\n\n  /**\n   * The name attribute of the checkbox, used for form submission.\n   */\n  @Prop() name: string;\n\n  /**\n   * Whether the checkbox is in an indeterminate state.\n   */\n  @Prop() indeterminate: boolean;\n\n  /**\n   * Disables the checkbox when true.\n   */\n  @Prop() disabled: boolean;\n\n  /**\n   * CSS class applied to the label element.\n   */\n  @Prop() labelClass: string;\n\n  /**\n   * Internal state tracking whether the checkbox is currently checked.\n   */\n  @State() currentChecked = false;\n\n  /**\n   * Emitted when the checkbox's checked state changes.\n   */\n  @Event() checkChange: EventEmitter<boolean>;\n\n  private radioRef: HTMLInputElement;\n\n  componentWillLoad() {\n    this.currentChecked = this.checked;\n  }\n  componentDidLoad() {\n    if (this.radioRef) {\n      this.radioRef.setAttribute('aria-checked', JSON.stringify(this.checked));\n    }\n  }\n  /**\n   * Watcher for the `checked` property. Syncs internal state with external prop changes.\n   */\n  @Watch('checked')\n  handleCheckedChange(newValue: boolean) {\n    if (newValue === this.currentChecked) {\n      return;\n    }\n    this.currentChecked = this.checked;\n  }\n\n  /**\n   * Handles user interaction with the checkbox and updates its state.\n   */\n  private handleCheckChange() {\n    this.currentChecked = !this.currentChecked;\n    if (this.radioRef) {\n      this.radioRef.setAttribute('aria-checked', JSON.stringify(this.currentChecked));\n    }\n    this.checkChange.emit(this.currentChecked);\n  }\n  render() {\n    return (\n      <div class=\"input-group\">\n        <label class=\"check-container radio-container align-items-center m-0 py-0\">\n          <span>{this.label}</span>\n          <input\n            class=\"p-0 m-0\"\n            type=\"radio\"\n            value=\"000\"\n            name={this.el.name}\n            title=\"\"\n            onChange={() => {\n              this.handleCheckChange();\n            }}\n            checked={this.currentChecked}\n            ref={el => (this.radioRef = el)}\n          />\n          <span class=\"checkmark\"></span>\n        </label>\n      </div>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n.days-checkbox {\n  gap: 0.5rem;\n}\n","import { Component, Event, EventEmitter, h, Host, Prop, State, Watch } from '@stencil/core';\nexport interface Weekday {\n  value: number;\n  label: string;\n}\n@Component({\n  tag: 'ir-weekday-selector',\n  styleUrl: 'ir-weekday-selector.css',\n  scoped: true,\n})\nexport class IrWeekdaySelector {\n  /**\n   * Initial list of selected weekdays (numeric values).\n   */\n  @Prop() weekdays: number[] = [];\n\n  /**\n   * Internal state tracking currently selected weekdays.\n   */\n  @State() selectedWeekdays: Set<number> = new Set(this.weekdays);\n\n  /**\n   * Emits an updated list of selected weekday values when the selection changes.\n   *\n   * Example:\n   * ```tsx\n   * <ir-weekday-selector onWeekdayChange={(e) => console.log(e.detail)} />\n   * ```\n   */\n  @Event() weekdayChange: EventEmitter<number[]>;\n\n  private _weekdays: Weekday[] = [\n    { value: 1, label: 'M' },\n    { value: 2, label: 'T' },\n    { value: 3, label: 'W' },\n    { value: 4, label: 'Th' },\n    { value: 5, label: 'Fr' },\n    { value: 6, label: 'Sa' },\n    { value: 0, label: 'Su' },\n  ];\n\n  @Watch('weekdays')\n  handleWeekdayChange(newDays: number[], oldDays: number[]) {\n    if (newDays.length !== oldDays.length && newDays.length !== this.selectedWeekdays.size) {\n      this.selectedWeekdays = new Set(newDays);\n    }\n  }\n  /**\n   * Toggles the selected state of a specific weekday.\n   * Updates internal state and emits `weekdayChange` event.\n   *\n   * @param checked - Whether the checkbox is checked.\n   * @param weekDay - The numeric value of the weekday.\n   */\n  private toggleWeekDays({ checked, weekDay }: { checked: boolean; weekDay: number }): void {\n    const prev = new Set(this.selectedWeekdays);\n    if (checked) {\n      if (!this.selectedWeekdays.has(weekDay)) {\n        prev.add(weekDay);\n        this.selectedWeekdays = new Set(prev);\n      }\n    } else {\n      prev.delete(weekDay);\n      this.selectedWeekdays = new Set(prev);\n    }\n    this.weekdayChange.emit(Array.from(this.selectedWeekdays));\n  }\n  render() {\n    return (\n      <Host class=\"my-1 d-flex align-items-center\" style={{ gap: '1.1rem' }}>\n        {this._weekdays.map(w => (\n          <ir-checkbox\n            checked={this.selectedWeekdays.has(w.value)}\n            onCheckChange={e => this.toggleWeekDays({ checked: e.detail, weekDay: w.value })}\n            label={w.label}\n            labelClass=\"m-0 p-0\"\n            class=\"days-checkbox\"\n          ></ir-checkbox>\n        ))}\n      </Host>\n    );\n  }\n}\n"],"version":3}