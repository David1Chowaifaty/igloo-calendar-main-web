{"file":"ir-password-validator.requirement-check.entry.js","mappings":";;AAAA,MAAM,sBAAsB,GAAG,4CAA4C,CAAC;AAC5E,kCAAe,sBAAsB;;MCMxB,mBAAmB;IALhC;;;;;;QASU,aAAQ,GAAW,EAAE,CAAC;KAwD/B;IAnDC,oBAAoB,CAAC,QAAgB,EAAE,QAAgB;QACrD,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACzB,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,gEAAgE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SACrH;KACF;IAED,IAAY,WAAW;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;KAChE;IAED,IAAY,YAAY;QACtB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACpC;IAED,IAAY,YAAY;QACtB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACpC;IAED,IAAY,QAAQ;QAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACpC;IAED,IAAY,cAAc;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChD;IACD,MAAM;QACJ,QACE,4DAAK,KAAK,EAAC,SAAS,IAClB,0EAAmB,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAC,sBAAsB,GAAqB,EAC9F,0EAAmB,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,+BAA+B,GAAqB,EACxG,0EAAmB,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,+BAA+B,GAAqB,EACxG,0EAAmB,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAC,oBAAoB,GAAqB,EACzF,0EAAmB,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,EAAC,gCAAgC,GAAqB,CACvG,EACN;KACH;;;;;;;AClEH,MAAM,mBAAmB,GAAG,gMAAgM,CAAC;AAC7N,+BAAe,mBAAmB;;MCMrB,gBAAgB;IAL7B;;;;;QASU,YAAO,GAAY,KAAK,CAAC;;;;QAKzB,SAAI,GAAW,EAAE,CAAC;KAU3B;IARC,MAAM;QACJ,QACE,4DAAK,KAAK,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IACpD,iEAAU,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAa,EACnG,+DAAO,IAAI,CAAC,IAAI,CAAQ,CACpB,EACN;KACH;;;;;;","names":[],"sources":["src/components/ir-password-validator/ir-password-validator.css?tag=ir-password-validator&encapsulation=scoped","src/components/ir-password-validator/ir-password-validator.tsx","src/components/ir-password-validator/requirement-check/requirement-check.css?tag=requirement-check&encapsulation=scoped","src/components/ir-password-validator/requirement-check/requirement-check.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n","import { Component, Event, EventEmitter, Prop, Watch, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-password-validator',\r\n  styleUrl: 'ir-password-validator.css',\r\n  scoped: true,\r\n})\r\nexport class IrPasswordValidator {\r\n  /**\r\n   * The password string to validate\r\n   */\r\n  @Prop() password: string = '';\r\n\r\n  @Event({ bubbles: true, composed: true }) passwordValidationChange: EventEmitter<boolean>;\r\n\r\n  @Watch('password')\r\n  handlePasswordChange(newValue: string, oldValue: string) {\r\n    if (newValue !== oldValue) {\r\n      this.passwordValidationChange.emit(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()\\-_=+]).{8,16}$/.test(newValue));\r\n    }\r\n  }\r\n\r\n  private get validLength(): boolean {\r\n    if (!this.password) {\r\n      return false;\r\n    }\r\n    return this.password.length >= 8 && this.password.length <= 16;\r\n  }\r\n\r\n  private get hasUppercase(): boolean {\r\n    if (!this.password) {\r\n      return false;\r\n    }\r\n    return /[A-Z]/.test(this.password);\r\n  }\r\n\r\n  private get hasLowercase(): boolean {\r\n    if (!this.password) {\r\n      return false;\r\n    }\r\n    return /[a-z]/.test(this.password);\r\n  }\r\n\r\n  private get hasDigit(): boolean {\r\n    if (!this.password) {\r\n      return false;\r\n    }\r\n    return /[0-9]/.test(this.password);\r\n  }\r\n\r\n  private get hasSpecialChar(): boolean {\r\n    if (!this.password) {\r\n      return false;\r\n    }\r\n    return /[!@#$%^&*()\\-_=+]/.test(this.password);\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"m-0 p-0\">\r\n        <requirement-check isValid={this.validLength} text=\"Minimum 8 characters\"></requirement-check>\r\n        <requirement-check isValid={this.hasUppercase} text=\"At least one uppercase letter\"></requirement-check>\r\n        <requirement-check isValid={this.hasLowercase} text=\"At least one lowercase letter\"></requirement-check>\r\n        <requirement-check isValid={this.hasDigit} text=\"At least one digit\"></requirement-check>\r\n        <requirement-check isValid={this.hasSpecialChar} text=\"At least one special character\"></requirement-check>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n  font-size: 0.875rem;\r\n}\r\n.valid {\r\n  color: var(--green, #28d094);\r\n}\r\n.requirement {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n","import { Component, Prop, h } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'requirement-check',\r\n  styleUrl: 'requirement-check.css',\r\n  scoped: true,\r\n})\r\nexport class RequirementCheck {\r\n  /**\r\n   * Whether this requirement has been satisfied (true/false).\r\n   */\r\n  @Prop() isValid: boolean = false;\r\n\r\n  /**\r\n   * The requirement text to display (e.g. \"At least one lowercase letter\").\r\n   */\r\n  @Prop() text: string = '';\r\n\r\n  render() {\r\n    return (\r\n      <div class={{ requirement: true, valid: this.isValid }}>\r\n        <ir-icons style={{ '--icon-size': '0.875rem' }} name={this.isValid ? 'check' : 'xmark'}></ir-icons>\r\n        <span>{this.text}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"version":3}