{"file":"property.service-fc719848.js","mappings":"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","names":[],"sources":["src/components/ir-sales-by-channel/types.ts","src/services/property.service.ts"],"sourcesContent":["// src/components/ir-sales-by-channel/types.ts\nimport { z } from 'zod';\n\n/* ---------- Report (input) ---------- */\nexport const CurrencySchema = z.object({\n  code: z.string(),\n  id: z.number(),\n  symbol: z.string(),\n});\n\nconst ChannelReportBaseSchema = z.object({\n  NIGHTS: z.number(),\n  PCT: z.number(),\n  REVENUE: z.number(),\n  SOURCE: z.string(),\n  PROPERTY_ID: z.number(),\n  PROPERTY_NAME: z.string(),\n  currency: z.string(),\n});\nexport type SalesByChannelMode = 'property' | 'mpo';\n/**\n * Transforms UPPER_SNAKE_CASE keys to lowercase at parse time.\n * Output type is exactly the lowercased version of the base schema.\n */\nconst ExtendedChanelReportBaseSchema = ChannelReportBaseSchema.extend({\n  last_year: ChannelReportBaseSchema.optional(),\n});\nexport const ChannelReportSchema = ExtendedChanelReportBaseSchema;\n\nexport type ChannelReport = z.infer<typeof ExtendedChanelReportBaseSchema>;\n\nexport const ChannelReportResultSchema = z.array(ExtendedChanelReportBaseSchema).nullable();\nexport type ChannelReportResult = z.infer<typeof ChannelReportResultSchema>;\n\n/* ---------- Params ---------- */\n\nexport const ChannelSalesParamsSchema = z.object({\n  AC_ID: z.string().optional(),\n  BOOK_CASE: z.string().min(1),\n  FROM_DATE: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Use YYYY-MM-DD format'),\n  TO_DATE: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Use YYYY-MM-DD format'),\n  WINDOW: z.coerce.number().int().nonnegative(),\n  // Accepts true/false, \"true\"/\"false\", 1/0; defaults to false\n  is_export_to_excel: z.coerce.boolean().optional().default(false),\n  LIST_AC_ID: z.array(z.number()).nullable(),\n});\n// .strict()\n// .refine(v => new Date(v.FROM_DATE) <= new Date(v.TO_DATE), { message: 'FROM_DATE must be on or before TO_DATE', path: ['TO_DATE'] });\n\nexport type ChannelSalesParams = z.infer<typeof ChannelSalesParamsSchema>;\n\n/* ---------- Filters ---------- */\n\nexport const ChannelSalesFilterSchema = ChannelSalesParamsSchema.extend({\n  include_previous_year: z.boolean(),\n});\n\nexport type ChannelSaleFilter = z.infer<typeof ChannelSalesFilterSchema>;\n\n/* ---------- Helpers (optional but handy) ---------- */\n\nexport const parseChannelReport = (data: unknown) => ChannelReportSchema.parse(data);\nexport const safeParseChannelReport = (data: unknown) => ChannelReportSchema.safeParse(data);\n\nexport const parseChannelReportResult = (data: unknown) => ChannelReportResultSchema.parse(data);\nexport const safeParseChannelReportResult = (data: unknown) => ChannelReportResultSchema.safeParse(data);\n\nexport const parseChannelSalesParams = (data: unknown) => ChannelSalesParamsSchema.parse(data);\nexport const safeParseChannelSalesParams = (data: unknown) => ChannelSalesParamsSchema.safeParse(data);\n\n/* ---------- Consolidated exports ---------- */\n\nexport { ChannelReportSchema as ReportSchema, ChannelReportResultSchema as ReportResultSchema, ChannelSalesParamsSchema as SalesParamsSchema };\n\nexport type { ChannelReport as Report, ChannelReportResult as ReportResult, ChannelSalesParams as SalesParams };\n","import { type ChannelReportResult, type ChannelSalesParams, parseChannelReportResult, parseChannelSalesParams } from '@/components/ir-sales-by-channel/types';\nimport calendar_data from '@/stores/calendar-data';\nimport { downloadFile } from '@/utils/utils';\nimport axios from 'axios';\nimport { z } from 'zod';\n\nexport type CountrySalesParams = {\n  AC_ID: number;\n  WINDOW: number;\n  FROM_DATE: string;\n  TO_DATE: string;\n  BOOK_CASE: string;\n  is_export_to_excel: boolean;\n};\nexport type DailyRevenueReportParams = {\n  date: string;\n  property_id: string;\n  is_export_to_excel: boolean;\n};\nexport type MonthlyStatsParams = {\n  property_id: number;\n  from_date: string;\n  to_date: string;\n  is_export_to_excel?: boolean;\n};\nexport interface MonthlyStatsResults {\n  AverageOccupancy: number;\n  DailyStats: DailyStat[];\n  ExcelLink: null;\n  PeakDays: PeakDay[];\n  Occupancy_Difference_From_Previous_Month: number;\n  TotalUnitsBooked: number;\n  Total_Guests: number;\n}\n\nexport interface PeakDay {\n  Date: string;\n  OccupancyPercent: number;\n}\n\nexport interface DailyStat {\n  Date: string;\n  Occupancy: number;\n  Units_booked: number;\n  Rooms_Revenue: number;\n  ADR: number;\n  Total_Guests: number | undefined;\n}\nexport const AllowedPropertiesSchema = z.array(z.object({ id: z.number(), name: z.string() })).nullable();\n\nexport type AllowedProperties = z.infer<typeof AllowedPropertiesSchema>;\nexport class PropertyService {\n  public async getExposedProperty(params: {\n    id: number | null;\n    language: string;\n    is_backend?: boolean;\n    aname?: string;\n    include_units_hk_status?: boolean;\n    include_sales_rate_plans?: boolean;\n  }) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Property`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = data.My_Result;\n      calendar_data.adultChildConstraints = results.adult_child_constraints;\n      calendar_data.allowedBookingSources = results.allowed_booking_sources;\n      calendar_data.allowed_payment_methods = results.allowed_payment_methods;\n      calendar_data.currency = results.currency;\n      calendar_data.is_vacation_rental = results.is_vacation_rental;\n      calendar_data.pickup_service = results.pickup_service;\n      calendar_data.max_nights = results.max_nights;\n      calendar_data.roomsInfo = results.roomtypes;\n      calendar_data.taxes = results.taxes;\n      calendar_data.id = results.id;\n      calendar_data.country = results.country;\n      calendar_data.name = results.name;\n      calendar_data.is_automatic_check_in_out = results.is_automatic_check_in_out;\n      calendar_data.tax_statement = results.tax_statement;\n      calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\n      calendar_data.is_pms_enabled = results.is_pms_enabled;\n      const spitTime = results?.time_constraints?.check_out_till?.split(':');\n      calendar_data.checkin_checkout_hours = {\n        offset: results.city.gmt_offset,\n        hour: Number(spitTime[0] || 0),\n        minute: Number(spitTime[1] || 0),\n      };\n      return data;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n\n  public async getChannelSales(params: ChannelSalesParams): Promise<ChannelReportResult> {\n    const _params = parseChannelSalesParams(params);\n    const { data } = await axios.post('/Get_Channel_Sales', _params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Channel_Sales.Link_excel);\n    }\n    return parseChannelReportResult(data.My_Result);\n  }\n\n  public async getExposedAllowedProperties() {\n    const { data } = await axios.post('/Get_Exposed_Allowed_Properties', {});\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return AllowedPropertiesSchema.parse(data.My_Result);\n  }\n\n  public async getCountrySales(params: CountrySalesParams) {\n    const { data } = await axios.post('/Get_Country_Sales', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Country_Sales.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async getDailyRevenueReport(params: DailyRevenueReportParams) {\n    const { data } = await axios.post('/Get_Daily_Revenue_Report', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Daily_Revenue_Report.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async setExposedCleaningFrequency(params: { property_id: number; code: string }) {\n    const { data } = await axios.post('/Set_Exposed_Cleaning_Frequency', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n  public async getMonthlyStats(params: MonthlyStatsParams): Promise<MonthlyStatsResults> {\n    const { data } = await axios.post('/Get_Monthly_Stats', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Monthly_Stats.Link_excel);\n    }\n    return data.My_Result;\n  }\n}\n"],"version":3}