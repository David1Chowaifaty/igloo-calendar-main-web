{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/utils/validation.ts"],"names":[],"mappings":"AAeA,MAAM,UAAU,YAAY,CAAI,IAAO,EAAE,KAA0C;IACjF,IAAI,OAAO,GAAG,IAAI,CAAC;IACnB,MAAM,MAAM,GAAgC,EAAE,CAAC;IAE/C,KAAK,MAAM,SAAS,IAAI,KAAK,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa;YAAE,SAAS;QAE7B,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAEvB,WAAW;QACX,IAAI,aAAa,CAAC,QAAQ,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,EAAE,CAAC,EAAE,CAAC;YACtF,OAAO,GAAG,KAAK,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACpD,CAAC;QAED,gBAAgB;QAChB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;gBACpF,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,qBAAqB,aAAa,CAAC,SAAS,GAAG,CAAC,CAAC;YAC1E,CAAC;YACD,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;gBACpF,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,qBAAqB,aAAa,CAAC,SAAS,GAAG,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;QAED,gBAAgB;QAChB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,aAAa,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC3E,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,oBAAoB,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC;YACxE,CAAC;YACD,IAAI,aAAa,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC3E,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,oBAAoB,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC;YACxE,CAAC;QACH,CAAC;QAED,qBAAqB;QACrB,IAAI,aAAa,CAAC,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACxE,OAAO,GAAG,KAAK,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5C,CAAC;QAED,oBAAoB;QACpB,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACzD,OAAO,GAAG,KAAK,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AAC7B,CAAC","sourcesContent":["export type ValidationRule = {\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  minValue?: number;\n  maxValue?: number;\n  pattern?: RegExp;\n  custom?: (value: any) => boolean;\n};\n\ntype ValidationResult = {\n  isValid: boolean;\n  errors: { [key: string]: string[] };\n};\n\nexport function validateForm<T>(data: T, rules: { [P in keyof T]?: ValidationRule }): ValidationResult {\n  let isValid = true;\n  const errors: { [key: string]: string[] } = {};\n\n  for (const fieldName in rules) {\n    const rulesForField = rules[fieldName];\n    const value = data[fieldName];\n    if (!rulesForField) continue;\n\n    errors[fieldName] = [];\n\n    // Required\n    if (rulesForField.required && (value === null || value === undefined || value === '')) {\n      isValid = false;\n      errors[fieldName].push('This field is required.');\n    }\n\n    // String Length\n    if (typeof value === 'string') {\n      if (rulesForField.minLength !== undefined && value.length < rulesForField.minLength) {\n        isValid = false;\n        errors[fieldName].push(`Minimum length is ${rulesForField.minLength}.`);\n      }\n      if (rulesForField.maxLength !== undefined && value.length > rulesForField.maxLength) {\n        isValid = false;\n        errors[fieldName].push(`Maximum length is ${rulesForField.maxLength}.`);\n      }\n    }\n\n    // Numeric Range\n    if (typeof value === 'number') {\n      if (rulesForField.minValue !== undefined && value < rulesForField.minValue) {\n        isValid = false;\n        errors[fieldName].push(`Minimum value is ${rulesForField.minValue}.`);\n      }\n      if (rulesForField.maxValue !== undefined && value > rulesForField.maxValue) {\n        isValid = false;\n        errors[fieldName].push(`Maximum value is ${rulesForField.maxValue}.`);\n      }\n    }\n\n    // Regular Expression\n    if (rulesForField.pattern && !rulesForField.pattern.test(String(value))) {\n      isValid = false;\n      errors[fieldName].push('Invalid format.');\n    }\n\n    // Custom Validation\n    if (rulesForField.custom && !rulesForField.custom(value)) {\n      isValid = false;\n      errors[fieldName].push('Custom validation failed.');\n    }\n  }\n\n  return { isValid, errors };\n}\n"]}