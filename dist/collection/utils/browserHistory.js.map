{"version":3,"file":"browserHistory.js","sourceRoot":"","sources":["../../src/utils/browserHistory.ts"],"names":[],"mappings":"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","sourcesContent":["// src/utils/browserHistory.ts\r\n\r\n/**\r\n * A small utility for reading and writing browser history\r\n * and manipulating URL search params in a type-safe way.\r\n */\r\n\r\ntype Parser<T> = (value: string | null) => T;\r\n\r\n// Common parsers/serializers\r\nexport const ParamTypes = {\r\n  string: {\r\n    parse: (v: string | null): string => v ?? '',\r\n    serialize: (v: string): string => v,\r\n  },\r\n  number: {\r\n    parse: (v: string | null): number => {\r\n      if (v == null || v === '') return NaN;\r\n      const n = Number(v);\r\n      return isNaN(n) ? NaN : n;\r\n    },\r\n    serialize: (v: number): string => String(v),\r\n  },\r\n  boolean: {\r\n    parse: (v: string | null): boolean => v === 'true',\r\n    serialize: (v: boolean): string => (v ? 'true' : 'false'),\r\n  },\r\n} as const;\r\n\r\n/**\r\n * Read a single search‑param, parse it, and return a typed value.\r\n * Falls back to defaultValue if missing or parse fails.\r\n */\r\nexport function getParam<T>(key: string, { parse }: { parse: Parser<T> }, defaultValue: T): T {\r\n  const params = new URLSearchParams(window.location.search);\r\n  const raw = params.get(key);\r\n  try {\r\n    if (raw == null) return defaultValue;\r\n    return parse(raw);\r\n  } catch {\r\n    return defaultValue;\r\n  }\r\n}\r\n\r\n/** Helpers for the three built‑in types */\r\nexport function getStringParam(key: string, defaultValue = ''): string {\r\n  return getParam(key, ParamTypes.string, defaultValue);\r\n}\r\n\r\nexport function getNumberParam(key: string, defaultValue = NaN): number {\r\n  return getParam(key, ParamTypes.number, defaultValue);\r\n}\r\n\r\nexport function getBooleanParam(key: string, defaultValue = false): boolean {\r\n  return getParam(key, ParamTypes.boolean, defaultValue);\r\n}\r\n\r\n/**\r\n * Read all current search params into a Record<string, string>\r\n */\r\nexport function getAllParams(): Record<string, string> {\r\n  const params = new URLSearchParams(window.location.search);\r\n  const out: Record<string, string> = {};\r\n  for (const [key, value] of params.entries()) {\r\n    out[key] = value;\r\n  }\r\n  return out;\r\n}\r\n\r\ninterface SetParamsOptions {\r\n  /** if true, uses replaceState instead of pushState */\r\n  replace?: boolean;\r\n}\r\n\r\n/**\r\n * Update one or more search params.\r\n * Pass null to delete a param.\r\n * By default uses history.pushState; set replace: true to call replaceState.\r\n */\r\nexport function setParams(updates: Record<string, string | number | boolean | null>, options: SetParamsOptions = {}): void {\r\n  const params = new URLSearchParams(window.location.search);\r\n\r\n  for (const [key, value] of Object.entries(updates)) {\r\n    if (!value) {\r\n      params.delete(key);\r\n    } else {\r\n      params.set(key, String(value));\r\n    }\r\n  }\r\n\r\n  const newSearch = params.toString();\r\n  const newUrl = window.location.pathname + (newSearch ? `?${newSearch}` : '') + window.location.hash;\r\n\r\n  if (options.replace) {\r\n    window.history.replaceState(window.history.state, '', newUrl);\r\n  } else {\r\n    window.history.pushState(window.history.state, '', newUrl);\r\n  }\r\n}\r\n\r\n/**\r\n * Push a new history entry.\r\n * `path` may include search or hash.\r\n * `state` is the history state object.\r\n */\r\nexport function pushHistory(path: string, state: any = {}): void {\r\n  window.history.pushState(state, '', path);\r\n}\r\n\r\n/**\r\n * Replace the current history entry.\r\n * `path` may include search or hash.\r\n * `state` is the history state object.\r\n */\r\nexport function replaceHistory(path: string, state: any = {}): void {\r\n  window.history.replaceState(state, '', path);\r\n}\r\n"]}