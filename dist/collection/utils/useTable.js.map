{"version":3,"file":"useTable.js","sourceRoot":"","sources":["../../src/utils/useTable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAA8D,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAE/G,MAAM,CAAC,MAAM,UAAU,GAAG,CAAwB,IAAS,EAAE,KAAa,EAAE,EAAE;IAC5E,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAwB,OAA4B,EAAE,EAAE;IAC9E,qDAAqD;IACrD,MAAM,eAAe,mBACnB,KAAK,EAAE,EAAE,EACT,aAAa,EAAE,GAAG,EAAE,GAAE,CAAC,EACvB,mBAAmB,EAAE,IAAI,IACtB,OAAO,CACX,CAAC;IAEF,qBAAqB;IACrB,MAAM,KAAK,GAAG,WAAW,CAAQ,eAAe,CAAC,CAAC;IAElD,sEAAsE;IACtE,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAElD,6BAA6B;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAY,EAAE,EAAE;;QAChC,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE,CAAC;YAClC,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;YAChC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACjC,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAChC,CAAC;QACD,MAAA,OAAO,CAAC,aAAa,wDAAG,OAAO,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,+CACpB,IAAI,GACJ,OAAO,KACV,KAAK,EACL,aAAa,EAAE,QAAQ,IACvB,CAAC,CAAC;IAEJ,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["import { createStore } from '@stencil/store';\r\nimport { type RowData, type TableOptions, type TableOptionsResolved, createTable } from '@tanstack/table-core';\r\n\r\nexport const flexRender = <TProps extends object>(comp: any, props: TProps) => {\r\n  if (typeof comp === 'function') {\r\n    return comp(props);\r\n  }\r\n  return comp;\r\n};\r\n\r\nexport const useTable = <TData extends RowData>(options: TableOptions<TData>) => {\r\n  // Compose in the generic options to the user options\r\n  const resolvedOptions: TableOptionsResolved<TData> = {\r\n    state: {}, // Dummy state\r\n    onStateChange: () => {}, // noop\r\n    renderFallbackValue: null,\r\n    ...options,\r\n  };\r\n\r\n  // Create a new table\r\n  const table = createTable<TData>(resolvedOptions);\r\n\r\n  // By default, manage table state here using the table's initial state\r\n  const { state } = createStore(table.initialState);\r\n\r\n  // Subscribe to state changes\r\n  const setState = (updater: any) => {\r\n    if (typeof updater === 'function') {\r\n      const newState = updater(state);\r\n      Object.assign(state, newState);\r\n    } else {\r\n      Object.assign(state, updater);\r\n    }\r\n    options.onStateChange?.(updater);\r\n  };\r\n\r\n  table.setOptions(prev => ({\r\n    ...prev,\r\n    ...options,\r\n    state,\r\n    onStateChange: setState,\r\n  }));\r\n\r\n  return table;\r\n};\r\n"]}