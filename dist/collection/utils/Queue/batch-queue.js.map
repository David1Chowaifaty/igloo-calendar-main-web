{"version":3,"file":"batch-queue.js","sourceRoot":"","sources":["../../../src/utils/Queue/batch-queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\nimport { BatchProcessor, QueueItem, QueueOptions } from './types';\n\nexport class BatchingQueue<T, R = void> {\n  private queue: QueueItem<T>[] = [];\n  private isProcessing = false;\n  private flushTimer: NodeJS.Timeout | null = null;\n  private readonly options: Required<QueueOptions>;\n  private readonly processor: BatchProcessor<T, R>;\n\n  constructor(processor: BatchProcessor<T, R>, options: QueueOptions) {\n    this.processor = processor;\n    this.options = {\n      maxQueueSize: 10000,\n      onError: error => console.error('Queue processing error:', error),\n      onBatchProcessed: () => {},\n      ...options,\n    };\n  }\n  /**\n   * Add a single item to the queue\n   */\n  offer(data: T): boolean {\n    if (this.queue.length >= this.options.maxQueueSize) {\n      return false; // Queue is full\n    }\n\n    const item: QueueItem<T> = {\n      data,\n      timestamp: Date.now(),\n      id: this.generateId(),\n    };\n\n    this.queue.push(item);\n    this.scheduleFlush();\n    return true;\n  }\n\n  /**\n   * Add multiple items to the queue\n   */\n  offerAll(items: T[]): number {\n    let added = 0;\n    for (const item of items) {\n      if (this.offer(item)) {\n        added++;\n      } else {\n        break; // Queue is full\n      }\n    }\n    return added;\n  }\n\n  /**\n   * Get current queue size\n   */\n  size(): number {\n    return this.queue.length;\n  }\n\n  /**\n   * Check if queue is empty\n   */\n  isEmpty(): boolean {\n    return this.queue.length === 0;\n  }\n\n  /**\n   * Force flush the current queue\n   */\n  async flush(): Promise<void> {\n    if (this.flushTimer) {\n      clearTimeout(this.flushTimer);\n      this.flushTimer = null;\n    }\n    await this.processBatch();\n  }\n\n  /**\n   * Clear all items from the queue\n   */\n  clear(): void {\n    this.queue = [];\n    if (this.flushTimer) {\n      clearTimeout(this.flushTimer);\n      this.flushTimer = null;\n    }\n  }\n\n  /**\n   * Shutdown the queue and process remaining items\n   */\n  async shutdown(): Promise<void> {\n    await this.flush();\n  }\n\n  private scheduleFlush(): void {\n    // If we've reached batch size, process immediately\n    if (this.queue.length >= this.options.batchSize) {\n      this.processBatch();\n      return;\n    }\n\n    // If no timer is set, schedule one\n    if (!this.flushTimer) {\n      this.flushTimer = setTimeout(() => {\n        this.processBatch();\n      }, this.options.flushInterval);\n    }\n  }\n\n  private async processBatch(): Promise<void> {\n    if (this.isProcessing || this.queue.length === 0) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    try {\n      // Extract batch to process\n      const batchSize = Math.min(this.options.batchSize, this.queue.length);\n      const batch = this.queue.splice(0, batchSize);\n      const data = batch.map(item => item.data);\n\n      const startTime = Date.now();\n\n      // Process the batch\n      await this.processor(data);\n\n      const processingTime = Date.now() - startTime;\n      this.options.onBatchProcessed(batchSize, processingTime);\n\n      // Clear the timer since we've processed\n      if (this.flushTimer) {\n        clearTimeout(this.flushTimer);\n        this.flushTimer = null;\n      }\n\n      // If there are more items, schedule next batch\n      if (this.queue.length > 0) {\n        this.scheduleFlush();\n      }\n    } catch (error) {\n      this.options.onError(error as Error);\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  private generateId(): string {\n    return v4();\n  }\n}\n"]}