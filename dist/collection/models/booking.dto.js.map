{"version":3,"file":"booking.dto.js","sourceRoot":"","sources":["../../src/models/booking.dto.ts"],"names":[],"mappings":"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","sourcesContent":["import { z, ZodError, ZodIssueCode } from 'zod';\nimport { IAllowedOptions, ICurrency, IPickupCurrency } from './calendarData';\nimport { TSourceOption } from './igl-book-property';\nimport { ICountry } from './IBooking';\nimport moment from 'moment';\nimport { IHouseKeepers } from './housekeeping';\n\ninterface IDType {\n  code: string;\n  description: string;\n}\n\ninterface IDInfo {\n  type: IDType;\n  number: string;\n}\n\nexport interface SharedPerson {\n  address: null;\n  alternative_email: null;\n  cci: null;\n  city: null;\n  country: ICountry;\n  country_id: string;\n  country_phone_prefix: null;\n  dob: string;\n  email: null;\n  first_name: string;\n  full_name: string;\n  id: number;\n  id_info: IDInfo;\n  is_main?: boolean;\n  last_name: string;\n  mobile: null;\n  nbr_confirmed_bookings: number;\n  notes: null;\n  password: null;\n  subscribe_to_news_letter: null;\n}\n// export const ZIdInfo = z.object({\n//   type: z.object({\n//     code: z.string().min(3),\n//     description: z.string(),\n//   }),\n//   number: z.string().min(2),\n// });\n// export const ZSharedPerson = z.object({\n//   id: z.number(),\n//   full_name: z.string().min(2),\n//   country_id: z.coerce.number().min(0),\n//   dob: z.coerce.date().transform(date => moment(date).format('YYYY-MM-DD')),\n//   id_info: ZIdInfo,\n// });\n\n/**\n * ZIdInfo schema:\n * - `type.code`: Validates a non-empty string must be at least 3 chars.\n *   If empty string or not provided, validation is skipped.\n * - `type.description`: Same pattern for description (but no min length).\n * - `number`: Validates if non-empty string it should be at least 2 chars.\n */\nexport const ZIdInfo = z.object({\n  type: z.object({\n    code: z\n      .union([\n        // If provided and non-empty, must have at least 3 chars\n        z.string().min(3),\n        // or it can be an empty string\n        z.literal(''),\n      ])\n      .optional(), // or undefined\n    description: z\n      .union([\n        // If provided and non-empty, no special min\n        z.string(),\n        // or it can be empty string\n        z.literal(''),\n      ])\n      .optional(),\n  }),\n  number: z\n    .union([\n      // If provided and non-empty, must have at least 2 chars\n      z.string().min(2),\n      // or it can be empty string\n      z.literal(''),\n    ])\n    .optional()\n    .nullable(),\n});\n\n/**\n * ZSharedPerson schema:\n * - `id`: Optional numeric field.\n * - `full_name`: If provided and non-empty, must be at least 2 chars.\n * - `country_id`: If provided, coerced to number, must be >= 0.\n * - `dob`: If provided, coerced to Date and formatted. Otherwise skipped.\n * - `id_info`: The nested object above; can also be omitted entirely.\n */\nexport const ZSharedPerson = z.object({\n  id: z.number().optional(),\n  // full_name: z\n  //   .union([\n  //     z.string().min(2), // if provided and non-empty, must have min length 2\n  //     z.literal(''), // or it can be empty string\n  //   ])\n  //   .optional(),\n  first_name: z\n    .union([\n      z.string().min(2), // if provided and non-empty, must have min length 2\n      z.literal(''), // or it can be empty string\n    ])\n    .optional(),\n  // .nullable(),\n  last_name: z\n    .union([\n      z.string().min(2), // if provided and non-empty, must have min length 2\n      z.literal(''), // or it can be empty string\n    ])\n    .optional(),\n  // .nullable(),\n  country_id: z.coerce\n    .number()\n    .min(0) // if provided, must be >= 0\n    .optional(),\n  dob: z\n    .string()\n    .nullable()\n    .optional()\n    .refine(value => value === undefined || moment(value, 'DD/MM/YYYY', true).isValid() || value === '' || value === null, 'Invalid date format')\n    .transform(value => {\n      if (value === undefined || value === '' || value === null) return null;\n      const isDDMMYYYY = moment(value, 'DD/MM/YYYY', true).isValid();\n      return isDDMMYYYY ? null : moment(value, 'DD/MM/YYYY').format('YYYY-MM-DD');\n    }),\n  id_info: ZIdInfo.optional(),\n  is_main: z.boolean().default(false),\n});\n\n// export const ZSharedPersons = z.array(ZSharedPerson).superRefine((data, ctx) => {\n//   for (const d of data) {\n//     validateSharedPerson(d, ctx);\n//   }\n// });\n\nexport function validateSharedPerson(data: any) {\n  ZSharedPerson.parse(data);\n  const hasValue = (field: string | null | undefined): boolean => {\n    return field !== null && field !== undefined && field.trim() !== '';\n  };\n  const ctx = [];\n  if (data.is_main) {\n    if (!hasValue(data.first_name)) {\n      ctx.push({\n        path: ['first_name'],\n        code: ZodIssueCode.custom,\n        message: 'First name is required for main guest',\n      });\n    }\n\n    if (!hasValue(data.last_name)) {\n      ctx.push({\n        path: ['last_name'],\n        code: ZodIssueCode.custom,\n        message: 'Last name is required for main guest',\n      });\n    }\n  }\n\n  // For non-main guests: check if ANY field has data\n  const hasAnyFieldData =\n    hasValue(data.first_name) ||\n    hasValue(data.last_name) ||\n    hasValue(data.dob) ||\n    (data.country_id !== null && data.country_id !== undefined && data.country_id > 0) ||\n    hasValue(data.id_info?.number);\n\n  // If any field has data, then first_name and last_name become required\n  if (hasAnyFieldData) {\n    if (!hasValue(data.first_name)) {\n      ctx.push({\n        path: ['first_name'],\n        code: ZodIssueCode.custom,\n        message: 'First name is required when other guest information is provided',\n      });\n    }\n\n    if (!hasValue(data.last_name)) {\n      ctx.push({\n        path: ['last_name'],\n        code: ZodIssueCode.custom,\n        message: 'Last name is required when other guest information is provided',\n      });\n    }\n  }\n  if (ctx.length >= 1) {\n    throw new ZodError(ctx);\n  }\n}\nexport interface HandleExposedRoomGuestsRequest {\n  booking_nbr: string;\n  identifier: string;\n  guests: SharedPerson[];\n}\nexport interface OtaGuarantee {\n  card_number: string;\n  card_type: string;\n  cardholder_name: string;\n  cvv: string;\n  expiration_date: string;\n  is_virtual: boolean;\n  meta: Meta;\n  token: string;\n}\n\ninterface Meta {\n  virtual_card_currency_code: string;\n  virtual_card_current_balance: string;\n  virtual_card_decimal_places: string;\n  virtual_card_effective_date: string;\n  virtual_card_expiration_date: string;\n}\nexport interface OtaService {\n  name: string;\n  nights: number;\n  persons: number;\n  price_mode: string;\n  price_per_unit: number;\n  total_price: number;\n}\nexport interface ExposedBookingEvent {\n  date: string;\n  hour: number;\n  id: number;\n  minute: number;\n  second: number;\n  user: string;\n  type: string;\n}\n\nexport type OTAManipulations = {\n  user: string;\n  date: string;\n  hour: string;\n  minute: string;\n};\n\nexport type BypassedOtaRevisions = {\n  revision_nbr: number;\n  date: string;\n  revision_type: string;\n};\nexport interface Booking {\n  agent: {\n    code: string;\n    id: number;\n    name: string;\n    verification_mode: null;\n  } | null;\n  events: ExposedBookingEvent[];\n  ota_manipulations: OTAManipulations[];\n  bypassed_ota_revisions: BypassedOtaRevisions[];\n  ota_services: OtaService[];\n  is_requested_to_cancel: boolean;\n  arrival: Arrival;\n  allowed_actions: IAllowedActions[];\n  system_id: number;\n  booked_on: DateTime;\n  booking_nbr: string;\n  currency: Currency;\n  extra_services: ExtraService[] | null;\n  from_date: string;\n  guest: Guest;\n  extras: Extras[] | null;\n  occupancy: Occupancy;\n  origin: Origin;\n  ota_guarante: OtaGuarantee;\n  property: Property;\n  remark: string;\n  ota_notes: IOtaNotes[];\n  rooms: Room[];\n  source: Source;\n  status: Status;\n  to_date: string;\n  total: number;\n  is_editable: boolean;\n  format: IFormat;\n  channel_booking_nbr: string | null;\n  is_direct: boolean;\n  financial: IFinancial;\n  pickup_info: IBookingPickupInfo | null;\n  cost: number | null;\n  is_pms_enabled: boolean;\n  promo_key: string | null;\n  is_in_loyalty_mode: boolean;\n}\n\nexport const ExtraServiceSchema = z.object({\n  booking_system_id: z.number().optional(),\n  cost: z.coerce.number().nullable(),\n  currency_id: z.number().min(1),\n  description: z.string().min(1),\n  end_date: z.string().nullable(),\n  price: z.coerce.number(),\n  start_date: z.string().nullable(),\n  system_id: z.number().optional(),\n});\n\nexport type ExtraService = z.infer<typeof ExtraServiceSchema>;\nexport interface Extras {\n  key: string;\n  value: any;\n}\nexport interface IOtaNotes {\n  statement: string;\n}\nexport interface IBookingPickupInfo {\n  currency: IPickupCurrency;\n  date: string;\n  details: string;\n  hour: number;\n  minute: number;\n  nbr_of_units: number;\n  selected_option: IAllowedOptions;\n  total: number;\n}\nexport interface IAllowedActions {\n  code: string;\n  description: string;\n}\nexport interface IFinancial {\n  cancelation_penality_as_if_today: number;\n  due_amount: number;\n  due_dates: IDueDate[];\n  payments: IPayment[] | null;\n  total_amount: number;\n  collected: number;\n  gross_total: number;\n  gross_cost: number;\n  invoice_nbr: string;\n  gross_total_with_extras: number;\n}\nexport interface IPayment {\n  id: number | null;\n  date: string;\n  amount: number;\n  currency: ICurrency;\n  designation: string;\n  reference: string;\n  book_nbr?: string;\n  payment_gateway_code?: number;\n  payment_type?: PaymentType;\n  payment_method?: PaymentType;\n}\n\ninterface PaymentType {\n  code: string;\n  description: string;\n  operation: string;\n}\n\nexport interface IDueDate {\n  amount: number;\n  currencysymbol: string;\n  date: string;\n  description: string;\n  room: string;\n}\nexport interface IFormat {\n  from_date: string;\n  to_date: string;\n}\nexport interface Arrival {\n  code: string;\n  description: string;\n}\n\nexport interface DateTime {\n  date: string;\n  hour: number;\n  minute: number;\n}\n\nexport interface Currency {\n  code: string;\n  id: number;\n  symbol: string;\n}\n\nexport interface Guest {\n  address: string | null;\n  city: string | null;\n  country_id: number | null;\n  dob: string | null;\n  email: string | null;\n  first_name: string;\n  id: number;\n  last_name: string | null;\n  mobile: string | null;\n  country_phone_prefix: string | null;\n  subscribe_to_news_letter: boolean | null;\n  cci?: ICCI | null;\n  alternative_email?: string;\n  nbr_confirmed_bookings: number;\n  notes: string;\n  mobile_without_prefix: string;\n}\nexport interface ICCI {\n  nbr: string | number;\n  holder_name: string | number;\n  expiry_month: string | number;\n  expiry_year: string | number;\n  cvc?: string | null;\n}\nexport interface Occupancy {\n  adult_nbr: number;\n  children_nbr: number;\n  infant_nbr: number | null;\n}\nexport interface DoReservationProps {\n  assign_units: boolean;\n  check_in: boolean;\n  is_pms: boolean;\n  is_direct: boolean;\n  is_in_loyalty_mode: boolean;\n  promo_key: string | null;\n  extras: any; // Assuming extras can have any structure, replace with a specific type if known\n  booking: {\n    from_date: string; // Format 'YYYY-MM-DD'\n    to_date: string; // Format 'YYYY-MM-DD'\n    remark: string | null;\n    booking_nbr: string;\n    property: {\n      id: string | number;\n    };\n    booked_on: {\n      date: string; // Format 'YYYY-MM-DD'\n      hour: number;\n      minute: number;\n    };\n    source: TSourceOption;\n    rooms: Room[]; // Assuming rooms are defined in the imported `Room` type\n    currency: string;\n    arrival: {\n      code: string;\n    };\n    guest: {\n      email: string | null;\n      first_name: string;\n      last_name: string;\n      country_id: string | number | null;\n      city: string | null;\n      mobile: string;\n      phone_prefix: string | null;\n      address: string;\n      dob: string | null;\n      subscribe_to_news_letter: boolean;\n      cci: {\n        nbr: string;\n        holder_name: string;\n        expiry_month: string;\n        expiry_year: string;\n      } | null;\n    };\n  };\n  pickup_info: any | null; // Assuming it can be any structure, replace if specific type is available\n}\nexport interface Origin {\n  Icon: string;\n  Label: string;\n}\n\nexport interface Property {\n  calendar_legends: null;\n  currency: null;\n  id: number;\n  name: string;\n  roomtypes: null;\n}\nexport type DepartureTime = {\n  code: string;\n  description: string;\n};\nexport interface ExposedApplicablePolicy {\n  brackets: Bracket[];\n  combined_statement: string;\n  type: 'cancelation' | 'guarantee';\n}\n\nexport interface Bracket {\n  amount: number;\n  amount_formatted: string;\n  code: string;\n  currency_id: number;\n  due_on: string;\n  due_on_formatted: null | string;\n  gross_amount: number;\n  gross_amount_formatted: string;\n  statement: string;\n}\nexport type RoomInOut = { code: '001' | '002' | '000'; description: string };\nexport interface Room {\n  days: Day[];\n  applicable_policies: ExposedApplicablePolicy[];\n  from_date: string;\n  guest: Guest;\n  occupancy_default: number;\n  notes: string | null;\n  occupancy: Occupancy;\n  physicalroom: null;\n  in_out: RoomInOut | null;\n  sharing_persons: SharedPerson[] | null;\n  bed_preference: number | null;\n  rateplan: RatePlan;\n  roomtype: RoomType;\n  departure_time: DepartureTime;\n  to_date: string;\n  total: number;\n  smoking_option: string;\n  identifier: string;\n  unit: string | number | IUnit | null;\n  ota_taxes: IOtaTax[];\n  ota_meta: OtaMeta;\n\n  cost: number | null;\n  gross_cost: number;\n  gross_total: number;\n  guarantee: number;\n  gross_guarantee: number;\n}\ninterface OtaMeta {\n  bed_preferences: string | null;\n  meal_plan: string | null;\n  parent_rate_plan_id: string | null;\n  policies: string | null;\n  smoking_preferences: string | null;\n}\nexport interface IOtaTax {\n  amount: number;\n  currency: IOtaTaxCurrency;\n  is_exlusive: boolean;\n  name: string;\n}\nexport interface IOtaTaxCurrency {\n  code: string;\n  id: number;\n  symbol: string;\n}\nexport interface IUnit {\n  calendar_cell: null;\n  id: 2;\n  name: '402';\n}\nexport interface Day {\n  amount: number;\n  date: string;\n  cost: number | null;\n}\n\nexport interface RatePlan {\n  cancelation: string | null;\n  guarantee: null;\n  id: number;\n  name: string;\n  rate_restrictions: null;\n  variations: null;\n  selected_variation: IVariations;\n  is_non_refundable: boolean;\n  custom_text: string | null;\n  is_active: boolean;\n  short_name: string;\n}\nexport interface IVariations {\n  adult_child_offering: string;\n  adult_nbr: number;\n  amount: number | null;\n  child_nbr: number;\n}\nexport interface RoomType {\n  availabilities: null;\n  id: number;\n  inventory: number;\n  name: string;\n  physicalrooms: PhysicalRoom[];\n  rate: number;\n  rateplans: null;\n  is_active: boolean;\n}\nexport type RoomHkStatus = '001' | '002' | '003' | '004';\nexport interface PhysicalRoom {\n  calendar_cell: null;\n  housekeeper: IHouseKeepers;\n  id: number;\n  is_active: boolean;\n  name: string;\n  hk_status: RoomHkStatus;\n}\n\nexport interface Source {\n  code: string | null;\n  description: string;\n  tag: string | null;\n}\n\nexport interface Status {\n  code: string;\n  description: string;\n}\n\nexport interface IPmsLog {\n  is_acknowledged: boolean;\n  is_sent: boolean;\n  sent_date: string;\n  sent_hour: number;\n  sent_minute: number;\n}\n"]}