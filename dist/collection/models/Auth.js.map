{"version":3,"file":"Auth.js","sourceRoot":"","sources":["../../src/models/Auth.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,IAAI;IAMR;QAHQ,YAAO,GAAG,mCAAmC,CAAC;QAIpD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI,EAAE,CAAC;QACd,CAAC;IACH,CAAC;IACM,KAAK,CAAC,IAAI;QACf,yCAAyC;QACzC,KAAK,CAAC,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QACtC,0BAA0B;QAC1B,iEAAiE;QACjE,2CAA2C;IAC7C,CAAC;IACM,SAAS,CAAC,QAA4C;QAC3D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IACM,WAAW,CAAC,QAA4C;QAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC;IACtE,CAAC;IACM,kBAAkB,CAAC,KAAc;QACtC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAEO,MAAM,CAAC,iBAAiB,CAAC,eAAwB;QACvD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;IAClE,CAAC;IACM,eAAe;QACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;;AAjCc,eAAU,GAAG,KAAK,AAAR,CAAS;AACnB,qBAAgB,GAAG,KAAK,AAAR,CAAS;AAEzB,gBAAW,GAA8C,EAAE,AAAhD,CAAiD;AAiC7E,eAAe,IAAI,CAAC","sourcesContent":["import axios from 'axios';\r\n\r\nclass Auth {\r\n  private static isAuthUsed = false;\r\n  private static _isAuthenticated = false;\r\n  private baseUrl = 'https://gateway.igloorooms.com/IR';\r\n  private static subscribers: Array<(isAuthenticated: boolean) => void> = [];\r\n\r\n  constructor() {\r\n    if (!Auth.isAuthUsed) {\r\n      this.init();\r\n    }\r\n  }\r\n  public async init() {\r\n    // axios.defaults.withCredentials = true;\r\n    axios.defaults.baseURL = this.baseUrl;\r\n    // Auth.isAuthUsed = true;\r\n    // const { data } = await axios.post('/Is_Already_Athenticated');\r\n    // this.setIsAuthenticated(data.My_Result);\r\n  }\r\n  public subscribe(callback: (isAuthenticated: boolean) => void) {\r\n    Auth.subscribers.push(callback);\r\n  }\r\n  public unsubscribe(callback: (isAuthenticated: boolean) => void) {\r\n    Auth.subscribers = Auth.subscribers.filter(sub => sub !== callback);\r\n  }\r\n  public setIsAuthenticated(value: boolean) {\r\n    Auth._isAuthenticated = value;\r\n    Auth.notifySubscribers(value);\r\n  }\r\n\r\n  private static notifySubscribers(isAuthenticated: boolean) {\r\n    Auth.subscribers.forEach(callback => callback(isAuthenticated));\r\n  }\r\n  public isAuthenticated() {\r\n    return Auth._isAuthenticated;\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n"]}