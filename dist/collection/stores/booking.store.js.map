{"version":3,"file":"booking.store.js","sourceRoot":"","sources":["../../src/stores/booking.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Booking, Guest } from '@/models/booking.dto';\r\nimport { TEventType } from '@/models/igl-book-property';\r\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation | null;\r\n  ratePlan: RatePlan;\r\n  guest: RatePlanGuest[] | null;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  is_amount_modified?: boolean;\r\n  view_mode: '002' | '001';\r\n  rp_amount: number;\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    is_bed_configuration_enabled: boolean;\r\n  };\r\n}\r\nexport interface RatePlanGuest {\r\n  name: string;\r\n  unit: string | null;\r\n  bed_preference: string | null;\r\n  infant_nbr: number | null;\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface ISelectedVariation {\r\n  variation: Variation;\r\n  state: 'default' | 'modified';\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  infant_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n  agent_code?: string;\r\n}\r\nexport interface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  checkout_guest: Guest | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  event_type: { type: TEventType };\r\n  guest: RatePlanGuest;\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n  booking: Booking;\r\n  resetBooking: boolean;\r\n  isInFreeCancelationZone: boolean;\r\n  fictus_booking_nbr: { nbr: string | null };\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  checkout_guest: null,\r\n  guest: null,\r\n  tax_statement: null,\r\n  roomTypes: [],\r\n  enableBooking: false,\r\n  resetBooking: false,\r\n  ratePlanSelections: {},\r\n  isInFreeCancelationZone: false,\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n    infant_nbr: 0,\r\n  },\r\n  booking: null,\r\n  fictus_booking_nbr: null,\r\n  event_type: { type: 'PLUS_BOOKING' },\r\n};\r\n\r\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\r\nexport function resetBookingStore() {\r\n  reset();\r\n}\r\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\r\n  if (!variations) {\r\n    return null;\r\n  }\r\n  if (!selected_variation || booking_store.resetBooking) {\r\n    return variations[0];\r\n  }\r\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\r\n}\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (!roomType.is_active) return;\r\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n    roomType.rateplans.forEach(ratePlan => {\r\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\r\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\r\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\r\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\r\n      ratePlanSelections[roomType.id][ratePlan.id] =\r\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\r\n          ? {\r\n              ...currentRatePlanSelection,\r\n              ratePlan,\r\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\r\n              visibleInventory: roomType.inventory,\r\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\r\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\r\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\r\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\r\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\r\n              roomtype: {\r\n                ...currentRatePlanSelection.roomtype,\r\n              },\r\n            }\r\n          : {\r\n              reserved: 0,\r\n              rp_amount: 0,\r\n              view_mode: '001',\r\n              guest: null,\r\n              visibleInventory: roomType.inventory,\r\n              selected_variation: ratePlan?.variations[0] ?? null,\r\n              ratePlan,\r\n              guestName: [],\r\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n              roomtype: {\r\n                ...roomType,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n              },\r\n              checkoutVariations: [],\r\n              checkoutBedSelection: [],\r\n              checkoutSmokingSelection: [],\r\n            };\r\n    });\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n  booking_store.resetBooking = false;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  console.log(ratePlanId, roomTypeId, params);\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n  console.log(booking_store.ratePlanSelections);\r\n}\r\n\r\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  let newGuest = Array.from({ length: rooms }, () => ({ name: '', unit: null, bed_preference: null, infant_nbr: null }));\r\n  console.log('guest', guest);\r\n  if (guest) {\r\n    newGuest = guest;\r\n  }\r\n  console.log('newGuest', newGuest);\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    console.log('new guest', newGuest);\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      view_mode: '001',\r\n      rp_amount: 0,\r\n      guest: newGuest,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        reserved: rooms,\r\n        checkoutVariations: [],\r\n        guest: newGuest,\r\n      },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return {\r\n      reserved: 0,\r\n      guest: null,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan: null,\r\n      guestName: [],\r\n      is_bed_configuration_enabled: false,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      rp_amount: 0,\r\n      view_mode: '001',\r\n      roomtype: null,\r\n    };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\r\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\r\n      if (isPrePayment) {\r\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\r\n      }\r\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\r\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\r\n      }, 0);\r\n    } else if (ratePlan.reserved > 0) {\r\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\r\n      return ratePlan.reserved * (amount ?? 0);\r\n    }\r\n    return 0;\r\n  };\r\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\r\n    Object.values(value).forEach(ratePlan => {\r\n      totalAmount += calculateCost(ratePlan);\r\n      prePaymentAmount += calculateCost(ratePlan, true);\r\n    });\r\n  });\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport function validateBooking() {\r\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\r\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\r\n  );\r\n}\r\nexport function calculateTotalRooms() {\r\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan) => {\r\n        if (ratePlan.reserved === 0) {\r\n          return innerTotal;\r\n        }\r\n        return innerTotal + ratePlan.reserved;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n}\r\nexport default booking_store;\r\n"]}