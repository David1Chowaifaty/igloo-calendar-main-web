{"version":3,"file":"calendar-dates.store.js","sourceRoot":"","sources":["../../src/stores/calendar-dates.store.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAgB7C,MAAM,YAAY,GAAmB;IACnC,IAAI,EAAE,EAAE;IACR,MAAM,EAAE,EAAE;IACV,QAAQ,EAAE,EAAE;IACZ,MAAM,EAAE,EAAE;IACV,cAAc,EAAE,IAAI,GAAG,EAAE;IACzB,aAAa,EAAE,IAAI,GAAG,EAAE;CACzB,CAAC;AACF,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,EAAE,qBAAqB,EAAE,GAAG,WAAW,CAAiB,YAAY,CAAC,CAAC;AAEpH,eAAe,cAAc,CAAC;AAE9B,MAAM,UAAU,gBAAgB,CAAC,KAAa;;IAC5C,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IACvD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,MAAA,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC,CAAC;QACjE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7B,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACtC,CAAC;IACD,cAAc,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,IAAU;IAClC,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IACvD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC;QAChC,OAAO;IACT,CAAC;IACD,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACpC,cAAc,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,IAAU;;IAC3C,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;IACvD,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,MAAA,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,mCAAI,IAAI,GAAG,EAAE,CAAC,CAAC;IACjE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC7B,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IACpC,cAAc,CAAC,aAAa,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnD,CAAC","sourcesContent":["import { DayData } from '@/models/DayType';\nimport { createStore } from '@stencil/store';\nimport { Task } from '@/models/housekeeping';\nexport interface ICalendarDates {\n  days: DayData[];\n  disabled_cells: Map<\n    string,\n    {\n      disabled: boolean;\n      reason: 'inventory' | 'stop_sale';\n    }\n  >;\n  months: { daysCount: number; monthName: string }[];\n  fromDate: string;\n  toDate: string;\n  cleaningTasks: Map<number, Map<string, Task>>;\n}\nconst initialState: ICalendarDates = {\n  days: [],\n  months: [],\n  fromDate: '',\n  toDate: '',\n  disabled_cells: new Map(),\n  cleaningTasks: new Map(),\n};\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\n\nexport default calendar_dates;\n\nexport function addCleaningTasks(tasks: Task[]) {\n  const tasksMap = new Map(calendar_dates.cleaningTasks);\n  for (const task of tasks) {\n    const taskMap = new Map(tasksMap.get(task.unit.id) ?? new Map());\n    taskMap.set(task.date, task);\n    tasksMap.set(task.unit.id, taskMap);\n  }\n  calendar_dates.cleaningTasks = new Map(tasksMap);\n}\n\nexport function cleanRoom(task: Task) {\n  const tasksMap = new Map(calendar_dates.cleaningTasks);\n  if (!tasksMap.has(task.unit.id)) {\n    return;\n  }\n  const taskMap = new Map(tasksMap.get(task.unit.id));\n  taskMap.delete(task.date);\n  tasksMap.set(task.unit.id, taskMap);\n  calendar_dates.cleaningTasks = new Map(tasksMap);\n}\n\nexport function addRoomForCleaning(task: Task) {\n  const tasksMap = new Map(calendar_dates.cleaningTasks);\n  const taskMap = new Map(tasksMap.get(task.unit.id) ?? new Map());\n  taskMap.set(task.date, task);\n  tasksMap.set(task.unit.id, taskMap);\n  calendar_dates.cleaningTasks = new Map(tasksMap);\n}\n"]}