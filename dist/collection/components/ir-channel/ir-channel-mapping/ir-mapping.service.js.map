{"version":3,"file":"ir-mapping.service.js","sourceRoot":"","sources":["../../../../src/components/ir-channel/ir-channel-mapping/ir-mapping.service.ts"],"names":[],"mappings":"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","sourcesContent":["import type { RatePlanDetail, RoomDetail } from '@/models/IBooking';\nimport type { IMap } from '@/models/calendarData';\nimport calendar_data from '@/stores/calendar-data';\nimport channels_data from '@/stores/channel.store';\n\nexport class IrMappingService {\n  public removedMapping(ir_id: string, isRoomType: boolean) {\n    let selectedChannels = [...channels_data.mappedChannels];\n    if (isRoomType) {\n      const toBeRemovedRoomType = calendar_data.roomsInfo.find(room => room.id.toString() === ir_id);\n      selectedChannels = selectedChannels.filter(c => toBeRemovedRoomType.rateplans.find(rate_plan => rate_plan.id.toString() === c.ir_id) === undefined);\n    }\n    channels_data.mappedChannels = selectedChannels.filter(c => c.ir_id !== ir_id);\n  }\n  public checkMappingExists(id: string, isRoomType: boolean, roomTypeId?: string) {\n    const channelId = id.toString();\n    const parentChannelId = roomTypeId?.toString();\n\n    if (isRoomType) {\n      const mappedRoomType = channels_data.mappedChannels.find(mapping => mapping.type === 'room_type' && mapping.channel_id.toString() === channelId);\n\n      if (!mappedRoomType) {\n        return { hide: false, result: undefined, occupancy: undefined };\n      }\n\n      const room = calendar_data.roomsInfo.find(roomInfo => roomInfo.id.toString() === mappedRoomType.ir_id);\n      if (!room) {\n        throw new Error('Invalid Room type');\n      }\n      return { hide: false, occupancy: room.occupancy_default.adult_nbr, result: room };\n    }\n\n    if (!parentChannelId) {\n      throw new Error('Missing room type id');\n    }\n\n    const parentMapping = channels_data.mappedChannels.find(mapping => mapping.type === 'room_type' && mapping.channel_id.toString() === parentChannelId);\n    if (!parentMapping) {\n      return { hide: true, result: undefined, occupancy: undefined };\n    }\n\n    const parentRoom = calendar_data.roomsInfo.find(roomInfo => roomInfo.id.toString() === parentMapping.ir_id);\n    if (!parentRoom) {\n      throw new Error('Invalid Room type');\n    }\n\n    let matchedContext: RatePlanContext | undefined;\n    for (const mapping of channels_data.mappedChannels) {\n      if (mapping.type !== 'rate_plan' || mapping.channel_id.toString() !== channelId) {\n        continue;\n      }\n      const context = this.resolveRatePlanContext(mapping);\n      if (context && context.parentChannelId === parentChannelId) {\n        matchedContext = context;\n        break;\n      }\n    }\n\n    if (!matchedContext) {\n      return { hide: false, result: undefined, occupancy: undefined };\n    }\n\n    if (matchedContext.room.id.toString() !== parentRoom.id.toString()) {\n      return { hide: false, result: undefined, occupancy: undefined };\n    }\n\n    return {\n      hide: false,\n      occupancy: parentRoom.occupancy_default.adult_nbr,\n      result: matchedContext.ratePlan,\n    };\n  }\n  private resolveRatePlanContext(ratePlanMapping: IMap): RatePlanContext | undefined {\n    if (ratePlanMapping.type !== 'rate_plan') {\n      return undefined;\n    }\n    const room = calendar_data.roomsInfo.find(roomInfo => roomInfo.rateplans.some(ratePlan => ratePlan.id.toString() === ratePlanMapping.ir_id));\n    if (!room) {\n      return undefined;\n    }\n    const ratePlan = room.rateplans.find(rp => rp.id.toString() === ratePlanMapping.ir_id);\n    if (!ratePlan) {\n      return undefined;\n    }\n    const parentMapping = channels_data.mappedChannels.find(mapping => mapping.type === 'room_type' && mapping.ir_id === room.id.toString());\n    return {\n      room,\n      ratePlan,\n      parentChannelId: parentMapping?.channel_id?.toString(),\n    };\n  }\n  // public checkMappingExists(id: string, isRoomType: boolean, roomTypeId?: string) {\n  //   const mapped_id = channels_data.mappedChannels.find(m => m.channel_id === id);\n  //   if (!mapped_id) {\n  //     if (!isRoomType) {\n  //       const matchingRoomType = channels_data.mappedChannels.find(m => m.channel_id.toString() === roomTypeId);\n  //       if (!matchingRoomType) {\n  //         return { hide: true, result: undefined, occupancy: undefined };\n  //       }\n  //     }\n  //     return { hide: false, result: undefined, occupancy: undefined };\n  //   }\n  //   if (isRoomType) {\n  //     const room_type = calendar_data.roomsInfo.find(room => room.id.toString() === mapped_id.ir_id);\n  //     return { hide: false, occupancy: room_type.occupancy_default.adult_nbr, result: room_type };\n  //   }\n  //   if (!roomTypeId) {\n  //     throw new Error('Missing room type id');\n  //   }\n  //   const matchingRoomType = channels_data.mappedChannels.find(m => m.channel_id.toString() === roomTypeId);\n  //   const room_type = calendar_data.roomsInfo.find(room => room.id.toString() === matchingRoomType.ir_id);\n  //   if (!room_type) {\n  //     throw new Error('Invalid Room type');\n  //   }\n  //   return { hide: false, occupancy: room_type.occupancy_default.adult_nbr, result: room_type.rateplans.find(r => r.id.toString() === mapped_id.ir_id) };\n  // }\n  public getAppropriateRooms(isRoomType: boolean, roomTypeId?: string) {\n    if (isRoomType) {\n      const filteredRoomTypes = calendar_data.roomsInfo.filter(\n        room => channels_data.mappedChannels.find(m => m.ir_id.toString() === room.id.toString()) === undefined && room.is_active,\n      );\n      return filteredRoomTypes.map(room => ({ id: room.id.toString(), name: room.name, occupancy: room.occupancy_default.adult_nbr }));\n    }\n    if (!roomTypeId) {\n      throw new Error('Missing roomType id');\n    }\n    const matchingRoomType = channels_data.mappedChannels.find(m => m.channel_id.toString() === roomTypeId);\n    if (!matchingRoomType) {\n      throw new Error('Invalid room type id');\n    }\n    const selectedRoomType = calendar_data.roomsInfo.find(room => room.id.toString() === matchingRoomType.ir_id);\n    return selectedRoomType.rateplans\n      .filter(rate_plan => channels_data.mappedChannels.find(r => rate_plan.id.toString() === r.ir_id) === undefined && rate_plan['is_active'])\n      .map(rate_plan => ({\n        id: rate_plan.id.toString(),\n        name: rate_plan['short_name'],\n        occupancy: selectedRoomType.occupancy_default.adult_nbr,\n      }));\n  }\n}\n\ntype RatePlanContext = {\n  room: RoomDetail;\n  ratePlan: RatePlanDetail;\n  parentChannelId?: string;\n};\n"]}