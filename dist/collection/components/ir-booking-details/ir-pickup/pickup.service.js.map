{"version":3,"file":"pickup.service.js","sourceRoot":"","sources":["../../../../src/components/ir-booking-details/ir-pickup/pickup.service.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { TDueParams, TPickupData } from './types';\nimport calendar_data from '@/stores/calendar-data';\nimport { IBookingPickupInfo } from '@/components';\nimport { z, ZodError } from 'zod';\nimport { renderTime } from '@/utils/utils';\nimport moment from 'moment';\n\nexport class PickupService {\n  public async savePickup(params: TPickupData, booking_nbr: string, is_remove: boolean) {\n    try {\n      const splitTime = params.arrival_time.split(':');\n      await axios.post(`/Do_Pickup`, {\n        booking_nbr,\n        is_remove,\n        currency: params.currency,\n        date: params.arrival_date,\n        details: params.flight_details,\n        hour: splitTime[0],\n        minute: splitTime[1],\n        nbr_of_units: params.number_of_vehicles,\n        selected_option: params.selected_option,\n        total: +params.due_upon_booking,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  public transformDefaultPickupData(data: IBookingPickupInfo): TPickupData {\n    const arrival_time = data.hour && data.minute ? renderTime(data.hour) + ':' + renderTime(data.minute) : '';\n    return {\n      arrival_date: data.date,\n      arrival_time,\n      currency: data.currency,\n      due_upon_booking: data.total.toFixed(2),\n      flight_details: data.details,\n      location: data.selected_option.location.id,\n      number_of_vehicles: data.nbr_of_units,\n      selected_option: data.selected_option,\n      vehicle_type_code: data.selected_option.vehicle.code,\n    };\n  }\n  public getAvailableLocations(message: string) {\n    let locations: { value: number; text: string }[] = [];\n    calendar_data.pickup_service.allowed_options.forEach(option => {\n      if (locations.filter(location => location.value === option.location.id).length === 0) {\n        locations.push({\n          text: message + ' ' + option.location.description,\n          value: option.location.id,\n        });\n      }\n    });\n    return locations;\n  }\n  public createPickupSchema(minDate: string, maxDate: string) {\n    return z.object({\n      arrival_date: z\n        .string()\n        .regex(/^\\d{4}-\\d{2}-\\d{2}$/, { message: 'Invalid date format, expected YYYY-MM-DD' })\n        .refine(\n          dateStr => {\n            const date = moment(dateStr, 'YYYY-MM-DD', true);\n            const min = moment(minDate, 'YYYY-MM-DD', true);\n            const max = moment(maxDate, 'YYYY-MM-DD', true);\n            return date.isValid() && min.isValid() && max.isValid() && date.isBetween(min, max, undefined, '[]');\n          },\n          { message: `arrival_date must be between ${minDate} and ${maxDate}` },\n        ),\n\n      arrival_time: z\n        .string()\n        .regex(/^\\d{2}:\\d{2}$/, { message: 'Invalid time format. Expected HH:MM' })\n        .refine(\n          time => {\n            const [hours, minutes] = time.split(':').map(Number);\n            return hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59;\n          },\n          { message: 'Time values are out of range' },\n        ),\n      flight_details: z.string().nonempty({ message: 'Flight details cannot be empty' }),\n      vehicle_type_code: z.string().nonempty({ message: 'Vehicle type code cannot be empty' }),\n      number_of_vehicles: z.coerce.number().min(1, { message: 'At least one vehicle is required' }),\n    });\n  }\n  public validateForm(\n    params: TPickupData,\n    schema: any, // : { error: boolean; cause?: keyof TPickupData }\n  ) {\n    try {\n      schema.parse(params);\n      return null;\n    } catch (error) {\n      console.log(error);\n      const err = {};\n      if (error instanceof ZodError) {\n        error.issues.forEach(e => {\n          err[e.path[0]] = true;\n        });\n        return err;\n      }\n    }\n    // if (params.arrival_time.split(':').length !== 2) {\n    //   return {\n    //     error: true,\n    //     cause: 'arrival_time',\n    //   };\n    // }\n    // if (params.flight_details === '') {\n    //   return {\n    //     error: true,\n    //     cause: 'flight_details',\n    //   };\n    // }\n    // if (params.vehicle_type_code === '') {\n    //   return {\n    //     error: true,\n    //     cause: 'vehicle_type_code',\n    //   };\n    // }\n    // if (params.number_of_vehicles === 0) {\n    //   return {\n    //     error: true,\n    //     cause: 'number_of_vehicles',\n    //   };\n    // }\n    // return { error: false };\n  }\n  public getNumberOfVehicles(capacity: number, numberOfPersons: number) {\n    let total_number_of_vehicles = Math.ceil(numberOfPersons / capacity);\n    let startNumber = total_number_of_vehicles > 1 ? total_number_of_vehicles : 1;\n    let bonus_number = total_number_of_vehicles > 1 ? 2 : 3;\n    return Array.from({ length: total_number_of_vehicles + bonus_number }, (_, i) => startNumber + i);\n  }\n  private getPickUpPersonStatus(code: string) {\n    const getCodeDescription = calendar_data.pickup_service.allowed_pricing_models.find(model => model.code === code);\n    if (!getCodeDescription) {\n      return null;\n    }\n    return getCodeDescription.description;\n  }\n  public updateDue(params: TDueParams) {\n    const getCodeDescription = this.getPickUpPersonStatus(params.code);\n    if (!getCodeDescription) {\n      return;\n    }\n    if (getCodeDescription === 'Person') {\n      return params.amount * params.numberOfPersons;\n    } else {\n      return params.amount * params.number_of_vehicles;\n    }\n  }\n}\n"]}