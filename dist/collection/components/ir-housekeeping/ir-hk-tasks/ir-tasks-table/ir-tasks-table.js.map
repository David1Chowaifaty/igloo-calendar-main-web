{"version":3,"file":"ir-tasks-table.js","sourceRoot":"","sources":["../../../../../src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-table/ir-tasks-table.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, Host, Listen, Prop, Watch, h } from '@stencil/core';\nimport { Task } from '@/models/housekeeping';\nimport moment from 'moment';\nimport housekeeping_store from '@/stores/housekeeping.store';\nimport locales from '@/stores/locales.store';\nimport {\n  hkTasksStore,\n  toggleTaskSelection,\n  selectAllTasks,\n  clearSelectedTasks,\n  getCheckableTasks,\n  isAllTasksSelected,\n  updateSorting,\n  getPaginatedTasks,\n  getMobileTasks,\n} from '@/stores/hk-tasks.store';\n\n@Component({\n  tag: 'ir-tasks-table',\n  styleUrls: ['ir-tasks-table.css', '../../../../common/table.css'],\n  scoped: true,\n})\nexport class IrTasksTable {\n  @Prop({ mutable: true }) tasks: Task[] = [];\n\n  @Event({ bubbles: true, composed: true }) animateCleanedButton: EventEmitter<null>;\n  @Event({ bubbles: true, composed: true }) rowSelectChange: EventEmitter<Task[]>;\n  @Event({ bubbles: true, composed: true }) sortingChanged: EventEmitter<{ field: string; direction: 'ASC' | 'DESC' }>;\n  @Event({ bubbles: true, composed: true }) skipSelectedTask: EventEmitter<Task>;\n\n  componentWillLoad() {\n    if (this.tasks && this.tasks.length > 0) {\n      updateSorting('date', 'ASC');\n    }\n  }\n\n  /**\n   * Sorts the tasks by the given key. If no direction is provided,\n   * it toggles between ascending and descending.\n   */\n  private handleSort(key: string) {\n    let newDirection = hkTasksStore.sorting.direction;\n    // If we're clicking the same column, flip the direction. If a new column, default to ASC.\n    if (hkTasksStore.sorting.field === key) {\n      newDirection = hkTasksStore.sorting.direction === 'ASC' ? 'DESC' : 'ASC';\n    } else {\n      newDirection = 'ASC';\n    }\n    updateSorting(key, newDirection);\n    this.sortingChanged.emit({ field: key, direction: newDirection });\n  }\n\n  @Listen('clearSelectedHkTasks', { target: 'body' })\n  handleClearSelectedHkTasks(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    clearSelectedTasks();\n  }\n\n  @Watch('tasks')\n  handleTasksChange(newTasks: Task[]) {\n    if (newTasks?.length) {\n      clearSelectedTasks();\n    }\n  }\n\n  /**\n   * Helper to toggle selection for a single row.\n   */\n  private toggleSelection(task: Task) {\n    toggleTaskSelection(task);\n    this.animateCleanedButton.emit(null);\n    this.emitSelectedTasks();\n  }\n\n  private emitSelectedTasks() {\n    this.rowSelectChange.emit(hkTasksStore.selectedTasks);\n  }\n\n  /**\n   * Checks if every row is selected.\n   */\n  private get allSelected(): boolean {\n    return isAllTasksSelected();\n  }\n\n  /**\n   * Toggles selection on all visible tasks at once.\n   */\n  private toggleSelectAll() {\n    if (this.allSelected) {\n      clearSelectedTasks();\n    } else {\n      selectAllTasks(getCheckableTasks());\n      this.animateCleanedButton.emit(null);\n    }\n    this.emitSelectedTasks();\n  }\n\n  /**\n   * Determines if a task is checkable.\n   *\n   * A task is considered checkable if its date is today or any day before.\n   * This prevents users from selecting tasks with future dates.\n   *\n   * @param {Task} task - The task to check.\n   * @returns {boolean} - Returns `true` if the task's date is today or earlier, otherwise `false`.\n   */\n  private isCheckable(task: Task): boolean {\n    return moment(task.date, 'YYYY-MM-DD').isSameOrBefore(moment(), 'days');\n  }\n\n  /**\n   * Determines if a task is skippable.\n   *\n   * A task is considered skippable if its date is today and should be In house.\n   *\n   * @param {Task} task - The task to skip.\n   * @returns {boolean} - Returns `true` if the task's date is today and in house, otherwise `false`.\n   */\n  private isSkippable(task: Task): boolean {\n    console.log(task);\n    const isTodayTask = moment().isSame(moment(task.date, 'YYYY-MM-DD'), 'date');\n    return isTodayTask && task.status.code === 'IH';\n  }\n\n  render() {\n    const haveManyHousekeepers = housekeeping_store?.hk_criteria?.housekeepers?.length > 1;\n    const tasks = getPaginatedTasks();\n    // const tasks = hkTasksStore.tasks;\n    const mobileTasks = getMobileTasks();\n    return (\n      <Host class=\"flex-fill\">\n        <section class=\"mobile-tasks-container flex-fill\">\n          <div class=\"card p-1 m-0\">\n            <ir-tasks-header></ir-tasks-header>\n          </div>\n          {mobileTasks?.length === 0 && <p class=\"mx-auto\">{locales.entries.Lcz_NoTasksFound}</p>}\n          {mobileTasks.map(task => {\n            const isCheckable = this.isCheckable(task);\n            const isSkippable = this.isSkippable(task);\n            return <ir-tasks-card task={task} isSkippable={isSkippable} key={task.id} isCheckable={isCheckable}></ir-tasks-card>;\n          })}\n          <ir-tasks-table-pagination></ir-tasks-table-pagination>\n        </section>\n        <div class=\"card table-container flex-fill p-1 m-0\">\n          <ir-tasks-header></ir-tasks-header>\n          <div class={'table-responsive mb-auto'}>\n            <table class=\"table\" data-testid=\"hk_tasks_table\">\n              <thead class=\"table-header\">\n                <tr>\n                  <th class={'task-row'}>\n                    <ir-checkbox\n                      indeterminate={hkTasksStore.selectedTasks.length > 0 && hkTasksStore.selectedTasks.length < getCheckableTasks().length}\n                      checked={this.allSelected}\n                      onCheckChange={() => this.toggleSelectAll()}\n                    ></ir-checkbox>\n                  </th>\n                  <th class=\"extra-padding\">{locales.entries.Lcz_Period}</th>\n                  <th class=\"extra-padding\">\n                    {this.tasks.length > 1 && this.tasks.length + ' '}\n                    {locales.entries.Lcz_Unit}\n                  </th>\n                  <th class={'sortable extra-padding'} onClick={() => this.handleSort('status')}>\n                    <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\n                      <span>{locales.entries.Lcz_Status}</span>\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"16\"\n                        height=\"16\"\n                        viewBox=\"0 0 24 24\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        stroke-width=\"2\"\n                        stroke-linecap=\"round\"\n                        stroke-linejoin=\"round\"\n                        class=\"lucide lucide-arrow-up-down\"\n                      >\n                        <path d=\"m21 16-4 4-4-4\" />\n                        <path d=\"M17 20V4\" />\n                        <path d=\"m3 8 4-4 4 4\" />\n                        <path d=\"M7 4v16\" />\n                      </svg>\n                    </div>\n                  </th>\n                  <th class=\"extra-padding text-left\">{locales.entries.Lcz_Hint}</th>\n                  <th class=\"text-left\">{locales.entries.Lcz_A}d</th>\n                  <th class=\"text-left\">{locales.entries.Lcz_C}h</th>\n                  <th class=\"text-left text-left\">{locales.entries.Lcz_I}n</th>\n                  {haveManyHousekeepers && (\n                    <th style={{ textAlign: 'start' }} class={'sortable extra-padding'} onClick={() => this.handleSort('housekeeper')}>\n                      <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\n                        <span>{locales.entries.Lcz_Housekeeper}</span>\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          width=\"16\"\n                          height=\"16\"\n                          viewBox=\"0 0 24 24\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          stroke-width=\"2\"\n                          stroke-linecap=\"round\"\n                          stroke-linejoin=\"round\"\n                          class=\"lucide lucide-arrow-up-down\"\n                        >\n                          <path d=\"m21 16-4 4-4-4\" />\n                          <path d=\"M17 20V4\" />\n                          <path d=\"m3 8 4-4 4 4\" />\n                          <path d=\"M7 4v16\" />\n                        </svg>\n                      </div>\n                    </th>\n                  )}\n                  <th></th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {tasks.length === 0 && (\n                  <tr class=\"ir-table-row\">\n                    <td colSpan={9} class=\"text-left\">\n                      <div style={{ height: '300px' }} class=\"d-flex align-items-center justify-content-center\">\n                        <span> {locales.entries.Lcz_NoTasksFound}</span>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n                {tasks?.map(task => {\n                  const isSelected = hkTasksStore.selectedTasks.some(t => t.id === task.id);\n                  const isCheckable = this.isCheckable(task);\n                  return (\n                    <tr\n                      data-date={task.date}\n                      data-testid={`hk_task_row`}\n                      data-assigned={task.housekeeper ? 'true' : 'false'}\n                      style={isCheckable && { cursor: 'pointer' }}\n                      onClick={() => {\n                        if (!isCheckable) {\n                          return;\n                        }\n                        this.toggleSelection(task);\n                      }}\n                      class={{ 'selected': isSelected, 'task-table-row ir-table-row': true }}\n                      key={task.id}\n                    >\n                      <td class=\"task-row \">{isCheckable && <ir-checkbox checked={isSelected}></ir-checkbox>}</td>\n                      <td class=\"task-row extra-padding\">{task.formatted_date}</td>\n                      <td class=\"task-row extra-padding\">\n                        <span class={{ 'highlighted-unit': task.is_highlight }}>{task.unit.name}</span>\n                      </td>\n                      <td class=\"task-row extra-padding text-left\">{task.status.description}</td>\n                      <td class=\"task-row extra-padding text-left\">{task.hint}</td>\n                      <td class=\"task-row text-left\">{task.adult}</td>\n                      <td class=\"task-row text-left\">{task.child}</td>\n                      <td class=\"task-row text-left\">{task.infant}</td>\n                      {haveManyHousekeepers && (\n                        <td class=\" task-row extra-padding\" style={{ textAlign: 'start' }}>\n                          {task.housekeeper ?? locales.entries.Lcz_Unassigned}\n                        </td>\n                      )}\n                      <td>\n                        {this.isSkippable(task) && (\n                          <ir-button\n                            text=\"Skip\"\n                            size=\"sm\"\n                            onClickHandler={() => {\n                              this.skipSelectedTask.emit(task);\n                            }}\n                          ></ir-button>\n                        )}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div class=\"mt-auto\">\n            <ir-tasks-table-pagination></ir-tasks-table-pagination>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"]}