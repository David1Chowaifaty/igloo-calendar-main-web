{"version":3,"file":"igl-book-property.service.js","sourceRoot":"","sources":["../../../../src/components/igloo-calendar/igl-book-property/igl-book-property.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Booking, Room } from '@/models/booking.dto';\r\nimport { TSourceOption } from '@/models/igl-book-property';\r\nimport VariationService from '@/services/variation.service';\r\nimport booking_store, { IRatePlanSelection } from '@/stores/booking.store';\r\nimport { calculateDaysBetweenDates } from '@/utils/booking';\r\nimport { extras } from '@/utils/utils';\r\nimport moment from 'moment';\r\n\r\nexport class IglBookPropertyService {\r\n  private variationService: VariationService;\r\n  public setBookingInfoFromAutoComplete(context, res) {\r\n    context.bookedByInfoData = {\r\n      id: res.guest.id,\r\n      email: res.guest.email,\r\n      firstName: res.guest.first_name,\r\n      lastName: res.guest.last_name,\r\n      countryId: res.guest.country_id,\r\n      isdCode: res.guest?.country_phone_prefix ?? res.guest?.country_id.toString(),\r\n      contactNumber: res.guest.mobile,\r\n      selectedArrivalTime: res.arrival,\r\n      emailGuest: res.guest.subscribe_to_news_letter,\r\n      message: res.remark,\r\n      cardNumber: '',\r\n      cardHolderName: '',\r\n      expiryMonth: '',\r\n      expiryYear: '',\r\n      bookingNumber: res.booking_nbr,\r\n      rooms: res.rooms,\r\n      from_date: res.from_date,\r\n      to_date: res.to_date,\r\n    };\r\n  }\r\n\r\n  public resetRoomsInfoAndMessage(context) {\r\n    context.defaultData.roomsInfo = [];\r\n    context.message = '';\r\n  }\r\n\r\n  public onDataRoomUpdate(event: CustomEvent, selectedUnits: Map<string, Map<string, any>>, isEdit: boolean, isEditBooking: boolean, name: string) {\r\n    let units = selectedUnits;\r\n    const { data, key, changedKey } = event.detail;\r\n    const roomCategoryKey = `c_${data.roomCategoryId}`;\r\n    const ratePlanKey = `p_${data.ratePlanId}`;\r\n\r\n    if (this.shouldClearData(key)) {\r\n      units = new Map();\r\n    }\r\n\r\n    this.initializeRoomCategoryIfNeeded(roomCategoryKey, units);\r\n\r\n    if (isEditBooking) {\r\n      if (changedKey === 'rate') {\r\n        if (units.has(roomCategoryKey) && units.get(roomCategoryKey).has(ratePlanKey)) {\r\n          this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n        }\r\n      } else {\r\n        if (changedKey !== 'rateType') {\r\n          if (changedKey === 'adult_child_offering') {\r\n            if (units.has(roomCategoryKey) && selectedUnits.get(roomCategoryKey).has(ratePlanKey)) {\r\n              this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n            }\r\n          } else {\r\n            this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.setSelectedRoomData(roomCategoryKey, ratePlanKey, data, units);\r\n    }\r\n    this.cleanupEmptyData(roomCategoryKey, units);\r\n    return units;\r\n  }\r\n\r\n  private shouldClearData(key: string | undefined): boolean {\r\n    return key === 'clearData' || key === 'EDIT_BOOKING';\r\n  }\r\n\r\n  private initializeRoomCategoryIfNeeded(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (!selectedUnits.has(roomCategoryKey)) {\r\n      selectedUnits.set(roomCategoryKey, new Map());\r\n    }\r\n  }\r\n  private setSelectedRoomData(roomCategoryKey: string, ratePlanKey: string, data: any, selectedUnits: Map<string, Map<string, any>>) {\r\n    let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n    if (data.totalRooms === 0 || data.inventory === 0) {\r\n      selectedRatePlans.delete(ratePlanKey);\r\n    } else {\r\n      selectedUnits.set(roomCategoryKey, selectedRatePlans.set(ratePlanKey, { ...data, selectedUnits: Array(data.totalRooms).fill(-1) }));\r\n    }\r\n  }\r\n\r\n  private cleanupEmptyData(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (selectedUnits.has(roomCategoryKey)) {\r\n      let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n      if (selectedRatePlans.size === 0) {\r\n        selectedUnits.delete(roomCategoryKey);\r\n      }\r\n    }\r\n  }\r\n  private applyBookingEditToSelectedRoom(roomCategoryKey: string, ratePlanKey: string, data, selectedUnits: Map<string, Map<string, any>>, name: string, isEdit: boolean) {\r\n    selectedUnits.clear();\r\n    let res = {};\r\n    if (isEdit) {\r\n      res = { ...data, guestName: name || '', roomId: '' };\r\n    } else {\r\n      res = { ...data };\r\n    }\r\n    selectedUnits.set(roomCategoryKey, new Map().set(ratePlanKey, res));\r\n  }\r\n\r\n  private generateDailyRates(from_date: Date, to_date: Date, amount: number) {\r\n    const endDate = new Date(to_date);\r\n    endDate.setDate(endDate.getDate() - 1);\r\n\r\n    let currentDate = new Date(from_date);\r\n    const days: {\r\n      date: string;\r\n      amount: number;\r\n      cost: null;\r\n    }[] = [];\r\n\r\n    while (currentDate <= endDate) {\r\n      days.push({\r\n        date: moment(currentDate).format('YYYY-MM-DD'),\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n\r\n  private extractFirstNameAndLastName(name: string) {\r\n    const names = name.split(' ');\r\n    return { first_name: names[0] || null, last_name: names[1] || null };\r\n  }\r\n\r\n  private getBookedRooms({\r\n    check_in,\r\n    check_out,\r\n    notes,\r\n    identifier,\r\n    override_unit,\r\n    unit,\r\n  }: {\r\n    identifier: string | null;\r\n    check_in: Date;\r\n    check_out: Date;\r\n    override_unit: boolean;\r\n    unit: string;\r\n    notes: string | null;\r\n  }) {\r\n    const rooms = [];\r\n    const total_days = calculateDaysBetweenDates(moment(check_in).format('YYYY-MM-DD'), moment(check_out).format('YYYY-MM-DD'));\r\n    const calculateAmount = ({ is_amount_modified, selected_variation, view_mode, rp_amount, ratePlan }: IRatePlanSelection, infants: number) => {\r\n      if (is_amount_modified) {\r\n        return view_mode === '002' ? rp_amount : rp_amount / total_days;\r\n      }\r\n      let variation = selected_variation;\r\n      if (infants > 0) {\r\n        if (!this.variationService) {\r\n          this.variationService = new VariationService();\r\n        }\r\n        variation = this.variationService.getVariationBasedOnInfants({ variations: ratePlan.variations, baseVariation: selected_variation, infants });\r\n      }\r\n      return Number(variation.discounted_amount) / total_days;\r\n    };\r\n    for (const roomTypeId in booking_store.ratePlanSelections) {\r\n      const roomtype = booking_store.ratePlanSelections[roomTypeId];\r\n      for (const rateplanId in roomtype) {\r\n        const rateplan = roomtype[rateplanId];\r\n        if (rateplan.reserved > 0) {\r\n          for (let i = 0; i < rateplan.reserved; i++) {\r\n            const { first_name, last_name } = this.extractFirstNameAndLastName(rateplan.guest[i].name);\r\n            rooms.push({\r\n              identifier,\r\n              roomtype: rateplan.roomtype,\r\n              rateplan: rateplan.ratePlan,\r\n              prepayment_amount_gross: 0,\r\n              unit: override_unit ? { id: unit } : rateplan.guest[i].unit ? { id: rateplan.guest[i].unit } : null,\r\n              occupancy: {\r\n                adult_nbr: rateplan.selected_variation.adult_nbr,\r\n                children_nbr: rateplan.selected_variation.child_nbr - Math.max(rateplan.guest[i].infant_nbr, 0),\r\n                infant_nbr: rateplan.guest[i].infant_nbr,\r\n              },\r\n              bed_preference: rateplan.guest[i].bed_preference,\r\n              from_date: moment(check_in).format('YYYY-MM-DD'),\r\n              to_date: moment(check_out).format('YYYY-MM-DD'),\r\n              notes,\r\n              days: this.generateDailyRates(check_in, check_out, calculateAmount(rateplan, rateplan.guest[i].infant_nbr)),\r\n              guest: {\r\n                email: null,\r\n                first_name,\r\n                last_name,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n                cci: null,\r\n              },\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rooms;\r\n  }\r\n\r\n  async prepareBookUserServiceParams({ context, sourceOption, check_in }: { context: any; sourceOption: TSourceOption; check_in: boolean }) {\r\n    try {\r\n      // Validate context structure\r\n      if (!context || !context.dateRangeData) {\r\n        throw new Error('Invalid context: Missing date range data.');\r\n      }\r\n\r\n      const fromDate = new Date(context.dateRangeData.fromDate);\r\n      const toDate = new Date(context.dateRangeData.toDate);\r\n\r\n      const generateNewRooms = (identifier = null) => {\r\n        return this.getBookedRooms({\r\n          check_in: fromDate,\r\n          check_out: toDate,\r\n          identifier,\r\n          notes: '',\r\n          override_unit: context.isEventType('BAR_BOOKING') ? true : false,\r\n          unit: context.isEventType('BAR_BOOKING') ? context.bookingData.PR_ID : null,\r\n        });\r\n      };\r\n\r\n      const modifyBookingDetails = ({ pickup_info, extra_services, is_direct, is_in_loyalty_mode, promo_key, extras, ...rest }: Booking, rooms: Room[]) => {\r\n        return {\r\n          assign_units: true,\r\n          check_in,\r\n          is_pms: true,\r\n          is_direct,\r\n          is_in_loyalty_mode,\r\n          promo_key,\r\n          extras,\r\n          booking: {\r\n            ...rest,\r\n            rooms,\r\n          },\r\n          extra_services,\r\n          pickup_info,\r\n        };\r\n      };\r\n\r\n      let newBooking = null;\r\n\r\n      switch (context.defaultData.event_type) {\r\n        case 'EDIT_BOOKING': {\r\n          const { booking, currentRoomType } = context.defaultData;\r\n\r\n          const filteredRooms = booking.rooms.filter(r => r.identifier !== currentRoomType.identifier);\r\n\r\n          const newRooms = generateNewRooms(currentRoomType.identifier);\r\n          newBooking = modifyBookingDetails(booking, [...filteredRooms, ...newRooms]);\r\n          break;\r\n        }\r\n        case 'ADD_ROOM':\r\n        case 'SPLIT_BOOKING': {\r\n          const { booking } = context.defaultData;\r\n          if (!booking) {\r\n            throw new Error('Missing booking');\r\n          }\r\n          console.log(booking);\r\n          const newRooms = generateNewRooms();\r\n          newBooking = modifyBookingDetails(booking, [...booking?.rooms, ...newRooms]);\r\n          break;\r\n        }\r\n        default: {\r\n          const newRooms = generateNewRooms();\r\n          const { bookedByInfoData } = context;\r\n          const isAgent = sourceOption.type === 'TRAVEL_AGENCY';\r\n          newBooking = {\r\n            assign_units: true,\r\n            check_in,\r\n            is_pms: true,\r\n            is_direct: true,\r\n            is_in_loyalty_mode: false,\r\n            promo_key: null,\r\n            extras,\r\n            agent: isAgent ? { id: sourceOption.tag } : null,\r\n            booking: {\r\n              from_date: moment(fromDate).format('YYYY-MM-DD'),\r\n              to_date: moment(toDate).format('YYYY-MM-DD'),\r\n              remark: bookedByInfoData.message || null,\r\n              booking_nbr: '',\r\n              property: {\r\n                id: context.propertyid,\r\n              },\r\n              booked_on: {\r\n                date: moment().format('YYYY-MM-DD'),\r\n                hour: new Date().getHours(),\r\n                minute: new Date().getMinutes(),\r\n              },\r\n              source: isAgent ? '' : sourceOption,\r\n              rooms: newRooms,\r\n              currency: context.currency,\r\n              arrival: { code: bookedByInfoData.selectedArrivalTime },\r\n              guest: {\r\n                email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n                first_name: bookedByInfoData.firstName,\r\n                last_name: bookedByInfoData.lastName,\r\n                country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n                city: null,\r\n                mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n                country_phone_prefix: bookedByInfoData?.isdCode ?? null,\r\n                address: '',\r\n                dob: null,\r\n                subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n                cci: bookedByInfoData.cardNumber\r\n                  ? {\r\n                      nbr: bookedByInfoData.cardNumber,\r\n                      holder_name: bookedByInfoData.cardHolderName,\r\n                      expiry_month: bookedByInfoData.expiryMonth,\r\n                      expiry_year: bookedByInfoData.expiryYear,\r\n                    }\r\n                  : null,\r\n              },\r\n            },\r\n            pickup_info: null,\r\n          };\r\n          break;\r\n        }\r\n      }\r\n      return newBooking;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  private getRoomCategoryByRoomId(bookingData) {\r\n    return bookingData.roomsInfo?.find(roomCategory => {\r\n      return roomCategory.id === bookingData.RATE_TYPE;\r\n    });\r\n  }\r\n  public setEditingRoomInfo(bookingData, selectedUnits) {\r\n    const category = this.getRoomCategoryByRoomId(bookingData);\r\n    const room_id = !category ? '' : `c_${category?.id}`;\r\n    const ratePlanId = `p_${bookingData.RATE_PLAN_ID}`;\r\n    const data = {\r\n      adultCount: bookingData.ADULTS_COUNT,\r\n      rate: bookingData.RATE,\r\n      rateType: bookingData.RATE_TYPE,\r\n      ratePlanId: bookingData.RATE_PLAN_ID,\r\n      roomCategoryId: category ? category.id : '',\r\n      roomCategoryName: category ? category.name : '',\r\n      totalRooms: 1,\r\n      ratePlanName: bookingData.RATE_PLAN,\r\n      roomId: bookingData.PR_ID,\r\n      guestName: bookingData.NAME,\r\n      cancelation: bookingData.cancelation,\r\n      guarantee: bookingData.guarantee,\r\n      adult_child_offering: bookingData.adult_child_offering,\r\n    };\r\n    selectedUnits.set(room_id, new Map().set(ratePlanId, data));\r\n  }\r\n}\r\n"]}