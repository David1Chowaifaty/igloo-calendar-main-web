{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/components/ir-sales-by-channel/types.ts"],"names":[],"mappings":"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","sourcesContent":["// src/components/ir-sales-by-channel/types.ts\nimport { z } from 'zod';\n\n/* ---------- Report (input) ---------- */\nexport const CurrencySchema = z.object({\n  code: z.string(),\n  id: z.number(),\n  symbol: z.string(),\n});\n\nconst ChannelReportBaseSchema = z.object({\n  NIGHTS: z.number(),\n  PCT: z.number(),\n  REVENUE: z.number(),\n  SOURCE: z.string(),\n  PROPERTY_ID: z.number(),\n  PROPERTY_NAME: z.string(),\n  currency: z.string(),\n});\nexport type SalesByChannelMode = 'property' | 'mpo';\n/**\n * Transforms UPPER_SNAKE_CASE keys to lowercase at parse time.\n * Output type is exactly the lowercased version of the base schema.\n */\nconst ExtendedChanelReportBaseSchema = ChannelReportBaseSchema.extend({\n  last_year: ChannelReportBaseSchema.optional(),\n});\nexport const ChannelReportSchema = ExtendedChanelReportBaseSchema;\n\nexport type ChannelReport = z.infer<typeof ExtendedChanelReportBaseSchema>;\n\nexport const ChannelReportResultSchema = z.array(ExtendedChanelReportBaseSchema).nullable();\nexport type ChannelReportResult = z.infer<typeof ChannelReportResultSchema>;\n\n/* ---------- Params ---------- */\n\nexport const ChannelSalesParamsSchema = z.object({\n  AC_ID: z.string().optional(),\n  BOOK_CASE: z.string().min(1),\n  FROM_DATE: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Use YYYY-MM-DD format'),\n  TO_DATE: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Use YYYY-MM-DD format'),\n  WINDOW: z.coerce.number().int().nonnegative(),\n  // Accepts true/false, \"true\"/\"false\", 1/0; defaults to false\n  is_export_to_excel: z.coerce.boolean().optional().default(false),\n  LIST_AC_ID: z.array(z.number()).nullable(),\n});\n// .strict()\n// .refine(v => new Date(v.FROM_DATE) <= new Date(v.TO_DATE), { message: 'FROM_DATE must be on or before TO_DATE', path: ['TO_DATE'] });\n\nexport type ChannelSalesParams = z.infer<typeof ChannelSalesParamsSchema>;\n\n/* ---------- Filters ---------- */\n\nexport const ChannelSalesFilterSchema = ChannelSalesParamsSchema.extend({\n  include_previous_year: z.boolean(),\n});\n\nexport type ChannelSaleFilter = z.infer<typeof ChannelSalesFilterSchema>;\n\n/* ---------- Helpers (optional but handy) ---------- */\n\nexport const parseChannelReport = (data: unknown) => ChannelReportSchema.parse(data);\nexport const safeParseChannelReport = (data: unknown) => ChannelReportSchema.safeParse(data);\n\nexport const parseChannelReportResult = (data: unknown) => ChannelReportResultSchema.parse(data);\nexport const safeParseChannelReportResult = (data: unknown) => ChannelReportResultSchema.safeParse(data);\n\nexport const parseChannelSalesParams = (data: unknown) => ChannelSalesParamsSchema.parse(data);\nexport const safeParseChannelSalesParams = (data: unknown) => ChannelSalesParamsSchema.safeParse(data);\n\n/* ---------- Consolidated exports ---------- */\n\nexport { ChannelReportSchema as ReportSchema, ChannelReportResultSchema as ReportResultSchema, ChannelSalesParamsSchema as SalesParamsSchema };\n\nexport type { ChannelReport as Report, ChannelReportResult as ReportResult, ChannelSalesParams as SalesParams };\n"]}