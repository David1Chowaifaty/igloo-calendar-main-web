{"version":3,"file":"ir-sales-by-channel.js","sourceRoot":"","sources":["../../../src/components/ir-sales-by-channel/ir-sales-by-channel.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport Token from '@/models/Token';\nimport { AllowedProperties, PropertyService } from '@/services/property.service';\nimport { RoomService } from '@/services/room.service';\nimport locales from '@/stores/locales.store';\nimport moment from 'moment';\nimport { ChannelReport, ChannelReportResult, ChannelSaleFilter, SalesByChannelMode } from './types';\n@Component({\n  tag: 'ir-sales-by-channel',\n  styleUrl: 'ir-sales-by-channel.css',\n  scoped: true,\n})\nexport class IrSalesByChannel {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: string;\n  @Prop() p: string;\n  @Prop() mode!: SalesByChannelMode;\n\n  @State() isLoading: 'filter' | 'export' | null = null;\n  @State() isPageLoading = true;\n\n  @State() salesData: ChannelReportResult;\n  @State() channelSalesFilters: ChannelSaleFilter;\n  @State() allowedProperties: AllowedProperties = [];\n  @State() propertyID: number;\n\n  private token = new Token();\n  private roomService = new RoomService();\n  private propertyService = new PropertyService();\n\n  private baseFilters: ChannelSaleFilter = {\n    FROM_DATE: moment().add(-7, 'days').format('YYYY-MM-DD'),\n    TO_DATE: moment().format('YYYY-MM-DD'),\n    BOOK_CASE: '001',\n    WINDOW: 7,\n    include_previous_year: false,\n  };\n\n  componentWillLoad() {\n    this.channelSalesFilters = this.baseFilters;\n    if (this.ticket) {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n\n  private async initializeApp() {\n    try {\n      if (!this.mode) {\n        throw new Error(\"Missing required 'mode'. Please set it to either 'property' or 'mpo'.\");\n      }\n      if (!this.propertyid && this.mode === 'property' && !this.p) {\n        throw new Error('Missing Property ID or aname');\n      }\n      if (this.mode === 'property') {\n        const property = await this.propertyService.getExposedProperty({\n          id: Number(this.propertyid ?? 0),\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n        });\n        this.propertyID = property.My_Result.id;\n      }\n      const requests: Promise<unknown>[] = [, this.roomService.fetchLanguage(this.language)];\n      if (this.mode === 'mpo') {\n        requests.unshift(this.propertyService.getExposedAllowedProperties());\n        const [properties] = await Promise.all(requests);\n        this.allowedProperties = [...(properties as any)];\n      }\n\n      this.baseFilters = { ...this.baseFilters, LIST_AC_ID: this.allowedProperties?.map(p => p.id) };\n      this.channelSalesFilters = { ...this.baseFilters };\n\n      await this.getChannelSales();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isPageLoading = false;\n    }\n  }\n\n  private async getChannelSales(isExportToExcel = false) {\n    try {\n      const { include_previous_year, LIST_AC_ID, ...filterParams } = this.channelSalesFilters;\n      this.isLoading = isExportToExcel ? 'export' : 'filter';\n      const currentSales = await this.propertyService.getChannelSales({\n        is_export_to_excel: isExportToExcel,\n        ...filterParams,\n        AC_ID: this.propertyID ? this.propertyID.toString() : undefined,\n        ...filterParams,\n        LIST_AC_ID: this.propertyID ? null : LIST_AC_ID,\n      });\n      const shouldFetchPreviousYear = !isExportToExcel && include_previous_year;\n      let enrichedSales: ChannelReportResult = [];\n      if (shouldFetchPreviousYear) {\n        const previousYearSales = await this.propertyService.getChannelSales({\n          AC_ID: this.propertyID ? this.propertyID.toString() : undefined,\n          ...filterParams,\n          LIST_AC_ID: this.propertyID ? null : LIST_AC_ID,\n          FROM_DATE: moment(filterParams.FROM_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n          TO_DATE: moment(filterParams.TO_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n        });\n\n        enrichedSales = currentSales.map(current => {\n          const previous = previousYearSales.find(prev => prev.SOURCE.toLowerCase() === current.SOURCE.toLowerCase());\n          return {\n            ...current,\n            last_year: previous ? previous : null,\n          };\n        });\n      } else {\n        enrichedSales = currentSales.map(record => ({\n          ...record,\n          last_year: null,\n        }));\n      }\n      /**\n       * Groups sales records by SOURCE and currency.id, summing numeric fields\n       * and recalculating PCT based on the total REVENUE.\n       */\n      const groupSalesRecordsBySource = (records: ChannelReportResult): ChannelReportResult => {\n        if (!records || records.length === 0) return records;\n\n        // Helper to extract currency ID from various possible formats\n        const getCurrencyId = (r: ChannelReport): string | null => {\n          return r?.currency ?? null;\n        };\n\n        // Create unique key for grouping\n        const createKey = (r: ChannelReport): string => {\n          const source = r.SOURCE.toString().toLowerCase().trim();\n          const currencyId = getCurrencyId(r);\n          return `${source}__${currencyId ?? 'null'}`;\n        };\n\n        // Sum two values safely\n        const sumValues = (a: number | undefined, b: number | undefined): number => {\n          return (a ?? 0) + (b ?? 0);\n        };\n\n        // Merge numeric fields from last_year objects\n        const mergeLastYear = (base: ChannelReport['last_year'], incoming: ChannelReport['last_year']): ChannelReport['last_year'] => {\n          if (!incoming) return base;\n          if (!base) return { ...incoming };\n\n          return {\n            NIGHTS: sumValues(base.NIGHTS, incoming.NIGHTS),\n            PCT: sumValues(base.PCT, incoming.PCT), // Will recalculate later\n            REVENUE: sumValues(base.REVENUE, incoming.REVENUE),\n            SOURCE: base.SOURCE,\n            PROPERTY_ID: base.PROPERTY_ID,\n            PROPERTY_NAME: base.PROPERTY_NAME,\n            currency: base.currency,\n          };\n        };\n\n        // Group records by key\n        const grouped = new Map<string, ChannelReport>();\n\n        for (const record of records) {\n          const key = createKey(record);\n          const existing = grouped.get(key);\n\n          if (!existing) {\n            // First record for this key - clone it\n            grouped.set(key, { ...record });\n          } else {\n            // Merge with existing record\n            const merged: ChannelReport = {\n              ...existing,\n              NIGHTS: sumValues(existing.NIGHTS, record.NIGHTS),\n              PCT: 0, // Will recalculate after summing all REVENUE\n              REVENUE: sumValues(existing.REVENUE, record.REVENUE),\n              last_year: mergeLastYear(existing.last_year, record.last_year),\n            };\n            grouped.set(key, merged);\n          }\n        }\n\n        // Convert to array\n        const result = Array.from(grouped.values());\n\n        // Recalculate PCT based on total REVENUE\n        const totalRevenue = result.reduce((sum, r) => sum + (r.REVENUE ?? 0), 0);\n\n        if (totalRevenue > 0) {\n          for (const record of result) {\n            record.PCT = (record.REVENUE / totalRevenue) * 100;\n\n            // Also recalculate last_year PCT if it exists\n            if (record.last_year) {\n              const lastYearTotal = result.reduce((sum, r) => sum + (r.last_year?.REVENUE ?? 0), 0);\n              if (lastYearTotal > 0) {\n                record.last_year.PCT = (record.last_year.REVENUE / lastYearTotal) * 100;\n              }\n            }\n          }\n        }\n\n        return result;\n      };\n\n      this.salesData = [...groupSalesRecordsBySource(enrichedSales)];\n    } catch (error) {\n      console.error('Failed to fetch sales data:', error);\n    } finally {\n      this.isLoading = null;\n    }\n  }\n  render() {\n    if (this.isPageLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">Sales by Channel</h3>\n            <ir-button\n              size=\"sm\"\n              btn_color=\"outline\"\n              isLoading={this.isLoading === 'export'}\n              text={locales.entries.Lcz_Export}\n              onClickHandler={async e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                await this.getChannelSales(true);\n              }}\n              btnStyle={{ height: '100%' }}\n              iconPosition=\"right\"\n              icon_name=\"file\"\n              icon_style={{ '--icon-size': '14px' }}\n            ></ir-button>\n          </div>\n          {/* <ir-sales-by-country-summary salesReports={this.salesData}></ir-sales-by-country-summary> */}\n          <div class=\"d-flex flex-column flex-lg-row mt-1 \" style={{ gap: '1rem' }}>\n            <ir-sales-by-channel-filters\n              isLoading={this.isLoading === 'filter'}\n              onApplyFilters={e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                this.channelSalesFilters = { ...e.detail };\n                this.getChannelSales();\n              }}\n              allowedProperties={this.allowedProperties}\n              baseFilters={this.baseFilters}\n            ></ir-sales-by-channel-filters>\n            <ir-sales-by-channel-table mode={this.mode} allowedProperties={this.allowedProperties} class=\"card mb-0\" records={this.salesData}></ir-sales-by-channel-table>\n          </div>\n        </section>\n      </Host>\n    );\n  }\n}\n"]}