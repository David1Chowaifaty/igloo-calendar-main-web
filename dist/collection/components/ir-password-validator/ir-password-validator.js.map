{"version":3,"file":"ir-password-validator.js","sourceRoot":"","sources":["../../../src/components/ir-password-validator/ir-password-validator.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAOnD,MAAM,OAAO,mBAAmB;;wBAIH,EAAE;;IAE7B,IAAY,WAAW;QACrB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;IACjE,CAAC;IAED,IAAY,YAAY;QACtB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,IAAY,YAAY;QACtB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,IAAY,QAAQ;QAClB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,IAAY,cAAc;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,OAAO,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAC,SAAS;YAClB,0EAAmB,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,EAAC,sBAAsB,GAAqB;YAC9F,0EAAmB,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,+BAA+B,GAAqB;YACxG,0EAAmB,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,EAAC,+BAA+B,GAAqB;YACxG,0EAAmB,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,EAAC,oBAAoB,GAAqB;YACzF,0EAAmB,OAAO,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,EAAC,gCAAgC,GAAqB,CACvG,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-password-validator',\n  styleUrl: 'ir-password-validator.css',\n  scoped: true,\n})\nexport class IrPasswordValidator {\n  /**\n   * The password string to validate\n   */\n  @Prop() password: string = '';\n\n  private get validLength(): boolean {\n    if (!this.password) {\n      return false;\n    }\n    return this.password.length >= 8 && this.password.length <= 16;\n  }\n\n  private get hasUppercase(): boolean {\n    if (!this.password) {\n      return false;\n    }\n    return /[A-Z]/.test(this.password);\n  }\n\n  private get hasLowercase(): boolean {\n    if (!this.password) {\n      return false;\n    }\n    return /[a-z]/.test(this.password);\n  }\n\n  private get hasDigit(): boolean {\n    if (!this.password) {\n      return false;\n    }\n    return /[0-9]/.test(this.password);\n  }\n\n  private get hasSpecialChar(): boolean {\n    if (!this.password) {\n      return false;\n    }\n    return /[!@#$%^&*()\\-_=+]/.test(this.password);\n  }\n\n  render() {\n    return (\n      <div class=\"m-0 p-0\">\n        <requirement-check isValid={this.validLength} text=\"Minimum 8 characters\"></requirement-check>\n        <requirement-check isValid={this.hasUppercase} text=\"At least one uppercase letter\"></requirement-check>\n        <requirement-check isValid={this.hasLowercase} text=\"At least one lowercase letter\"></requirement-check>\n        <requirement-check isValid={this.hasDigit} text=\"At least one digit\"></requirement-check>\n        <requirement-check isValid={this.hasSpecialChar} text=\"At least one special character\"></requirement-check>\n      </div>\n    );\n  }\n}\n"]}