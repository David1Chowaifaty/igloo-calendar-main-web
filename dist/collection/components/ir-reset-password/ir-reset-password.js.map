{"version":3,"file":"ir-reset-password.js","sourceRoot":"","sources":["../../../src/components/ir-reset-password/ir-reset-password.tsx"],"names":[],"mappings":"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","sourcesContent":["import { CONSTANTS } from '@/utils/constants';\nimport { Component, Event, EventEmitter, Host, State, h } from '@stencil/core';\nimport { z, ZodError } from 'zod';\n\n@Component({\n  tag: 'ir-reset-password',\n  styleUrl: 'ir-reset-password.css',\n  scoped: true,\n})\nexport class IrResetPassword {\n  @State() confirmPassword: string;\n  @State() password: string;\n  @State() showValidator: boolean = false;\n  @State() autoValidate: boolean = false;\n  @State() error: { password?: boolean; confirm_password?: boolean } = {};\n  @State() submitted: boolean = false;\n  @State() isLoading = false;\n\n  @Event() authFinish: EventEmitter<{\n    token: string;\n    code: 'succsess' | 'error';\n  }>;\n\n  private ResetPasswordSchema = z.object({\n    password: z.string().regex(CONSTANTS.PASSWORD),\n    confirm_password: z\n      .string()\n      .nullable()\n      .refine(\n        password => {\n          if (!CONSTANTS.PASSWORD.test(password)) {\n            return false;\n          }\n          return password === this.password;\n        },\n        { message: 'Password must be at least 8 characters long.' },\n      ),\n  });\n\n  // private authService = new AuthService();\n  // private token = new Token();\n\n  private async handleSignIn(e: Event) {\n    e.preventDefault();\n    try {\n      this.error = {};\n      this.isLoading = true;\n      this.autoValidate = true;\n      this.ResetPasswordSchema.parse({\n        password: this.password,\n        confirm_password: this.confirmPassword,\n      });\n      await new Promise(r =>\n        setTimeout(() => {\n          r(true);\n        }, 300),\n      );\n      this.submitted = true;\n      // const token = await this.authService.authenticate({\n      //   password: this.password,\n      //   username: this.username,\n      // });\n      // this.token.setToken(token);\n      // this.authFinish.emit({ token, code: 'succsess' });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        let validationErrors = {};\n        error.issues.map(issue => {\n          const path = issue.path[0];\n          console.log(path, issue);\n          if (path === 'password') {\n            this.showValidator = true;\n          }\n          validationErrors[path] = true;\n        });\n        this.error = validationErrors;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  render() {\n    console.log(this.error);\n    return (\n      <Host>\n        <ir-interceptor></ir-interceptor>\n        <ir-toast></ir-toast>\n        <form onSubmit={this.handleSignIn.bind(this)} class=\"form-container px-2\">\n          {/* <img class=\"logo\" src=\"https://x.igloorooms.com/app-assets/images/logo/logo-dark.png\" alt=\"Login to igloorooms extranet\" /> */}\n          {/* <div class=\"separator-container\">\n            <div class=\"separator\"></div>\n            <p>Change password</p>\n            <div class=\"separator\"></div>\n          </div> */}\n          <div class=\"text-center\">\n            <h4>Set new Password</h4>\n            <p>Your new password must be different to previously used password</p>\n          </div>\n          {this.submitted ? (\n            <p>An email has been sent to your address. Please check your inbox to confirm the password change.</p>\n          ) : (\n            <section>\n              <div>\n                <div class=\"m-0 p-0\">\n                  <div class={'position-relative'}>\n                    <ir-input-text\n                      error={this.error?.password}\n                      autoValidate={this.autoValidate}\n                      value={this.password}\n                      onTextChange={e => (this.password = e.detail)}\n                      label=\"\"\n                      class=\"m-0 p-0\"\n                      inputStyles={'m-0'}\n                      zod={this.ResetPasswordSchema.pick({ password: true })}\n                      wrapKey=\"password\"\n                      placeholder=\"New Password\"\n                      onInputFocus={() => (this.showValidator = true)}\n                      type={'password'}\n                    ></ir-input-text>\n                    {/* <button type=\"button\" class=\"password_toggle\" onClick={() => (this.showPassword = !this.showPassword)}>\n                <ir-icons name={!this.showPassword ? 'open_eye' : 'closed_eye'}></ir-icons>\n              </button> */}\n                  </div>\n                  {this.showValidator && <ir-password-validator class=\"mb-1\" password={this.password}></ir-password-validator>}\n                </div>\n                <div class={'position-relative'}>\n                  <ir-input-text\n                    error={this.error?.confirm_password}\n                    autoValidate={this.autoValidate}\n                    zod={this.ResetPasswordSchema.pick({ confirm_password: true })}\n                    wrapKey=\"confirm_password\"\n                    value={this.confirmPassword}\n                    onTextChange={e => (this.confirmPassword = e.detail)}\n                    label=\"\"\n                    placeholder=\"Confirm Password\"\n                    type={'password'}\n                  ></ir-input-text>\n                  {/* <button type=\"button\" class=\"password_toggle\" onClick={() => (this.showPassword = !this.showPassword)}>\n              <ir-icons name={!this.showPassword ? 'open_eye' : 'closed_eye'}></ir-icons>\n            </button> */}\n                </div>\n              </div>\n              <ir-button isLoading={this.isLoading} btn_type=\"submit\" text={'Change password'} size=\"md\" class=\"login-btn mt-1\"></ir-button>\n            </section>\n          )}\n        </form>\n      </Host>\n    );\n  }\n}\n"]}