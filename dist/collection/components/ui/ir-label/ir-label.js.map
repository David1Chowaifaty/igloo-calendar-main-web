{"version":3,"file":"ir-label.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-label/ir-label.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAOzD,MAAM,OAAO,OAAO;IALpB;QAaU,YAAO,GAAsB,MAAM,CAAC;QAE5C,6CAA6C;QACrC,wBAAmB,GAAY,KAAK,CAAC;QAE7C,0DAA0D;QAClD,UAAK,GAAyD,IAAI,CAAC;QAE3E,wDAAwD;QAChD,mBAAc,GAAY,KAAK,CAAC;QAExC,oDAAoD;QAC5C,eAAU,GAAW,EAAE,CAAC;QAEhC,+DAA+D;QACvD,uBAAkB,GAAY,KAAK,CAAC;KAsD7C;IA5CC,MAAM;;QACJ,oGAAoG;QACpG,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACnE,OAAO,IAAI,CAAC;QACd,CAAC;QAED,OAAO,CACL,EAAC,IAAI,IAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE;YAEjD,WAAK,KAAK,EAAE,GAAG,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,oBAAoB,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,cAAc;gBACpH,IAAI,CAAC,SAAS,IAAI,SAAG,KAAK,EAAC,aAAa,IAAE,IAAI,CAAC,SAAS,CAAK;gBAG9D,YAAM,IAAI,EAAC,QAAQ,GAAG;gBAGrB,IAAI,CAAC,KAAK,IAAI,CACb,WACE,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EACnB,GAAG,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,GAAG,mCAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EACrC,KAAK,EAAE,WAAW,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,IAAI,MAAA,IAAI,CAAC,KAAK,CAAC,KAAK,mCAAI,EAAE,IAAI,MAAA,IAAI,CAAC,UAAU,mCAAI,EAAE,EAAE,GAC/G,CACH;gBAGA,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CACd,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CACzB,SAAG,KAAK,EAAC,eAAe,EAAC,SAAS,EAAE,IAAI,CAAC,OAAO,GAAM,CACvD,CAAC,CAAC,CAAC,CACF,SAAG,KAAK,EAAC,eAAe,IAAE,IAAI,CAAC,OAAO,CAAK,CAC5C,CACF,CAAC,CAAC,CAAC,CACF,SAAG,KAAK,EAAC,mBAAmB,IAAE,IAAI,CAAC,WAAW,CAAK,CACpD;gBAGD,eAAQ;gBAGR,YAAM,IAAI,EAAC,QAAQ,GAAG,CAClB,CACD,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, h, Host } from '@stencil/core';\n\n@Component({\n  tag: 'ir-label',\n  styleUrl: 'ir-label.css',\n  scoped: true,\n})\nexport class IrLabel {\n  // -- Props --\n  /** The text to display as the label's title */\n  @Prop() labelText: string;\n\n  /** The main text or HTML content to display */\n  @Prop() content: string;\n\n  @Prop() display: 'inline' | 'flex' = 'flex';\n\n  /** If true, will render `content` as HTML */\n  @Prop() renderContentAsHtml: boolean = false;\n\n  /** Object representing the image used within the label */\n  @Prop() image?: { src: string; alt: string; style?: string } | null = null;\n\n  /** Renders a country-type image style (vs. a 'logo') */\n  @Prop() isCountryImage: boolean = false;\n\n  /** Additional CSS classes or style for the image */\n  @Prop() imageStyle: string = '';\n\n  /** If true, label will ignore checking for an empty content */\n  @Prop() ignoreEmptyContent: boolean = false;\n\n  /** Placeholder text to display if content is empty */\n  @Prop() placeholder: string;\n\n  /** inline styles for the component container */\n  @Prop() containerStyle: {\n    [key: string]: string;\n  };\n\n  render() {\n    // If we have no content and no placeholder, and we are NOT ignoring the empty content, return null.\n    if (!this.placeholder && !this.content && !this.ignoreEmptyContent) {\n      return null;\n    }\n\n    return (\n      <Host class={this.image ? 'align-items-center' : ''}>\n        {/* Label title */}\n        <div class={`${this.display === 'inline' ? 'label_wrapper_inline' : 'label_wrapper_flex'} `} style={this.containerStyle}>\n          {this.labelText && <p class=\"label_title\">{this.labelText}</p>}\n\n          {/* Slot BEFORE content (prefix slot) */}\n          <slot name=\"prefix\" />\n\n          {/* Optional image */}\n          {this.image && (\n            <img\n              src={this.image.src}\n              alt={this.image.alt ?? this.image.src}\n              class={`p-0 m-0 ${this.isCountryImage ? 'country' : 'logo'} ${this.image.style ?? ''} ${this.imageStyle ?? ''}`}\n            />\n          )}\n\n          {/* Main content or placeholder */}\n          {this.content ? (\n            this.renderContentAsHtml ? (\n              <p class=\"label_message\" innerHTML={this.content}></p>\n            ) : (\n              <p class=\"label_message\">{this.content}</p>\n            )\n          ) : (\n            <p class=\"label_placeholder\">{this.placeholder}</p>\n          )}\n\n          {/* Default slot goes after the main content, but before suffix */}\n          <slot />\n\n          {/* Slot AFTER content (suffix slot) */}\n          <slot name=\"suffix\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"]}