{"version":3,"file":"ir-tooltip.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-tooltip/ir-tooltip.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAOhE,MAAM,OAAO,SAAS;IALtB;QAWE;;;WAGG;QACK,aAAQ,GAAY,IAAI,CAAC;QAEjC;;;WAGG;QACK,eAAU,GAAY,KAAK,CAAC;KAqFrC;IAxEC;;;;;;;;;;;;;OAaG;IACK,UAAU,CAAC,UAAmB;QACpC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACxB,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACpC,CAAC;QAED,IAAI,UAAU,EAAE,CAAC;YACf,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,GAAG,EAAE;gBACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACnB,CAAC,EAAE,GAAG,CAAC,CAAC;QACV,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACpB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,KAAK,EAAC,SAAS;YACnB,6DACE,KAAK,EAAE,IAAI,CAAC,cAAc,EAC1B,KAAK,EAAE,0DAA0D,EACjE,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EACzC,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IASzC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,wJAAwJ;YACxJ,UAAU;YACV,qBAAqB;YACrB,uQAAuQ;YACvQ,OAAO;YACP,SAAS;YACT,WAAK,KAAK,EAAC,4BAA4B,EAAC,KAAK,EAAE,SAAS,EAAE,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,OAAO,EAAC,aAAa;gBACpG,YACE,IAAI,EAAC,SAAS,EACd,CAAC,EAAC,0QAA0Q,GAC5Q,CACE,CACP,CAAC,CAAC,CAAC,CACF,YAAM,IAAI,EAAC,iBAAiB,GAAQ,CACrC,CACI;YACN,IAAI,CAAC,IAAI,IAAI,CACZ,4DAAK,KAAK,EAAC,uCAAuC,EAAC,IAAI,EAAC,SAAS;gBAC/D,4DAAK,KAAK,EAAC,eAAe,GAAO;gBACjC,4DAAK,KAAK,EAAE,qBAAqB,IAAI,CAAC,UAAU,IAAI,sBAAsB,EAAE;oBAC1E,6DAAM,SAAS,EAAE,IAAI,CAAC,OAAO,GAAS,CAClC,CACF,CACP,CACI,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Host, Prop, State, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-tooltip',\n  styleUrl: 'ir-tooltip.css',\n  scoped: true,\n})\nexport class IrTooltip {\n  /**\n   * Text or HTML content to be displayed in the tooltip.\n   */\n  @Prop({ reflect: true }) message: string;\n\n  /**\n   * Whether the tooltip content should be rendered using `innerHTML`.\n   * If false, treats message as plain text.\n   */\n  @Prop() withHtml: boolean = true;\n\n  /**\n   * When true, allows a custom element to trigger the tooltip using a named slot.\n   * If false, a default info icon is used.\n   */\n  @Prop() customSlot: boolean = false;\n\n  /**\n   * Inline styles applied to the outer tooltip container.\n   */\n  @Prop() containerStyle: { [key: string]: string };\n\n  /**\n   * Internal state tracking whether the tooltip is currently visible.\n   */\n  @State() open: boolean;\n\n  private tooltipTimeout: any;\n  /**\n   * Handles showing or hiding the tooltip.\n   *\n   * - If `shouldOpen` is `true`, the tooltip is shown after a 300ms delay.\n   * - If `false`, the tooltip is hidden immediately.\n   *\n   * @param shouldOpen - whether the tooltip should be shown or hidden.\n   *\n   * Example:\n   * ```ts\n   * this.toggleOpen(true);  // show tooltip\n   * this.toggleOpen(false); // hide tooltip\n   * ```\n   */\n  private toggleOpen(shouldOpen: boolean) {\n    if (this.tooltipTimeout) {\n      clearTimeout(this.tooltipTimeout);\n    }\n\n    if (shouldOpen) {\n      this.tooltipTimeout = setTimeout(() => {\n        this.open = true;\n      }, 300);\n    } else {\n      this.open = false;\n    }\n  }\n\n  render() {\n    return (\n      <Host class=\"m-0 p-0\">\n        <span\n          style={this.containerStyle}\n          class={'m-0 p-0 d-flex align-items-center justify-content-center'}\n          onMouseEnter={() => this.toggleOpen(true)}\n          onMouseLeave={() => this.toggleOpen(false)}\n        >\n          {/* <i\n            class=\"ml-1 ft-info\"\n            data-toggle=\"tooltip\"\n            data-placement=\"top\"\n            data-original-title=\"Info popup\"\n          ></i> */}\n\n          {!this.customSlot ? (\n            // <svg data-toggle=\"tooltip\" data-placement=\"top\" xmlns=\"http://www.w3.org/2000/svg\" height=\"16\" width=\"16\" class=\"tooltip-icon\" viewBox=\"0 0 512 512\">\n            //   <path\n            //     fill=\"#6b6f82\"\n            //     d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"\n            //   />\n            // </svg>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class={'m-0 p-0'} height=\"16\" width=\"16\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"#6b6f82\"\n                d=\"M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z\"\n              />\n            </svg>\n          ) : (\n            <slot name=\"tooltip-trigger\"></slot>\n          )}\n        </span>\n        {this.open && (\n          <div class=\"tooltip bottom show position-absolute\" role=\"tooltip\">\n            <div class=\"tooltip-arrow\"></div>\n            <div class={`tooltip-inner fit ${this.customSlot && 'tooltip-inner-custom'}`}>\n              <span innerHTML={this.message}></span>\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}