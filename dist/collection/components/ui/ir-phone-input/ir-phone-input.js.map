{"version":3,"file":"ir-phone-input.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-phone-input/ir-phone-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ICountry } from '@/components';\nimport { BookingService } from '@/services/booking.service';\nimport locales from '@/stores/locales.store';\nimport { Component, Element, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-phone-input',\n  styleUrl: 'ir-phone-input.css',\n  scoped: true,\n})\nexport class IrPhoneInput {\n  @Element() el: HTMLElement;\n  /**\n   * Label displayed next to the phone input.\n   */\n  @Prop() label: string;\n\n  /**\n   * Initial phone number value.\n   */\n  @Prop() value: string = '';\n\n  /**\n   * Disables the phone input when true.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * If true, styles the input to indicate an error state.\n   */\n  @Prop() error: boolean = false;\n\n  /**\n   * Auth token used by the booking service (if needed).\n   */\n  @Prop() token: string;\n\n  /**\n   * Two-letter language code used for country fetching.\n   */\n  @Prop() language: string;\n\n  /**\n   * Default country ID used if no phone prefix is set.\n   */\n  @Prop() default_country: number = null;\n\n  /**\n   * If provided, sets the phone prefix and updates selected country.\n   */\n  @Prop() phone_prefix: string | null = null;\n\n  /**\n   * Placeholder text for the input.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * Country list, used to populate prefix and dropdown.\n   * If not provided, fetched from the booking service.\n   */\n  @Prop({ mutable: true }) countries: ICountry[] = [];\n\n  /**\n   * Identifier for test automation.\n   */\n  @Prop() testId: string;\n\n  /**\n   * Floating label text that appears inside the input and “floats” above\n   * when the field is focused or has a value.\n   *\n   * - If provided, a floating label will be rendered inside the input container.\n   * - If you omit this prop but set `label`, the old left-side static label is used.\n   * - If you provide both `label` and `floatingLabel`, only the floating label is shown.\n   *\n   * Accessibility:\n   * - The floating label is tied to the input via `aria-labelledby`.\n   * - You can still set `placeholder`; the label will not be replaced by it.\n   *\n   * Examples:\n   * ```tsx\n   * <ir-phone-input floating-label label=\"Phone\" />\n   * ```\n   */\n  @Prop({ attribute: 'floating-label', reflect: true }) floatingLabel: boolean;\n\n  /**\n   * Emits when the user changes the phone number.\n   * Emits `{ phone_prefix, mobile }` object.\n   *\n   * Example:\n   * ```tsx\n   * <ir-phone-input onTextChange={(e) => console.log(e.detail)} />\n   * ```\n   */\n  @Event() textChange: EventEmitter<{ phone_prefix: string; mobile: string }>;\n\n  /**\n   * Tracks current user input value.\n   */\n  @State() inputValue: string = '';\n\n  /**\n   * Tracks visibility of the country dropdown.\n   */\n  @State() isDropdownVisible: boolean = false;\n\n  /**\n   * Currently selected country (based on prefix or ID).\n   */\n  @State() currentCountry: ICountry;\n\n  /** Internal: input focus state for floating label. */\n  @State() hasFocus: boolean = false;\n  // private cmp_countries: ICountry[] = [];\n\n  private bookingService: BookingService = new BookingService();\n  /** Internal: ids for label/input pairing (a11y). */\n  private inputId = `ir-phone-input-${Math.random().toString(36).slice(2)}`;\n  private labelId = `ir-phone-input-label-${Math.random().toString(36).slice(2)}`;\n\n  async componentWillLoad() {\n    if (this.countries.length === 0) {\n      const countries = await this.bookingService.getCountries(this.language);\n      this.countries = countries;\n    }\n    if (this.phone_prefix) {\n      this.setCountryFromPhonePrefix();\n    } else {\n      if (this.default_country) {\n        this.setCurrentCountry(this.default_country);\n      }\n    }\n    this.inputValue = this.value;\n  }\n  @Watch('value')\n  handleValueChange(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.inputValue = newValue;\n    }\n  }\n  @Watch('phone_prefix')\n  handlePhoneChange(newValue, oldValue) {\n    if (newValue !== oldValue) {\n      this.setCountryFromPhonePrefix();\n    }\n  }\n  @Listen('click', { target: 'document' })\n  handleDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (!this.el.contains(target)) {\n      this.isDropdownVisible = false;\n    }\n  }\n  /**\n   * Handles user input:\n   * - Removes all characters except numbers and \"+\"\n   * - Updates state and emits new phone number\n   */\n  private handleInputChange(e: InputEvent) {\n    let inputElement = e.target as HTMLInputElement;\n    let inputValue = inputElement.value;\n    inputValue = inputValue.replace(/[^+\\d]+/g, '');\n    inputElement.value = inputValue;\n    this.inputValue = inputValue;\n    this.textChange.emit({ phone_prefix: this.currentCountry?.phone_prefix, mobile: this.inputValue });\n  }\n  /**\n   * Sets the current country based on `phone_prefix` prop or country ID.\n   * Emits current phone prefix and phone number.\n   */\n  private setCountryFromPhonePrefix() {\n    let country = this.countries.find(country => country.phone_prefix === this.phone_prefix);\n    if (!country) {\n      country = this.countries.find(c => c.id.toString() === this.phone_prefix);\n      if (!country) {\n        return;\n      }\n    }\n    this.currentCountry = { ...country };\n    this.textChange.emit({ phone_prefix: this.currentCountry?.phone_prefix, mobile: this.value });\n  }\n  /**\n   * Sets the current country by its ID.\n   * Emits current phone prefix and phone number.\n   */\n  private setCurrentCountry(id: number) {\n    const country = this.countries.find(country => country.id === id);\n    if (!country) {\n      throw new Error('Invalid country id');\n    }\n    this.currentCountry = { ...country };\n    this.textChange.emit({ phone_prefix: this.currentCountry?.phone_prefix, mobile: this.value });\n  }\n  render() {\n    const useFloating = this.floatingLabel && this.label;\n    const showSideLabel = !!this.label && !useFloating;\n    const isActive = this.hasFocus || !!this.inputValue; // float when focused or has value\n    return (\n      <Host>\n        <div class=\"form-group mr-0\">\n          {/* <p class=\"mb-0\">Phone</p> */}\n          <div class=\"input-group row m-0 p-0 position-relative\">\n            {showSideLabel && (\n              <div class={`input-group-prepend col-3 p-0 text-dark border-none`}>\n                <label class={`input-group-text border-theme flex-grow-1 text-dark`}>{this.label}</label>\n              </div>\n            )}\n            <div class={'form-control  input-container  flex-fill' + (this.error ? ' is-invalid' : '')}>\n              <button type=\"button\" onClick={() => (this.isDropdownVisible = !this.isDropdownVisible)} class=\"dropdown-trigger\">\n                {this.currentCountry ? <img src={this.currentCountry?.flag} class=\"flag\" /> : <p class=\"p-0 m-0 \">{locales.entries.Lcz_Select}</p>}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"14\" width=\"12.25\" viewBox=\"0 0 448 512\">\n                  <path d=\"M201.4 342.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 274.7 86.6 137.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z\" />\n                </svg>\n              </button>\n\n              <p class={'phone_prefix_label'}>{this.currentCountry?.phone_prefix}</p>\n              {useFloating && (\n                <label id={this.labelId} class={`floating-label ${isActive ? 'active' : ''}`} htmlFor={this.inputId}>\n                  {this.label}\n                </label>\n              )}\n              <input\n                data-testid={this.testId}\n                maxLength={14}\n                type=\"text\"\n                placeholder={this.placeholder}\n                required\n                value={this.inputValue}\n                disabled={this.disabled}\n                onInput={e => this.handleInputChange(e)}\n                onFocus={() => {\n                  this.hasFocus = true;\n                }}\n                onBlur={() => {\n                  this.hasFocus = false;\n                }}\n              />\n            </div>\n            {this.isDropdownVisible && (\n              <div class=\"ir-dropdown-container\">\n                <ir-combobox\n                  onComboboxValueChange={e => {\n                    this.setCurrentCountry(+e.detail.data);\n                    this.isDropdownVisible = false;\n                  }}\n                  class=\"bg-white\"\n                  autoFocus\n                  placeholder=\"Search country\"\n                  data={this.countries.map(c => ({\n                    id: c.id.toString(),\n                    name: `${c.name} (${c.phone_prefix})`,\n                    image: c.flag,\n                  }))}\n                ></ir-combobox>\n              </div>\n            )}\n          </div>\n          {/* {this.error && <div class=\"invalid-feedback\">Please enter a valid phone number.</div>} */}\n        </div>\n      </Host>\n    );\n  }\n}\n"]}