{"version":3,"file":"ir-text-editor.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-text-editor/ir-text-editor.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Element, Event, EventEmitter, Prop, Watch } from '@stencil/core';\r\nimport Quill, { QuillOptions } from 'quill';\r\n\r\nexport type QuillToolbarButton = 'bold' | 'italic' | 'underline' | 'strike' | 'link' | 'image' | 'video' | 'clean';\r\n\r\nexport interface ToolbarConfig {\r\n  bold?: boolean;\r\n  italic?: boolean;\r\n  underline?: boolean;\r\n  strike?: boolean;\r\n  link?: boolean;\r\n  image?: boolean;\r\n  video?: boolean;\r\n  clean?: boolean;\r\n}\r\n\r\nfunction buildToolbar(config: ToolbarConfig): any[] {\r\n  const toolbar = [];\r\n  const textFormats: string[] = [];\r\n  if (config.bold) textFormats.push('bold');\r\n  if (config.italic) textFormats.push('italic');\r\n  if (config.underline) textFormats.push('underline');\r\n  if (config.strike) textFormats.push('strike');\r\n  if (textFormats.length) {\r\n    toolbar.push(textFormats);\r\n  }\r\n  if (config.link) toolbar.push(['link']);\r\n  if (config.image) toolbar.push(['image']);\r\n  if (config.video) toolbar.push(['video']);\r\n  if (config.clean) toolbar.push(['clean']);\r\n  return toolbar;\r\n}\r\n@Component({\r\n  tag: 'ir-text-editor',\r\n  styleUrls: ['ir-text-editor.css', 'quill.snow.css'],\r\n  shadow: false,\r\n})\r\nexport class IrTextEditor {\r\n  @Element() el: HTMLElement;\r\n\r\n  @Prop() error: boolean;\r\n\r\n  @Prop() maxLength: number;\r\n\r\n  /** Initial HTML content */\r\n  @Prop() value: string = '';\r\n\r\n  /** If true, makes the editor read-only */\r\n  @Prop() readOnly: boolean = false;\r\n\r\n  /** Determines if the current user can edit the content */\r\n  @Prop() userCanEdit: boolean = true;\r\n\r\n  /** Placeholder text */\r\n  @Prop() placeholder: string;\r\n\r\n  /**\r\n   * Type-safe toolbar configuration.\r\n   * For example, you can pass:\r\n   *\r\n   * {\r\n   *   bold: true,\r\n   *   italic: true,\r\n   *   underline: true,\r\n   *   strike: false,\r\n   *   link: true,\r\n   *   clean: true\r\n   * }\r\n   */\r\n  @Prop() toolbarConfig?: ToolbarConfig;\r\n\r\n  /** Emits current HTML content whenever it changes */\r\n  @Event() textChange: EventEmitter<string>;\r\n\r\n  /** Private, non-reactive Quill editor instance */\r\n  private editor: Quill;\r\n\r\n  private editorContainer!: HTMLDivElement;\r\n\r\n  componentDidLoad() {\r\n    const options: QuillOptions = {\r\n      modules: {\r\n        toolbar: this.computedToolbar,\r\n      },\r\n      placeholder: this.placeholder,\r\n      readOnly: !this.userCanEdit || this.readOnly,\r\n      theme: 'snow',\r\n    };\r\n    this.editor = new Quill(this.editorContainer, options);\r\n    if (this.value) {\r\n      this.setEditorValue(this.value);\r\n    }\r\n    this.editor.on('text-change', (_, __, source) => {\r\n      if (source === 'user' && this.maxLength) {\r\n        const plainText = this.editor.getText();\r\n        const effectiveLength = plainText.endsWith('\\n') ? plainText.length - 1 : plainText.length;\r\n        if (effectiveLength > this.maxLength) {\r\n          const excess = effectiveLength - this.maxLength;\r\n          this.editor.deleteText(this.maxLength, excess, 'user');\r\n          return;\r\n        }\r\n      }\r\n      const html = this.editor.root.innerHTML;\r\n      this.textChange.emit(html);\r\n    });\r\n  }\r\n\r\n  @Watch('value')\r\n  handleValueChange(newValue: string, oldValue: string) {\r\n    if (newValue !== oldValue) {\r\n      this.setEditorValue(newValue);\r\n    }\r\n  }\r\n  @Watch('readOnly')\r\n  onReadOnlyChange(newVal: boolean) {\r\n    if (this.editor) {\r\n      this.editor.enable(this.userCanEdit && !newVal);\r\n    }\r\n  }\r\n\r\n  @Watch('userCanEdit')\r\n  onUserCanEditChange(newVal: boolean) {\r\n    if (this.editor) {\r\n      this.editor.enable(newVal && !this.readOnly);\r\n    }\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.editor) {\r\n      this.editor = null;\r\n    }\r\n  }\r\n  private get computedToolbar() {\r\n    return this.toolbarConfig ? buildToolbar(this.toolbarConfig) : [['bold', 'italic', 'underline', 'strike'], ['link'], ['clean']];\r\n  }\r\n  private setEditorValue(value: string) {\r\n    if (!this.editor) {\r\n      return;\r\n    }\r\n    this.editor.clipboard.dangerouslyPasteHTML(value);\r\n    requestAnimationFrame(() => {\r\n      const length = this.editor.getLength();\r\n      this.editor.setSelection(length - 1, 0);\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div class={{ 'editor-wrapper': true, 'error': this.error }}>\r\n        <div ref={el => (this.editorContainer = el as HTMLDivElement)} class=\"editor-container\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}