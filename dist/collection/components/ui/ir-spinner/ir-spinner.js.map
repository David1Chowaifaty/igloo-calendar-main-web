{"version":3,"file":"ir-spinner.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-spinner/ir-spinner.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAOzE,MAAM,OAAO,SAAS;IALtB;QAmBE;;;WAGG;QACK,SAAI,GAAiB,KAAK,CAAC;KAqDpC;IA7CC,iBAAiB;QACf,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,8BAA8B;QAC5B,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,wBAAwB;QACtB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IACD;;OAEG;IACK,UAAU;QAChB,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACd,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,mBAAmB,CAAC,CAAC;QACxE,CAAC;QACD,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,mBAAmB,CAAC,CAAC;QAC/E,CAAC;QACD,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,EAAE,oBAAoB,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IACD;;;;;OAKG;IACK,eAAe,CAAC,KAAa,EAAE,GAA6F;QAClI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IACD,MAAM;QACJ,OAAO,EAAC,IAAI,sDAAQ,CAAC;IACvB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Host, Prop, Watch, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-spinner',\n  styleUrl: 'ir-spinner.css',\n  shadow: true,\n})\nexport class IrSpinner {\n  @Element() el: HTMLIrSpinnerElement;\n  /**\n   * Size of the spinner (diameter).\n   * Example: `size={2}` with `unit=\"rem\"` sets spinner to `2rem`.\n   */\n  @Prop() size: number;\n\n  /**\n   * Thickness of the spinner's border.\n   * Example: `borderWidth={4}` renders a `4px` or `4rem` thick border.\n   */\n  @Prop() borderWidth: number;\n\n  /**\n   * CSS unit used for `size` and `borderWidth`.\n   * Can be `'px'` or `'rem'`.\n   */\n  @Prop() unit: 'px' | 'rem' = 'rem';\n\n  /**\n   * Color of the spinner.\n   * Accepts any valid CSS color string.\n   */\n  @Prop() color: string;\n\n  componentWillLoad() {\n    this.initStyles();\n  }\n  @Watch('size')\n  handleSpinnerSizeChange() {\n    this.initStyles();\n  }\n  @Watch('borderWidth')\n  handleSpinnerBorderWidthChange() {\n    this.initStyles();\n  }\n  @Watch('unit')\n  handleSpinnerUnitChange() {\n    this.initStyles();\n  }\n  @Watch('color')\n  handleSpinnerColorChange() {\n    this.initStyles();\n  }\n  /**\n   * Applies CSS custom properties based on current prop values.\n   */\n  private initStyles() {\n    if (this.size) {\n      this.applyCssElement(`${this.size}${this.unit}`, '--ir-spinner-size');\n    }\n    if (this.borderWidth) {\n      this.applyCssElement(`${this.borderWidth}${this.unit}`, '--ir-spinner-size');\n    }\n    if (this.color) {\n      this.applyCssElement(`${this.color}`, '--ir-spinner-color');\n    }\n  }\n  /**\n   * Helper function to set CSS custom properties on the host element.\n   *\n   * @param value - The CSS value to apply\n   * @param key - The CSS custom property name (e.g., `--ir-spinner-size`)\n   */\n  private applyCssElement(value: string, key: '--ir-spinner-color' | '--ir-spinner-border-width' | '--ir-spinner-size' | (string & {})) {\n    this.el.style.setProperty(key, value);\n  }\n  render() {\n    return <Host></Host>;\n  }\n}\n"]}