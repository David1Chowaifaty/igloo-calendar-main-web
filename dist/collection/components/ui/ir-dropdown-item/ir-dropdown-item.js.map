{"version":3,"file":"ir-dropdown-item.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-dropdown-item/ir-dropdown-item.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAgB,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAQ/F,MAAM,OAAO,cAAc;IAL3B;QAuBE;;WAEG;QACqC,WAAM,GAAY,KAAK,CAAC;QAqCxD,gBAAW,GAAG,GAAG,EAAE;YACzB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC,CAAC;KAQH;IA9BC,gBAAgB;QACd,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,CAAC;IACnC,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,CAAC;IACrC,CAAC;IAGD,KAAK,CAAC,YAAY,CAAC,KAAa;;QAC9B,MAAM,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,GAAG,GAAG,CAAC,MAAA,MAAA,IAAI,CAAC,KAAK,mCAAI,IAAI,CAAC,EAAE,CAAC,WAAW,mCAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QACpE,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAGD,KAAK,CAAC,SAAS,CAAC,IAAa;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;IAKD,MAAM;QACJ,OAAO,CACL,EAAC,IAAI,qDAAC,IAAI,EAAC,QAAQ,EAAC,QAAQ,EAAC,IAAI,mBAAe,OAAO,EAAC,KAAK,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,IAChH,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,YAAM,SAAS,EAAE,IAAI,CAAC,YAAY,GAAS,CAAC,CAAC,CAAC,eAAa,CAC3E,CACR,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, Event, EventEmitter, Host, Method, Prop, h } from '@stencil/core';\nimport { DropdownItem } from '../ir-dropdown/ir-dropdown';\n\n@Component({\n  tag: 'ir-dropdown-item',\n  styleUrl: 'ir-dropdown-item.css',\n  scoped: true,\n})\nexport class IrDropdownItem {\n  @Element() el: HTMLIrDropdownItemElement;\n  /**\n   * Required value for the option\n   */\n  @Prop() value!: string;\n\n  /**\n   * Optional label (falls back to textContent)\n   */\n  @Prop() label?: string;\n\n  /**\n   * Optional html_content (when you want rich content);\n   * If omitted, the component will render its own slot content.\n   */\n  @Prop() html_content?: string;\n\n  /**\n   * When true, visually hide the item (used for filtering).\n   */\n  @Prop({ mutable: true, reflect: true }) hidden: boolean = false;\n\n  /**\n   * Emit when this item is chosen. Parent listens and closes dropdown.\n   */\n  @Event({ eventName: 'dropdownItemSelect' }) dropdownItemSelect: EventEmitter<DropdownItem['value']>;\n\n  /**\n   * Inform the parent this item exists (parent will index and manage focus)\n   */\n  @Event({ eventName: 'dropdownItemRegister' }) dropdownItemRegister: EventEmitter<void>;\n\n  /**\n   * Inform the parent this item is gone\n   */\n  @Event({ eventName: 'dropdownItemUnregister' }) dropdownItemUnregister: EventEmitter<void>;\n\n  componentDidLoad() {\n    this.dropdownItemRegister.emit();\n  }\n\n  disconnectedCallback() {\n    this.dropdownItemUnregister.emit();\n  }\n\n  @Method()\n  async matchesQuery(query: string): Promise<boolean> {\n    const q = query.toLowerCase();\n    const hay = (this.label ?? this.el.textContent ?? '').toLowerCase();\n    return hay.includes(q);\n  }\n\n  @Method()\n  async setHidden(next: boolean) {\n    this.hidden = next;\n  }\n\n  private handleClick = () => {\n    this.dropdownItemSelect.emit(this.value);\n  };\n  render() {\n    return (\n      <Host role=\"option\" tabindex=\"-1\" aria-selected=\"false\" class={{ 'dropdown-item': true }} onClick={this.handleClick}>\n        {this.html_content ? <span innerHTML={this.html_content}></span> : <slot></slot>}\n      </Host>\n    );\n  }\n}\n"]}