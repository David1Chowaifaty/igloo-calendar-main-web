{"version":3,"file":"ir-interactive-title.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-interactive-title/ir-interactive-title.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Prop, h, Element } from '@stencil/core';\n\n@Component({\n  tag: 'ir-interactive-title',\n  styleUrl: 'ir-interactive-title.css',\n  scoped: true,\n})\nexport class IrInteractiveTitle {\n  @Element() el: HTMLElement;\n\n  /**\n   * The full title string that may be cropped in the UI.\n   */\n  @Prop() popoverTitle: string = '';\n\n  /**\n   * CSS offset for the left position of the popover.\n   * Used as a CSS variable `--ir-popover-left`.\n   */\n  @Prop() irPopoverLeft: string = '10px';\n\n  /**\n   * Whether to show the housekeeping (HK) status dot.\n   */\n  @Prop() hkStatus: boolean = false;\n\n  /**\n   * The number of characters to display before cropping the title with ellipsis.\n   */\n  @Prop() cropSize: number = 20;\n  /**\n   * The message shown when hovering over the broom svg if provided.\n   * @requires hkStatus to be true\n   */\n  @Prop() broomTooltip: string;\n\n  /**\n   * Reference to track if we've initialized popover for current render\n   */\n  private lastRenderedTitle: string = '';\n  private titleContainerRef: HTMLElement;\n  private popoverInstance: any;\n\n  /**\n   * Initialize popover with overflow detection\n   */\n  private initializePopoverIfNeeded(titleContainer: HTMLElement, title: string) {\n    // Only initialize if title changed or first time\n    if (this.lastRenderedTitle === title && this.popoverInstance) {\n      return;\n    }\n    this.disposePopover();\n\n    const tempSpan = document.createElement('span');\n    tempSpan.style.visibility = 'hidden';\n    tempSpan.style.position = 'absolute';\n    tempSpan.style.whiteSpace = 'nowrap';\n    tempSpan.textContent = title;\n    document.body.appendChild(tempSpan);\n\n    const textWidth = tempSpan.offsetWidth;\n    document.body.removeChild(tempSpan);\n\n    const containerWidth = titleContainer.clientWidth;\n    const iconWidth = this.hkStatus ? 20 : 0;\n\n    const willOverflow = textWidth + iconWidth > containerWidth;\n\n    if (willOverflow && typeof $ !== 'undefined') {\n      try {\n        this.popoverInstance = $(titleContainer).popover({\n          trigger: 'hover',\n          content: title,\n          placement: 'top',\n          html: false,\n          sanitize: true,\n          delay: { show: 300, hide: 100 },\n        });\n      } catch (error) {\n        console.error('Failed to initialize popover:', error);\n      }\n    }\n\n    this.lastRenderedTitle = title;\n  }\n\n  private disposePopover() {\n    if (this.popoverInstance && typeof $ !== 'undefined') {\n      try {\n        $(this.titleContainerRef).popover('dispose');\n        this.popoverInstance = null;\n      } catch (error) {\n        console.error('Failed to dispose popover:', error);\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    this.disposePopover();\n  }\n\n  render() {\n    const title = this.popoverTitle || '';\n\n    const shouldCrop = title.length > this.cropSize;\n    const displayTitle = shouldCrop ? title.slice(0, this.cropSize) + '...' : title;\n\n    return (\n      <Host style={{ '--ir-popover-left': this.irPopoverLeft }}>\n        <p\n          ref={el => {\n            this.titleContainerRef = el;\n            if (el && title) {\n              setTimeout(() => this.initializePopoverIfNeeded(el, title), 0);\n            }\n          }}\n          class=\"popover-title\"\n          style={{\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            display: 'flex',\n            alignItems: 'center',\n            gap: '4px',\n          }}\n        >\n          <span\n            class=\"cropped-title\"\n            style={{\n              flexShrink: '1',\n              minWidth: '0',\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n            }}\n          >\n            {displayTitle}\n          </span>\n          {this.hkStatus && (\n            <div title={this.broomTooltip} class=\"hk-dot\" style={{ flexShrink: '0' }}>\n              <slot name=\"end\"></slot>\n            </div>\n          )}\n        </p>\n      </Host>\n    );\n  }\n}\n"]}