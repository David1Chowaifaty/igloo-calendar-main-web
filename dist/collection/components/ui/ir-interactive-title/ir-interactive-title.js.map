{"version":3,"file":"ir-interactive-title.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-interactive-title/ir-interactive-title.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, Prop, h, Element, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ir-interactive-title',\n  styleUrl: 'ir-interactive-title.css',\n  scoped: true,\n})\nexport class IrInteractiveTitle {\n  @Element() el: HTMLElement;\n\n  /**\n   * The full title string that may be cropped in the UI.\n   */\n  @Prop({ reflect: true }) popoverTitle: string;\n\n  /**\n   * CSS offset for the left position of the popover.\n   * Used as a CSS variable `--ir-popover-left`.\n   */\n  @Prop() irPopoverLeft: string = '10px';\n\n  /**\n   * Whether to show the housekeeping (HK) status dot.\n   */\n  @Prop() hkStatus: boolean;\n\n  /**\n   * The number of characters to display before cropping the title with ellipsis.\n   */\n  @Prop() cropSize: number = 15;\n\n  /**\n   * The visible title (possibly cropped).\n   * Computed during lifecycle based on content overflow.\n   */\n  private croppedTitle: string;\n\n  /**\n   * Reference to the span DOM element that holds the cropped title text.\n   */\n  private croppedTitleEl: HTMLSpanElement;\n\n  componentWillLoad() {\n    this.croppedTitle = this.popoverTitle;\n  }\n\n  componentDidLoad() {\n    this.initializePopover();\n  }\n\n  disconnectedCallback() {\n    this.disposePopover();\n  }\n\n  @Watch('popoverTitle')\n  handleTitleChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.disposePopover();\n      this.croppedTitle = newValue;\n      this.initializePopover(newValue);\n    }\n  }\n\n  /**\n   * Measures the width of the title and icon to determine if the text overflows.\n   * If it does, crops the title and attaches a popover to the title element.\n   * Otherwise, removes any existing popover.\n   */\n  private initializePopover(title?: string) {\n    const titleElement = this.el.querySelector('.popover-title') as HTMLElement;\n    const iconElement = this.el.querySelector('.hk-dot') as HTMLElement;\n    const cropped_title = title ?? this.croppedTitle;\n    if (!titleElement || !this.croppedTitleEl) {\n      return;\n    }\n    const containerWidth = titleElement.offsetWidth;\n    const textWidth = this.croppedTitleEl.scrollWidth;\n    const iconWidth = iconElement ? iconElement.offsetWidth : 0;\n    const isOverflowing = textWidth + iconWidth > containerWidth;\n\n    if (isOverflowing) {\n      this.croppedTitle = this.popoverTitle.slice(0, this.cropSize) + '...';\n      this.croppedTitleEl.innerHTML = cropped_title;\n      // this.render();\n      $(titleElement).popover({\n        trigger: 'hover',\n        content: this.popoverTitle,\n        placement: 'top',\n      });\n    } else {\n      $(titleElement).popover('dispose');\n    }\n  }\n\n  /**\n   * Disposes of the Bootstrap popover associated with the `.popover-title` element.\n   */\n  private disposePopover() {\n    const titleElement = this.el.querySelector('.popover-title') as HTMLElement;\n    if (titleElement) {\n      $(titleElement).popover('dispose');\n    }\n  }\n\n  render() {\n    return (\n      <Host style={{ '--ir-popover-left': this.irPopoverLeft }}>\n        <p\n          class=\"popover-title\"\n          style={{\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          <span ref={el => (this.croppedTitleEl = el)} class=\"croppedTitle\">\n            {this.croppedTitle}\n          </span>\n          {/* {this.hkStatus && this.hkStatusColors[this.hkStatus] && <div title=\"occupied\" style={{ '--dot-color': this.hkStatusColors[this.hkStatus] }} class={`hk-dot`}></div>} */}\n          {this.hkStatus && (\n            <div title=\"This unit is dirty\" class={`hk-dot`}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"12\" width=\"13.5\" viewBox=\"0 0 576 512\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M566.6 54.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-192 192-34.7-34.7c-4.2-4.2-10-6.6-16-6.6c-12.5 0-22.6 10.1-22.6 22.6l0 29.1L364.3 320l29.1 0c12.5 0 22.6-10.1 22.6-22.6c0-6-2.4-11.8-6.6-16l-34.7-34.7 192-192zM341.1 353.4L222.6 234.9c-42.7-3.7-85.2 11.7-115.8 42.3l-8 8C76.5 307.5 64 337.7 64 369.2c0 6.8 7.1 11.2 13.2 8.2l51.1-25.5c5-2.5 9.5 4.1 5.4 7.9L7.3 473.4C2.7 477.6 0 483.6 0 489.9C0 502.1 9.9 512 22.1 512l173.3 0c38.8 0 75.9-15.4 103.4-42.8c30.6-30.6 45.9-73.1 42.3-115.8z\"\n                />\n              </svg>\n            </div>\n          )}\n        </p>\n      </Host>\n    );\n  }\n}\n"]}