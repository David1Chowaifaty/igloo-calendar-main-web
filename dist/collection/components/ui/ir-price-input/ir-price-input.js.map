{"version":3,"file":"ir-price-input.js","sourceRoot":"","sources":["../../../../src/components/ui/ir-price-input/ir-price-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Prop, State, h } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\nimport { ZodType } from 'zod';\r\nimport IMask, { InputMask } from 'imask';\r\n@Component({\r\n  tag: 'ir-price-input',\r\n  styleUrl: 'ir-price-input.css',\r\n  scoped: true,\r\n})\r\nexport class IrPriceInput {\r\n  @Element() el: HTMLIrPriceInputElement;\r\n\r\n  /** The label for the input, optional */\r\n  @Prop() label?: string;\r\n  /** The readonly for the input, optional */\r\n  @Prop() readOnly?: boolean;\r\n\r\n  /** Extra classnames for the input, optional */\r\n  @Prop() inputStyle?: string;\r\n\r\n  /** Extra classnames for the label, optional */\r\n  @Prop() labelStyle?: string;\r\n\r\n  /** The disabled for the input, optional */\r\n  @Prop() disabled?: boolean;\r\n\r\n  /** The Currency for the input, optional */\r\n  @Prop() currency?: string;\r\n\r\n  /** The AutoValidate for the input, optional */\r\n  @Prop() autoValidate?: boolean = true;\r\n\r\n  /** Indicates the key to wrap the value (e.g., 'price' or 'cost') */\r\n  @Prop() wrapKey?: string;\r\n\r\n  /**\r\n   * A Zod schema for validating the input\r\n   * Example: z.coerce.number()\r\n   */\r\n  @Prop() zod?: ZodType<any, any>;\r\n\r\n  /** Placeholder text for the input */\r\n  @Prop() placeholder: string = '';\r\n\r\n  /** Initial value for the input */\r\n  @Prop({ mutable: true }) value: string = '';\r\n\r\n  /** Whether the input is required */\r\n  @Prop() required: boolean = false;\r\n\r\n  /** Minimum value for the price */\r\n  @Prop() minValue?: number;\r\n\r\n  /** Maximum value for the price */\r\n  @Prop() maxValue?: number;\r\n\r\n  /** Unique id for testing */\r\n  @Prop() testId?: string;\r\n\r\n  /** Error*/\r\n  @State() error: boolean;\r\n\r\n  /** Emits the current value on change */\r\n  @Event() textChange: EventEmitter<string>;\r\n\r\n  /** Emits the current value on blur */\r\n  @Event() inputBlur: EventEmitter<string>;\r\n\r\n  /** Emits the current value on focus */\r\n  @Event() inputFocus: EventEmitter<void>;\r\n\r\n  private id: string;\r\n\r\n  private opts = {\r\n    mask: Number,\r\n    scale: 2,\r\n    radix: '.',\r\n    mapToRadix: [','],\r\n    normalizeZeros: true,\r\n    padFractionalZeros: true,\r\n    thousandsSeparator: ',',\r\n  };\r\n  private mask: InputMask<any>;\r\n  private inputRef: HTMLInputElement;\r\n\r\n  componentWillLoad() {\r\n    if (this.el.id) {\r\n      this.id = this.el.id;\r\n    } else {\r\n      this.id = v4();\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (!this.mask) {\r\n      this.initializeMask();\r\n    }\r\n  }\r\n\r\n  private initializeMask() {\r\n    // Create options object with min/max if provided\r\n    const maskOpts = {\r\n      ...this.opts,\r\n    };\r\n\r\n    if (this.minValue !== undefined) {\r\n      maskOpts['min'] = this.minValue;\r\n    }\r\n\r\n    if (this.maxValue !== undefined) {\r\n      maskOpts['max'] = this.maxValue;\r\n    }\r\n\r\n    this.mask = IMask(this.inputRef, maskOpts);\r\n\r\n    // Set initial value if provided\r\n    if (this.value) {\r\n      this.mask.value = this.value;\r\n    }\r\n\r\n    this.mask.on('accept', () => {\r\n      const isEmpty = this.inputRef.value.trim() === '' || this.mask.unmaskedValue === '';\r\n      if (isEmpty) {\r\n        this.value = '';\r\n        this.textChange.emit(null);\r\n      } else {\r\n        this.value = this.mask.unmaskedValue;\r\n        this.textChange.emit(this.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private hasSpecialClass(className: string): boolean {\r\n    return this.el.classList.contains(className);\r\n  }\r\n\r\n  private validateInput(value: string): void {\r\n    if (!this.autoValidate) {\r\n      return;\r\n    }\r\n    if (this.zod) {\r\n      try {\r\n        this.zod.parse(this.wrapKey ? { [this.wrapKey]: value } : value); // Validate the value using the Zod schema\r\n        this.error = false; // Clear the error if valid\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.error = true; // Set the error message\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleInputChange = (): void => {\r\n    // The value is already being updated by the mask's 'accept' event\r\n    // Just validate here if needed\r\n    this.validateInput(this.value);\r\n  };\r\n\r\n  private handleBlur = (): void => {\r\n    this.validateInput(this.value);\r\n\r\n    // Format to 2 decimal places on blur\r\n    if (this.value) {\r\n      const numValue = parseFloat(this.value);\r\n      this.value = numValue.toFixed(2);\r\n\r\n      // Update the mask value to show the formatted value\r\n      if (this.mask) {\r\n        this.mask.value = this.value;\r\n      }\r\n    }\r\n\r\n    // Emit the blur event\r\n    this.inputBlur.emit(this.value);\r\n  };\r\n\r\n  private handleFocus = (): void => {\r\n    // Emit the focus event\r\n    this.inputFocus.emit();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <fieldset class=\"input-group price-input-group m-0 p-0\">\r\n        {this.label && (\r\n          <div class=\"input-group-prepend\">\r\n            <span\r\n              class={`input-group-text \r\n                ${this.labelStyle}\r\n              ${this.hasSpecialClass('ir-bl-lbl-none') ? 'ir-bl-lbl-none' : ''}\r\n              ${this.hasSpecialClass('ir-br-lbl-none') ? 'ir-br-lbl-none' : ''}\r\n              ${this.hasSpecialClass('ir-br-none') ? 'ir-br-none' : ''} \r\n              ${this.hasSpecialClass('ir-bl-none') ? 'ir-bl-none' : ''} \r\n              `}\r\n            >\r\n              <label class={'p-0 m-0 '} htmlFor={this.id}>\r\n                {this.label}\r\n              </label>\r\n            </span>\r\n          </div>\r\n        )}\r\n        <div class=\"position-relative has-icon-left rate-input-container\">\r\n          {this.currency && (\r\n            <div class={`input-group-prepend`}>\r\n              <span class={`input-group-text ${this.disabled ? 'disabled' : ''} currency-label ${this.error ? 'error' : ''} ${this.label ? 'with-label' : ''}`}>\r\n                {this.currency}\r\n              </span>\r\n            </div>\r\n          )}\r\n          <input\r\n            ref={el => (this.inputRef = el)}\r\n            data-testid={this.testId}\r\n            disabled={this.disabled}\r\n            id={this.id}\r\n            class={`form-control input-sm rate-input \r\n              ${this.inputStyle}\r\n              ${this.hasSpecialClass('ir-br-input-none') ? 'ir-br-input-none' : ''} \r\n              ${this.hasSpecialClass('ir-bl-input-none') ? 'ir-bl-input-none' : ''} \r\n              ${this.error ? 'error' : ''} py-0 m-0 ${this.currency ? 'ir-bl-none' : ''}`}\r\n            onInput={this.handleInputChange}\r\n            onBlur={this.handleBlur}\r\n            onFocus={this.handleFocus}\r\n            type=\"text\"\r\n            placeholder={this.placeholder}\r\n            readOnly={this.readOnly}\r\n            aria-label={this.el.ariaLabel ?? 'price-input'}\r\n            aria-describedby={this.el.ariaDescription ?? 'price-input'}\r\n          />\r\n        </div>\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n"]}