{"version":3,"file":"payment-utils.service.js","sourceRoot":"","sources":["../../src/services/payment-utils.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Payment } from '@/components/ir-booking-details/types';\nimport { IPayment } from '@/models/booking.dto';\nimport moment from 'moment';\n\nexport class PaymentUtilsService {\n  /**\n   * Creates a new payment item with default values\n   */\n  static createDefaultPayment(currency: any): Payment {\n    return {\n      id: -1,\n      date: moment().format('YYYY-MM-DD'),\n      amount: null,\n      currency,\n      designation: '',\n      reference: '',\n    };\n  }\n\n  /**\n   * Calculates total amount from payments array\n   */\n  static calculateTotalAmount(payments: IPayment[]): number {\n    if (!payments || payments.length === 0) return 0;\n    return payments.reduce((total, payment) => total + (payment.amount || 0), 0);\n  }\n\n  /**\n   * Filters payments by type (credit/debit)\n   */\n  static filterPaymentsByType(payments: IPayment[], type: 'CR' | 'DB'): IPayment[] {\n    return payments.filter(payment => payment.payment_type.operation === type);\n  }\n\n  /**\n   * Validates payment data\n   */\n  static validatePayment(payment: IPayment): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    if (!payment.designation?.trim()) {\n      errors.push('Designation is required');\n    }\n\n    if (!payment.amount || payment.amount <= 0) {\n      errors.push('Amount must be greater than 0');\n    }\n\n    if (!payment.date) {\n      errors.push('Date is required');\n    } else if (!moment(payment.date).isValid()) {\n      errors.push('Invalid date format');\n    }\n\n    if (!payment.currency) {\n      errors.push('Currency is required');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Formats payment amount with currency\n   */\n  static formatPaymentAmount(amount: number, currencySymbol: string): string {\n    if (typeof amount !== 'number' || !currencySymbol) {\n      return '';\n    }\n\n    return `${currencySymbol}${Math.abs(amount).toFixed(2)}`;\n  }\n\n  /**\n   * Sorts payments by date (newest first)\n   */\n  static sortPaymentsByDate(payments: IPayment[], descending: boolean = true): IPayment[] {\n    return [...payments].sort((a, b) => {\n      const dateA = moment(a.date);\n      const dateB = moment(b.date);\n\n      if (descending) {\n        return dateB.valueOf() - dateA.valueOf();\n      }\n      return dateA.valueOf() - dateB.valueOf();\n    });\n  }\n\n  /**\n   * Groups payments by month\n   */\n  static groupPaymentsByMonth(payments: IPayment[]): Record<string, IPayment[]> {\n    const grouped: Record<string, IPayment[]> = {};\n\n    payments.forEach(payment => {\n      const monthKey = moment(payment.date).format('YYYY-MM');\n      if (!grouped[monthKey]) {\n        grouped[monthKey] = [];\n      }\n      grouped[monthKey].push(payment);\n    });\n\n    return grouped;\n  }\n\n  /**\n   * Checks if payment is editable\n   */\n  static isPaymentEditable(payment: IPayment): boolean {\n    // Add business logic for when payments can be edited\n    // For example, payments older than X days might not be editable\n    const paymentDate = moment(payment.date);\n    const daysSincePayment = moment().diff(paymentDate, 'days');\n\n    // Allow editing if payment is within last 30 days\n    return daysSincePayment <= 30;\n  }\n\n  /**\n   * Checks if payment is deletable\n   */\n  static isPaymentDeletable(payment: IPayment): boolean {\n    // Add business logic for when payments can be deleted\n    // For example, system-generated payments might not be deletable\n    return payment.id > 0; // Only allow deletion of saved payments\n  }\n}\n"]}