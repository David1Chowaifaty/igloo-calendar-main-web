{"version":3,"file":"calendar.service.js","sourceRoot":"","sources":["../../src/services/calendar.service.ts"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,sDAAsD;AACtD,gDAAgD;AAChD,sDAAsD;AACtD,sDAAsD;AACtD,iDAAiD;AAEjD,MAAM,OAAO,eAAe;CAmE3B","sourcesContent":["// import calendarDataState from '@/stores/calendar-data.store';\n// import { BookingService } from './booking.service';\n// import { RoomService } from './room.service';\n// import { formatLegendColors } from '@/utils/utils';\n// import { bookingReasons } from '@/models/IBooking';\n// import { Socket, io } from 'socket.io-client';\n\nexport class CalendarService {\n  // private bookingService: BookingService;\n  // private roomService: RoomService;\n  // private socket: Socket;\n  // constructor() {\n  //   this.bookingService = new BookingService();\n  //   this.roomService = new RoomService();\n  // }\n  // public async Init(language: string, property_id: number, from_date: string, to_date: string) {\n  //   const [defaultTexts, roomResp, bookingResp, countryNodeList] = await Promise.all([\n  //     this.roomService.fetchLanguage(language),\n  //     this.roomService.fetchData(property_id, language),\n  //     this.bookingService.getCalendarData(property_id, from_date, to_date),\n  //     this.bookingService.getCountries(language),\n  //   ]);\n  //   calendarDataState.language = language;\n  //   this.setUpCalendarData(roomResp, bookingResp);\n  //   this.initializeSocket(property_id);\n  //   return { defaultTexts, roomResp, bookingResp, countryNodeList };\n  // }\n  // private setUpCalendarData(roomResp, bookingResp) {\n  //   calendarDataState.currency = roomResp['My_Result'].currency;\n  //   calendarDataState.allowedBookingSources = roomResp['My_Result'].allowed_booking_sources;\n  //   calendarDataState.adultChildConstraints = roomResp['My_Result'].adult_child_constraints;\n  //   calendarDataState.is_vacation_rental = roomResp['My_Result'].is_vacation_rental;\n  //   calendarDataState.legendData = roomResp['My_Result'].calendar_legends;\n  //   calendarDataState.startingDate = new Date(bookingResp.My_Params_Get_Rooming_Data.FROM).getTime();\n  //   calendarDataState.endingDate = new Date(bookingResp.My_Params_Get_Rooming_Data.TO).getTime();\n  //   calendarDataState.formattedLegendData = formatLegendColors(roomResp['My_Result'].calendar_legends);\n  // }\n  // private initializeSocket(property_id: number) {\n  //   this.socket = io('https://realtime.igloorooms.com/');\n  //   this.socket.on('MSG', async msg => {\n  //     this.handleSocketMessage(msg, property_id);\n  //   });\n  // }\n  // private async handleSocketMessage(msg: string, property_id: number) {\n  //   let msgAsObject = JSON.parse(msg);\n  //   if (msgAsObject && msgAsObject.KEY.toString() === property_id.toString()) {\n  //     const { REASON, PAYLOAD } = msgAsObject;\n  //     switch (REASON) {\n  //       case 'DORESERVATION':\n  //       case 'BLOCK_EXPOSED_UNIT':\n  //       case 'ASSIGN_EXPOSED_ROOM':\n  //       case 'REALLOCATE_EXPOSED_ROOM_BLOCK':\n  //         await this.handleBookingUpdates(REASON, PAYLOAD);\n  //         break;\n  //       case 'DELETE_CALENDAR_POOL':\n  //         this.handleDeleteCalendarPool(PAYLOAD);\n  //         break;\n  //       case 'GET_UNASSIGNED_DATES':\n  //         await this.handleGetUnassignedDates(PAYLOAD);\n  //         break;\n  //       default:\n  //         return;\n  //     }\n  //   }\n  // }\n  // private async handleBookingUpdates(reason: bookingReasons, payload: any) {\n  //   // Logic for booking updates\n  // }\n  // private handleDeleteCalendarPool(payload: any) {\n  //   // Logic for handling DELETE_CALENDAR_POOL\n  // }\n  // private async handleGetUnassignedDates(payload: any) {\n  //   // Logic for handling GET_UNASSIGNED_DATES\n  // }\n}\n"]}