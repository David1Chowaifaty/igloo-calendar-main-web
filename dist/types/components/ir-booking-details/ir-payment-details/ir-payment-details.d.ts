import { EventEmitter } from '../../../stencil-public-runtime';
import { Booking, IDueDate, IPayment } from "../../../models/booking.dto";
import moment from 'moment';
import { IPaymentAction } from "../../../services/payment.service";
import { IToast } from "../../ir-toast/toast";
export declare class IrPaymentDetails {
    bookingDetails: Booking;
    paymentActions: IPaymentAction[];
    newTableRow: boolean;
    collapsedPayment: boolean;
    collapsedGuarantee: boolean;
    flag: boolean;
    confirmModal: boolean;
    toBeDeletedItem: IPayment;
    paymentDetailsUrl: string;
    paymentExceptionMessage: string;
    modal_mode: 'delete' | 'save' | null;
    itemToBeAdded: IPayment;
    resetBookingData: EventEmitter<null>;
    resetExposedCancelationDueAmount: EventEmitter<null>;
    toast: EventEmitter<IToast>;
    private paymentService;
    private bookingService;
    private paymentBackground;
    handlePaymentGeneration(e: CustomEvent): void;
    componentWillLoad(): Promise<void>;
    initializeItemToBeAdded(): void;
    _processPaymentSave(): Promise<void>;
    _handleSave(): Promise<void>;
    handlePaymentInputChange(key: keyof IPayment, value: any, event?: InputEvent): void;
    cancelPayment(): Promise<void>;
    handleConfirmModal(e: CustomEvent): Promise<void>;
    openModal(): void;
    handleCancelModal(e: CustomEvent): Promise<void>;
    handleBookingDetails(): void;
    handleDateChange(e: CustomEvent<{
        start: moment.Moment;
        end: moment.Moment;
    }>): void;
    _renderTableRow(item: IPayment, rowMode?: 'add' | 'normal'): any;
    private bookingGuarantee;
    private checkPaymentCode;
    private getPaymentMethod;
    _renderDueDate(item: IDueDate): any;
    render(): any[];
}
