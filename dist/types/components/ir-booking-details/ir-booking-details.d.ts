import { EventEmitter } from '../../stencil-public-runtime';
import { Booking, ExtraService, Guest, IPmsLog } from "../../models/booking.dto";
import { TIglBookPropertyPayload } from "../../models/igl-book-property";
import { IToast } from "../ui/ir-toast/toast";
import { ICountry, IEntries } from "../../models/IBooking";
import { IPaymentAction } from "../../services/payment.service";
import { BookingDetailsSidebarEvents, OpenSidebarEvent } from './types';
export declare class IrBookingDetails {
    element: HTMLElement;
    language: string;
    ticket: string;
    bookingNumber: string;
    propertyid: number;
    is_from_front_desk: boolean;
    p: string;
    hasPrint: boolean;
    hasReceipt: boolean;
    hasDelete: boolean;
    hasMenu: boolean;
    hasRoomEdit: boolean;
    hasRoomDelete: boolean;
    hasRoomAdd: boolean;
    hasCheckIn: boolean;
    hasCheckOut: boolean;
    hasCloseButton: boolean;
    bookingItem: TIglBookPropertyPayload | null;
    statusData: any[];
    showPaymentDetails: any;
    booking: Booking;
    countries: ICountry[];
    calendarData: any;
    guestData: Guest;
    rerenderFlag: boolean;
    sidebarState: BookingDetailsSidebarEvents | null;
    sidebarPayload: any;
    isUpdateClicked: boolean;
    pms_status: IPmsLog;
    isPMSLogLoading: boolean;
    paymentActions: IPaymentAction[];
    property_id: number;
    selectedService: ExtraService;
    bedPreference: IEntries[];
    roomGuest: any;
    modalState: {
        type: 'email' | (string & {});
        message: string;
        loading: boolean;
    };
    toast: EventEmitter<IToast>;
    bookingChanged: EventEmitter<Booking>;
    closeSidebar: EventEmitter<null>;
    private bookingService;
    private roomService;
    private paymentService;
    private token;
    private printingBaseUrl;
    modalRef: HTMLIrModalElement;
    componentWillLoad(): void;
    ticketChanged(newValue: string, oldValue: string): void;
    handleSideBarEvents(e: CustomEvent<OpenSidebarEvent<unknown>>): void;
    handleIconClick(e: CustomEvent): void;
    handleResetExposedCancellationDueAmount(e: CustomEvent): Promise<void>;
    handleEditInitiated(e: CustomEvent<TIglBookPropertyPayload>): void;
    handleResetBooking(e: CustomEvent<Booking | null>): Promise<Booking>;
    handleEditExtraService(e: CustomEvent): void;
    private setRoomsData;
    private initializeApp;
    private openPrintingScreen;
    private handleCloseBookingWindow;
    private handleDeleteFinish;
    private resetBooking;
    private handleModalConfirm;
    private renderSidebarContent;
    render(): any;
    private handleRoomCheckout;
    private handleRoomCheckin;
}
