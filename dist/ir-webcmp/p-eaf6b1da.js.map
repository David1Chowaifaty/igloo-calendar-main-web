{"version":3,"names":["initialState","checkout_guest","guest","tax_statement","roomTypes","enableBooking","resetBooking","ratePlanSelections","isInFreeCancelationZone","bookingAvailabilityParams","from_date","to_date","adult_nbr","child_nbr","infant_nbr","booking","fictus_booking_nbr","event_type","type","state","booking_store","onChange","onRoomTypeChange","reset","createStore","resetBookingStore","checkVariation","variations","selected_variation","_a","find","v","newValue","currentSelections","forEach","roomType","is_active","id","rateplans","ratePlan","length","currentRatePlanSelection","_c","Object","keys","_d","visibleInventory","inventory","reserved","checkoutVariations","checkoutBedSelection","checkoutSmokingSelection","guestName","roomtype","assign","rp_amount","view_mode","_e","is_bed_configuration_enabled","physicalrooms","availabilities","updateInventory","roomTypeId","roomTypeSelection","calculateTotalSelectedRoomsExcludingIndex","excludedRatePlanId","entries","reduce","acc","ratePlanId","Number","newRatePlans","fromEntries","map","totalSelectedRoomsExcludingCurrent","roomTypeData","rt","availableRooms","JSON","stringify","updateRoomParams","params","reserveRooms","rooms","r","Error","newGuest","Array","from","first_name","last_name","unit","bed_preference","name","rate","bedding_setup","smoking_option","getVisibleInventory","modifyBookingStore","key","value","calculateTotalRooms","values","total","innerTotal","resetReserved","updatedSelections","ratePlans","toString","rpAcc","BookingService","handleExposedRoomInOut","props","data","axios","post","ExceptionMsg","sendBookingConfirmationEmail","booking_nbr","language","My_Result","getCalendarData","propertyid","extras","months","customMonths","myBooking","getMyBookings","days","month","push","daysCount","monthName","description","day","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","room_types","unassigned_units_nbr","occupancy","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","myBookings","defaultMonths","error","console","handleExposedRoomGuests","fetchGuest","email","log","changeExposedBookingStatus","fetchPMSLogs","getExposedBookingEvents","editExposedGuest","book_nbr","getBookingAvailability","adultChildCount","currency","rest","__rest","adult","child","currency_ref","code","skip_getting_assignable_units","calendar_data","is_frontdesk_enabled","is_backend","results","this","modifyRateplans","sortRoomTypes","message","userCriteria","sort","a","b","is_available_to_book","zeroCalculatedA","some","plan","variation","discounted_amount","zeroCalculatedB","_b","matchA","matchB","maxVariationA","Math","max","flatMap","maxVariationB","rp","sortVariations","getCountries","getSetupEntriesByTableName","TBL_NAME","res","fetchSetupEntries","TBL_NAMES","arrivalTime","filter","e","ratePricingMode","bedPreferenceType","doBookingExtraService","service","is_remove","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","getUserInfo","getExposedBooking","withExtras","generateDays","amount","startDate","Date","endDate","date","toISOString","split","cost","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","doReservation","body","bookUser","bookedByInfoData","check_in","fromDate","guestData","pickup_info","source","toDate","bookingNumber","defaultGuest","identifier","pr_id","fromDateStr","dateToFormattedString","toDateStr","firstName","lastName","country_id","countryId","city","mobile","contactNumber","phone_prefix","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","assign_units","is_pms","is_direct","is_in_loyalty_mode","promo_key","remark","property","arrival","selectedArrivalTime","roomCategoryId","roomCategoryName","rateplan","ratePlanName","rate_restrictions","cancelation","guarantee","roomId","adultCount","children_nbr","childrenCount","notes","rateType"],"sources":["src/stores/booking.store.ts","src/services/booking.service.ts"],"sourcesContent":["import { Booking, Guest } from '@/models/booking.dto';\r\nimport { TEventType } from '@/models/igl-book-property';\r\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation | null;\r\n  ratePlan: RatePlan;\r\n  guest: RatePlanGuest[] | null;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  is_amount_modified?: boolean;\r\n  view_mode: '002' | '001';\r\n  rp_amount: number;\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    is_bed_configuration_enabled: boolean;\r\n  };\r\n}\r\nexport interface RatePlanGuest {\r\n  first_name: string;\r\n  last_name: string;\r\n  unit: string | null;\r\n  bed_preference: string | null;\r\n  infant_nbr: number | null;\r\n  roomtype_id?: number;\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface ISelectedVariation {\r\n  variation: Variation;\r\n  state: 'default' | 'modified';\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  infant_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n  agent_code?: string;\r\n}\r\nexport interface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  checkout_guest: Guest | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  event_type: { type: TEventType };\r\n  guest: RatePlanGuest;\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n  booking: Booking;\r\n  resetBooking: boolean;\r\n  isInFreeCancelationZone: boolean;\r\n  fictus_booking_nbr: { nbr: string | null };\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  checkout_guest: null,\r\n  guest: null,\r\n  tax_statement: null,\r\n  roomTypes: [],\r\n  enableBooking: false,\r\n  resetBooking: false,\r\n  ratePlanSelections: {},\r\n  isInFreeCancelationZone: false,\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n    infant_nbr: 0,\r\n  },\r\n  booking: null,\r\n  fictus_booking_nbr: null,\r\n  event_type: { type: 'PLUS_BOOKING' },\r\n};\r\n\r\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\r\nexport function resetBookingStore() {\r\n  reset();\r\n}\r\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\r\n  if (!variations) {\r\n    return null;\r\n  }\r\n  if (!selected_variation || booking_store.resetBooking) {\r\n    return variations[0];\r\n  }\r\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\r\n}\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (!roomType.is_active) return;\r\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n    roomType.rateplans.forEach(ratePlan => {\r\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\r\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\r\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\r\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\r\n      ratePlanSelections[roomType.id][ratePlan.id] =\r\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\r\n          ? {\r\n              ...currentRatePlanSelection,\r\n              ratePlan,\r\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\r\n              visibleInventory: roomType.inventory,\r\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\r\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\r\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\r\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\r\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\r\n              roomtype: {\r\n                ...currentRatePlanSelection.roomtype,\r\n              },\r\n            }\r\n          : {\r\n              reserved: 0,\r\n              rp_amount: 0,\r\n              view_mode: '001',\r\n              guest: null,\r\n              visibleInventory: roomType.inventory,\r\n              selected_variation: ratePlan?.variations[0] ?? null,\r\n              ratePlan,\r\n              guestName: [],\r\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n              roomtype: {\r\n                ...roomType,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n              },\r\n              checkoutVariations: [],\r\n              checkoutBedSelection: [],\r\n              checkoutSmokingSelection: [],\r\n            };\r\n    });\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n  booking_store.resetBooking = false;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  let newGuest = Array.from({ length: rooms }, () => ({ first_name: '', last_name: '', unit: null, bed_preference: null, infant_nbr: null }));\r\n  if (guest) {\r\n    newGuest = guest;\r\n  }\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      view_mode: '001',\r\n      rp_amount: 0,\r\n      guest: newGuest,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        reserved: rooms,\r\n        checkoutVariations: [],\r\n        guest: newGuest,\r\n      },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return {\r\n      reserved: 0,\r\n      guest: null,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan: null,\r\n      guestName: [],\r\n      is_bed_configuration_enabled: false,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      rp_amount: 0,\r\n      view_mode: '001',\r\n      roomtype: null,\r\n    };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\r\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\r\n      if (isPrePayment) {\r\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\r\n      }\r\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\r\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\r\n      }, 0);\r\n    } else if (ratePlan.reserved > 0) {\r\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\r\n      return ratePlan.reserved * (amount ?? 0);\r\n    }\r\n    return 0;\r\n  };\r\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\r\n    Object.values(value).forEach(ratePlan => {\r\n      totalAmount += calculateCost(ratePlan);\r\n      prePaymentAmount += calculateCost(ratePlan, true);\r\n    });\r\n  });\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport function validateBooking() {\r\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\r\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\r\n  );\r\n}\r\nexport function calculateTotalRooms() {\r\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan) => {\r\n        if (ratePlan.reserved === 0) {\r\n          return innerTotal;\r\n        }\r\n        return innerTotal + ratePlan.reserved;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n}\r\nexport function resetReserved(): void {\r\n  const updatedSelections = Object.entries(booking_store.ratePlanSelections).reduce((acc, [roomTypeId, ratePlans]) => {\r\n    const roomType = booking_store.roomTypes.find(rt => rt.id.toString() === roomTypeId.toString());\r\n    acc[roomTypeId] = Object.entries(ratePlans).reduce((rpAcc, [ratePlanId, ratePlan]) => {\r\n      rpAcc[ratePlanId] = { ...ratePlan, reserved: 0, visibleInventory: roomType?.inventory ?? ratePlan.visibleInventory };\r\n      return rpAcc;\r\n    }, {} as any);\r\n    return acc;\r\n  }, {} as any);\r\n  booking_store.ratePlanSelections = { ...updatedSelections };\r\n}\r\nexport default booking_store;\r\n","import { HandleExposedRoomGuestsRequest } from './../models/booking.dto';\r\nimport { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString, extras } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, ExtraService, Guest, IBookingPickupInfo, IPmsLog, RoomInOut } from '../models/booking.dto';\r\nimport booking_store from '@/stores/booking.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\nexport interface IBookingParams {\r\n  bookedByInfoData: any;\r\n  check_in: boolean;\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  guestData;\r\n  totalNights: number;\r\n  source: { code: string; description: string };\r\n  propertyid: number;\r\n  rooms: any[];\r\n  currency: { id: number; code: string };\r\n  pickup_info: IBookingPickupInfo | null;\r\n  bookingNumber?: string;\r\n  defaultGuest?: any;\r\n  arrivalTime?: any;\r\n  pr_id?: number;\r\n  identifier?: string;\r\n  extras: { key: string; value: string }[] | null;\r\n}\r\nexport interface ExposedBookingEvent {\r\n  date: string;\r\n  hour: number;\r\n  id: number;\r\n  minute: number;\r\n  second: number;\r\n  user: string;\r\n  type: string;\r\n}\r\nexport class BookingService {\r\n  public async handleExposedRoomInOut(props: { booking_nbr: string; room_identifier: string; status: RoomInOut['code'] }) {\r\n    const { data } = await axios.post(`/Handle_Exposed_Room_InOut`, props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async sendBookingConfirmationEmail(booking_nbr: string, language: string) {\r\n    const { data } = await axios.post(`/Send_Booking_Confirmation_Email`, {\r\n      booking_nbr,\r\n      language,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Calendar`, {\r\n        propertyid,\r\n        from_date,\r\n        to_date,\r\n        extras,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const months: MonthType[] = data.My_Result.months;\r\n      const customMonths: { daysCount: number; monthName: string }[] = [];\r\n      const myBooking = await getMyBookings(months);\r\n      const days: DayData[] = months\r\n        .map(month => {\r\n          customMonths.push({\r\n            daysCount: month.days.length,\r\n            monthName: month.description,\r\n          });\r\n          return month.days.map(day => ({\r\n            day: convertDateToCustomFormat(day.description, month.description),\r\n            currentDate: convertDateToTime(day.description, month.description),\r\n            dayDisplayName: day.description,\r\n            rate: day.room_types,\r\n            unassigned_units_nbr: day.unassigned_units_nbr,\r\n            occupancy: day.occupancy,\r\n          }));\r\n        })\r\n        .flat();\r\n\r\n      return Promise.resolve({\r\n        ExceptionCode: null,\r\n        ExceptionMsg: '',\r\n        My_Params_Get_Rooming_Data: {\r\n          AC_ID: propertyid,\r\n          FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n          TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n        },\r\n        days,\r\n        months: customMonths,\r\n        myBookings: myBooking,\r\n        defaultMonths: months,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async handleExposedRoomGuests(props: HandleExposedRoomGuestsRequest) {\r\n    const { data } = await axios.post('/Handle_Exposed_Room_Guests', props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Guest`, { email });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async changeExposedBookingStatus(props: { book_nbr: string; status: string }) {\r\n    try {\r\n      const { data } = await axios.post(`/Change_Exposed_Booking_Status`, props);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_PMS_Logs`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBookingEvents(booking_nbr: string | number): Promise<ExposedBookingEvent[] | null> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking_Events`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(props: {\r\n    from_date: string;\r\n    to_date: string;\r\n    propertyid: number;\r\n    adultChildCount: { adult: number; child: number };\r\n    language: string;\r\n    room_type_ids: number[];\r\n    room_type_ids_to_update?: number[];\r\n    rate_plan_ids?: number[];\r\n    currency: { id: number; code: string };\r\n    is_in_agent_mode?: boolean;\r\n    agent_id?: string | number;\r\n  }): Promise<BookingDetails> {\r\n    try {\r\n      const { adultChildCount, currency, ...rest } = props;\r\n      const { data } = await axios.post(`/Check_Availability`, {\r\n        ...rest,\r\n        adult_nbr: adultChildCount.adult,\r\n        child_nbr: adultChildCount.child,\r\n        currency_ref: currency.code,\r\n        skip_getting_assignable_units: !calendar_data.is_frontdesk_enabled,\r\n        is_backend: true,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const results = this.modifyRateplans(this.sortRoomTypes(data['My_Result'], { adult_nbr: Number(adultChildCount.adult), child_nbr: Number(adultChildCount.child) }));\r\n      booking_store.roomTypes = [...results];\r\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\r\n      return results;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private sortRoomTypes(roomTypes, userCriteria: { adult_nbr: number; child_nbr: number }) {\r\n    return roomTypes.sort((a, b) => {\r\n      // Priority to available rooms\r\n      if (a.is_available_to_book && !b.is_available_to_book) return -1;\r\n      if (!a.is_available_to_book && b.is_available_to_book) return 1;\r\n\r\n      // Check for variations where is_calculated is true and amount is 0 or null\r\n      const zeroCalculatedA = a.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n      const zeroCalculatedB = b.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n\r\n      // Prioritize these types to be before inventory 0 but after all available ones\r\n      if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n      if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n      // Check for exact matching variations based on user criteria\r\n      const matchA = a.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      const matchB = b.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n\r\n      if (matchA && !matchB) return -1;\r\n      if (!matchA && matchB) return 1;\r\n\r\n      // Sort by the highest variation amount\r\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n\r\n      if (maxVariationA < maxVariationB) return -1;\r\n      if (maxVariationA > maxVariationB) return 1;\r\n\r\n      return 0;\r\n    });\r\n  }\r\n  private modifyRateplans(roomTypes) {\r\n    return roomTypes?.map(rt => ({ ...rt, rateplans: rt.rateplans?.map(rp => ({ ...rp, variations: this.sortVariations(rp?.variations ?? []) })) }));\r\n  }\r\n  private sortVariations(variations) {\r\n    return variations.sort((a, b) => {\r\n      if (a.adult_nbr !== b.adult_nbr) {\r\n        return b.adult_nbr - a.adult_nbr;\r\n      }\r\n      return b.child_nbr - a.child_nbr;\r\n    });\r\n  }\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Countries`, {\r\n        language,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getSetupEntriesByTableName(TBL_NAME: string) {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME`, {\r\n      TBL_NAME,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res: IEntries[] = data.My_Result;\r\n    return res;\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n        TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const res: any[] = data.My_Result;\r\n      return {\r\n        arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n        ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n        bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doBookingExtraService({ booking_nbr, service, is_remove }: { service: ExtraService; booking_nbr: number | string; is_remove: boolean }) {\r\n    const { data } = await axios.post(`/Do_Booking_Extra_Service`, { ...service, booking_nbr, is_remove });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Country_By_IP`, {\r\n        IP: '',\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const { data } = await axios.post(`/Block_Exposed_Unit`, params);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      console.log(data);\r\n      return data['My_Params_Block_Exposed_Unit'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const { data } = await axios.post(`/GET_EXPOSED_GUEST`, {\r\n        email,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string, withExtras: boolean = true): Promise<Booking> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n        booking_nbr,\r\n        language,\r\n        extras: withExtras ? extras : null,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Guests`, {\r\n        email,\r\n        property_id,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Bookings`, {\r\n        booking_nbr,\r\n        property_id,\r\n        from_date,\r\n        to_date,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Get_PCI_Card_Info_URL`, {\r\n        BOOK_NBR,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doReservation(body: any) {\r\n    const { data } = await axios.post(`/DoReservation`, { ...body, extras: body.extras ? body.extras : extras });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    console.log(data['My_Result']);\r\n    return data['My_Result'];\r\n  }\r\n\r\n  public async bookUser({\r\n    bookedByInfoData,\r\n    check_in,\r\n    currency,\r\n    extras = null,\r\n    fromDate,\r\n    guestData,\r\n    pickup_info,\r\n    propertyid,\r\n    rooms,\r\n    source,\r\n    toDate,\r\n    totalNights,\r\n    arrivalTime,\r\n    bookingNumber,\r\n    defaultGuest,\r\n    identifier,\r\n    pr_id,\r\n  }: IBookingParams) {\r\n    try {\r\n      const fromDateStr = dateToFormattedString(fromDate);\r\n      const toDateStr = dateToFormattedString(toDate);\r\n      let guest: any = {\r\n        email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n        first_name: bookedByInfoData.firstName,\r\n        last_name: bookedByInfoData.lastName,\r\n        country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n        city: null,\r\n        mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n        phone_prefix: null,\r\n        address: '',\r\n        dob: null,\r\n        subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n        cci: bookedByInfoData.cardNumber\r\n          ? {\r\n              nbr: bookedByInfoData.cardNumber,\r\n              holder_name: bookedByInfoData.cardHolderName,\r\n              expiry_month: bookedByInfoData.expiryMonth,\r\n              expiry_year: bookedByInfoData.expiryYear,\r\n            }\r\n          : null,\r\n      };\r\n      if (defaultGuest) {\r\n        guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\r\n      }\r\n      if (bookedByInfoData.id) {\r\n        guest = { ...guest, id: bookedByInfoData.id };\r\n      }\r\n      const body = {\r\n        assign_units: true,\r\n        check_in,\r\n        is_pms: true,\r\n        is_direct: true,\r\n        is_in_loyalty_mode: false,\r\n        promo_key: null,\r\n        extras,\r\n        booking: {\r\n          booking_nbr: bookingNumber || '',\r\n          from_date: fromDateStr,\r\n          to_date: toDateStr,\r\n          remark: bookedByInfoData.message || null,\r\n          property: {\r\n            id: propertyid,\r\n          },\r\n          source,\r\n          currency,\r\n          arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n          guest,\r\n          rooms: [\r\n            ...guestData.map(data => ({\r\n              identifier: identifier || null,\r\n              roomtype: {\r\n                id: data.roomCategoryId,\r\n                name: data.roomCategoryName,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n                inventory: data.inventory,\r\n                rate: data.rate / totalNights,\r\n              },\r\n              rateplan: {\r\n                id: data.ratePlanId,\r\n                name: data.ratePlanName,\r\n                rate_restrictions: null,\r\n                variations: null,\r\n                cancelation: data.cancelation,\r\n                guarantee: data.guarantee,\r\n              },\r\n              unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n              occupancy: {\r\n                adult_nbr: data.adultCount,\r\n                children_nbr: data.childrenCount,\r\n                infant_nbr: null,\r\n              },\r\n              bed_preference: data.preference,\r\n              from_date: fromDateStr,\r\n              to_date: toDateStr,\r\n              notes: null,\r\n              days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n              guest: {\r\n                email: null,\r\n                first_name: data.guestName,\r\n                last_name: null,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n              },\r\n            })),\r\n            ...rooms,\r\n          ],\r\n        },\r\n        pickup_info,\r\n      };\r\n      console.log('book user payload', body);\r\n      // const result = await this.doReservation(body);\r\n      // return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}