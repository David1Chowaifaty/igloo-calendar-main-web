{"version":3,"names":["BookingService","handleExposedRoomInOut","props","data","axios","post","ExceptionMsg","Error","getCalendarData","propertyid","from_date","to_date","extras","months","My_Result","customMonths","myBooking","getMyBookings","days","map","month","push","daysCount","length","monthName","description","day","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","rate","room_types","unassigned_units_nbr","occupancy","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","myBookings","defaultMonths","error","console","handleExposedRoomGuests","fetchGuest","email","log","changeExposedBookingStatus","fetchPMSLogs","booking_nbr","getExposedBookingEvents","editExposedGuest","guest","book_nbr","Object","assign","getBookingAvailability","adultChildCount","currency","rest","__rest","adult_nbr","adult","child_nbr","child","currency_ref","code","skip_getting_assignable_units","calendar_data","is_frontdesk_enabled","is_backend","results","this","modifyRateplans","sortRoomTypes","Number","booking_store","roomTypes","tax_statement","message","userCriteria","sort","a","b","is_available_to_book","zeroCalculatedA","_a","rateplans","some","plan","variations","variation","discounted_amount","zeroCalculatedB","_b","matchA","_c","matchB","_d","maxVariationA","Math","max","flatMap","maxVariationB","rt","rp","sortVariations","getCountries","language","getSetupEntriesByTableName","TBL_NAME","res","fetchSetupEntries","TBL_NAMES","arrivalTime","filter","e","ratePricingMode","bedPreferenceType","doBookingExtraService","service","is_remove","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","params","getUserInfo","getExposedBooking","withExtras","generateDays","amount","startDate","Date","endDate","date","toISOString","split","cost","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","doReservation","body","bookUser","bookedByInfoData","check_in","fromDate","guestData","pickup_info","rooms","source","toDate","bookingNumber","defaultGuest","identifier","pr_id","fromDateStr","dateToFormattedString","toDateStr","first_name","firstName","last_name","lastName","country_id","countryId","city","mobile","contactNumber","phone_prefix","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","id","assign_units","is_pms","is_direct","is_in_loyalty_mode","promo_key","booking","remark","property","arrival","selectedArrivalTime","roomtype","roomCategoryId","name","roomCategoryName","physicalrooms","availabilities","inventory","rateplan","ratePlanId","ratePlanName","rate_restrictions","cancelation","guarantee","unit","roomId","adultCount","children_nbr","childrenCount","infant_nbr","bed_preference","notes","rateType","guestName"],"sources":["src/services/booking.service.ts"],"sourcesContent":["import { HandleExposedRoomGuestsRequest } from './../models/booking.dto';\r\nimport { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString, extras } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, ExtraService, Guest, IBookingPickupInfo, IPmsLog, RoomInOut } from '../models/booking.dto';\r\nimport booking_store from '@/stores/booking.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\nexport interface IBookingParams {\r\n  bookedByInfoData: any;\r\n  check_in: boolean;\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  guestData;\r\n  totalNights: number;\r\n  source: { code: string; description: string };\r\n  propertyid: number;\r\n  rooms: any[];\r\n  currency: { id: number; code: string };\r\n  pickup_info: IBookingPickupInfo | null;\r\n  bookingNumber?: string;\r\n  defaultGuest?: any;\r\n  arrivalTime?: any;\r\n  pr_id?: number;\r\n  identifier?: string;\r\n  extras: { key: string; value: string }[] | null;\r\n}\r\nexport interface ExposedBookingEvent {\r\n  date: string;\r\n  hour: number;\r\n  id: number;\r\n  minute: number;\r\n  second: number;\r\n  user: string;\r\n  type: string;\r\n}\r\nexport class BookingService {\r\n  public async handleExposedRoomInOut(props: { booking_nbr: string; room_identifier: string; status: RoomInOut['code'] }) {\r\n    const { data } = await axios.post(`/Handle_Exposed_Room_InOut`, props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Calendar`, {\r\n        propertyid,\r\n        from_date,\r\n        to_date,\r\n        extras,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const months: MonthType[] = data.My_Result.months;\r\n      const customMonths: { daysCount: number; monthName: string }[] = [];\r\n      const myBooking = await getMyBookings(months);\r\n      const days: DayData[] = months\r\n        .map(month => {\r\n          customMonths.push({\r\n            daysCount: month.days.length,\r\n            monthName: month.description,\r\n          });\r\n          return month.days.map(day => ({\r\n            day: convertDateToCustomFormat(day.description, month.description),\r\n            currentDate: convertDateToTime(day.description, month.description),\r\n            dayDisplayName: day.description,\r\n            rate: day.room_types,\r\n            unassigned_units_nbr: day.unassigned_units_nbr,\r\n            occupancy: day.occupancy,\r\n          }));\r\n        })\r\n        .flat();\r\n\r\n      return Promise.resolve({\r\n        ExceptionCode: null,\r\n        ExceptionMsg: '',\r\n        My_Params_Get_Rooming_Data: {\r\n          AC_ID: propertyid,\r\n          FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n          TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n        },\r\n        days,\r\n        months: customMonths,\r\n        myBookings: myBooking,\r\n        defaultMonths: months,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async handleExposedRoomGuests(props: HandleExposedRoomGuestsRequest) {\r\n    const { data } = await axios.post('/Handle_Exposed_Room_Guests', props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Guest`, { email });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async changeExposedBookingStatus(props: { book_nbr: string; status: string }) {\r\n    try {\r\n      const { data } = await axios.post(`/Change_Exposed_Booking_Status`, props);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_PMS_Logs`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBookingEvents(booking_nbr: string | number): Promise<ExposedBookingEvent[] | null> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking_Events`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(props: {\r\n    from_date: string;\r\n    to_date: string;\r\n    propertyid: number;\r\n    adultChildCount: { adult: number; child: number };\r\n    language: string;\r\n    room_type_ids: number[];\r\n    room_type_ids_to_update?: number[];\r\n    rate_plan_ids?: number[];\r\n    currency: { id: number; code: string };\r\n    is_in_agent_mode?: boolean;\r\n    agent_id?: string | number;\r\n  }): Promise<BookingDetails> {\r\n    try {\r\n      const { adultChildCount, currency, ...rest } = props;\r\n      const { data } = await axios.post(`/Check_Availability`, {\r\n        ...rest,\r\n        adult_nbr: adultChildCount.adult,\r\n        child_nbr: adultChildCount.child,\r\n        currency_ref: currency.code,\r\n        skip_getting_assignable_units: !calendar_data.is_frontdesk_enabled,\r\n        is_backend: true,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const results = this.modifyRateplans(this.sortRoomTypes(data['My_Result'], { adult_nbr: Number(adultChildCount.adult), child_nbr: Number(adultChildCount.child) }));\r\n      booking_store.roomTypes = [...results];\r\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\r\n      return results;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private sortRoomTypes(roomTypes, userCriteria: { adult_nbr: number; child_nbr: number }) {\r\n    return roomTypes.sort((a, b) => {\r\n      // Priority to available rooms\r\n      if (a.is_available_to_book && !b.is_available_to_book) return -1;\r\n      if (!a.is_available_to_book && b.is_available_to_book) return 1;\r\n\r\n      // Check for variations where is_calculated is true and amount is 0 or null\r\n      const zeroCalculatedA = a.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n      const zeroCalculatedB = b.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n\r\n      // Prioritize these types to be before inventory 0 but after all available ones\r\n      if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n      if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n      // Check for exact matching variations based on user criteria\r\n      const matchA = a.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      const matchB = b.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n\r\n      if (matchA && !matchB) return -1;\r\n      if (!matchA && matchB) return 1;\r\n\r\n      // Sort by the highest variation amount\r\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n\r\n      if (maxVariationA < maxVariationB) return -1;\r\n      if (maxVariationA > maxVariationB) return 1;\r\n\r\n      return 0;\r\n    });\r\n  }\r\n  private modifyRateplans(roomTypes) {\r\n    return roomTypes?.map(rt => ({ ...rt, rateplans: rt.rateplans?.map(rp => ({ ...rp, variations: this.sortVariations(rp?.variations ?? []) })) }));\r\n  }\r\n  private sortVariations(variations) {\r\n    return variations.sort((a, b) => {\r\n      if (a.adult_nbr !== b.adult_nbr) {\r\n        return b.adult_nbr - a.adult_nbr;\r\n      }\r\n      return b.child_nbr - a.child_nbr;\r\n    });\r\n  }\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Countries`, {\r\n        language,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getSetupEntriesByTableName(TBL_NAME: string) {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME`, {\r\n      TBL_NAME,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res: IEntries[] = data.My_Result;\r\n    return res;\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n        TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const res: any[] = data.My_Result;\r\n      return {\r\n        arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n        ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n        bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doBookingExtraService({ booking_nbr, service, is_remove }: { service: ExtraService; booking_nbr: number | string; is_remove: boolean }) {\r\n    const { data } = await axios.post(`/Do_Booking_Extra_Service`, { ...service, booking_nbr, is_remove });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Country_By_IP`, {\r\n        IP: '',\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const { data } = await axios.post(`/Block_Exposed_Unit`, params);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      console.log(data);\r\n      return data['My_Params_Block_Exposed_Unit'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const { data } = await axios.post(`/GET_EXPOSED_GUEST`, {\r\n        email,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string, withExtras: boolean = true): Promise<Booking> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n        booking_nbr,\r\n        language,\r\n        extras: withExtras ? extras : null,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Guests`, {\r\n        email,\r\n        property_id,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Bookings`, {\r\n        booking_nbr,\r\n        property_id,\r\n        from_date,\r\n        to_date,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Get_PCI_Card_Info_URL`, {\r\n        BOOK_NBR,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doReservation(body: any) {\r\n    const { data } = await axios.post(`/DoReservation`, { ...body, extras: body.extras ? body.extras : extras });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    console.log(data['My_Result']);\r\n    return data['My_Result'];\r\n  }\r\n\r\n  public async bookUser({\r\n    bookedByInfoData,\r\n    check_in,\r\n    currency,\r\n    extras = null,\r\n    fromDate,\r\n    guestData,\r\n    pickup_info,\r\n    propertyid,\r\n    rooms,\r\n    source,\r\n    toDate,\r\n    totalNights,\r\n    arrivalTime,\r\n    bookingNumber,\r\n    defaultGuest,\r\n    identifier,\r\n    pr_id,\r\n  }: IBookingParams) {\r\n    try {\r\n      const fromDateStr = dateToFormattedString(fromDate);\r\n      const toDateStr = dateToFormattedString(toDate);\r\n      let guest: any = {\r\n        email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n        first_name: bookedByInfoData.firstName,\r\n        last_name: bookedByInfoData.lastName,\r\n        country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n        city: null,\r\n        mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n        phone_prefix: null,\r\n        address: '',\r\n        dob: null,\r\n        subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n        cci: bookedByInfoData.cardNumber\r\n          ? {\r\n              nbr: bookedByInfoData.cardNumber,\r\n              holder_name: bookedByInfoData.cardHolderName,\r\n              expiry_month: bookedByInfoData.expiryMonth,\r\n              expiry_year: bookedByInfoData.expiryYear,\r\n            }\r\n          : null,\r\n      };\r\n      if (defaultGuest) {\r\n        guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\r\n      }\r\n      if (bookedByInfoData.id) {\r\n        guest = { ...guest, id: bookedByInfoData.id };\r\n      }\r\n      const body = {\r\n        assign_units: true,\r\n        check_in,\r\n        is_pms: true,\r\n        is_direct: true,\r\n        is_in_loyalty_mode: false,\r\n        promo_key: null,\r\n        extras,\r\n        booking: {\r\n          booking_nbr: bookingNumber || '',\r\n          from_date: fromDateStr,\r\n          to_date: toDateStr,\r\n          remark: bookedByInfoData.message || null,\r\n          property: {\r\n            id: propertyid,\r\n          },\r\n          source,\r\n          currency,\r\n          arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n          guest,\r\n          rooms: [\r\n            ...guestData.map(data => ({\r\n              identifier: identifier || null,\r\n              roomtype: {\r\n                id: data.roomCategoryId,\r\n                name: data.roomCategoryName,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n                inventory: data.inventory,\r\n                rate: data.rate / totalNights,\r\n              },\r\n              rateplan: {\r\n                id: data.ratePlanId,\r\n                name: data.ratePlanName,\r\n                rate_restrictions: null,\r\n                variations: null,\r\n                cancelation: data.cancelation,\r\n                guarantee: data.guarantee,\r\n              },\r\n              unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n              occupancy: {\r\n                adult_nbr: data.adultCount,\r\n                children_nbr: data.childrenCount,\r\n                infant_nbr: null,\r\n              },\r\n              bed_preference: data.preference,\r\n              from_date: fromDateStr,\r\n              to_date: toDateStr,\r\n              notes: null,\r\n              days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n              guest: {\r\n                email: null,\r\n                first_name: data.guestName,\r\n                last_name: null,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n              },\r\n            })),\r\n            ...rooms,\r\n          ],\r\n        },\r\n        pickup_info,\r\n      };\r\n      console.log('book user payload', body);\r\n      // const result = await this.doReservation(body);\r\n      // return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}