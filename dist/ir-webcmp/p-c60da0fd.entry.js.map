{"version":3,"names":["irSwitchCss","IrSwitchStyle0","IrSwitch","constructor","hostRef","this","checked","disabled","_id","componentWillLoad","generateRandomId","componentDidLoad","switchRoot","setAttribute","length","result","characters","charactersLength","i","charAt","Math","floor","random","handleCheckChange","checkChange","emit","render","h","Host","key","ref","el","type","id","switchId","onClick","bind","role","value","class","tabIndex"],"sources":["src/components/ui/ir-switch/ir-switch.css?tag=ir-switch&encapsulation=scoped","src/components/ui/ir-switch/ir-switch.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  box-sizing: border-box;\n  --ir-root-width: 36px;\n  --ir-root-height: 20px;\n}\n\n.hidden-input {\n  transform: translateX(-100%);\n  position: absolute;\n  pointer-events: none;\n  opacity: 0;\n  margin: 0;\n  width: var(--ir-root-width);\n  height: var(--ir-root-height);\n}\n.SwitchRoot {\n  all: unset;\n  padding: 0;\n  margin: 0;\n  width: var(--ir-root-width);\n  height: var(--ir-root-height);\n  background-color: var(--ir-root-inactive-color, #ff4961);\n  position: relative;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 10px;\n  --webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  border-radius: 9999px;\n  box-sizing: border-box;\n}\n.SwitchRoot:disabled {\n  opacity: 80%;\n}\n.SwitchRoot:focus-visible {\n  outline: 1px solid var(--ir-root-active-color, rgb(55, 188, 155));\n  outline-offset: 1px;\n}\n.SwitchRoot[data-state='checked'] {\n  background-color: var(--ir-root-active-color, rgb(55, 188, 155));\n}\n.SwitchThumb {\n  padding: 0;\n  margin: 0;\n  display: block;\n  width: calc(var(--ir-root-height) - 3px);\n  height: calc(var(--ir-root-height) - 3px);\n  border-radius: 9999px;\n  background: white;\n  box-shadow: rgba(0, 0, 0, 0.2) 0px;\n  transition: transform 100ms ease 0s;\n  transform: translateX(2px);\n  will-change: transform;\n}\n.SwitchThumb[data-state='checked'] {\n  transform: translateX(calc(var(--ir-root-height) - 3px));\n}\n","import { Component, Event, EventEmitter, Host, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-switch',\n  styleUrl: 'ir-switch.css',\n  scoped: true,\n})\nexport class IrSwitch {\n  /**\n   * Whether the switch is currently checked (on).\n   * This is mutable and can be toggled internally.\n   */\n  @Prop({ mutable: true }) checked = false;\n\n  /**\n   * Optional ID for the switch.\n   * If not provided, a random ID will be generated.\n   */\n  @Prop() switchId: string;\n\n  /**\n   * Disables the switch if true.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Emitted when the checked state changes.\n   * Emits `true` when turned on, `false` when turned off.\n   *\n   * Example:\n   * ```tsx\n   * <ir-switch onCheckChange={(e) => console.log(e.detail)} />\n   * ```\n   */\n  @Event() checkChange: EventEmitter<boolean>;\n\n  private switchRoot: HTMLButtonElement;\n  private _id = '';\n\n  componentWillLoad() {\n    this._id = this.generateRandomId(10);\n  }\n\n  componentDidLoad() {\n    if (!this.switchRoot) {\n      return;\n    }\n    this.switchRoot.setAttribute('aria-checked', this.checked ? 'true' : 'false');\n  }\n  /**\n   * Generates a random alphanumeric ID of specified length.\n   *\n   * @param length Number of characters in the ID.\n   * @returns A string with the generated ID.\n   */\n  private generateRandomId(length: number) {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  }\n  /**\n   * Toggles the `checked` state of the switch and updates accessibility attributes.\n   * Also emits the `checkChange` event with the new state.\n   *\n   * Example:\n   * ```ts\n   * const el = document.querySelector('ir-switch');\n   * el.handleCheckChange(); // toggles on/off\n   * ```\n   */\n  private handleCheckChange() {\n    this.checked = !this.checked;\n    this.switchRoot.setAttribute('aria-checked', this.checked ? 'true' : 'false');\n    this.checkChange.emit(this.checked);\n  }\n\n  render() {\n    return (\n      <Host>\n        <button\n          disabled={this.disabled}\n          ref={el => (this.switchRoot = el)}\n          type=\"button\"\n          id={this.switchId || this._id}\n          onClick={this.handleCheckChange.bind(this)}\n          role=\"switch\"\n          data-state={this.checked ? 'checked' : 'unchecked'}\n          value={'on'}\n          class=\"SwitchRoot\"\n        >\n          <span class=\"SwitchThumb\" data-state={this.checked ? 'checked' : 'unchecked'}></span>\n        </button>\n        <input type=\"checkbox\" checked={this.checked} aria-hidden=\"true\" tabIndex={-1} value={'on'} class=\"hidden-input\" />\n      </Host>\n    );\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAc,+vCACpB,MAAAC,EAAeD,E,MCMFE,EAAQ,MALrB,WAAAC,CAAAC,G,mDAU2BC,KAAAC,QAAU,MAW3BD,KAAAE,SAAoB,MAcpBF,KAAAG,IAAM,E,CAEd,iBAAAC,GACEJ,KAAKG,IAAMH,KAAKK,iBAAiB,G,CAGnC,gBAAAC,GACE,IAAKN,KAAKO,WAAY,CACpB,M,CAEFP,KAAKO,WAAWC,aAAa,eAAgBR,KAAKC,QAAU,OAAS,Q,CAQ/D,gBAAAI,CAAiBI,GACvB,IAAIC,EAAS,GACb,MAAMC,EAAa,iEACnB,MAAMC,EAAmBD,EAAWF,OACpC,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC/BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,G,CAEzD,OAAOF,C,CAYD,iBAAAQ,GACNlB,KAAKC,SAAWD,KAAKC,QACrBD,KAAKO,WAAWC,aAAa,eAAgBR,KAAKC,QAAU,OAAS,SACrED,KAAKmB,YAAYC,KAAKpB,KAAKC,Q,CAG7B,MAAAoB,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,UAAAE,IAAA,2CACEtB,SAAUF,KAAKE,SACfuB,IAAKC,GAAO1B,KAAKO,WAAamB,EAC9BC,KAAK,SACLC,GAAI5B,KAAK6B,UAAY7B,KAAKG,IAC1B2B,QAAS9B,KAAKkB,kBAAkBa,KAAK/B,MACrCgC,KAAK,SAAQ,aACDhC,KAAKC,QAAU,UAAY,YACvCgC,MAAO,KACPC,MAAM,cAENZ,EAAA,QAAAE,IAAA,2CAAMU,MAAM,cAAa,aAAalC,KAAKC,QAAU,UAAY,eAEnEqB,EAAA,SAAAE,IAAA,2CAAOG,KAAK,WAAW1B,QAASD,KAAKC,QAAO,cAAc,OAAOkC,UAAW,EAAGF,MAAO,KAAMC,MAAM,iB","ignoreList":[]}