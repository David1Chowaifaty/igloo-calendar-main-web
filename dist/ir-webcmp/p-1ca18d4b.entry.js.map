{"version":3,"names":["irHkTasksCss","IrHkTasksStyle0","IrHkTasks","constructor","hostRef","this","language","ticket","isLoading","isCleaningLoading","selectedDuration","selectedHouseKeeper","selectedRoom","archiveOpened","hkNameCache","roomService","RoomService","houseKeepingService","HouseKeepingService","token","Token","table_sorting","Map","componentWillLoad","baseUrl","setBaseUrl","setToken","init","ticketChanged","newValue","oldValue","handleCloseSidebar","e","stopImmediatePropagation","stopPropagation","isSidebarOpen","handleSortingChanged","field","direction","detail","console","log","set","setLoading","propertyId","propertyid","p","Error","propertyData","getExposedProperty","id","aname","is_backend","include_units_hk_status","My_Result","property_id","requests","getHkTasks","from_date","moment","format","to_date","getExposedHKSetup","fetchLanguage","push","results","Promise","all","tasksResult","tasks","updateTasks","error","buildHousekeeperNameCache","_b","_a","housekeeping_store","hk_criteria","housekeepers","forEach","hk","name","updateTasksStore","map","t","Object","assign","v4","housekeeper","hkm_id","hkName","_c","find","handleHeaderButtonPress","modal","openModal","sortingArray","Array","from","entries","key","value","url","fetchTasksWithFilters","downloadFile","handleSelectedTaskCleaningEvent","selectedTask","handleModalConfirmation","hkTasksStore","selectedTasks","length","executeHKAction","actions","description","unit_id","unit","booking_nbr","clearSelectedTasks","closeModal","applyFilters","isApplyFiltersLoading","filters","export_to_excel","cleaning_periods","cleaning_frequencies","dusty_units","highlight_check_ins","cleaning_frequency","code","dusty_window","highlight_window","is_export_to_excel","render","h","Host","class","style","gap","onApplyFilters","onRowSelectChange","updateSelectedTasks","autoClose","ref","el","onConfirmModal","bind","onCancelModal","iconAvailable","icon","leftBtnText","locales","Lcz_Cancel","rightBtnText","Lcz_Confirm","leftBtnColor","rightBtnColor","modalTitle","Lcz_Confirmation","modalBody","open","onIrSidebarToggle","showCloseButton","getToken","slot","PropertyService","params","data","axios","post","ExceptionMsg","calendar_data","adultChildConstraints","adult_child_constraints","allowedBookingSources","allowed_booking_sources","allowed_payment_methods","currency","is_vacation_rental","pickup_service","max_nights","roomsInfo","roomtypes","taxes","country","is_automatic_check_in_out","tax_statement","is_frontdesk_enabled","is_pms_enabled","spitTime","time_constraints","check_out_till","split","checkin_checkout_hours","offset","city","gmt_offset","hour","Number","minute","getCountrySales","My_Params_Get_Country_Sales","Link_excel","setExposedCleaningFrequency","getMonthlyStats","My_Params_Get_Monthly_Stats","irHousekeepingCss","IrHousekeepingStyle0","IrHousekeeping","propertyService","initializeApp","handleResetData","include_sales_rate_plans","updateHKStore","housekeeping_enabled","saveAutomaticCheckInCheckout","SetAutomaticCheckInOut","default_properties","flag","toast","emit","position","title","type","saveCleaningFrequency","Lcz_HouseKeepingAndCheckInSetup","borderShown","label","Lcz_CheckInOutGuestsAutomatically","LabelAvailable","showFirstOption","selectedValue","onSelectChange","text","Lcz_YesAsPerPropertyPolicy","Lcz_NoIWillDoItManually","Lcz_CleaningFrequency","v","irMonthlyBookingsReportCss","IrMonthlyBookingsReportStyle0","IrMonthlyBookingsReport","isPageLoading","reports","tokenService","baseFilters","date","firstOfMonth","startOf","lastOfMonth","endOf","include_previous_year","handleTicketChange","handleApplyFiltersChange","getReports","isExportToExcel","getReportObj","report","day","Date","units_booked","Units_booked","occupancy_percent","Occupancy","adr","ADR","rooms_revenue","Rooms_Revenue","total_guests","Total_Guests","add","currentReports","enrichedReports","DailyStats","rest","__rest$1","stats","previousYearReports","formattedReports","current","previous","prev","last_year","size","btn_color","Lcz_Export","onClickHandler","async","btnStyle","height","iconPosition","icon_name","icon_style","alignItems","Occupancy_Difference_From_Previous_Month","cardTitle","AverageOccupancy","toFixed","subtitle","_d","_e","_f","TotalUnitsBooked","_g","toString","_j","_h","reduce","curr","_k","PeakDays","_m","_l","pd","concat","join","Math","max","_o","OccupancyPercent","irSalesByCountryCss","IrSalesByCountryStyle0","IrSalesByCountry","countries","bookingService","BookingService","FROM_DATE","TO_DATE","BOOK_CASE","WINDOW","salesFilters","getCountries","mappedCountries","formatSalesData","COUNTRY","country_id","COUNTRY_ID","nights","NIGHTS","percentage","PCT","revenue","REVENUE","number_of_guests","filterParams","__rest","currentSales","AC_ID","shouldFetchPreviousYear","enrichedSales","previousYearSales","subtract","toLowerCase","record","salesData","sort","a","b","records","irUserManagementCss","IrUserManagementStyle0","IrUserManagement","isSuperAdmin","users","allowedUsersTypes","userService","UserService","userTypes","superAdminId","fetchUsers","fetchUserTypes","socket","io","on","msg","handleSocketMessage","msgAsObject","JSON","parse","REASON","KEY","PAYLOAD","result","reasonHandlers","EMAIL_VERIFIED","updateUserVerificationStatus","handler","call","warn","idx","findIndex","u","is_email_verified","getExposedPropertyUsers","u1","u2","priority","p1","p2","username","localeCompare","res","getSetupEntriesByTableName","getLov","allowedUsers","allowed_user_types","toUpperCase","f","CODE_NAME","disconnectedCallback","disconnect","suppressToastEndpoints","Lcz_ExtranetUsers","baseUserTypeCode","userTypeCode","haveAdminPrivileges","includes"],"sources":["src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.css?tag=ir-hk-tasks&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.tsx","src/services/property.service.ts","src/components/ir-housekeeping/ir-housekeeping.css?tag=ir-housekeeping&encapsulation=scoped","src/components/ir-housekeeping/ir-housekeeping.tsx","src/components/ir-monthly-bookings-report/ir-monthly-bookings-report.css?tag=ir-monthly-bookings-report&encapsulation=scoped","src/components/ir-monthly-bookings-report/ir-monthly-bookings-report.tsx","src/components/ir-sales-by-country/ir-sales-by-country.css?tag=ir-sales-by-country&encapsulation=scoped","src/components/ir-sales-by-country/ir-sales-by-country.tsx","src/components/ir-user-management/ir-user-management.css?tag=ir-user-management&encapsulation=scoped","src/components/ir-user-management/ir-user-management.tsx"],"sourcesContent":[":host {\n  display: block;\n  box-sizing: border-box;\n}\n:host * {\n  box-sizing: border-box;\n}\n\n@media only screen and (min-width: 900px) {\n  /* td {\n    min-width: 140px !important;\n    width: max-content !important;\n  } */\n}\n@media only screen and (max-width: 900px) {\n  /* td {\n    min-width: 100px !important;\n  } */\n  /* .table-container {\n    width: max-content !important;\n  } */\n}\n/*sm*/\n@media (min-width: 640px) {\n}\n\n/*md*/\n@media (min-width: 768px) {\n}\n\n.tasks-view {\n  display: flex;\n  flex-direction: column;\n}\n/*lg*/\n@media (min-width: 1024px) {\n  .tasks-view {\n    flex-direction: row;\n  }\n}\n\n/*xl*/\n@media (min-width: 1280px) {\n}\n\n/*2xl*/\n@media (min-width: 1536px) {\n}\n","import { IPendingActions, Task } from '@/models/housekeeping';\nimport Token from '@/models/Token';\nimport { HouseKeepingService } from '@/services/housekeeping.service';\nimport { RoomService } from '@/services/room.service';\nimport housekeeping_store from '@/stores/housekeeping.store';\n// import { isRequestPending } from '@/stores/ir-interceptor.store';\nimport locales from '@/stores/locales.store';\nimport { Component, Host, Prop, State, h, Element, Watch, Event, EventEmitter, Listen } from '@stencil/core';\nimport moment from 'moment';\nimport { v4 } from 'uuid';\nimport { TaskFilters } from './types';\nimport { downloadFile } from '@/utils/utils';\nimport { updateTasks as updateTasksStore, updateSelectedTasks, clearSelectedTasks, hkTasksStore, setLoading } from '@/stores/hk-tasks.store';\n\n@Component({\n  tag: 'ir-hk-tasks',\n  styleUrl: 'ir-hk-tasks.css',\n  scoped: true,\n})\nexport class IrHkTasks {\n  @Element() el: HTMLElement;\n\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: number;\n  @Prop() p: string;\n  @Prop() baseUrl: string;\n\n  @State() isLoading = false;\n  @State() isCleaningLoading = false;\n  @State() selectedDuration = '';\n  @State() selectedHouseKeeper = '0';\n  @State() selectedRoom: IPendingActions | null = null;\n  @State() archiveOpened = false;\n  @State() property_id: number;\n  @State() isSidebarOpen: boolean;\n  @State() isApplyFiltersLoading: boolean;\n  @State() filters: TaskFilters;\n  @State() selectedTask: Task;\n\n  @Event({ bubbles: true, composed: true }) clearSelectedHkTasks: EventEmitter<void>;\n\n  private hkNameCache: Record<number, string> = {};\n  private roomService = new RoomService();\n  private houseKeepingService = new HouseKeepingService();\n  private token = new Token();\n  private table_sorting: Map<string, 'ASC' | 'DESC'> = new Map();\n  private modal: HTMLIrModalElement;\n\n  componentWillLoad() {\n    if (this.baseUrl) {\n      this.token.setBaseUrl(this.baseUrl);\n    }\n    if (this.ticket !== '') {\n      this.token.setToken(this.ticket);\n      this.init();\n    }\n  }\n\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.init();\n  }\n\n  @Listen('closeSideBar')\n  handleCloseSidebar(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.isSidebarOpen = false;\n  }\n  @Listen('sortingChanged')\n  handleSortingChanged(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    const { field, direction } = e.detail;\n    console.log(e.detail);\n    if (field === 'date') {\n      return;\n    }\n    this.table_sorting.set(field, direction);\n  }\n\n  private async init() {\n    try {\n      this.isLoading = true;\n      setLoading(true);\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [\n        this.houseKeepingService.getHkTasks({ property_id: this.property_id, from_date: moment().format('YYYY-MM-DD'), to_date: moment().format('YYYY-MM-DD') }),\n        this.houseKeepingService.getExposedHKSetup(this.property_id),\n        this.roomService.fetchLanguage(this.language),\n      ];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      const results = await Promise.all(requests);\n      const tasksResult = results[0] as any;\n      // updateTaskList();\n      if (tasksResult?.tasks) {\n        this.updateTasks(tasksResult.tasks);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isLoading = false;\n      setLoading(false);\n    }\n  }\n\n  private buildHousekeeperNameCache() {\n    this.hkNameCache = {};\n    housekeeping_store.hk_criteria?.housekeepers?.forEach(hk => {\n      if (hk.id != null && hk.name != null) {\n        this.hkNameCache[hk.id] = hk.name;\n      }\n    });\n  }\n\n  private updateTasks(tasks: any[]) {\n    this.buildHousekeeperNameCache();\n    updateTasksStore(\n      tasks.map(t => ({\n        ...t,\n        id: v4(),\n        housekeeper: (() => {\n          const name = this.hkNameCache[t.hkm_id];\n          if (name) {\n            return name;\n          }\n          const hkName = housekeeping_store.hk_criteria?.housekeepers?.find(hk => hk.id === t.hkm_id)?.name;\n          this.hkNameCache[t.hkm_id] = hkName;\n          return hkName;\n        })(),\n      })),\n    );\n  }\n  @Listen('headerButtonPress')\n  async handleHeaderButtonPress(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    const { name } = e.detail;\n    switch (name) {\n      case 'cleaned':\n        this.modal?.openModal();\n        break;\n      case 'export':\n        const sortingArray: { key: string; value: string }[] = Array.from(this.table_sorting.entries()).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        console.log(sortingArray);\n        const { url } = await this.fetchTasksWithFilters(true);\n        downloadFile(url);\n        break;\n      case 'archive':\n        this.isSidebarOpen = true;\n        break;\n    }\n  }\n  @Listen('cleanSelectedTask')\n  handleSelectedTaskCleaningEvent(e: CustomEvent<Task>) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.selectedTask = e.detail;\n    this.modal?.openModal();\n  }\n\n  private async handleModalConfirmation(e: CustomEvent) {\n    try {\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      if (hkTasksStore.selectedTasks.length === 0) {\n        return;\n      }\n      this.isCleaningLoading = true;\n      await this.houseKeepingService.executeHKAction({\n        actions: hkTasksStore.selectedTasks.map(t => ({ description: 'Cleaned', hkm_id: t.hkm_id === 0 ? null : t.hkm_id, unit_id: t.unit.id, booking_nbr: t.booking_nbr })),\n      });\n      await this.fetchTasksWithFilters();\n    } finally {\n      clearSelectedTasks();\n      if (this.selectedTask) {\n        this.selectedTask = null;\n      }\n      this.isCleaningLoading = false;\n      // this.clearSelectedTasks.emit();\n      this.modal.closeModal();\n    }\n  }\n\n  private async applyFilters(e: CustomEvent) {\n    try {\n      this.isApplyFiltersLoading = true;\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      this.filters = { ...e.detail };\n      await this.fetchTasksWithFilters();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isApplyFiltersLoading = false;\n    }\n  }\n\n  private async fetchTasksWithFilters(export_to_excel: boolean = false) {\n    const { cleaning_periods, housekeepers, cleaning_frequencies, dusty_units, highlight_check_ins } = this.filters ?? {};\n\n    const { tasks, url } = await this.houseKeepingService.getHkTasks({\n      housekeepers,\n      cleaning_frequency: cleaning_frequencies?.code,\n      dusty_window: dusty_units?.code,\n      highlight_window: highlight_check_ins?.code,\n      property_id: this.property_id,\n      from_date: moment().format('YYYY-MM-DD'),\n      to_date: cleaning_periods?.code || moment().format('YYYY-MM-DD'),\n      is_export_to_excel: export_to_excel,\n    });\n    console.log(tasks);\n    if (tasks) {\n      this.updateTasks(tasks);\n    }\n    return { tasks, url };\n  }\n\n  render() {\n    if (this.isLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host data-testid=\"hk_tasks_base\">\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-1 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <h3>Housekeeping Tasks</h3>\n          <div class=\"tasks-view \" style={{ gap: '1rem' }}>\n            <ir-tasks-filters\n              isLoading={this.isApplyFiltersLoading}\n              onApplyFilters={e => {\n                this.applyFilters(e);\n              }}\n            ></ir-tasks-filters>\n            <div class=\"d-flex w-100 flex-column\" style={{ gap: '1rem' }}>\n              <ir-tasks-table\n                onRowSelectChange={e => {\n                  e.stopImmediatePropagation();\n                  e.stopPropagation();\n                  updateSelectedTasks(e.detail);\n                }}\n                class=\"flex-grow-1 w-100\"\n              ></ir-tasks-table>\n              {/* <ir-tasks-table-pagination></ir-tasks-table-pagination> */}\n            </div>\n          </div>\n        </section>\n        <ir-modal\n          autoClose={false}\n          ref={el => (this.modal = el)}\n          isLoading={this.isCleaningLoading}\n          onConfirmModal={this.handleModalConfirmation.bind(this)}\n          onCancelModal={() => {\n            if (this.selectedTask) {\n              clearSelectedTasks();\n              this.selectedTask = null;\n            }\n          }}\n          iconAvailable={true}\n          icon=\"ft-alert-triangle danger h1\"\n          leftBtnText={locales.entries.Lcz_Cancel}\n          rightBtnText={locales.entries.Lcz_Confirm}\n          leftBtnColor=\"secondary\"\n          rightBtnColor={'primary'}\n          modalTitle={locales.entries.Lcz_Confirmation}\n          modalBody={this.selectedTask ? `Update ${this.selectedTask?.unit?.name} to Clean` : 'Update selected unit(s) to Clean'}\n        ></ir-modal>\n        <ir-sidebar\n          open={this.isSidebarOpen}\n          id=\"editGuestInfo\"\n          onIrSidebarToggle={e => {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            this.isSidebarOpen = false;\n          }}\n          // sidebarStyles={{\n          //   width: '80vw',\n          // }}\n          showCloseButton={false}\n        >\n          {this.isSidebarOpen && <ir-hk-archive ticket={this.token.getToken()} propertyId={this.property_id} slot=\"sidebar-body\"></ir-hk-archive>}\n        </ir-sidebar>\n        {/* <ir-title class=\"d-none d-md-flex\" label={locales.entries.Lcz_HousekeepingTasks} justifyContent=\"space-between\">\n            <ir-button slot=\"title-body\" text={locales.entries.Lcz_Archive} size=\"sm\"></ir-button>\n          </ir-title> */}\n      </Host>\n    );\n  }\n}\n","import calendar_data from '@/stores/calendar-data';\nimport { downloadFile } from '@/utils/utils';\nimport axios from 'axios';\nexport type CountrySalesParams = {\n  AC_ID: number;\n  WINDOW: number;\n  FROM_DATE: string;\n  TO_DATE: string;\n  BOOK_CASE: string;\n  is_export_to_excel: boolean;\n};\nexport type MonthlyStatsParams = {\n  property_id: number;\n  from_date: string;\n  to_date: string;\n  is_export_to_excel?: boolean;\n};\nexport interface MonthlyStatsResults {\n  AverageOccupancy: number;\n  DailyStats: DailyStat[];\n  ExcelLink: null;\n  PeakDays: PeakDay[];\n  Occupancy_Difference_From_Previous_Month: number;\n  TotalUnitsBooked: number;\n}\n\nexport interface PeakDay {\n  Date: string;\n  OccupancyPercent: number;\n}\n\nexport interface DailyStat {\n  Date: string;\n  Occupancy: number;\n  Units_booked: number;\n  Rooms_Revenue: number;\n  ADR: number;\n  Total_Guests: number | undefined;\n}\nexport class PropertyService {\n  public async getExposedProperty(params: {\n    id: number | null;\n    language: string;\n    is_backend?: boolean;\n    aname?: string;\n    include_units_hk_status?: boolean;\n    include_sales_rate_plans?: boolean;\n  }) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Property`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = data.My_Result;\n      calendar_data.adultChildConstraints = results.adult_child_constraints;\n      calendar_data.allowedBookingSources = results.allowed_booking_sources;\n      calendar_data.allowed_payment_methods = results.allowed_payment_methods;\n      calendar_data.currency = results.currency;\n      calendar_data.is_vacation_rental = results.is_vacation_rental;\n      calendar_data.pickup_service = results.pickup_service;\n      calendar_data.max_nights = results.max_nights;\n      calendar_data.roomsInfo = results.roomtypes;\n      calendar_data.taxes = results.taxes;\n      calendar_data.id = results.id;\n      calendar_data.country = results.country;\n      calendar_data.name = results.name;\n      calendar_data.is_automatic_check_in_out = results.is_automatic_check_in_out;\n      calendar_data.tax_statement = results.tax_statement;\n      calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\n      calendar_data.is_pms_enabled = results.is_pms_enabled;\n      const spitTime = results?.time_constraints?.check_out_till?.split(':');\n      calendar_data.checkin_checkout_hours = {\n        offset: results.city.gmt_offset,\n        hour: Number(spitTime[0] || 0),\n        minute: Number(spitTime[1] || 0),\n      };\n      return data;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async getCountrySales(params: CountrySalesParams) {\n    const { data } = await axios.post('/Get_Country_Sales', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Country_Sales.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async setExposedCleaningFrequency(params: { property_id: number; code: string }) {\n    const { data } = await axios.post('/Set_Exposed_Cleaning_Frequency', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n  public async getMonthlyStats(params: MonthlyStatsParams): Promise<MonthlyStatsResults> {\n    const { data } = await axios.post('/Get_Monthly_Stats', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Monthly_Stats.Link_excel);\n    }\n    return data.My_Result;\n  }\n}\n",":host {\n  display: block;\n}\n","import Token from '@/models/Token';\nimport { HouseKeepingService } from '@/services/housekeeping.service';\nimport { RoomService } from '@/services/room.service';\nimport calendar_data from '@/stores/calendar-data';\nimport housekeeping_store, { updateHKStore } from '@/stores/housekeeping.store';\nimport { Component, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { IToast } from '@components/ui/ir-toast/toast';\nimport locales from '@/stores/locales.store';\nimport { PropertyService } from '@/services/property.service';\n@Component({\n  tag: 'ir-housekeeping',\n  styleUrl: 'ir-housekeeping.css',\n  scoped: true,\n})\nexport class IrHousekeeping {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n\n  @Prop() propertyid: number;\n  @Prop() p: string;\n  @Prop() baseUrl: string;\n\n  @State() isLoading = false;\n\n  @Event() toast: EventEmitter<IToast>;\n\n  private roomService = new RoomService();\n  private houseKeepingService = new HouseKeepingService();\n  private propertyService = new PropertyService();\n  private token = new Token();\n\n  componentWillLoad() {\n    if (this.baseUrl) {\n      this.token.setBaseUrl(this.baseUrl);\n    }\n    if (this.ticket !== '') {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n  @Listen('resetData')\n  async handleResetData(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    await this.houseKeepingService.getExposedHKSetup(this.propertyid);\n  }\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n\n  async initializeApp() {\n    try {\n      this.isLoading = true;\n      let propertyId = this.propertyid;\n      if (!propertyId) {\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_sales_rate_plans: true,\n        });\n        propertyId = propertyData.My_Result.id;\n      }\n      updateHKStore('default_properties', { token: this.ticket, property_id: propertyId, language: this.language });\n      const requests: Array<Promise<any>> = [];\n      if (calendar_data.housekeeping_enabled) {\n        requests.push(this.houseKeepingService.getExposedHKSetup(propertyId));\n      }\n      requests.push(this.roomService.fetchLanguage(this.language, ['_HK_FRONT', '_PMS_FRONT']));\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: propertyId,\n            language: this.language,\n            is_backend: true,\n            include_sales_rate_plans: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  private async saveAutomaticCheckInCheckout(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    try {\n      await this.roomService.SetAutomaticCheckInOut({\n        property_id: housekeeping_store.default_properties.property_id,\n        flag: e.detail === 'auto',\n      });\n      this.toast.emit({\n        position: 'top-right',\n        title: 'Saved Successfully',\n        description: '',\n        type: 'success',\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  private async saveCleaningFrequency(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    try {\n      await this.propertyService.setExposedCleaningFrequency({\n        property_id: housekeeping_store.default_properties.property_id,\n        code: e.detail,\n      });\n      calendar_data.cleaning_frequency = { code: e.detail, description: '' };\n      this.toast.emit({\n        position: 'top-right',\n        title: 'Saved Successfully',\n        description: '',\n        type: 'success',\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  render() {\n    if (this.isLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    console.log(calendar_data.cleaning_frequency);\n    return (\n      <Host>\n        <ir-interceptor></ir-interceptor>\n        <ir-toast></ir-toast>\n        <section class=\"p-1\">\n          <h3 class=\"mb-2\">{locales.entries.Lcz_HouseKeepingAndCheckInSetup}</h3>\n          <div class=\"card p-1\">\n            <ir-title borderShown label=\"Operations Settings\"></ir-title>\n            <div class={'d-flex align-items-center mb-1'}>\n              <p class=\"my-0 py-0 mr-1\">{locales.entries.Lcz_CheckInOutGuestsAutomatically}</p>\n              <ir-select\n                LabelAvailable={false}\n                showFirstOption={false}\n                selectedValue={calendar_data.is_automatic_check_in_out ? 'auto' : 'manual'}\n                onSelectChange={e => this.saveAutomaticCheckInCheckout(e)}\n                data={[\n                  { text: locales.entries.Lcz_YesAsPerPropertyPolicy, value: 'auto' },\n                  { text: locales.entries.Lcz_NoIWillDoItManually, value: 'manual' },\n                ]}\n              ></ir-select>\n            </div>\n            <div class={'d-flex align-items-center'}>\n              <p class=\"my-0 py-0 mr-1\">{locales.entries.Lcz_CleaningFrequency}:</p>\n              <ir-select\n                LabelAvailable={false}\n                showFirstOption={false}\n                selectedValue={calendar_data.cleaning_frequency?.code}\n                onSelectChange={e => this.saveCleaningFrequency(e)}\n                data={housekeeping_store?.hk_criteria?.cleaning_frequencies.map(v => ({\n                  text: v.description,\n                  value: v.code,\n                }))}\n              ></ir-select>\n            </div>\n          </div>\n          {/*<ir-unit-status class=\"mb-1\"></ir-unit-status>*/}\n          {calendar_data.housekeeping_enabled && <ir-hk-team class=\"mb-1\"></ir-hk-team>}\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import Token from '@/models/Token';\nimport { Component, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { DailyReport, DailyReportFilter } from './types';\nimport moment from 'moment';\nimport locales from '@/stores/locales.store';\nimport { RoomService } from '@/services/room.service';\nimport { DailyStat, MonthlyStatsResults, PropertyService } from '@/services/property.service';\n\n@Component({\n  tag: 'ir-monthly-bookings-report',\n  styleUrl: 'ir-monthly-bookings-report.css',\n  scoped: true,\n})\nexport class IrMonthlyBookingsReport {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: number;\n  @Prop() p: string;\n\n  @State() isPageLoading = true;\n  @State() isLoading: 'export' | 'filter' | null = null;\n\n  @State() reports: DailyReport[] = [];\n  @State() filters: DailyReportFilter;\n  @State() property_id: number;\n  @State() stats: Omit<MonthlyStatsResults, 'DailyStats'>;\n\n  private baseFilters: DailyReportFilter;\n\n  private tokenService = new Token();\n  private roomService = new RoomService();\n  private propertyService = new PropertyService();\n\n  componentWillLoad() {\n    this.baseFilters = {\n      date: {\n        description: moment().format('MMMM YYYY'),\n        firstOfMonth: moment().startOf('month').format('YYYY-MM-DD'),\n        lastOfMonth: moment().endOf('month').format('YYYY-MM-DD'),\n      },\n      include_previous_year: false,\n    };\n    this.filters = this.baseFilters;\n    if (this.ticket) {\n      this.tokenService.setToken(this.ticket);\n      this.init();\n    }\n  }\n  @Watch('ticket')\n  handleTicketChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.tokenService.setToken(this.ticket);\n      this.init();\n    }\n  }\n  @Listen('applyFilters')\n  handleApplyFiltersChange(e: CustomEvent<DailyReportFilter>) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.filters = e.detail;\n    this.getReports();\n  }\n\n  private async init() {\n    try {\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.roomService.fetchLanguage(this.language), this.getReports()];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isPageLoading = false;\n    }\n  }\n\n  private async getReports(isExportToExcel = false) {\n    try {\n      const getReportObj = (report: DailyStat): DailyReport => {\n        return {\n          day: report.Date,\n          units_booked: report.Units_booked,\n          occupancy_percent: report.Occupancy,\n          adr: report.ADR,\n          rooms_revenue: report.Rooms_Revenue,\n          total_guests: report?.Total_Guests,\n        };\n      };\n      this.isLoading = isExportToExcel ? 'export' : 'filter';\n      const { date, include_previous_year } = this.filters;\n\n      const requests = [\n        this.propertyService.getMonthlyStats({\n          from_date: date.firstOfMonth,\n          to_date: date.lastOfMonth,\n          property_id: this.property_id,\n          is_export_to_excel: isExportToExcel,\n        }),\n      ];\n\n      if (include_previous_year) {\n        requests.push(\n          this.propertyService.getMonthlyStats({\n            from_date: moment(date.firstOfMonth, 'YYYY-MM-DD').add(-1, 'year').format('YYYY-MM-DD'),\n            to_date: moment(date.lastOfMonth, 'YYYY-MM-DD').add(-1, 'years').format('YYYY-MM-DD'),\n            property_id: this.property_id,\n          }),\n        );\n      }\n\n      const results = await Promise.all(requests);\n      const currentReports = results[0];\n      let enrichedReports: DailyReport[] = [];\n      const { DailyStats, ...rest } = currentReports;\n\n      this.stats = { ...rest };\n\n      if (include_previous_year && results[isExportToExcel ? 1 : 2]) {\n        const previousYearReports = results[isExportToExcel ? 1 : 2];\n        let formattedReports = previousYearReports.DailyStats.map(getReportObj);\n        enrichedReports = DailyStats.map(getReportObj).map(current => {\n          const previous = formattedReports.find(prev => prev.day === moment(current.day, 'YYYY-MM-DD').add(-1, 'years').format('YYYY-MM-DD'));\n          return {\n            ...current,\n            last_year: previous ?? null,\n          };\n        });\n      } else {\n        enrichedReports = DailyStats.map(getReportObj);\n      }\n      this.reports = [...enrichedReports];\n    } catch (e) {\n      console.log(e);\n    } finally {\n      this.isLoading = null;\n    }\n  }\n  render() {\n    if (this.isPageLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">Daily Occupancy</h3>\n            <ir-button\n              size=\"sm\"\n              btn_color=\"outline\"\n              isLoading={this.isLoading === 'export'}\n              text={locales.entries?.Lcz_Export}\n              onClickHandler={async e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                await this.getReports(true);\n              }}\n              btnStyle={{ height: '100%' }}\n              iconPosition=\"right\"\n              icon_name=\"file\"\n              icon_style={{ '--icon-size': '14px' }}\n            ></ir-button>\n          </div>\n          <section>\n            <div class=\"d-flex flex-column flex-md-row w-100\" style={{ gap: '1rem', alignItems: 'stretch' }}>\n              <ir-report-stats-card\n                icon={this.stats?.Occupancy_Difference_From_Previous_Month < 0 ? 'arrow-trend-down' : 'arrow-trend-up'}\n                cardTitle=\"Average Occupancy\"\n                value={this.stats.AverageOccupancy ? this.stats?.AverageOccupancy.toFixed(2) + '%' : null}\n                subtitle={`${this.stats?.Occupancy_Difference_From_Previous_Month < 0 ? '' : '+'}${this.stats?.Occupancy_Difference_From_Previous_Month.toFixed(\n                  2,\n                )}% from last month`}\n              ></ir-report-stats-card>\n\n              <ir-report-stats-card\n                icon=\"hotel\"\n                cardTitle=\"Total Units\"\n                value={this.stats?.TotalUnitsBooked ? this.stats?.TotalUnitsBooked.toString() : null}\n                subtitle=\"Booked\"\n              ></ir-report-stats-card>\n\n              <ir-report-stats-card\n                icon=\"user_group\"\n                cardTitle=\"Total Guests\"\n                value={this.reports?.reduce((prev, curr) => prev + curr.total_guests, 0)?.toString()}\n                subtitle=\"Stayed\"\n              ></ir-report-stats-card>\n\n              <ir-report-stats-card\n                icon=\"calendar\"\n                cardTitle=\"Peak Days\"\n                value={this.stats?.PeakDays.length === 0 ? null : this.stats?.PeakDays?.map(pd => moment(pd.Date, 'YYYY-MM-DD').format('D').concat('th')).join(' - ')}\n                subtitle={`${Math.max(...(this.stats.PeakDays?.map(pd => pd.OccupancyPercent) || []))}% occupancy`}\n              ></ir-report-stats-card>\n            </div>\n            <div class=\"d-flex flex-column flex-lg-row mt-1 \" style={{ gap: '1rem' }}>\n              <ir-monthly-bookings-report-filter isLoading={this.isLoading === 'filter'} class=\"filters-card\" baseFilters={this.baseFilters}></ir-monthly-bookings-report-filter>\n              <ir-monthly-bookings-report-table reports={this.reports}></ir-monthly-bookings-report-table>\n            </div>\n          </section>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import Token from '@/models/Token';\nimport { PropertyService } from '@/services/property.service';\nimport { RoomService } from '@/services/room.service';\nimport locales from '@/stores/locales.store';\nimport { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { BaseSalesRecord, CountrySalesFilter, MappedCountries, SalesRecord } from './types';\nimport moment from 'moment';\nimport { v4 } from 'uuid';\nimport { BookingService } from '@/services/booking.service';\nimport { ICountry } from '@/models/IBooking';\n\n@Component({\n  tag: 'ir-sales-by-country',\n  styleUrl: 'ir-sales-by-country.css',\n  scoped: true,\n})\nexport class IrSalesByCountry {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: number;\n  @Prop() p: string;\n\n  @State() isLoading: 'filter' | 'export' | null = null;\n  @State() isPageLoading = true;\n  @State() property_id: number;\n  @State() salesData: SalesRecord[];\n  @State() salesFilters: CountrySalesFilter;\n  @State() countries: MappedCountries = new Map();\n\n  private token = new Token();\n  private roomService = new RoomService();\n  private propertyService = new PropertyService();\n  private bookingService = new BookingService();\n\n  private baseFilters = {\n    FROM_DATE: moment().add(-7, 'days').format('YYYY-MM-DD'),\n    TO_DATE: moment().format('YYYY-MM-DD'),\n    BOOK_CASE: '001',\n    WINDOW: 7,\n    include_previous_year: false,\n  };\n\n  componentWillLoad() {\n    this.salesFilters = this.baseFilters;\n    if (this.ticket) {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n  private async initializeApp() {\n    try {\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.bookingService.getCountries(this.language), this.roomService.fetchLanguage(this.language), this.getCountrySales()];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      const [countries] = await Promise.all(requests);\n      const mappedCountries = new Map();\n      (countries as ICountry[]).map(country => {\n        mappedCountries.set(country.id, {\n          flag: country.flag,\n          name: country.name,\n        });\n      });\n      this.countries = mappedCountries;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isPageLoading = false;\n    }\n  }\n\n  private async getCountrySales(isExportToExcel = false) {\n    const formatSalesData = (data): Omit<BaseSalesRecord, 'id'> => {\n      return {\n        country: data.COUNTRY,\n        country_id: data.COUNTRY_ID,\n        nights: data.NIGHTS,\n        percentage: data.PCT,\n        revenue: data.REVENUE,\n        number_of_guests: data.Total_Guests,\n      };\n    };\n    try {\n      const { include_previous_year, ...filterParams } = this.salesFilters;\n      this.isLoading = isExportToExcel ? 'export' : 'filter';\n\n      const currentSales = await this.propertyService.getCountrySales({\n        AC_ID: this.property_id,\n        is_export_to_excel: isExportToExcel,\n        ...filterParams,\n      });\n\n      const shouldFetchPreviousYear = !isExportToExcel && include_previous_year;\n\n      let enrichedSales: SalesRecord[] = [];\n\n      if (shouldFetchPreviousYear) {\n        const previousYearSales = await this.propertyService.getCountrySales({\n          AC_ID: this.property_id,\n          is_export_to_excel: false,\n          ...filterParams,\n          FROM_DATE: moment(filterParams.FROM_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n          TO_DATE: moment(filterParams.TO_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n        });\n\n        enrichedSales = currentSales.map(current => {\n          const previous = previousYearSales.find(prev => prev.COUNTRY.toLowerCase() === current.COUNTRY.toLowerCase());\n          return {\n            id: v4(),\n            ...formatSalesData(current),\n            last_year: previous ? formatSalesData(previous) : null,\n          };\n        });\n      } else {\n        enrichedSales = currentSales.map(record => ({\n          id: v4(),\n          ...formatSalesData(record),\n          last_year: null,\n        }));\n      }\n\n      this.salesData = enrichedSales.sort((a, b) => {\n        if (a.country_id === 0) return -1;\n        if (b.country_id === 0) return 1;\n        return 0;\n      });\n    } catch (error) {\n      console.error('Failed to fetch sales data:', error);\n    } finally {\n      this.isLoading = null;\n    }\n  }\n  render() {\n    if (this.isPageLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">Sales by Country</h3>\n            <ir-button\n              size=\"sm\"\n              btn_color=\"outline\"\n              isLoading={this.isLoading === 'export'}\n              text={locales.entries.Lcz_Export}\n              onClickHandler={async e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                await this.getCountrySales(true);\n              }}\n              btnStyle={{ height: '100%' }}\n              iconPosition=\"right\"\n              icon_name=\"file\"\n              icon_style={{ '--icon-size': '14px' }}\n            ></ir-button>\n          </div>\n          <div class=\"d-flex flex-column flex-lg-row mt-1 \" style={{ gap: '1rem' }}>\n            <ir-sales-filters\n              isLoading={this.isLoading === 'filter'}\n              onApplyFilters={e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                this.salesFilters = e.detail;\n                this.getCountrySales();\n              }}\n              class=\"filters-card\"\n              baseFilters={this.baseFilters}\n            ></ir-sales-filters>\n            <ir-sales-table mappedCountries={this.countries} class=\"card mb-0\" records={this.salesData}></ir-sales-table>\n          </div>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n  height: 100%;\n}\n","import Token from '@/models/Token';\nimport { User } from '@/models/Users';\nimport { BookingService } from '@/services/booking.service';\nimport { RoomService } from '@/services/room.service';\nimport { UserService } from '@/services/user.service';\nimport { Component, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { AllowedUser } from './types';\nimport { bookingReasons } from '@/models/IBooking';\nimport { io, Socket } from 'socket.io-client';\nimport locales from '@/stores/locales.store';\n\n@Component({\n  tag: 'ir-user-management',\n  styleUrl: 'ir-user-management.css',\n  scoped: true,\n})\nexport class IrUserManagement {\n  @Prop() language: string = '';\n  @Prop() baseUrl: string;\n  @Prop() ticket: string;\n  @Prop() propertyid: number;\n  @Prop() p: string;\n  @Prop() isSuperAdmin: boolean = true;\n  @Prop() userTypeCode: string | number;\n  @Prop() baseUserTypeCode: string | number;\n  @Prop() userId: string | number;\n\n  @State() isLoading = true;\n  @State() users: User[] = [];\n  @State() property_id: number;\n  @State() allowedUsersTypes: AllowedUser[] = [];\n\n  private token = new Token();\n  private roomService = new RoomService();\n  private userService = new UserService();\n  private bookingService = new BookingService();\n\n  private userTypes: Map<number | string, string> = new Map();\n  private socket: Socket;\n\n  private superAdminId = '5';\n\n  componentWillLoad() {\n    if (this.baseUrl) {\n      this.token.setBaseUrl(this.baseUrl);\n    }\n    if (this.ticket) {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n\n  @Listen('resetData')\n  async handleResetData(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    await this.fetchUsers();\n  }\n\n  private async initializeApp() {\n    try {\n      if (this.baseUrl) {\n        this.token.setBaseUrl(this.baseUrl);\n      }\n      this.isLoading = true;\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.fetchUserTypes(), this.fetchUsers(), this.roomService.fetchLanguage(this.language, ['_USER_MGT'])];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n      this.socket = io('https://realtime.igloorooms.com/');\n      this.socket.on('MSG', async msg => {\n        await this.handleSocketMessage(msg);\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async handleSocketMessage(msg: string) {\n    const msgAsObject = JSON.parse(msg);\n    if (!msgAsObject) {\n      return;\n    }\n\n    const { REASON, KEY, PAYLOAD }: { REASON: bookingReasons; KEY: any; PAYLOAD: any } = msgAsObject;\n\n    if (KEY.toString() !== this.property_id.toString()) {\n      return;\n    }\n\n    let result = JSON.parse(PAYLOAD);\n    console.log(KEY, result);\n    // const reasonHandlers: Partial<Record<bookingReasons, Function>> = {\n    //   DORESERVATION: this.updateUserVerificationStatus,\n    // };\n    const reasonHandlers: Partial<Record<bookingReasons, Function>> = {\n      EMAIL_VERIFIED: this.updateUserVerificationStatus,\n    };\n    const handler = reasonHandlers[REASON];\n    if (handler) {\n      await handler.call(this, result);\n    } else {\n      console.warn(`Unhandled REASON: ${REASON}`);\n    }\n  }\n\n  public updateUserVerificationStatus(result: { id: string | number }) {\n    const users = [...this.users];\n    const idx = users.findIndex(u => u.id === result.id);\n    if (idx === -1) {\n      console.warn(`User ${result.id} not found`);\n      return;\n    }\n    users[idx] = {\n      ...users[idx],\n      is_email_verified: true,\n    };\n    this.users = users;\n  }\n\n  private async fetchUsers() {\n    const users = await this.userService.getExposedPropertyUsers({ property_id: this.propertyid });\n    this.users = [...users].sort((u1: User, u2: User) => {\n      const priority = (u: User) => {\n        const t = u.type.toString();\n        if (t === this.superAdminId) return 0;\n        if (t === '17') return 1;\n        return 2;\n      };\n      //sort by priority\n      const p1 = priority(u1),\n        p2 = priority(u2);\n      if (p1 !== p2) {\n        return p1 - p2;\n      }\n      // //sort by user id\n      // if (p1 === 1) {\n      //   const id1 = u1.id.toString(),\n      //     id2 = u2.id.toString(),\n      //     me = this.userId.toString();\n      //   if (id1 === me) return -1; // u1 is me → goes before u2\n      //   if (id2 === me) return 1; // u2 is me → u1 goes after\n      // }\n\n      // 3) sort by username\n      return u1.username.localeCompare(u2.username);\n    });\n  }\n  private async fetchUserTypes() {\n    const res = await Promise.all([this.bookingService.getSetupEntriesByTableName('_USER_TYPE'), this.bookingService.getLov()]);\n    const allowedUsers = res[1]?.My_Result?.allowed_user_types;\n    for (const e of res[0]) {\n      const value = e[`CODE_VALUE_${this.language?.toUpperCase() ?? 'EN'}`];\n      if (allowedUsers.find(f => f.code === e.CODE_NAME)) {\n        this.allowedUsersTypes.push({ code: e.CODE_NAME, value });\n      }\n      this.userTypes.set(e.CODE_NAME.toString(), value);\n    }\n  }\n  disconnectedCallback() {\n    this.socket.disconnect();\n  }\n  render() {\n    if (this.isLoading) {\n      return (\n        <Host>\n          <ir-toast></ir-toast>\n          <ir-interceptor></ir-interceptor>\n          <ir-loading-screen></ir-loading-screen>\n        </Host>\n      );\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor suppressToastEndpoints={['/Change_User_Pwd', '/Handle_Exposed_User']}></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex  pb-2 align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">{locales.entries.Lcz_ExtranetUsers}</h3>\n          </div>\n\n          <div class=\"\" style={{ gap: '1rem' }}>\n            <ir-user-management-table\n              property_id={this.property_id}\n              baseUserTypeCode={this.baseUserTypeCode}\n              allowedUsersTypes={this.allowedUsersTypes}\n              userTypeCode={this.userTypeCode}\n              haveAdminPrivileges={[this.superAdminId, '17'].includes(this.userTypeCode?.toString())}\n              userTypes={this.userTypes}\n              class=\"card\"\n              isSuperAdmin={this.userTypeCode?.toString() === this.superAdminId}\n              users={this.users}\n            ></ir-user-management-table>\n          </div>\n        </section>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}