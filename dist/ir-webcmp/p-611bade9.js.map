{"version":3,"names":["dateToFormattedString","date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","formatLegendColors","legendData","formattedLegendData","statusId","id","clsName","CONFIRMED","BLOCKED","NOTES","forEach","legend","isBlockUnit","status_code","includes","findCountry","countries","find","country","getReleaseHoursString","releaseDate","dt","Date","releaseAfterHours","setHours","getHours","getMinutes","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","computeEndDate","startDate","numberOfDays","dateObj","moment","add","format","convertDMYToISO","addTwoMonthToDate","formatDate","dateString","option","formattedDate","getNextDay","convertDatePrice","getDaysArray","date1","date2","dates","start","min","end","max","push","clone","renderTime","time","validateEmail","email","parsedEmailResults","z","string","safeParse","success","formatAmount","currency","amount","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","extras","key","value","manageAnchorSession","data","mode","anchor","JSON","parse","sessionStorage","getItem","setItem","stringify","Object","assign","keys","checkUserAuthState","login"],"sources":["src/utils/utils.ts"],"sourcesContent":["import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\nimport { z } from 'zod';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\nexport function renderTime(time: number) {\r\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\r\n}\r\nexport function validateEmail(email: string) {\r\n  if (email === '') {\r\n    return true;\r\n  }\r\n  const parsedEmailResults = z.string().email().safeParse(email);\r\n  return !parsedEmailResults.success;\r\n}\r\nexport function formatAmount(currency: string, amount: number) {\r\n  return currency + amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n}\r\nexport const extras = [\r\n  {\r\n    key: 'private_note',\r\n    value: '',\r\n  },\r\n  {\r\n    key: 'is_backend',\r\n    value: true,\r\n  },\r\n  {\r\n    key: 'ERROR_EMAIL',\r\n    value: '',\r\n  },\r\n  {\r\n    key: 'agent_payment_mode',\r\n    value: '',\r\n  },\r\n  { key: 'payment_code', value: '' },\r\n];\r\nexport function manageAnchorSession(data: Record<string, unknown>, mode: 'add' | 'remove' = 'add') {\r\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\r\n  if (anchor) {\r\n    if (mode === 'add') {\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...anchor, ...data }));\r\n    } else if (mode === 'remove') {\r\n      const keys = Object.keys(data);\r\n      keys.forEach(key => {\r\n        if (key in anchor) {\r\n          delete anchor[key];\r\n        }\r\n      });\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify(anchor));\r\n    }\r\n  } else {\r\n    if (mode === 'add') {\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...data }));\r\n    }\r\n  }\r\n}\r\nexport function checkUserAuthState() {\r\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\r\n  if (anchor) {\r\n    return anchor.login || null;\r\n  }\r\n  return null;\r\n}\r\n"],"mappings":"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","ignoreList":[]}