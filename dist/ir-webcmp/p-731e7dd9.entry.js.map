{"version":3,"names":["VariationService","formatVariationBasedOnInfants","params","variation","this","getVariationBasedOnInfants","formatVariation","infants","calculateVariationAmount","_a","discounted_amount","variations","baseVariation","adult_nbr","child_nbr","find","v","Math","max","infant_nbr","adultNumber","Number","infantNumber","adultLabel","locales","entries","Lcz_Adults","toLowerCase","Lcz_Adult","childLabel","Lcz_Children","Lcz_Child","infantLabel","_b","_d","_c","parts","filter","Boolean","join","iglApplicationInfoCss","IglApplicationInfo","constructor","hostRef","bedPreferenceType","bookingType","totalNights","isButtonPressed","variationService","componentWillLoad","isSingleUnit","rateplanSelection","roomtype","id","filteredRooms","filterRooms","length","updateGuest","unit","toString","roomTypeId","ratePlanId","ratePlan","prevGuest","guest","roomIndex","Object","assign","booking_store","ratePlanSelections","handleButtonClicked","event","detail","key","getTooltipMessages","selected_variation","selectedVariation","guestInfo","matchingVariation","cancellationPolicy","_e","applicable_policies","p","type","combined_statement","guaranteePolicy","_g","_f","tooltip","undefined","getAmount","is_amount_modified","view_mode","rp_amount","discounted_gross_amount","result","calendar_data","is_frontdesk_enabled","assignable_units","forEach","Is_Fully_Available","push","name","pr_id","filteredGuestsRoom","_","i","map","r","filteredResults","includes","baseData","roomtypeId","f","sort","a","b","localeCompare","render","filteredRoomList","formattedVariation","h","Host","class","short_name","is_non_refundable","message","innerHTML","formatAmount","currency","symbol","Lcz_Stay","v4","first_name","placeholder","onInput","target","value","event_type","modifyBookingStore","required","last_name","onChange","selected","_h","Lcz_Assignunits","room","is_bed_configuration_enabled","_j","bed_preference","_k","Lcz_BedConfiguration","data","CODE_NAME","CODE_VALUE_EN","_l","style","gap","marginTop","_m","width","_o","Array","from","item","iglBlockDatesViewCss","IglBlockDatesView","isEventHover","renderAgain","blockDatesData","RELEASE_AFTER_HOURS","OPTIONAL_REASON","OUT_OF_SERVICE","releaseList","bookingService","BookingService","getBlockedInfo","defaultData","parseInt","emitData","error","handleOptionalReason","handleReleaseAfterChange","evt","entryDate","renderPage","dataUpdateEvent","emit","getReleaseHoursString","dt","Date","entryHour","entryMinute","setHours","getHours","getMinutes","toLocaleString","month","getDate","formatNumber","handleOutOfService","checked","console","log","fromDate","toDate","from_date","dateOption","showDateDifference","to_date","Lcz_Reason","Lcz_OutOfservice","Lcz_Or","Lcz_OptionalReason","Lcz_AutomaticReleaseIn","releaseItem","Lcz_On","IglBookPropertyService","setBookingInfoFromAutoComplete","context","res","bookedByInfoData","email","firstName","lastName","countryId","country_id","isdCode","country_phone_prefix","contactNumber","mobile","selectedArrivalTime","arrival","emailGuest","subscribe_to_news_letter","remark","cardNumber","cardHolderName","expiryMonth","expiryYear","bookingNumber","booking_nbr","rooms","resetRoomsInfoAndMessage","roomsInfo","onDataRoomUpdate","selectedUnits","isEdit","isEditBooking","units","changedKey","roomCategoryKey","roomCategoryId","ratePlanKey","shouldClearData","Map","initializeRoomCategoryIfNeeded","has","get","applyBookingEditToSelectedRoom","setSelectedRoomData","cleanupEmptyData","set","selectedRatePlans","totalRooms","inventory","delete","fill","size","clear","guestName","roomId","generateDailyRates","amount","endDate","setDate","currentDate","days","date","moment","format","cost","getBookedRooms","check_in","check_out","notes","identifier","override_unit","auto_check_in","calculateAmount","total_days","nights","rateplanId","rateplan","reserved","prepayment_amount_gross","occupancy","children_nbr","n","night","city","address","dob","cci","prepareBookUserServiceParams","sourceOption","dateRangeData","Error","generateNewRooms","isEventType","bookingData","PR_ID","modifyBookingDetails","pickup_info","extra_services","is_direct","is_in_loyalty_mode","promo_key","extras","rest","__rest","assign_units","is_pms","booking","newBooking","currentRoomType","newRooms","in_out","code","isAgent","agent","tag","property","propertyid","booked_on","hour","minute","source","nbr","holder_name","expiry_month","expiry_year","getRoomCategoryByRoomId","roomCategory","RATE_TYPE","setEditingRoomInfo","category","room_id","RATE_PLAN_ID","adultCount","ADULTS_COUNT","rate","RATE","rateType","roomCategoryName","ratePlanName","RATE_PLAN","NAME","cancelation","guarantee","adult_child_offering","iglBookPropertyCss","IglBookProperty","showPaymentDetails","adultChildCount","adult","child","bookingHistory","initialRoomIds","showSplitBookingOption","sourceOptions","guestData","ratePricingMode","bookPropertyService","updatedBooking","MAX_HISTORY_LENGTH","handleKeyDown","bind","initializeDefaultDateRange","defaultDateRange","initializeDefaultData","wasBlockedUnit","hasOwnProperty","fetchSetupEntriesAndInitialize","initializeEventData","componentDidLoad","document","addEventListener","disconnectedCallback","removeEventListener","clearBooking","e","stopImmediatePropagation","stopPropagation","handleSpiltBookingSelected","getExposedBooking","language","handleAdultChildChange","updateBookingHistory","adults","children","onDateRangeSelect","opt","dates","checkIn","checkOut","checkBookingAvailability","handleSourceDropDown","selectedSource","description","gotoSplitPageTwo","gotoPage","bookUser","closeWindow","animateIrSelect","calculateTotalRooms","animateIrButton","toast","Lcz_SelectRatePlan","title","partialData","lastEntry","newEntry","shift","FROM_DATE","TO_DATE","setupEntries","fetchSetupEntries","setSourceOptions","allowedBookingSources","setOtherProperties","initializeEditBookingData","initializePage","CHILDREN_COUNT","roomName","GUEST","page","isGuestDataIncomplete","isButtonDisabled","isValidProperty","comparedBy","bookingSource","SOURCE","arrivalTime","resetBookingStore","is_in_agent_mode","room_type_ids_to_update","room_type_ids","getBookingAvailability","agent_id","updateBooking","roomtype_id","reserveRooms","checkAndBlockDate","block_exposed_unit_props","isAvailable","roomTypes","every","rt","is_available_to_book","handleBlockDate","closeBookingWindow","didReservation","handleBlockDateUpdate","handleGuestInfoUpdate","guestRefKey","handleBookedByInfoUpdate","getPageBlockDatesView","Fragment","ENTRY_DATE","onDataUpdateEvent","text","Lcz_Cancel","btn_color","onClick","Lcz_Blockdates","isLoading","isRequestPending","handlePageTwoDataUpdateEvent","auto_close","props","releaseData","dateToFormattedString","NOTES","STAY_STATUS_CODE","DESCRIPTION","blockUnit","setLoadingState","serviceParams","doReservation","resetBookingEvt","resetLoadingState","setTimeout","getCurrentPage","BLOCK_DATES_TITLE","TITLE","onIconClickHandler","slot","xmlns","viewBox","height","d","defaultDaterange","eventType","selectedRooms","adultChildConstraints","propertyId","selectedGuestData","countries","defaultGuestData","isEditOrAddRoomEvent","iglBookPropertyFooterCss","IglBookPropertyFooter","disabled","editNext","label","renderButton","icon_name","shouldRenderTwoButtons","btn_disabled","onClickHandler","buttonClicked","iconPosition","icon_style","paddingBottom","Lcz_Next","iglBookPropertyHeaderCss","IglBookPropertyHeader","splitBookingId","getSplitBookingList","Lcz_Tobooking","keys","bookingDataDefaultDateRange","Lcz_BookingNumber","onComboboxValue","spiltBookingSelected","isSplitBooking","getSourceNode","Lcz_Source","sourceDropDownChange","option","obj","adultChild","getAdultChildConstraints","testId","selectedValue","onSelectChange","select_id","firstOption","Lcz_AdultsCaption","LabelAvailable","adult_max_nbr","child_max_nbr","renderChildCaption","btn_id","icon","Lcz_Check","maxAge","child_max_age","years","Lcz_Years","Lcz_Year","Lcz_ChildCaption","Lcz_ChooseBookingNumber","position","initialToDate","initialFromDate","selectedFromDate","selectedToDate","isBefore","isAfter","Lcz_CheckInDateShouldBeMAx","replace","Lcz_PlzSelectNumberOfGuests","minDate","getTime","showSourceNode","variant","dateLabel","Lcz_Dates","add","startOf","tax_statement","iglBookingFormCss","IglBookingForm","initializeGuestData","selectedBookedByData","total","newSelectedUnits","getRate","isRateModified","preference","rate_plan","dateDifference","TOTAL_PRICE","handleOnApplicationInfoDataUpdateEvent","index","categoryIdKey","updatedUnits","handleEventData","showBookAndCheckin","checkin_enabled","isSame","Lcz_TotalPrice","values","val","rp","Lcz_Back","btn_styles","Lcz_Save","Lcz_Book","Lcz_BookAndChekcIn","iglBookingOverviewPageCss","IglBookingOverviewPage","getSplitBookings","splitBookingEvents","setMinDate","today","splitBookings","roomType","isBookDisabled","roomInfoId","roomsDataUpdate","iglPropertyBookedByCss","IglPropertyBookedBy","arrivalTimeList","expiryMonths","expiryYears","currentMonth","bookedByData","assignCountryCode","initializeExpiryYears","initializeDateData","populateBookedByData","currentYear","getFullYear","country","getUserDefaultCountry","getMonth","handleDataChange","handleCountryChange","handleNumberInput","inputElement","inputValue","numericRegex","test","checkUser","z","string","safeParse","success","getUserInfo","mobile_without_prefix","prevBookedByData","checkout_guest","handleComboboxChange","clearEvent","Lcz_BookedBy","Lcz_FindEmailAddress","onInputCleared","danger_border","validateEmail","Lcz_FirstName","Lcz_LastName","Lcz_Country","onCountryChange","c","Lcz_MobilePhone","phone_prefix","default_country","onTextChange","Lcz_YourArrivalTime","time","Lcz_AnyMessageForUs","rows","Lcz_CardNumber","pattern","Lcz_CardHolderName","Lcz_ExpiryDate","year","htmlFor","Lcz_EmailTheGuest","iglRatePlanCss","IglRatePlan","disableForm","shouldBeDisabled","visibleInventory","updateRateplanSelection","currentSelections","handleVariationChange","bookProperty","resetReserved","reserveRoom","renderRate","amount_per_night_gross","updateRoomParams","updatedSelections","reduce","acc","ratePlans","rpAcc","isAvailableToBook","formattedVariations","split","uuidv4","Lcz_Rate","Lcz_Current","Lcz_Select","iglRoomTypeCss","IglRoomType","roomsDistributions","validBookingTypes","isValidBookingType","rateplans","getVisibleInventory"],"sources":["src/services/variation.service.ts","src/components/igloo-calendar/igl-book-property/igl-booking-form/igl-application-info/igl-application-info.css?tag=igl-application-info&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-booking-form/igl-application-info/igl-application-info.tsx","src/components/igloo-calendar/igl-block-dates-view/igl-block-dates-view.css?tag=igl-block-dates-view&encapsulation=scoped","src/components/igloo-calendar/igl-block-dates-view/igl-block-dates-view.tsx","src/components/igloo-calendar/igl-book-property/igl-book-property.service.ts","src/components/igloo-calendar/igl-book-property/igl-book-property.css?tag=igl-book-property&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-book-property.tsx","src/components/igloo-calendar/igl-book-property/igl-book-property-footer/igl-book-property-footer.css?tag=igl-book-property-footer&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-book-property-footer/igl-book-property-footer.tsx","src/components/igloo-calendar/igl-book-property/igl-book-property-header/igl-book-property-header.css?tag=igl-book-property-header&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-book-property-header/igl-book-property-header.tsx","src/components/igloo-calendar/igl-book-property/igl-booking-form/igl-booking-form.css?tag=igl-booking-form&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-booking-form/igl-booking-form.tsx","src/components/igloo-calendar/igl-book-property/igl-booking-overview-page/igl-booking-overview-page.css?tag=igl-booking-overview-page&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-booking-overview-page/igl-booking-overview-page.tsx","src/components/igloo-calendar/igl-book-property/igl-booking-form/igl-property-booked-by/igl-property-booked-by.css?tag=igl-property-booked-by&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-booking-form/igl-property-booked-by/igl-property-booked-by.tsx","src/components/igloo-calendar/igl-book-property/igl-booking-overview-page/igl-room-type/igl-rate-plan/igl-rate-plan.css?tag=igl-rate-plan&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-booking-overview-page/igl-room-type/igl-rate-plan/igl-rate-plan.tsx","src/components/igloo-calendar/igl-book-property/igl-booking-overview-page/igl-room-type/igl-room-type.css?tag=igl-room-type&encapsulation=scoped","src/components/igloo-calendar/igl-book-property/igl-booking-overview-page/igl-room-type/igl-room-type.tsx"],"sourcesContent":["import { Variation } from '@/models/property';\r\nimport locales from '@/stores/locales.store';\r\n\r\nexport default class VariationService {\r\n  /**\r\n   * Formats a variation based on the number of infants and returns a formatted string.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to adjust the variation for.\r\n   * @returns {string} A formatted string describing the variation adjusted for infants.\r\n   */\r\n  public formatVariationBasedOnInfants(params: { baseVariation: Variation; variations: Variation[]; infants: number }): string {\r\n    const variation = this.getVariationBasedOnInfants(params);\r\n    return this.formatVariation(variation, params.infants);\r\n  }\r\n\r\n  /**\r\n   * Calculates the discounted amount for a variation adjusted for the number of infants.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to consider for adjustments.\r\n   * @returns {number} The discounted amount for the selected variation, or 0 if no discounted amount is available.\r\n   */\r\n  public calculateVariationAmount(params: { baseVariation: Variation; variations: Variation[]; infants: number }): number {\r\n    return this.getVariationBasedOnInfants(params)?.discounted_amount || 0;\r\n  }\r\n\r\n  /**\r\n   * Finds the appropriate variation from a list of variations based on the number of infants.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to adjust for.\r\n   * @returns {Variation} The matching variation or the base variation if no match is found.\r\n   */\r\n  public getVariationBasedOnInfants({ variations, baseVariation, infants }: { baseVariation: Variation; variations: Variation[]; infants: number }): Variation {\r\n    const { adult_nbr, child_nbr } = baseVariation;\r\n    return variations.find(v => v.adult_nbr === adult_nbr && v.child_nbr === Math.max(0, child_nbr - Math.max(0, infants))) || baseVariation;\r\n  }\r\n\r\n  /**\r\n   * Formats a variation object into a human-readable string, adjusted for the number of infants.\r\n   * @param {Variation} variation - The variation object to format.\r\n   * @param {number} infant_nbr - The number of infants to adjust for.\r\n   * @returns {string} A formatted string representing the variation.\r\n   * @private\r\n   */\r\n  private formatVariation({ child_nbr, adult_nbr }: Variation, infant_nbr: number): string {\r\n    const adultNumber = Number(adult_nbr) || 0;\r\n    const infantNumber = Math.max(Number(infant_nbr) || 0, 0);\r\n    const adultLabel = adultNumber > 1 ? locales.entries.Lcz_Adults.toLowerCase() : locales.entries.Lcz_Adult.toLowerCase();\r\n    const childLabel = child_nbr > 1 ? locales.entries.Lcz_Children.toLowerCase() : locales.entries.Lcz_Child.toLowerCase();\r\n    const infantLabel = infantNumber > 1 ? (locales.entries['Lcz_Infants'] ?? 'infants')?.toLowerCase() : (locales?.entries['Lcz_Infant'] ?? 'infant')?.toLowerCase();\r\n    const parts = [`${adultNumber} ${adultLabel}`, child_nbr ? `${child_nbr} ${childLabel}` : '', infantNumber ? `${infantNumber} ${infantLabel}` : ''];\r\n    return parts.filter(Boolean).join('&nbsp&nbsp&nbsp&nbsp');\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n.rate_amount {\r\n  display: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.booking-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin-bottom: 0.5rem;\r\n  gap: 0.5rem;\r\n}\r\n.non-ref-span {\r\n  font-size: 12px;\r\n  color: var(--green);\r\n}\r\n.booking-roomtype-title {\r\n  font-size: 1.25rem;\r\n  margin-right: 0.5rem;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.booking-details-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.booking-rateplan {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.booking-rateplan-name {\r\n  font-weight: bold;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.booking-tooltip {\r\n  margin-right: 0.5rem;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.booking-variation {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.booking-price {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.booking-footer {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.booking-details-container {\r\n  display: none;\r\n}\r\n\r\n/*md*/\r\n@media (min-width: 768px) {\r\n  .booking-header {\r\n    justify-content: flex-start;\r\n  }\r\n  .booking-footer,\r\n  .booking-price {\r\n    display: none;\r\n  }\r\n  .booking-details-container,\r\n  .rate_amount {\r\n    display: inline-flex;\r\n    gap: 0.5rem;\r\n  }\r\n}\r\n\r\n@media only screen and (min-width: 908px) {\r\n  .aplicationInfoContainer {\r\n    max-width: 100%;\r\n  }\r\n  .guest-info-container {\r\n    max-width: 300px;\r\n  }\r\n\r\n  .preference-select-container {\r\n    max-width: 250px;\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, State, Listen } from '@stencil/core';\r\nimport { TPropertyButtonsTypes } from '@/components';\r\nimport { ICurrency } from '@/models/calendarData';\r\nimport booking_store, { IRatePlanSelection, modifyBookingStore, RatePlanGuest } from '@/stores/booking.store';\r\nimport locales from '@/stores/locales.store';\r\nimport { v4 } from 'uuid';\r\nimport calendar_data, { isSingleUnit } from '@/stores/calendar-data';\r\nimport { formatAmount } from '@/utils/utils';\r\nimport VariationService from '@/services/variation.service';\r\n\r\n@Component({\r\n  tag: 'igl-application-info',\r\n  styleUrl: 'igl-application-info.css',\r\n  scoped: true,\r\n})\r\nexport class IglApplicationInfo {\r\n  @Prop() rateplanSelection: IRatePlanSelection;\r\n  @Prop() guestInfo: RatePlanGuest | null;\r\n  @Prop() currency: ICurrency;\r\n  @Prop() bedPreferenceType = [];\r\n  @Prop() bookingType: string = 'PLUS_BOOKING';\r\n  @Prop() roomIndex: number;\r\n  @Prop() totalNights: number = 1;\r\n  @Prop() baseData: { unit: { id: string; name: string }; roomtypeId: number };\r\n\r\n  @State() isButtonPressed = false;\r\n\r\n  private variationService = new VariationService();\r\n\r\n  componentWillLoad() {\r\n    if (isSingleUnit(this.rateplanSelection.roomtype.id)) {\r\n      const filteredRooms = this.filterRooms();\r\n      if (filteredRooms.length > 0) this.updateGuest({ unit: filteredRooms[0]?.id?.toString() });\r\n    }\r\n  }\r\n\r\n  private updateGuest(params: Partial<RatePlanGuest>) {\r\n    const roomTypeId = this.rateplanSelection.roomtype.id;\r\n    const ratePlanId = this.rateplanSelection.ratePlan.id;\r\n    let prevGuest = [...this.rateplanSelection.guest];\r\n    prevGuest[this.roomIndex] = {\r\n      ...prevGuest[this.roomIndex],\r\n      ...params,\r\n    };\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId],\r\n        [ratePlanId]: { ...this.rateplanSelection, guest: [...prevGuest] },\r\n      },\r\n    };\r\n  }\r\n\r\n  @Listen('buttonClicked', { target: 'body' })\r\n  handleButtonClicked(\r\n    event: CustomEvent<{\r\n      key: TPropertyButtonsTypes;\r\n      data?: CustomEvent;\r\n    }>,\r\n  ) {\r\n    switch (event.detail.key) {\r\n      case 'book':\r\n      case 'bookAndCheckIn':\r\n      case 'save':\r\n        this.isButtonPressed = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private getTooltipMessages(): string | undefined {\r\n    const { ratePlan, selected_variation } = this.rateplanSelection;\r\n    let selectedVariation = selected_variation;\r\n    if (this.guestInfo?.infant_nbr) {\r\n      selectedVariation = this.variationService.getVariationBasedOnInfants({\r\n        variations: ratePlan.variations,\r\n        baseVariation: selected_variation,\r\n        infants: this.guestInfo?.infant_nbr,\r\n      });\r\n    }\r\n\r\n    if (!selectedVariation) return;\r\n\r\n    const matchingVariation = ratePlan.variations?.find(variation => variation.adult_nbr === selectedVariation.adult_nbr && variation.child_nbr === selectedVariation.child_nbr);\r\n\r\n    if (!matchingVariation) return;\r\n\r\n    const cancellationPolicy = matchingVariation.applicable_policies?.find(p => p.type === 'cancelation')?.combined_statement;\r\n    const guaranteePolicy = matchingVariation.applicable_policies?.find(p => p.type === 'guarantee')?.combined_statement;\r\n\r\n    let tooltip = '';\r\n    if (cancellationPolicy) {\r\n      tooltip += `<b><u>Cancellation:</u></b> ${cancellationPolicy}<br/>`;\r\n    }\r\n    if (guaranteePolicy) {\r\n      tooltip += `<b><u>Guarantee:</u></b> ${guaranteePolicy}`;\r\n    }\r\n    return tooltip || undefined;\r\n  }\r\n\r\n  private getAmount(): number {\r\n    if (this.rateplanSelection.is_amount_modified) {\r\n      return this.rateplanSelection.view_mode === '001' ? this.rateplanSelection.rp_amount : this.rateplanSelection.rp_amount * this.totalNights;\r\n    }\r\n    let variation = this.rateplanSelection.selected_variation;\r\n    if (this.guestInfo?.infant_nbr) {\r\n      variation = this.variationService.getVariationBasedOnInfants({\r\n        variations: this.rateplanSelection.ratePlan.variations,\r\n        baseVariation: this.rateplanSelection.selected_variation,\r\n        infants: this.guestInfo?.infant_nbr,\r\n      });\r\n    }\r\n    return variation.discounted_gross_amount;\r\n  }\r\n\r\n  private filterRooms(): { name: string; id: number }[] {\r\n    const result = [];\r\n    if (!calendar_data.is_frontdesk_enabled) {\r\n      return result;\r\n    }\r\n    this.rateplanSelection.ratePlan?.assignable_units?.forEach(unit => {\r\n      if (unit.Is_Fully_Available) {\r\n        result.push({ name: unit.name, id: unit.pr_id });\r\n      }\r\n    });\r\n    const filteredGuestsRoom = this.rateplanSelection.guest.filter((_, i) => i !== this.roomIndex).map(r => r.unit);\r\n    const filteredResults = result.filter(r => !filteredGuestsRoom.includes(r.id.toString()));\r\n    return this.bookingType === 'EDIT_BOOKING'\r\n      ? [...filteredResults, this.rateplanSelection.roomtype.id === this.baseData?.roomtypeId ? this.baseData?.unit : null]\r\n          .filter(f => !!f)\r\n          .sort((a, b) => a.name.localeCompare(b.name))\r\n      : filteredResults;\r\n  }\r\n\r\n  render() {\r\n    const filteredRoomList = this.filterRooms();\r\n    const formattedVariation = this.variationService.formatVariationBasedOnInfants({\r\n      baseVariation: this.rateplanSelection.selected_variation,\r\n      infants: this.guestInfo.infant_nbr,\r\n      variations: this.rateplanSelection.ratePlan.variations,\r\n    });\r\n    return (\r\n      <Host class={'my-2'} data-testid={`room_info_${this.rateplanSelection.ratePlan.id}`}>\r\n        <div class=\"booking-header\">\r\n          {(this.bookingType === 'PLUS_BOOKING' || this.bookingType === 'ADD_ROOM' || this.bookingType === 'EDIT_BOOKING') && (\r\n            <span class=\"booking-roomtype-title\">{this.rateplanSelection.roomtype.name}</span>\r\n          )}\r\n          <div class=\"booking-details-container\">\r\n            <div class=\"booking-rateplan\">\r\n              <p class=\"booking-rateplan-name\">\r\n                {this.rateplanSelection.ratePlan.short_name} {this.rateplanSelection.ratePlan.is_non_refundable && <span class={'non-ref-span'}>Non Refundable</span>}\r\n              </p>\r\n              <ir-tooltip class=\"booking-tooltip\" message={this.getTooltipMessages()}></ir-tooltip>\r\n            </div>\r\n            <p class=\"booking-variation\" innerHTML={formattedVariation}></p>\r\n          </div>\r\n          <p class=\"booking-price\">\r\n            {formatAmount(this.currency?.symbol, this.getAmount())}/{locales.entries.Lcz_Stay}\r\n          </p>\r\n        </div>\r\n        <div class=\"booking-footer\">\r\n          <div class=\"booking-rateplan\">\r\n            <p class=\"booking-rateplan-name\">{this.rateplanSelection.ratePlan.short_name}</p>\r\n            <ir-tooltip class=\"booking-tooltip\" message={this.getTooltipMessages()}></ir-tooltip>\r\n          </div>\r\n          <p class=\"booking-variation\" innerHTML={formattedVariation}></p>\r\n        </div>\r\n        <div class=\"d-flex flex-column flex-md-row  p-0 align-items-md-center aplicationInfoContainer\">\r\n          <div class=\"mr-md-1 mb-1 mb-md-0 flex-fill guest-info-container\">\r\n            <input\r\n              id={v4()}\r\n              type=\"text\"\r\n              data-testid=\"guest_first_name\"\r\n              class={`form-control ${this.isButtonPressed && this.guestInfo?.first_name === '' && 'border-danger'}`}\r\n              placeholder={locales.entries['Lcz_GuestFirstname'] ?? 'Guest first name'}\r\n              name=\"guestFirstName\"\r\n              onInput={event => {\r\n                const name = (event.target as HTMLInputElement).value;\r\n                this.updateGuest({ first_name: name });\r\n                if (booking_store.event_type.type === 'EDIT_BOOKING') {\r\n                  modifyBookingStore('guest', {\r\n                    ...booking_store.guest,\r\n                    name,\r\n                  });\r\n                }\r\n              }}\r\n              required\r\n              value={this.guestInfo?.first_name}\r\n            />\r\n          </div>\r\n          <div class=\"mr-md-1 flex-fill guest-info-container\">\r\n            <input\r\n              id={v4()}\r\n              type=\"text\"\r\n              class={`form-control ${this.isButtonPressed && this.guestInfo?.last_name === '' && 'border-danger'}`}\r\n              placeholder={locales.entries['Lcz_GuestLastname'] ?? 'Guest last name'}\r\n              name=\"guestLastName\"\r\n              data-testid=\"guest_last_name\"\r\n              onInput={event => {\r\n                const name = (event.target as HTMLInputElement).value;\r\n                this.updateGuest({ last_name: name });\r\n                if (booking_store.event_type.type === 'EDIT_BOOKING') {\r\n                  modifyBookingStore('guest', {\r\n                    ...booking_store.guest,\r\n                    name,\r\n                  });\r\n                }\r\n              }}\r\n              required\r\n              value={this.guestInfo?.last_name}\r\n            />\r\n          </div>\r\n          {calendar_data.is_frontdesk_enabled &&\r\n            !isSingleUnit(this.rateplanSelection.roomtype.id) &&\r\n            (this.bookingType === 'PLUS_BOOKING' || this.bookingType === 'ADD_ROOM' || this.bookingType === 'EDIT_BOOKING') && (\r\n              <div class=\"mt-1 mt-md-0 d-flex align-items-center flex-fill\">\r\n                <div class=\"mr-md-1 p-0 flex-fill preference-select-container\">\r\n                  <select data-testid=\"unit\" class=\"form-control input-sm pr-0\" id={v4()} onChange={event => this.updateGuest({ unit: (event.target as HTMLInputElement).value })}>\r\n                    <option value=\"\" selected={this.guestInfo?.unit === ''}>\r\n                      {locales.entries.Lcz_Assignunits}\r\n                    </option>\r\n                    {filteredRoomList?.map(room => (\r\n                      <option value={room.id} selected={this.guestInfo?.unit === room.id.toString()}>\r\n                        {room.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            )}\r\n          {this.rateplanSelection.roomtype.is_bed_configuration_enabled && (\r\n            <div class=\"mt-1 mt-md-0 mr-md-1 flex-fill\">\r\n              <select\r\n                data-testid=\"bed_configuration\"\r\n                class={`form-control input-sm ${this.isButtonPressed && this.guestInfo?.bed_preference === '' && 'border-danger'}`}\r\n                id={v4()}\r\n                onChange={event => this.updateGuest({ bed_preference: (event.target as HTMLInputElement).value })}\r\n              >\r\n                <option value=\"\" selected={this.guestInfo?.bed_preference === ''}>\r\n                  {locales.entries.Lcz_BedConfiguration}\r\n                </option>\r\n                {this.bedPreferenceType.map(data => (\r\n                  <option value={data.CODE_NAME} selected={this.guestInfo?.bed_preference === data.CODE_NAME}>\r\n                    {data.CODE_VALUE_EN}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          )}\r\n          <p class=\"rate_amount\">\r\n            {formatAmount(this.currency?.symbol, this.getAmount())}/{locales.entries.Lcz_Stay}\r\n          </p>\r\n        </div>\r\n        {this.rateplanSelection.selected_variation.child_nbr > 0 && (\r\n          <div style={{ gap: '0.5rem', marginTop: '0.5rem' }} class=\"d-flex  flex-row  p-0 align-items-center aplicationInfoContainer\">\r\n            <p class={'m-0 p-0 text-danger'}>Any of the children below 3 years?</p>\r\n            <div class=\"mr-1 flex-fill\">\r\n              <select\r\n                class={`form-control input-sm ${this.isButtonPressed && this.guestInfo?.bed_preference === '' && 'border-danger'}`}\r\n                id={v4()}\r\n                style={{ width: 'max-content' }}\r\n                onChange={event => this.updateGuest({ infant_nbr: Number((event.target as HTMLInputElement).value) })}\r\n              >\r\n                <option value=\"\" selected={Number(this.guestInfo?.infant_nbr) === 0}>\r\n                  {locales.entries['No'] || 'No'}\r\n                </option>\r\n                {Array.from({ length: this.rateplanSelection.selected_variation.child_nbr }, (_, i) => i + 1).map(item => (\r\n                  <option value={item} selected={this.guestInfo?.infant_nbr === item}>\r\n                    {item}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n\r\n:host .controlContainer {\r\n  width: 24px;\r\n}\r\n\r\n:host .checkBoxContainer input {\r\n  height: 1.2rem !important;\r\n  width: 30px;\r\n}\r\n\r\n.releaseTime {\r\n  padding-left: 5px;\r\n}\r\n.out-of-service-label {\r\n  margin-left: 5px !important;\r\n}\r\n","import { Component, Host, h, Prop, State, Event, EventEmitter } from '@stencil/core';\r\nimport { BookingService } from '@/services/booking.service';\r\nimport { IEntries } from '@/models/IBooking';\r\nimport locales from '@/stores/locales.store';\r\n\r\n@Component({\r\n  tag: 'igl-block-dates-view',\r\n  styleUrl: 'igl-block-dates-view.css',\r\n  scoped: true,\r\n})\r\nexport class IglBlockDatesView {\r\n  @Prop() defaultData: { [key: string]: any };\r\n  @Prop() fromDate: string;\r\n  @Prop() toDate: string;\r\n  @Prop({ mutable: true }) entryDate: string;\r\n  @Prop() entryHour: number;\r\n  @Prop() isEventHover: boolean = false;\r\n  @Prop() entryMinute: number;\r\n  @State() renderAgain: boolean = false;\r\n  @Event() dataUpdateEvent: EventEmitter<{ [key: string]: any }>;\r\n\r\n  private blockDatesData: { [key: string]: any } = {\r\n    RELEASE_AFTER_HOURS: 0,\r\n    OPTIONAL_REASON: '',\r\n    OUT_OF_SERVICE: false,\r\n  }; // Change of property name might require updates in booking-event-hover\r\n  private releaseList: IEntries[] = [];\r\n  private bookingService: BookingService = new BookingService();\r\n\r\n  async componentWillLoad() {\r\n    try {\r\n      this.releaseList = await this.bookingService.getBlockedInfo();\r\n      if (this.defaultData) {\r\n        this.blockDatesData = { ...this.defaultData };\r\n      } else {\r\n        this.blockDatesData.RELEASE_AFTER_HOURS = parseInt(this.releaseList[0].CODE_NAME);\r\n        this.emitData();\r\n      }\r\n    } catch (error) {\r\n      // toastr.error(error);\r\n    }\r\n  }\r\n\r\n  handleOptionalReason(event) {\r\n    this.blockDatesData.OPTIONAL_REASON = event.target.value;\r\n    this.emitData();\r\n  }\r\n\r\n  handleReleaseAfterChange(evt) {\r\n    if (this.entryDate) this.entryDate = undefined;\r\n    this.blockDatesData.RELEASE_AFTER_HOURS = parseInt(evt.target.value);\r\n    this.renderPage();\r\n    this.emitData();\r\n  }\r\n\r\n  emitData() {\r\n    this.dataUpdateEvent.emit({\r\n      key: 'blockDatesData',\r\n      data: { ...this.blockDatesData },\r\n    });\r\n  }\r\n\r\n  getReleaseHoursString() {\r\n    // console.log(\"entry date\", this.entryDate);\r\n    // console.log(\"blocked date data\", this.blockDatesData);\r\n    let dt = this.entryDate ? new Date(this.entryDate) : new Date();\r\n    if (this.entryDate && this.entryHour && this.entryMinute) {\r\n      dt.setHours(this.entryHour, this.entryMinute, 0, 0);\r\n    } else {\r\n      dt.setHours(dt.getHours() + this.blockDatesData.RELEASE_AFTER_HOURS, dt.getMinutes(), 0, 0);\r\n    }\r\n\r\n    return dt.toLocaleString('default', { month: 'short' }) + ' ' + dt.getDate() + ', ' + this.formatNumber(dt.getHours()) + ':' + this.formatNumber(dt.getMinutes());\r\n  }\r\n  formatNumber(value: number) {\r\n    return value < 10 ? `0${value}` : value;\r\n  }\r\n  handleOutOfService(evt) {\r\n    this.blockDatesData.OUT_OF_SERVICE = evt.target.checked;\r\n    if (this.blockDatesData.OUT_OF_SERVICE) {\r\n      this.blockDatesData.OPTIONAL_REASON = '';\r\n      this.blockDatesData.RELEASE_AFTER_HOURS = 0;\r\n    }\r\n    this.renderPage();\r\n    this.emitData();\r\n  }\r\n\r\n  renderPage() {\r\n    this.renderAgain = !this.renderAgain;\r\n  }\r\n\r\n  render() {\r\n    console.log({ fromDate: this.fromDate, toDate: this.toDate });\r\n    return (\r\n      <Host>\r\n        <div class={`m-0 p-0 mb-1`}>\r\n          <div class=\"text-left p-0\">\r\n            <ir-date-view from_date={this.fromDate} dateOption=\"YYYY-MM-DD\" showDateDifference={false} to_date={this.toDate}></ir-date-view>\r\n          </div>\r\n        </div>\r\n        <div class={` mb-1 text-left ${this.isEventHover && 'p-0'}`}>\r\n          <div class=\"mb-1 \">\r\n            <label class=\"p-0 text-bold-700 font-medium-1 m-0 align-middle\">{locales.entries.Lcz_Reason}:</label>\r\n            <div class=\"p-0 m-0 pr-1  controlContainer checkBoxContainer d-inline-block align-middle\">\r\n              <input class=\"form-control\" type=\"checkbox\" checked={this.blockDatesData.OUT_OF_SERVICE} id=\"userinput6\" onChange={event => this.handleOutOfService(event)} />\r\n            </div>\r\n            <span class=\"align-middle out-of-service-label\">{locales.entries.Lcz_OutOfservice}</span>\r\n          </div>\r\n          {!this.blockDatesData.OUT_OF_SERVICE ? (\r\n            <div>\r\n              <div class=\"mb-1 d-flex  align-items-center\">\r\n                <span class=\"align-middle\">{locales.entries.Lcz_Or} </span>\r\n                <div class=\"d-inline-flex col pr-0 align-middle\">\r\n                  <input\r\n                    class=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder={locales.entries.Lcz_OptionalReason}\r\n                    id=\"optReason\"\r\n                    value={this.blockDatesData.OPTIONAL_REASON}\r\n                    onInput={event => this.handleOptionalReason(event)}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-1 w-100 pr-0 \">\r\n                <span class=\"text-bold-700 font-medium-1\">{locales.entries.Lcz_AutomaticReleaseIn}: </span>\r\n                <div class=\"d-inline-block\">\r\n                  <select class=\"form-control input-sm\" id=\"zSmallSelect\" onChange={evt => this.handleReleaseAfterChange(evt)}>\r\n                    {this.releaseList.map(releaseItem => (\r\n                      <option value={+releaseItem.CODE_NAME} selected={Number(this.blockDatesData.RELEASE_AFTER_HOURS) == Number(releaseItem.CODE_NAME)}>\r\n                        {releaseItem.CODE_VALUE_EN}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n                {this.blockDatesData.RELEASE_AFTER_HOURS ? (\r\n                  <div class=\"d-inline-block releaseTime\">\r\n                    <em>\r\n                      {locales.entries.Lcz_On} {this.getReleaseHoursString()}\r\n                    </em>\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n","import { Booking, Room } from '@/models/booking.dto';\r\nimport { TSourceOption } from '@/models/igl-book-property';\r\nimport VariationService from '@/services/variation.service';\r\nimport booking_store, { IRatePlanSelection } from '@/stores/booking.store';\r\n\r\nimport { extras } from '@/utils/utils';\r\nimport moment from 'moment';\r\n\r\nexport class IglBookPropertyService {\r\n  private variationService: VariationService;\r\n  public setBookingInfoFromAutoComplete(context, res) {\r\n    context.bookedByInfoData = {\r\n      id: res.guest.id,\r\n      email: res.guest.email,\r\n      firstName: res.guest.first_name,\r\n      lastName: res.guest.last_name,\r\n      countryId: res.guest.country_id,\r\n      isdCode: res.guest?.country_phone_prefix ?? res.guest?.country_id.toString(),\r\n      contactNumber: res.guest.mobile,\r\n      selectedArrivalTime: res.arrival,\r\n      emailGuest: res.guest.subscribe_to_news_letter,\r\n      message: res.remark,\r\n      cardNumber: '',\r\n      cardHolderName: '',\r\n      expiryMonth: '',\r\n      expiryYear: '',\r\n      bookingNumber: res.booking_nbr,\r\n      rooms: res.rooms,\r\n      from_date: res.from_date,\r\n      to_date: res.to_date,\r\n    };\r\n  }\r\n\r\n  public resetRoomsInfoAndMessage(context) {\r\n    context.defaultData.roomsInfo = [];\r\n    context.message = '';\r\n  }\r\n\r\n  public onDataRoomUpdate(event: CustomEvent, selectedUnits: Map<string, Map<string, any>>, isEdit: boolean, isEditBooking: boolean, name: string) {\r\n    let units = selectedUnits;\r\n    const { data, key, changedKey } = event.detail;\r\n    const roomCategoryKey = `c_${data.roomCategoryId}`;\r\n    const ratePlanKey = `p_${data.ratePlanId}`;\r\n\r\n    if (this.shouldClearData(key)) {\r\n      units = new Map();\r\n    }\r\n\r\n    this.initializeRoomCategoryIfNeeded(roomCategoryKey, units);\r\n\r\n    if (isEditBooking) {\r\n      if (changedKey === 'rate') {\r\n        if (units.has(roomCategoryKey) && units.get(roomCategoryKey).has(ratePlanKey)) {\r\n          this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n        }\r\n      } else {\r\n        if (changedKey !== 'rateType') {\r\n          if (changedKey === 'adult_child_offering') {\r\n            if (units.has(roomCategoryKey) && selectedUnits.get(roomCategoryKey).has(ratePlanKey)) {\r\n              this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n            }\r\n          } else {\r\n            this.applyBookingEditToSelectedRoom(roomCategoryKey, ratePlanKey, data, units, name, isEdit);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.setSelectedRoomData(roomCategoryKey, ratePlanKey, data, units);\r\n    }\r\n    this.cleanupEmptyData(roomCategoryKey, units);\r\n    return units;\r\n  }\r\n\r\n  private shouldClearData(key: string | undefined): boolean {\r\n    return key === 'clearData' || key === 'EDIT_BOOKING';\r\n  }\r\n\r\n  private initializeRoomCategoryIfNeeded(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (!selectedUnits.has(roomCategoryKey)) {\r\n      selectedUnits.set(roomCategoryKey, new Map());\r\n    }\r\n  }\r\n  private setSelectedRoomData(roomCategoryKey: string, ratePlanKey: string, data: any, selectedUnits: Map<string, Map<string, any>>) {\r\n    let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n    if (data.totalRooms === 0 || data.inventory === 0) {\r\n      selectedRatePlans.delete(ratePlanKey);\r\n    } else {\r\n      selectedUnits.set(roomCategoryKey, selectedRatePlans.set(ratePlanKey, { ...data, selectedUnits: Array(data.totalRooms).fill(-1) }));\r\n    }\r\n  }\r\n\r\n  private cleanupEmptyData(roomCategoryKey: string, selectedUnits: Map<string, Map<string, any>>) {\r\n    if (selectedUnits.has(roomCategoryKey)) {\r\n      let selectedRatePlans = selectedUnits.get(roomCategoryKey);\r\n      if (selectedRatePlans.size === 0) {\r\n        selectedUnits.delete(roomCategoryKey);\r\n      }\r\n    }\r\n  }\r\n  private applyBookingEditToSelectedRoom(roomCategoryKey: string, ratePlanKey: string, data, selectedUnits: Map<string, Map<string, any>>, name: string, isEdit: boolean) {\r\n    selectedUnits.clear();\r\n    let res = {};\r\n    if (isEdit) {\r\n      res = { ...data, guestName: name || '', roomId: '' };\r\n    } else {\r\n      res = { ...data };\r\n    }\r\n    selectedUnits.set(roomCategoryKey, new Map().set(ratePlanKey, res));\r\n  }\r\n\r\n  private generateDailyRates(from_date: Date, to_date: Date, amount: number) {\r\n    const endDate = new Date(to_date);\r\n    endDate.setDate(endDate.getDate() - 1);\r\n\r\n    let currentDate = new Date(from_date);\r\n    const days: {\r\n      date: string;\r\n      amount: number;\r\n      cost: null;\r\n    }[] = [];\r\n\r\n    while (currentDate <= endDate) {\r\n      days.push({\r\n        date: moment(currentDate).format('YYYY-MM-DD'),\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n\r\n  // private extractFirstNameAndLastName(name: string) {\r\n  //   const names = name.split(' ');\r\n  //   return { first_name: names[0] || null, last_name: names[1] || null };\r\n  // }\r\n\r\n  private getBookedRooms({\r\n    check_in,\r\n    check_out,\r\n    notes,\r\n    identifier,\r\n    override_unit,\r\n    unit,\r\n    auto_check_in,\r\n  }: {\r\n    identifier: string | null;\r\n    check_in: Date;\r\n    check_out: Date;\r\n    override_unit: boolean;\r\n    unit: string;\r\n    notes: string | null;\r\n    auto_check_in: boolean;\r\n  }) {\r\n    const rooms = [];\r\n    const calculateAmount = ({ is_amount_modified, selected_variation, view_mode, rp_amount, ratePlan }: IRatePlanSelection, infants: number) => {\r\n      const total_days = selected_variation.nights.length;\r\n      if (is_amount_modified) {\r\n        return view_mode === '002' ? rp_amount : rp_amount / total_days;\r\n      }\r\n      let variation = selected_variation;\r\n      if (infants > 0) {\r\n        if (!this.variationService) {\r\n          this.variationService = new VariationService();\r\n        }\r\n        variation = this.variationService.getVariationBasedOnInfants({ variations: ratePlan.variations, baseVariation: selected_variation, infants });\r\n      }\r\n      return Number(variation.discounted_amount) / total_days;\r\n    };\r\n    for (const roomTypeId in booking_store.ratePlanSelections) {\r\n      const roomtype = booking_store.ratePlanSelections[roomTypeId];\r\n      for (const rateplanId in roomtype) {\r\n        const rateplan = roomtype[rateplanId];\r\n        if (rateplan.reserved > 0) {\r\n          for (let i = 0; i < rateplan.reserved; i++) {\r\n            const { first_name, last_name } = rateplan.guest[i];\r\n            rooms.push({\r\n              identifier,\r\n              roomtype: rateplan.roomtype,\r\n              rateplan: rateplan.ratePlan,\r\n              prepayment_amount_gross: 0,\r\n              unit: override_unit ? { id: unit } : rateplan.guest[i].unit ? { id: rateplan.guest[i].unit } : null,\r\n              occupancy: {\r\n                adult_nbr: rateplan.selected_variation.adult_nbr,\r\n                children_nbr: rateplan.selected_variation.child_nbr - Math.max(rateplan.guest[i].infant_nbr, 0),\r\n                infant_nbr: rateplan.guest[i].infant_nbr,\r\n              },\r\n              bed_preference: rateplan.guest[i].bed_preference,\r\n              from_date: moment(check_in).format('YYYY-MM-DD'),\r\n              to_date: moment(check_out).format('YYYY-MM-DD'),\r\n              notes,\r\n              check_in: auto_check_in,\r\n              days: rateplan.is_amount_modified\r\n                ? this.generateDailyRates(check_in, check_out, calculateAmount(rateplan, rateplan.guest[i].infant_nbr))\r\n                : (() => {\r\n                    let variation = rateplan.selected_variation;\r\n                    if (rateplan.guest[i].infant_nbr > 0) {\r\n                      if (!this.variationService) {\r\n                        this.variationService = new VariationService();\r\n                      }\r\n                      variation = this.variationService.getVariationBasedOnInfants({\r\n                        variations: rateplan.ratePlan.variations,\r\n                        baseVariation: rateplan.selected_variation,\r\n                        infants: rateplan.guest[i].infant_nbr,\r\n                      });\r\n                    }\r\n                    return variation.nights.map(n => ({\r\n                      date: n.night,\r\n                      amount: n.discounted_amount,\r\n                      cost: null,\r\n                    }));\r\n                  })(),\r\n              guest: {\r\n                email: null,\r\n                first_name,\r\n                last_name,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n                cci: null,\r\n              },\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return rooms;\r\n  }\r\n\r\n  async prepareBookUserServiceParams({ context, sourceOption, check_in }: { context: any; sourceOption: TSourceOption; check_in: boolean }) {\r\n    try {\r\n      // Validate context structure\r\n      if (!context || !context.dateRangeData) {\r\n        throw new Error('Invalid context: Missing date range data.');\r\n      }\r\n\r\n      const fromDate = new Date(context.dateRangeData.fromDate);\r\n      const toDate = new Date(context.dateRangeData.toDate);\r\n\r\n      const generateNewRooms = (identifier = null, check_in: boolean = false) => {\r\n        return this.getBookedRooms({\r\n          check_in: fromDate,\r\n          check_out: toDate,\r\n          identifier,\r\n          notes: '',\r\n          override_unit: context.isEventType('BAR_BOOKING') ? true : false,\r\n          unit: context.isEventType('BAR_BOOKING') ? context.bookingData.PR_ID : null,\r\n          auto_check_in: check_in,\r\n        });\r\n      };\r\n\r\n      const modifyBookingDetails = ({ pickup_info, extra_services, is_direct, is_in_loyalty_mode, promo_key, extras, ...rest }: Booking, rooms: Room[]) => {\r\n        return {\r\n          assign_units: true,\r\n          is_pms: true,\r\n          is_direct,\r\n          is_in_loyalty_mode,\r\n          promo_key,\r\n          extras,\r\n          booking: {\r\n            ...rest,\r\n            rooms,\r\n          },\r\n          extra_services,\r\n          pickup_info,\r\n        };\r\n      };\r\n\r\n      let newBooking = null;\r\n\r\n      switch (context.defaultData.event_type) {\r\n        case 'EDIT_BOOKING': {\r\n          const { booking, currentRoomType } = context.defaultData;\r\n\r\n          const filteredRooms = booking.rooms.filter(r => r.identifier !== currentRoomType.identifier);\r\n          console.log('currentRoomType', currentRoomType);\r\n          const newRooms = generateNewRooms(currentRoomType.identifier, currentRoomType.in_out?.code === '001');\r\n          newBooking = modifyBookingDetails(booking, [...filteredRooms, ...newRooms]);\r\n          break;\r\n        }\r\n        case 'ADD_ROOM':\r\n        case 'SPLIT_BOOKING': {\r\n          const { booking } = context.defaultData;\r\n          if (!booking) {\r\n            throw new Error('Missing booking');\r\n          }\r\n          console.log(booking);\r\n          const newRooms = generateNewRooms();\r\n          newBooking = modifyBookingDetails(booking, [...booking?.rooms, ...newRooms]);\r\n          break;\r\n        }\r\n        default: {\r\n          const newRooms = generateNewRooms(null, check_in);\r\n          const { bookedByInfoData } = context;\r\n          const isAgent = sourceOption.type === 'TRAVEL_AGENCY';\r\n          newBooking = {\r\n            assign_units: true,\r\n            is_pms: true,\r\n            is_direct: true,\r\n            is_in_loyalty_mode: false,\r\n            promo_key: null,\r\n            extras,\r\n            agent: isAgent ? { id: sourceOption.tag } : null,\r\n            booking: {\r\n              from_date: moment(fromDate).format('YYYY-MM-DD'),\r\n              to_date: moment(toDate).format('YYYY-MM-DD'),\r\n              remark: bookedByInfoData.message || null,\r\n              booking_nbr: '',\r\n              property: {\r\n                id: context.propertyid,\r\n              },\r\n              booked_on: {\r\n                date: moment().format('YYYY-MM-DD'),\r\n                hour: new Date().getHours(),\r\n                minute: new Date().getMinutes(),\r\n              },\r\n              source: isAgent ? '' : sourceOption,\r\n              rooms: newRooms,\r\n              currency: context.currency,\r\n              arrival: { code: bookedByInfoData.selectedArrivalTime },\r\n              guest: {\r\n                email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n                first_name: bookedByInfoData.firstName,\r\n                last_name: bookedByInfoData.lastName,\r\n                country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n                city: null,\r\n                mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n                country_phone_prefix: bookedByInfoData?.isdCode ?? null,\r\n                address: '',\r\n                dob: null,\r\n                subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n                cci: bookedByInfoData.cardNumber\r\n                  ? {\r\n                      nbr: bookedByInfoData.cardNumber,\r\n                      holder_name: bookedByInfoData.cardHolderName,\r\n                      expiry_month: bookedByInfoData.expiryMonth,\r\n                      expiry_year: bookedByInfoData.expiryYear,\r\n                    }\r\n                  : null,\r\n              },\r\n            },\r\n            pickup_info: null,\r\n          };\r\n          break;\r\n        }\r\n      }\r\n      return newBooking;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  private getRoomCategoryByRoomId(bookingData) {\r\n    return bookingData.roomsInfo?.find(roomCategory => {\r\n      return roomCategory.id === bookingData.RATE_TYPE;\r\n    });\r\n  }\r\n  public setEditingRoomInfo(bookingData, selectedUnits) {\r\n    const category = this.getRoomCategoryByRoomId(bookingData);\r\n    const room_id = !category ? '' : `c_${category?.id}`;\r\n    const ratePlanId = `p_${bookingData.RATE_PLAN_ID}`;\r\n    const data = {\r\n      adultCount: bookingData.ADULTS_COUNT,\r\n      rate: bookingData.RATE,\r\n      rateType: bookingData.RATE_TYPE,\r\n      ratePlanId: bookingData.RATE_PLAN_ID,\r\n      roomCategoryId: category ? category.id : '',\r\n      roomCategoryName: category ? category.name : '',\r\n      totalRooms: 1,\r\n      ratePlanName: bookingData.RATE_PLAN,\r\n      roomId: bookingData.PR_ID,\r\n      guestName: bookingData.NAME,\r\n      cancelation: bookingData.cancelation,\r\n      guarantee: bookingData.guarantee,\r\n      adult_child_offering: bookingData.adult_child_offering,\r\n    };\r\n    selectedUnits.set(room_id, new Map().set(ratePlanId, data));\r\n  }\r\n}\r\n",":host {\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 99;\r\n  /* min-width: 450px; */\r\n}\r\n\r\n.card-title {\r\n  border-bottom: 1px solid #e4e5ec;\r\n  width: 100%;\r\n}\r\n.card-header-container {\r\n  border-bottom: 1px solid #e4e5ec;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  padding: 1rem 0;\r\n  justify-content: space-between;\r\n}\r\n.card-header-container h3 {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.scrollContent {\r\n  height: calc(100% - 79px);\r\n  overflow: auto;\r\n  position: relative;\r\n}\r\n\r\n.background-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.formContainer {\r\n  height: calc(100% - 79px);\r\n  overflow: auto;\r\n}\r\n.gap-30 {\r\n  gap: 30px;\r\n}\r\n.block-date {\r\n  width: 100%;\r\n}\r\n.sideWindow {\r\n  /* display: grid; */\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100%;\r\n  background-color: #ffffff;\r\n  width: 100vw;\r\n  overflow-y: auto;\r\n  padding-bottom: 85px !important;\r\n}\r\n.card {\r\n  top: 0;\r\n  z-index: 1000;\r\n}\r\n\r\n.close {\r\n  float: right;\r\n  font-size: 1.5rem;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  color: #000;\r\n  text-shadow: 0 1px 0 #fff;\r\n  opacity: 0.5;\r\n\r\n  padding: 0;\r\n  background-color: transparent;\r\n  border: 0;\r\n  appearance: none;\r\n}\r\n\r\n.close-icon {\r\n  position: absolute;\r\n  top: 18px;\r\n  right: 33px;\r\n  outline: none;\r\n}\r\n\r\nbutton:not(:disabled),\r\n[type='button']:not(:disabled) {\r\n  cursor: pointer;\r\n}\r\n\r\n/* .row {\r\n  padding: 0 0 0 15px;\r\n  margin: 0;\r\n} */\r\n@media only screen and (min-width: 1200px) {\r\n  .sideWindow {\r\n    max-width: 70%;\r\n  }\r\n}\r\n@media only screen and (min-width: 2000px) {\r\n  .sideWindow {\r\n    max-width: 40%;\r\n  }\r\n}\r\n@media only screen and (min-width: 768px) and (max-width: 1200px) {\r\n  .sideWindow {\r\n    max-width: 90%;\r\n  }\r\n}\r\n@media only screen and (min-width: 600px) and (max-width: 768px) {\r\n  .sideWindow {\r\n    max-width: 75%;\r\n  }\r\n}\r\n@media only screen and (min-width: 641px) {\r\n  .block-date {\r\n    max-width: 450px;\r\n    padding-bottom: 0 !important;\r\n  }\r\n}\r\n","import { Component, Event, EventEmitter, Host, Prop, State, h, Listen, Fragment } from '@stencil/core';\r\nimport { BookingService } from '@/services/booking.service';\r\nimport { dateToFormattedString, getReleaseHoursString } from '@/utils/utils';\r\nimport { ICountry, IEntries, RoomBlockDetails } from '@/models/IBooking';\r\nimport { IPageTwoDataUpdateProps } from '@/models/models';\r\nimport { IglBookPropertyService } from './igl-book-property.service';\r\nimport { IglBookPropertyPayloadEditBooking, TAdultChildConstraints, TEventType, TPropertyButtonsTypes, TSourceOption, TSourceOptions } from '@/models/igl-book-property';\r\nimport locales from '@/stores/locales.store';\r\nimport { IToast } from '@/components/ui/ir-toast/toast';\r\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\r\nimport { ICurrency } from '@/models/calendarData';\r\nimport booking_store, { calculateTotalRooms, modifyBookingStore, reserveRooms, resetBookingStore } from '@/stores/booking.store';\r\nimport moment from 'moment';\r\nexport type IHistoryEntry = {\r\n  dates: { checkIn: Date; checkOut: Date };\r\n  adults: number;\r\n  children: number;\r\n};\r\n@Component({\r\n  tag: 'igl-book-property',\r\n  styleUrls: ['igl-book-property.css'],\r\n  scoped: true,\r\n})\r\nexport class IglBookProperty {\r\n  @Prop() propertyid: number;\r\n  @Prop() allowedBookingSources: any;\r\n  @Prop() language: string;\r\n  @Prop() countries: ICountry[];\r\n  @Prop() showPaymentDetails: boolean = false;\r\n  @Prop() currency: ICurrency;\r\n  @Prop({ reflect: true, mutable: true }) bookingData: { [key: string]: any };\r\n  @Prop() adultChildConstraints: TAdultChildConstraints;\r\n\r\n  @State() adultChildCount: { adult: number; child: number } = { adult: 0, child: 0 };\r\n  @State() renderAgain: boolean = false;\r\n  @State() dateRangeData: { [key: string]: any };\r\n  @State() defaultData: any;\r\n  @State() isLoading: string;\r\n  @State() bookingHistory: Array<{\r\n    dates: { checkIn: Date; checkOut: Date };\r\n    adults: number;\r\n    children: number;\r\n  }> = [];\r\n\r\n  @Event() closeBookingWindow: EventEmitter<{ [key: string]: any }>;\r\n  @Event() blockedCreated: EventEmitter<RoomBlockDetails>;\r\n  @Event() resetBookingEvt: EventEmitter<null>;\r\n  @Event({ bubbles: true, composed: true }) animateIrButton: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) animateIrSelect: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) toast: EventEmitter<IToast>;\r\n\r\n  private initialRoomIds: { roomName: string; ratePlanId: number; roomId: string; roomTypeId: string } | null = null;\r\n  private sourceOption: TSourceOption;\r\n  private page: string;\r\n  private showSplitBookingOption: boolean = false;\r\n  private sourceOptions: TSourceOptions[] = [];\r\n  private guestData: { [key: string]: any }[] = [];\r\n  private bookedByInfoData: { [key: string]: any } = {};\r\n  private blockDatesData: { [key: string]: any } = {};\r\n  private ratePricingMode: IEntries[] = [];\r\n  private selectedUnits: Map<string, Map<string, any>> = new Map();\r\n  private bedPreferenceType: IEntries[] = [];\r\n  private bookingService: BookingService = new BookingService();\r\n  private bookPropertyService = new IglBookPropertyService();\r\n  private defaultDateRange: { from_date: string; to_date: string };\r\n  private updatedBooking: boolean = false;\r\n  private MAX_HISTORY_LENGTH: number = 2;\r\n  private didReservation: boolean;\r\n  private wasBlockedUnit: boolean;\r\n\r\n  async componentWillLoad() {\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.initializeDefaultDateRange();\r\n\r\n    if (!this.bookingData.defaultDateRange) {\r\n      return;\r\n    }\r\n    // console.log(this.bookingData);\r\n    this.initializeDefaultData();\r\n    this.wasBlockedUnit = this.defaultData.hasOwnProperty('block_exposed_unit_props');\r\n    modifyBookingStore('event_type', { type: this.defaultData.event_type });\r\n    await this.fetchSetupEntriesAndInitialize();\r\n    this.initializeEventData();\r\n  }\r\n\r\n  componentDidLoad() {\r\n    document.addEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    document.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  @Listen('inputCleared')\r\n  clearBooking(e: CustomEvent) {\r\n    if (this.isEventType('SPLIT_BOOKING')) {\r\n      e.stopImmediatePropagation();\r\n      e.stopPropagation();\r\n      this.bookedByInfoData = {};\r\n      this.bookPropertyService.resetRoomsInfoAndMessage(this);\r\n      this.renderPage();\r\n    }\r\n  }\r\n\r\n  @Listen('spiltBookingSelected')\r\n  async handleSpiltBookingSelected(e: CustomEvent<{ key: string; data: unknown }>) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    const { key, data } = e.detail;\r\n    if (key === 'select' || (key === 'blur' && data !== '')) {\r\n      const res = await this.bookingService.getExposedBooking((data as any).booking_nbr || (data as string), this.language);\r\n      this.defaultData = { ...this.defaultData, booking: res };\r\n      this.bookPropertyService.setBookingInfoFromAutoComplete(this, res);\r\n      this.sourceOption = res.source;\r\n      this.renderPage();\r\n    }\r\n  }\r\n\r\n  // @Listen('adultChild')\r\n  // handleAdultChildChange(event: CustomEvent) {\r\n  //   if (this.isEventType('ADD_ROOM') || this.isEventType('SPLIT_BOOKING')) {\r\n  //     this.bookPropertyService.resetRoomsInfoAndMessage(this);\r\n  //   }\r\n  //   const { adult, child } = event.detail;\r\n  //   this.adultChildCount = { ...event.detail };\r\n  //   this.updateBookingHistory({ adults: adult, children: child });\r\n  // }\r\n  @Listen('adultChild')\r\n  handleAdultChildChange(event: CustomEvent) {\r\n    if (this.isEventType('ADD_ROOM') || this.isEventType('SPLIT_BOOKING')) {\r\n      this.bookPropertyService.resetRoomsInfoAndMessage(this);\r\n    }\r\n    const { adult, child } = event.detail;\r\n    this.adultChildCount = { ...event.detail };\r\n\r\n    // Update the booking history\r\n    this.updateBookingHistory({ adults: Number(adult), children: Number(child) });\r\n  }\r\n\r\n  @Listen('dateSelectEvent')\r\n  onDateRangeSelect(event: CustomEvent<{ [key: string]: any }>) {\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n    const opt: { [key: string]: any } = event.detail;\r\n    this.updateBookingHistory({\r\n      dates: {\r\n        checkIn: new Date(this.dateRangeData.fromDate),\r\n        checkOut: new Date(new Date(opt.data.toDate)),\r\n      },\r\n    });\r\n    console.log('date changed', opt);\r\n    if (opt.key === 'selectedDateRange') {\r\n      this.dateRangeData = opt.data;\r\n      if (this.isEventType('ADD_ROOM') || this.isEventType('SPLIT_BOOKING')) {\r\n        this.defaultData.roomsInfo = [];\r\n      } else if (this.adultChildCount.adult !== 0) {\r\n        this.checkBookingAvailability();\r\n        // this.checkBookingAvailability(dateToFormattedString(new Date(this.dateRangeData.fromDate)), dateToFormattedString(new Date(this.dateRangeData.toDate)));\r\n      }\r\n    }\r\n  }\r\n  @Listen('sourceDropDownChange')\r\n  handleSourceDropDown(event: CustomEvent) {\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n    const value = event.detail;\r\n    const selectedSource = this.sourceOptions.find(opt => opt.id === value.toString());\r\n    this.sourceOption = {\r\n      code: value,\r\n      description: selectedSource.value || '',\r\n      tag: selectedSource.tag,\r\n      id: selectedSource.id,\r\n      type: selectedSource.type,\r\n    };\r\n  }\r\n\r\n  @Listen('gotoSplitPageTwoEvent', { target: 'window' })\r\n  gotoSplitPageTwo() {\r\n    this.gotoPage('page_two');\r\n  }\r\n\r\n  @Listen('buttonClicked')\r\n  handleButtonClicked(event: CustomEvent<{ key: TPropertyButtonsTypes; data?: CustomEvent }>) {\r\n    switch (event.detail.key) {\r\n      case 'save':\r\n        this.bookUser(false);\r\n        break;\r\n      case 'cancel':\r\n        event.stopImmediatePropagation();\r\n        event.stopPropagation();\r\n        this.closeWindow();\r\n        break;\r\n      case 'back':\r\n        event.stopImmediatePropagation();\r\n        event.stopPropagation();\r\n        this.gotoPage('page_one');\r\n        break;\r\n      case 'book':\r\n        this.bookUser(false);\r\n        break;\r\n      case 'bookAndCheckIn':\r\n        this.bookUser(true);\r\n        break;\r\n      case 'next':\r\n        event.stopImmediatePropagation();\r\n        event.stopPropagation();\r\n        if (!this.adultChildCount?.adult) {\r\n          this.animateIrSelect.emit('adult_child_select');\r\n          break;\r\n        }\r\n        if (calculateTotalRooms() > 0) {\r\n          this.gotoPage('page_two');\r\n          break;\r\n        } else if (this.defaultData?.roomsInfo.length === 0) {\r\n          this.animateIrButton.emit('check_availability');\r\n          break;\r\n        }\r\n        this.toast.emit({\r\n          type: 'error',\r\n          description: locales.entries.Lcz_SelectRatePlan,\r\n          title: locales.entries.Lcz_SelectRatePlan,\r\n        });\r\n        break;\r\n      case 'check':\r\n        this.checkBookingAvailability();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  private updateBookingHistory(partialData: Partial<IHistoryEntry>) {\r\n    const lastEntry = this.bookingHistory[this.bookingHistory.length - 1];\r\n\r\n    const newEntry: IHistoryEntry = {\r\n      dates: {\r\n        checkIn: partialData.dates?.checkIn || lastEntry?.dates?.checkIn || new Date(this.dateRangeData.fromDate),\r\n        checkOut: partialData.dates?.checkOut || lastEntry?.dates?.checkOut || new Date(this.dateRangeData.toDate),\r\n      },\r\n      adults: partialData.adults ?? lastEntry?.adults ?? this.adultChildCount.adult,\r\n      children: partialData.children ?? lastEntry?.children ?? this.adultChildCount.child,\r\n    };\r\n\r\n    // Update the booking history\r\n    this.bookingHistory.push(newEntry);\r\n    if (this.bookingHistory.length > this.MAX_HISTORY_LENGTH) {\r\n      this.bookingHistory.shift();\r\n    }\r\n  }\r\n\r\n  private handleKeyDown(e: KeyboardEvent) {\r\n    if (e.key === 'Escape') {\r\n      this.closeWindow();\r\n    }\r\n  }\r\n\r\n  private initializeDefaultDateRange() {\r\n    this.defaultDateRange = {\r\n      from_date: this.bookingData.FROM_DATE,\r\n      to_date: this.bookingData.TO_DATE,\r\n    };\r\n  }\r\n\r\n  private initializeDefaultData() {\r\n    this.defaultData = this.bookingData;\r\n    this.dateRangeData = { ...this.defaultData.defaultDateRange };\r\n  }\r\n\r\n  private async fetchSetupEntriesAndInitialize() {\r\n    try {\r\n      const setupEntries = await this.fetchSetupEntries();\r\n      this.setSourceOptions(this.allowedBookingSources);\r\n      this.setOtherProperties(setupEntries);\r\n    } catch (error) {\r\n      console.error('Error fetching setup entries:', error);\r\n    }\r\n  }\r\n\r\n  private initializeEventData() {\r\n    if (this.isEventType('EDIT_BOOKING')) {\r\n      this.initializeEditBookingData();\r\n    }\r\n\r\n    if (!this.isEventType('BAR_BOOKING')) {\r\n      this.bookPropertyService.resetRoomsInfoAndMessage(this);\r\n    }\r\n\r\n    this.initializePage();\r\n  }\r\n\r\n  private initializeEditBookingData() {\r\n    this.adultChildCount = {\r\n      adult: this.defaultData.ADULTS_COUNT,\r\n      child: this.defaultData.CHILDREN_COUNT,\r\n    };\r\n\r\n    this.initialRoomIds = {\r\n      roomName: this.defaultData.roomName,\r\n      ratePlanId: this.defaultData.RATE_PLAN_ID,\r\n      roomId: this.defaultData.PR_ID,\r\n      roomTypeId: this.defaultData.RATE_TYPE,\r\n    };\r\n    const { currentRoomType, GUEST } = this.defaultData as IglBookPropertyPayloadEditBooking;\r\n    console.log(GUEST);\r\n    modifyBookingStore('guest', {\r\n      bed_preference: currentRoomType.bed_preference?.toString(),\r\n      infant_nbr: currentRoomType.occupancy.infant_nbr,\r\n      first_name: GUEST.first_name ?? '',\r\n      last_name: GUEST.last_name ?? '',\r\n      // name: currentRoomType.guest.last_name ? currentRoomType.guest.first_name + ' ' + currentRoomType.guest.last_name : currentRoomType.guest.first_name,\r\n      unit: (currentRoomType.unit as any)?.id?.toString(),\r\n    });\r\n    this.checkBookingAvailability();\r\n    this.bookPropertyService.setEditingRoomInfo(this.defaultData, this.selectedUnits);\r\n  }\r\n\r\n  private initializePage() {\r\n    switch (this.defaultData.event_type) {\r\n      case 'SPLIT_BOOKING':\r\n        this.showSplitBookingOption = true;\r\n        this.page = 'page_one';\r\n        break;\r\n      case 'BLOCK_DATES':\r\n        this.page = 'page_block_date';\r\n        break;\r\n      default:\r\n        this.page = 'page_one';\r\n        break;\r\n    }\r\n  }\r\n\r\n  async fetchSetupEntries() {\r\n    return await this.bookingService.fetchSetupEntries();\r\n  }\r\n\r\n  private isGuestDataIncomplete() {\r\n    for (const roomtypeId in booking_store.ratePlanSelections) {\r\n      const roomtype = booking_store.ratePlanSelections[roomtypeId];\r\n      for (const rateplanId in roomtype) {\r\n        const rateplan = roomtype[rateplanId];\r\n        if (rateplan.reserved > 0) {\r\n          for (const guest of rateplan.guest) {\r\n            if (guest.first_name === '' || guest.last_name === '') {\r\n              return true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private isButtonDisabled() {\r\n    const isValidProperty = (property, key, comparedBy) => {\r\n      if (!property) {\r\n        return true;\r\n      }\r\n      if (property === this.guestData) {\r\n        return this.isGuestDataIncomplete();\r\n      }\r\n      if (key === 'selectedArrivalTime') {\r\n        if (property[key] !== undefined) {\r\n          return property[key].code === '';\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n      return property[key] === comparedBy || property[key] === undefined;\r\n    };\r\n    return (\r\n      isValidProperty(this.guestData, 'guestName', '') ||\r\n      isValidProperty(this.bookedByInfoData, 'firstName', '') ||\r\n      isValidProperty(this.bookedByInfoData, 'lastName', '') ||\r\n      isValidProperty(this.bookedByInfoData, 'selectedArrivalTime', '')\r\n    );\r\n  }\r\n\r\n  private setSourceOptions(bookingSource: any[]) {\r\n    this.sourceOptions = bookingSource.map(source => ({\r\n      id: source.id,\r\n      value: source.description,\r\n      tag: source.tag,\r\n      type: source.type,\r\n    }));\r\n    if (this.isEventType('EDIT_BOOKING')) {\r\n      this.sourceOption = { ...this.defaultData.SOURCE };\r\n    } else {\r\n      this.sourceOption = {\r\n        code: bookingSource[0].code,\r\n        description: bookingSource[0].description,\r\n        tag: bookingSource[0].tag,\r\n        type: bookingSource[0].type,\r\n        id: bookingSource[0].id,\r\n      };\r\n    }\r\n  }\r\n\r\n  private setOtherProperties(res: any) {\r\n    this.ratePricingMode = res?.ratePricingMode;\r\n    this.bookedByInfoData.arrivalTime = res.arrivalTime;\r\n    this.bedPreferenceType = res.bedPreferenceType;\r\n  }\r\n\r\n  private async checkBookingAvailability() {\r\n    resetBookingStore();\r\n    const from_date = moment(this.dateRangeData.fromDate).format('YYYY-MM-DD');\r\n    const to_date = moment(this.dateRangeData.toDate).format('YYYY-MM-DD');\r\n    const is_in_agent_mode = this.sourceOption['type'] === 'TRAVEL_AGENCY';\r\n    try {\r\n      const room_type_ids_to_update = this.isEventType('EDIT_BOOKING') ? [this.defaultData.RATE_TYPE] : [];\r\n      const room_type_ids = this.isEventType('BAR_BOOKING') ? this.defaultData.roomsInfo.map(room => room.id) : [];\r\n      const data = await this.bookingService.getBookingAvailability({\r\n        from_date,\r\n        to_date,\r\n        propertyid: this.propertyid,\r\n        adultChildCount: this.adultChildCount,\r\n        language: this.language,\r\n        room_type_ids,\r\n        currency: this.currency,\r\n        agent_id: is_in_agent_mode ? this.sourceOption['tag'] : null,\r\n        is_in_agent_mode,\r\n        room_type_ids_to_update,\r\n      });\r\n      if (!this.isEventType('EDIT_BOOKING')) {\r\n        this.defaultData.defaultDateRange.fromDate = new Date(this.dateRangeData.fromDate);\r\n        this.defaultData.defaultDateRange.toDate = new Date(this.dateRangeData.toDate);\r\n      }\r\n      this.defaultData = { ...this.defaultData, roomsInfo: data };\r\n      if (this.isEventType('EDIT_BOOKING') && !this.updatedBooking) {\r\n        this.updateBooking();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing booking availability:', error);\r\n    }\r\n  }\r\n\r\n  private updateBooking() {\r\n    try {\r\n      const { currentRoomType, GUEST } = this.defaultData as IglBookPropertyPayloadEditBooking;\r\n      const roomtypeId = currentRoomType.roomtype.id;\r\n      const rateplanId = currentRoomType.rateplan.id;\r\n      console.log({ GUEST });\r\n      const guest = {\r\n        bed_preference: currentRoomType.bed_preference?.toString(),\r\n        infant_nbr: currentRoomType.occupancy.infant_nbr,\r\n        last_name: GUEST.last_name,\r\n        first_name: GUEST.first_name,\r\n        unit: (currentRoomType.unit as any)?.id?.toString(),\r\n        roomtype_id: currentRoomType.roomtype.id,\r\n      };\r\n      modifyBookingStore('guest', guest);\r\n      reserveRooms({\r\n        roomTypeId: roomtypeId,\r\n        ratePlanId: rateplanId,\r\n        rooms: 1,\r\n        guest: [guest],\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private async checkAndBlockDate() {\r\n    try {\r\n      const { block_exposed_unit_props } = this.defaultData;\r\n      await this.bookingService.getBookingAvailability({\r\n        from_date: block_exposed_unit_props.from_date,\r\n        to_date: block_exposed_unit_props.to_date,\r\n        propertyid: this.propertyid,\r\n        adultChildCount: {\r\n          adult: 2,\r\n          child: 0,\r\n        },\r\n        language: this.language,\r\n        room_type_ids: this.defaultData.roomsInfo.map(room => room.id),\r\n        currency: this.currency,\r\n      });\r\n      const isAvailable = booking_store.roomTypes.every(rt => rt.is_available_to_book);\r\n      if (isAvailable) {\r\n        await this.handleBlockDate(false);\r\n      } else {\r\n        console.log('Blocked date is unavailable. Continuing...');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking and blocking date:', error);\r\n    }\r\n  }\r\n  private async closeWindow() {\r\n    resetBookingStore();\r\n    this.closeBookingWindow.emit();\r\n\r\n    if (this.wasBlockedUnit && !this.didReservation) {\r\n      await this.checkAndBlockDate();\r\n    }\r\n    document.removeEventListener('keydown', this.handleKeyDown);\r\n  }\r\n\r\n  private isEventType(key: TEventType) {\r\n    return this.defaultData.event_type === key;\r\n  }\r\n\r\n  private handleBlockDateUpdate(event: CustomEvent<{ [key: string]: any }>) {\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n    const opt: { [key: string]: any } = event.detail;\r\n    this.blockDatesData = opt.data;\r\n  }\r\n\r\n  private handleGuestInfoUpdate(event: CustomEvent<{ [key: string]: any }>) {\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n    const opt = event.detail;\r\n    if (opt.guestRefKey) {\r\n      if (this.isEventType('BAR_BOOKING') || this.isEventType('SPLIT_BOOKING')) {\r\n        this.guestData[opt.guestRefKey] = {\r\n          ...opt.data,\r\n          roomId: this.defaultData.PR_ID,\r\n        };\r\n      } else this.guestData[opt.guestRefKey] = opt.data;\r\n    }\r\n  }\r\n\r\n  private handleBookedByInfoUpdate(event: CustomEvent<{ [key: string]: any }>) {\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n    const opt: { [key: string]: any } = event.detail;\r\n    this.bookedByInfoData = opt.value.data;\r\n  }\r\n\r\n  private renderPage() {\r\n    this.renderAgain = !this.renderAgain;\r\n  }\r\n\r\n  private gotoPage(gotoPage: string) {\r\n    this.page = gotoPage;\r\n    this.renderPage();\r\n  }\r\n\r\n  private getPageBlockDatesView() {\r\n    return (\r\n      <Fragment>\r\n        <igl-block-dates-view\r\n          fromDate={this.defaultData.FROM_DATE}\r\n          toDate={this.defaultData.TO_DATE}\r\n          entryDate={this.defaultData.ENTRY_DATE}\r\n          onDataUpdateEvent={event => this.handleBlockDateUpdate(event)}\r\n        ></igl-block-dates-view>\r\n        <div class=\"p-0 mb-1 mt-2 gap-30 d-flex align-items-center justify-content-between\">\r\n          <ir-button text={locales.entries.Lcz_Cancel} btn_color=\"secondary\" class=\"flex-fill\" onClick={() => this.closeWindow()}></ir-button>\r\n          <ir-button text={locales.entries.Lcz_Blockdates} isLoading={isRequestPending('/Block_Exposed_Unit')} class=\"flex-fill\" onClick={() => this.handleBlockDate()}></ir-button>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  private handlePageTwoDataUpdateEvent(event: CustomEvent<IPageTwoDataUpdateProps>) {\r\n    event.stopImmediatePropagation();\r\n    event.stopPropagation();\r\n    if (event.detail.key === 'propertyBookedBy') {\r\n      this.handleBookedByInfoUpdate(event);\r\n    } else {\r\n      this.handleGuestInfoUpdate(event);\r\n    }\r\n  }\r\n\r\n  private async handleBlockDate(auto_close = true) {\r\n    const props = this.wasBlockedUnit\r\n      ? this.defaultData.block_exposed_unit_props\r\n      : (() => {\r\n          const releaseData = getReleaseHoursString(+this.blockDatesData.RELEASE_AFTER_HOURS);\r\n          return {\r\n            from_date: dateToFormattedString(this.defaultData.defaultDateRange.fromDate),\r\n            to_date: dateToFormattedString(this.defaultData.defaultDateRange.toDate),\r\n            NOTES: this.blockDatesData.OPTIONAL_REASON || '',\r\n            pr_id: this.defaultData.PR_ID.toString(),\r\n            STAY_STATUS_CODE: this.blockDatesData.OUT_OF_SERVICE ? '004' : this.blockDatesData.RELEASE_AFTER_HOURS === 0 ? '002' : '003',\r\n            DESCRIPTION: this.blockDatesData.RELEASE_AFTER_HOURS || '',\r\n            ...releaseData,\r\n          };\r\n        })();\r\n    await this.bookingService.blockUnit(props);\r\n    // const blockedUnit = await transformNewBLockedRooms(result);\r\n    // this.blockedCreated.emit(blockedUnit);\r\n    if (auto_close) this.closeWindow();\r\n  }\r\n\r\n  private async bookUser(check_in: boolean) {\r\n    this.setLoadingState(check_in);\r\n\r\n    if (this.isEventType('EDIT_BOOKING') || this.isEventType('ADD_ROOM')) {\r\n      if (this.isGuestDataIncomplete()) {\r\n        this.isLoading = '';\r\n        return;\r\n      }\r\n    } else if (this.isButtonDisabled()) {\r\n      this.isLoading = '';\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (this.isEventType('EDIT_BOOKING') || this.isEventType('ADD_ROOM')) {\r\n        this.bookedByInfoData.message = this.defaultData.NOTES;\r\n      }\r\n      this.didReservation = true;\r\n      const serviceParams = await this.bookPropertyService.prepareBookUserServiceParams({\r\n        context: this,\r\n        sourceOption: this.sourceOption,\r\n        check_in,\r\n      });\r\n      await this.bookingService.doReservation(serviceParams);\r\n      this.resetBookingEvt.emit(null);\r\n    } catch (error) {\r\n      console.error('Error booking user:', error);\r\n    } finally {\r\n      // this.isLoading = null;\r\n      this.resetLoadingState();\r\n    }\r\n  }\r\n\r\n  private setLoadingState(assign_units: boolean) {\r\n    if (this.isEventType('EDIT_BOOKING') || this.isEventType('ADD_ROOM')) {\r\n      this.isLoading = 'save';\r\n    } else {\r\n      this.isLoading = assign_units ? 'bookAndCheckIn' : 'book';\r\n    }\r\n  }\r\n\r\n  private resetLoadingState() {\r\n    this.isLoading = '';\r\n    setTimeout(() => {\r\n      this.closeWindow();\r\n    }, 100);\r\n  }\r\n\r\n  private getCurrentPage(name: string) {\r\n    return this.page === name;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host data-testid=\"book_property_sheet\">\r\n        <div class=\"background-overlay\" onClick={() => this.closeWindow()}></div>\r\n        <div class={'sideWindow pb-5 pb-md-0 ' + (this.getCurrentPage('page_block_date') ? 'block-date' : '')}>\r\n          <div class=\"card position-sticky mb-0 shadow-none p-0 \">\r\n            <div class=\"card-header-container mb-2\">\r\n              <h3 class=\" text-left font-medium-2 px-2 px-md-3\">{this.getCurrentPage('page_block_date') ? this.defaultData.BLOCK_DATES_TITLE : this.defaultData.TITLE}</h3>\r\n              <ir-icon\r\n                class={'px-2'}\r\n                onIconClickHandler={() => {\r\n                  this.closeWindow();\r\n                }}\r\n              >\r\n                <svg slot=\"icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\" height={20} width={20}>\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z\"\r\n                  />\r\n                </svg>\r\n              </ir-icon>\r\n            </div>\r\n          </div>\r\n          <div class=\"px-2 px-md-3\">\r\n            {this.getCurrentPage('page_one') && (\r\n              <igl-booking-overview-page\r\n                initialRoomIds={this.initialRoomIds}\r\n                defaultDaterange={this.defaultDateRange}\r\n                class={'p-0 mb-1'}\r\n                eventType={this.defaultData.event_type}\r\n                selectedRooms={this.selectedUnits}\r\n                currency={this.currency}\r\n                showSplitBookingOption={this.showSplitBookingOption}\r\n                ratePricingMode={this.ratePricingMode}\r\n                dateRangeData={this.dateRangeData}\r\n                bookingData={this.defaultData}\r\n                adultChildCount={this.adultChildCount}\r\n                bookedByInfoData={this.bookedByInfoData}\r\n                adultChildConstraints={this.adultChildConstraints}\r\n                sourceOptions={this.sourceOptions}\r\n                propertyId={this.propertyid}\r\n              ></igl-booking-overview-page>\r\n            )}\r\n\r\n            {this.getCurrentPage('page_two') && (\r\n              <igl-booking-form\r\n                currency={this.currency}\r\n                propertyId={this.propertyid}\r\n                showPaymentDetails={this.showPaymentDetails}\r\n                selectedGuestData={this.guestData}\r\n                countries={this.countries}\r\n                isLoading={this.isLoading}\r\n                selectedRooms={this.selectedUnits}\r\n                bedPreferenceType={this.bedPreferenceType}\r\n                dateRangeData={this.dateRangeData}\r\n                bookingData={this.defaultData}\r\n                showSplitBookingOption={this.showSplitBookingOption}\r\n                language={this.language}\r\n                bookedByInfoData={this.bookedByInfoData}\r\n                defaultGuestData={this.defaultData}\r\n                isEditOrAddRoomEvent={this.isEventType('EDIT_BOOKING') || this.isEventType('ADD_ROOM')}\r\n                onDataUpdateEvent={event => this.handlePageTwoDataUpdateEvent(event)}\r\n              ></igl-booking-form>\r\n            )}\r\n            {this.getCurrentPage('page_block_date') ? this.getPageBlockDatesView() : null}\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n:host > * {\r\n  margin: auto;\r\n  padding: auto;\r\n}\r\n\r\n.gap-30 {\r\n  gap: 30px;\r\n}\r\n","import { Component, Event, EventEmitter, Fragment, Host, Prop, h } from '@stencil/core';\r\nimport { FooterButtonType, TPropertyButtonsTypes } from '../../../../models/igl-book-property';\r\nimport locales from '@/stores/locales.store';\r\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\r\nimport { TIcons } from '@/components/ui/ir-icons/icons';\r\n\r\n@Component({\r\n  tag: 'igl-book-property-footer',\r\n  styleUrl: 'igl-book-property-footer.css',\r\n  scoped: true,\r\n})\r\nexport class IglBookPropertyFooter {\r\n  @Prop() eventType: string;\r\n  @Prop() disabled: boolean = true;\r\n  @Event() buttonClicked: EventEmitter<{ key: TPropertyButtonsTypes }>;\r\n  private isEventType(event: string) {\r\n    return event === this.eventType;\r\n  }\r\n  editNext(label) {\r\n    if (this.isEventType('EDIT_BOOKING')) {\r\n      if (label === 'Cancel') {\r\n        return 'flex-fill';\r\n      } else {\r\n        return 'd-none d-md-block  flex-fill';\r\n      }\r\n    }\r\n    return 'flex-fill';\r\n  }\r\n\r\n  private renderButton(type: FooterButtonType, label: string, disabled = false, icon_name?: TIcons) {\r\n    return (\r\n      <div class={this.shouldRenderTwoButtons() ? ` ${this.editNext(label)}` : 'flex-fill'}>\r\n        {/* <button class={`btn btn-${type === 'cancel' ? 'secondary' : 'primary'} full-width`} onClick={() => this.buttonClicked.emit({ key: type })} disabled={disabled}>\r\n          {label}\r\n        </button> */}\r\n        <ir-button\r\n          btn_color={type === 'cancel' ? 'secondary' : 'primary'}\r\n          text={label}\r\n          btn_disabled={disabled}\r\n          onClickHandler={() => {\r\n            this.buttonClicked.emit({ key: type });\r\n          }}\r\n          icon_name={icon_name}\r\n          iconPosition=\"right\"\r\n          style={{ '--icon-size': '1rem' }}\r\n          icon_style={{ paddingBottom: '1.9px' }}\r\n        ></ir-button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private shouldRenderTwoButtons() {\r\n    return this.isEventType('PLUS_BOOKING') || this.isEventType('ADD_ROOM') || this.isEventType('EDIT_BOOKING');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"d-flex justify-content-between gap-30 align-items-center\">\r\n          {this.isEventType('EDIT_BOOKING') ? (\r\n            <Fragment>\r\n              {this.renderButton('cancel', locales.entries.Lcz_Cancel)}\r\n              {this.shouldRenderTwoButtons() && this.renderButton('next', `${locales.entries.Lcz_Next}`, isRequestPending('/Get_Exposed_Booking_Availability'), 'angles_right')}\r\n            </Fragment>\r\n          ) : (\r\n            <Fragment>\r\n              {this.renderButton('cancel', locales.entries.Lcz_Cancel)}\r\n              {this.shouldRenderTwoButtons() && this.renderButton('next', `${locales.entries.Lcz_Next}`, false, 'angles_right')}\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n\r\n.sourceContainer {\r\n  max-width: 350px;\r\n}\r\n.message-label {\r\n  font-size: 80%;\r\n}\r\n","import { Component, Host, Prop, h, Event, EventEmitter } from '@stencil/core';\r\nimport { TAdultChildConstraints, TPropertyButtonsTypes, TSourceOption, TSourceOptions } from '../../../../models/igl-book-property';\r\n\r\nimport moment from 'moment';\r\nimport locales from '@/stores/locales.store';\r\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\nimport { IToast } from '@/components/ui/ir-toast/toast';\r\nimport { modifyBookingStore } from '@/stores/booking.store';\r\n\r\n@Component({\r\n  tag: 'igl-book-property-header',\r\n  styleUrl: 'igl-book-property-header.css',\r\n  scoped: true,\r\n})\r\nexport class IglBookPropertyHeader {\r\n  @Prop() splitBookingId: any = '';\r\n  @Prop() bookingData: any = '';\r\n  @Prop() minDate: string;\r\n  @Prop() sourceOptions: TSourceOptions[] = [];\r\n  @Prop() message: string;\r\n  @Prop() bookingDataDefaultDateRange: { [key: string]: any };\r\n  @Prop() showSplitBookingOption: boolean = false;\r\n  @Prop() adultChildConstraints: TAdultChildConstraints;\r\n  @Prop() splitBookings: any[];\r\n  @Prop() adultChildCount: { adult: number; child: number };\r\n  @Prop() dateRangeData: any;\r\n  @Prop() bookedByInfoData: any;\r\n  @Prop() defaultDaterange: { from_date: string; to_date: string };\r\n  @Prop() propertyId: number;\r\n\r\n  @Event() splitBookingDropDownChange: EventEmitter<any>;\r\n  @Event() sourceDropDownChange: EventEmitter<string>;\r\n  @Event() adultChild: EventEmitter<any>;\r\n  @Event() checkClicked: EventEmitter<any>;\r\n  @Event() buttonClicked: EventEmitter<{ key: TPropertyButtonsTypes }>;\r\n  @Event() toast: EventEmitter<IToast>;\r\n  @Event() spiltBookingSelected: EventEmitter<{ key: string; data: unknown }>;\r\n\r\n  @Event({ bubbles: true, composed: true }) animateIrButton: EventEmitter<string>;\r\n  @Event({ bubbles: true, composed: true }) animateIrSelect: EventEmitter<string>;\r\n\r\n  private sourceOption: TSourceOption = {\r\n    code: '',\r\n    description: '',\r\n    tag: '',\r\n    id: '',\r\n    type: '',\r\n  };\r\n\r\n  getSplitBookingList() {\r\n    return (\r\n      <fieldset class=\"d-flex flex-column text-left mb-1  flex-lg-row align-items-lg-center\">\r\n        <label class=\"mr-lg-1\">{locales.entries.Lcz_Tobooking}# </label>\r\n        <div class=\"btn-group mt-1 mt-lg-0 sourceContainer\">\r\n          <ir-autocomplete\r\n            value={\r\n              Object.keys(this.bookedByInfoData).length > 1 ? `${this.bookedByInfoData.bookingNumber} ${this.bookedByInfoData.firstName} ${this.bookedByInfoData.lastName}` : ''\r\n            }\r\n            from_date={moment(this.bookingDataDefaultDateRange.fromDate).format('YYYY-MM-DD')}\r\n            to_date={moment(this.bookingDataDefaultDateRange.toDate).format('YYYY-MM-DD')}\r\n            propertyId={this.propertyId}\r\n            placeholder={locales.entries.Lcz_BookingNumber}\r\n            onComboboxValue={e => {\r\n              e.stopImmediatePropagation();\r\n              e.stopPropagation;\r\n              this.spiltBookingSelected.emit(e.detail);\r\n            }}\r\n            isSplitBooking\r\n          ></ir-autocomplete>\r\n        </div>\r\n      </fieldset>\r\n    );\r\n  }\r\n  getSourceNode() {\r\n    return (\r\n      <fieldset class=\"d-flex text-left  align-items-center\">\r\n        <label class=\"mr-1\">{locales.entries.Lcz_Source} </label>\r\n        <div class=\"btn-group mt-0 flex-fill sourceContainer\">\r\n          <select class=\"form-control input-sm\" id=\"xSmallSelect\" onChange={evt => this.sourceDropDownChange.emit((evt.target as HTMLSelectElement).value)}>\r\n            {this.sourceOptions.map(option => {\r\n              if (option.type === 'LABEL') {\r\n                return <optgroup label={option.value}></optgroup>;\r\n              }\r\n              return (\r\n                <option value={option.id} selected={this.sourceOption.code === option.id}>\r\n                  {option.value}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n      </fieldset>\r\n    );\r\n  }\r\n  handleAdultChildChange(key: string, value: string) {\r\n    //const value = (event.target as HTMLSelectElement).value;\r\n    let obj = {};\r\n    if (value === '') {\r\n      obj = {\r\n        ...this.adultChildCount,\r\n        [key]: 0,\r\n      };\r\n    } else {\r\n      obj = {\r\n        ...this.adultChildCount,\r\n        [key]: value,\r\n      };\r\n    }\r\n    modifyBookingStore('bookingAvailabilityParams', {\r\n      from_date: this.bookingDataDefaultDateRange.fromDate,\r\n      to_date: this.bookingDataDefaultDateRange.toDate,\r\n      adult_nbr: obj?.['adult'] ?? 0,\r\n      child_nbr: obj?.['child'] ?? 0,\r\n    });\r\n    this.adultChild.emit(obj);\r\n  }\r\n\r\n  getAdultChildConstraints() {\r\n    return (\r\n      <div class={'mt-1 mt-lg-0 d-flex flex-column text-left'}>\r\n        {/* <label class=\"mb-1 d-lg-none\">{locales.entries.Lcz_NumberOfGuests} </label> */}\r\n        <div class=\"form-group  my-lg-0 text-left d-flex align-items-center justify-content-between justify-content-sm-start\">\r\n          <fieldset>\r\n            <div class=\"btn-group ml-0\">\r\n              <ir-select\r\n                testId=\"adult_number\"\r\n                class={'m-0'}\r\n                selectedValue={this.adultChildCount?.adult?.toString()}\r\n                onSelectChange={e => this.handleAdultChildChange('adult', e.detail)}\r\n                select_id=\"adult_select\"\r\n                firstOption={locales.entries.Lcz_AdultsCaption}\r\n                LabelAvailable={false}\r\n                data={Array.from(Array(this.adultChildConstraints.adult_max_nbr), (_, i) => i + 1).map(option => ({\r\n                  text: option.toString(),\r\n                  value: option.toString(),\r\n                }))}\r\n              ></ir-select>\r\n            </div>\r\n          </fieldset>\r\n          {this.adultChildConstraints.child_max_nbr > 0 && (\r\n            <fieldset>\r\n              <div class=\"btn-group ml-1 p-0\">\r\n                {/* <select class=\"form-control input-sm\" id=\"xChildrenSmallSelect\" onChange={evt => this.handleAdultChildChange('child', evt)}>\r\n                  <option value={''}>{this.renderChildCaption()}</option>\r\n                  {Array.from(Array(this.adultChildConstraints.child_max_nbr), (_, i) => i + 1).map(option => (\r\n                    <option value={option}>{option}</option>\r\n                  ))}\r\n                </select> */}\r\n                <ir-select\r\n                  selectedValue={this.adultChildCount?.child?.toString()}\r\n                  testId=\"child_number\"\r\n                  onSelectChange={e => this.handleAdultChildChange('child', e.detail)}\r\n                  select_id=\"child_select\"\r\n                  firstOption={this.renderChildCaption()}\r\n                  LabelAvailable={false}\r\n                  data={Array.from(Array(this.adultChildConstraints.child_max_nbr), (_, i) => i + 1).map(option => ({\r\n                    text: option.toString(),\r\n                    value: option.toString(),\r\n                  }))}\r\n                ></ir-select>\r\n              </div>\r\n            </fieldset>\r\n          )}\r\n          <ir-button\r\n            btn_id=\"check_availability\"\r\n            isLoading={isRequestPending('/Check_Availability')}\r\n            icon=\"\"\r\n            size=\"sm\"\r\n            class=\"ml-2\"\r\n            text={locales.entries.Lcz_Check}\r\n            onClickHandler={() => this.handleButtonClicked()}\r\n          ></ir-button>\r\n          {/* <button class={'btn btn-primary btn-sm  ml-2'} onClick={() => this.handleButtonClicked()}>\r\n            {locales.entries.Lcz_Check}\r\n          </button> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  renderChildCaption() {\r\n    const maxAge = this.adultChildConstraints.child_max_age;\r\n    let years = locales.entries.Lcz_Years;\r\n\r\n    if (maxAge === 1) {\r\n      years = locales.entries.Lcz_Year;\r\n    }\r\n    return `${locales.entries.Lcz_ChildCaption} 0 - ${this.adultChildConstraints.child_max_age} ${years}`;\r\n  }\r\n  handleButtonClicked() {\r\n    if (this.isEventType('SPLIT_BOOKING') && Object.keys(this.bookedByInfoData).length <= 1) {\r\n      this.toast.emit({\r\n        type: 'error',\r\n        title: locales.entries.Lcz_ChooseBookingNumber,\r\n        description: '',\r\n        position: 'top-right',\r\n      });\r\n    } else if (this.isEventType('ADD_ROOM') || this.isEventType('SPLIT_BOOKING')) {\r\n      const initialToDate = moment(new Date(this.bookedByInfoData.to_date || this.defaultDaterange.to_date));\r\n      const initialFromDate = moment(new Date(this.bookedByInfoData.from_date || this.defaultDaterange.from_date));\r\n      const selectedFromDate = moment(new Date(this.dateRangeData.fromDate));\r\n      const selectedToDate = moment(new Date(this.dateRangeData.toDate));\r\n      if (selectedToDate.isBefore(initialFromDate) || selectedFromDate.isAfter(initialToDate)) {\r\n        this.toast.emit({\r\n          type: 'error',\r\n          title: `${locales.entries.Lcz_CheckInDateShouldBeMAx.replace(\r\n            '%1',\r\n            moment(new Date(this.bookedByInfoData.from_date || this.defaultDaterange.from_date)).format('ddd, DD MMM YYYY'),\r\n          ).replace('%2', moment(new Date(this.bookedByInfoData.to_date || this.defaultDaterange.to_date)).format('ddd, DD MMM YYYY'))}  `,\r\n          description: '',\r\n          position: 'top-right',\r\n        });\r\n        return;\r\n      } else if (this.adultChildCount.adult === 0) {\r\n        this.toast.emit({ type: 'error', title: locales.entries.Lcz_PlzSelectNumberOfGuests, description: '', position: 'top-right' });\r\n        this.animateIrSelect.emit('adult_child_select');\r\n      } else {\r\n        this.buttonClicked.emit({ key: 'check' });\r\n      }\r\n    } else if (this.minDate && new Date(this.dateRangeData.fromDate).getTime() > new Date(this.bookedByInfoData.to_date || this.defaultDaterange.to_date).getTime()) {\r\n      this.toast.emit({\r\n        type: 'error',\r\n        title: `${locales.entries.Lcz_CheckInDateShouldBeMAx.replace(\r\n          '%1',\r\n          moment(new Date(this.bookedByInfoData.from_date || this.defaultDaterange.from_date)).format('ddd, DD MMM YYYY'),\r\n        ).replace('%2', moment(new Date(this.bookedByInfoData.to_date || this.defaultDaterange.to_date)).format('ddd, DD MMM YYYY'))}  `,\r\n        description: '',\r\n        position: 'top-right',\r\n      });\r\n    } else if (this.adultChildCount.adult === 0) {\r\n      this.animateIrSelect.emit('adult_child_select');\r\n      this.toast.emit({ type: 'error', title: locales.entries.Lcz_PlzSelectNumberOfGuests, description: '', position: 'top-right' });\r\n    } else {\r\n      this.buttonClicked.emit({ key: 'check' });\r\n    }\r\n  }\r\n  isEventType(key: string) {\r\n    return this.bookingData.event_type === key;\r\n  }\r\n\r\n  render() {\r\n    const showSourceNode = this.showSplitBookingOption ? this.getSplitBookingList() : this.isEventType('EDIT_BOOKING') || this.isEventType('ADD_ROOM') ? false : true;\r\n    return (\r\n      <Host>\r\n        {this.isEventType('SPLIT_BOOKING') && this.getSplitBookingList()}\r\n        {showSourceNode && this.getSourceNode()}\r\n        <div class={`d-flex flex-column flex-lg-row align-items-lg-center ${showSourceNode ? 'mt-1' : ''}`}>\r\n          <fieldset class=\"mt-lg-0 mr-1 \">\r\n            <igl-date-range\r\n              data-testid=\"date_picker\"\r\n              variant=\"booking\"\r\n              dateLabel={locales.entries.Lcz_Dates}\r\n              minDate={this.isEventType('PLUS_BOOKING') ? moment().add(-1, 'months').startOf('month').format('YYYY-MM-DD') : this.minDate}\r\n              disabled={this.isEventType('BAR_BOOKING') || this.isEventType('SPLIT_BOOKING')}\r\n              defaultData={this.bookingDataDefaultDateRange}\r\n            ></igl-date-range>\r\n          </fieldset>\r\n          {!this.isEventType('EDIT_BOOKING') && this.getAdultChildConstraints()}\r\n        </div>\r\n        <p class=\"text-right mt-1 message-label\">{calendar_data.tax_statement}</p>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n\r\n.card-title {\r\n  border-bottom: 1px solid #e4e5ec;\r\n}\r\n\r\n.scrollContent {\r\n  height: calc(100% - 79px);\r\n  overflow: auto;\r\n  position: relative;\r\n}\r\n\r\n.background-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.formContainer {\r\n  height: calc(100% - 79px);\r\n  overflow: auto;\r\n}\r\n\r\n.sideWindow {\r\n  /* display: grid; */\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  height: 100%;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.close {\r\n  float: right;\r\n  font-size: 1.5rem;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  color: #000;\r\n  text-shadow: 0 1px 0 #fff;\r\n  opacity: 0.5;\r\n\r\n  padding: 0;\r\n  background-color: transparent;\r\n  border: 0;\r\n  appearance: none;\r\n}\r\n\r\n.close-icon {\r\n  position: absolute;\r\n  top: 18px;\r\n  right: 33px;\r\n  outline: none;\r\n}\r\n\r\nbutton:not(:disabled),\r\n[type='button']:not(:disabled) {\r\n  cursor: pointer;\r\n}\r\n\r\n.row {\r\n  padding: 0 0 0 15px;\r\n  margin: 0;\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter, Host, State } from '@stencil/core';\r\nimport { IPageTwoDataUpdateProps } from '@/models/models';\r\nimport { IglBookPropertyPayloadEditBooking, TPropertyButtonsTypes } from '../../../../models/igl-book-property';\r\nimport { formatAmount } from '@/utils/utils';\r\nimport locales from '@/stores/locales.store';\r\nimport { ICurrency } from '@/models/calendarData';\r\nimport booking_store, { IRatePlanSelection } from '@/stores/booking.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\nimport moment from 'moment';\r\nimport { ICountry } from '@/models/IBooking';\r\n@Component({\r\n  tag: 'igl-booking-form',\r\n  styleUrl: 'igl-booking-form.css',\r\n  scoped: true,\r\n})\r\nexport class IglBookingForm {\r\n  @Prop() showPaymentDetails: boolean;\r\n  @Prop() currency: ICurrency;\r\n  @Prop({ reflect: true }) isEditOrAddRoomEvent: boolean;\r\n  @Prop() dateRangeData: { [key: string]: any };\r\n  @Prop() bookingData: { [key: string]: any };\r\n  @Prop() showSplitBookingOption: boolean;\r\n  @Prop() language: string;\r\n  @Prop() bookedByInfoData: { [key: string]: any };\r\n  @Prop() propertyId: number;\r\n  @Prop() bedPreferenceType: any;\r\n  @Prop() selectedRooms: Map<string, Map<string, any>>;\r\n  @Prop({ reflect: true }) isLoading: string;\r\n  @Prop() countries: ICountry[];\r\n  @Prop() selectedGuestData;\r\n  @Prop() defaultGuestData: IglBookPropertyPayloadEditBooking;\r\n\r\n  @State() selectedBookedByData;\r\n  @State() guestData: any;\r\n  @State() selectedUnits: { [key: string]: any } = {};\r\n\r\n  @Event() dataUpdateEvent: EventEmitter<IPageTwoDataUpdateProps>;\r\n  @Event() buttonClicked: EventEmitter<{\r\n    key: TPropertyButtonsTypes;\r\n    data?: CustomEvent;\r\n  }>;\r\n\r\n  componentWillLoad() {\r\n    this.initializeGuestData();\r\n    this.selectedBookedByData = this.bookedByInfoData;\r\n  }\r\n\r\n  initializeGuestData() {\r\n    let total = 0;\r\n    const newSelectedUnits = { ...this.selectedUnits };\r\n    const getRate = (rate: number, totalNights: number, isRateModified: boolean, preference: number) => {\r\n      if (isRateModified && preference === 2) {\r\n        return rate * totalNights;\r\n      }\r\n      return rate;\r\n    };\r\n    this.selectedUnits = newSelectedUnits;\r\n    this.guestData = [];\r\n    this.selectedRooms.forEach((room, key) => {\r\n      room.forEach(rate_plan => {\r\n        newSelectedUnits[key] = rate_plan.selectedUnits;\r\n        total += rate_plan.totalRooms * getRate(rate_plan.rate, this.dateRangeData.dateDifference, rate_plan.isRateModified, rate_plan.rateType);\r\n        for (let i = 1; i <= rate_plan.totalRooms; i++) {\r\n          this.guestData.push({\r\n            guestName: '',\r\n            roomId: '',\r\n            preference: '',\r\n            ...rate_plan,\r\n          });\r\n        }\r\n      });\r\n    });\r\n    this.bookingData.TOTAL_PRICE = total;\r\n  }\r\n  handleOnApplicationInfoDataUpdateEvent(event: CustomEvent, index: number) {\r\n    const opt = event.detail;\r\n    const categoryIdKey = `c_${opt.data.roomCategoryId}`;\r\n    const updatedUnits = [...(this.selectedUnits[categoryIdKey] || [])];\r\n    updatedUnits[index] = opt.data.roomId;\r\n    this.selectedUnits = {\r\n      ...this.selectedUnits,\r\n      [categoryIdKey]: updatedUnits,\r\n    };\r\n    this.dataUpdateEvent.emit({\r\n      key: 'applicationInfoUpdateEvent',\r\n      value: event.detail,\r\n    });\r\n  }\r\n\r\n  handleEventData(event: any, key: string, index: number) {\r\n    if (key === 'application-info') {\r\n      this.handleOnApplicationInfoDataUpdateEvent(event, index);\r\n    } else {\r\n      this.selectedBookedByData = event.detail.data;\r\n      this.dataUpdateEvent.emit({\r\n        key: 'propertyBookedBy',\r\n        value: event.detail,\r\n      });\r\n    }\r\n  }\r\n  isGuestDataIncomplete() {\r\n    if (this.selectedGuestData.length !== this.guestData.length) {\r\n      return true;\r\n    }\r\n    for (const data of this.selectedGuestData) {\r\n      if (data.guestName === '' || data.preference === '' || data.roomId === '') {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  isButtonDisabled(key: string) {\r\n    const isValidProperty = (property, key, comparedBy) => {\r\n      if (!property) {\r\n        return true;\r\n      }\r\n      if (property === this.selectedGuestData) {\r\n        return this.isGuestDataIncomplete();\r\n      }\r\n      if (key === 'selectedArrivalTime') {\r\n        if (property[key] !== undefined) {\r\n          return property[key].code === '';\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n      return property[key] === comparedBy || property[key] === undefined;\r\n    };\r\n    return (\r\n      this.isLoading === key ||\r\n      isValidProperty(this.selectedGuestData, 'guestName', '') ||\r\n      isValidProperty(this.selectedBookedByData, 'isdCode', '') ||\r\n      isValidProperty(this.selectedBookedByData, 'contactNumber', '') ||\r\n      isValidProperty(this.selectedBookedByData, 'firstName', '') ||\r\n      isValidProperty(this.selectedBookedByData, 'lastName', '') ||\r\n      isValidProperty(this.selectedBookedByData, 'countryId', -1) ||\r\n      isValidProperty(this.selectedBookedByData, 'selectedArrivalTime', '') ||\r\n      isValidProperty(this.selectedBookedByData, 'email', '')\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const showBookAndCheckin = calendar_data.checkin_enabled && moment(new Date(this.dateRangeData?.fromDate)).isSame(new Date(), 'day');\r\n    return (\r\n      <Host>\r\n        <div class=\"d-flex flex-wrap\">\r\n          <ir-date-view\r\n            class=\"mr-1 flex-fill font-weight-bold font-medium-1\"\r\n            from_date={new Date(this.dateRangeData.fromDate)}\r\n            to_date={new Date(this.dateRangeData.toDate)}\r\n            dateOption=\"DD MMM YYYY\"\r\n          ></ir-date-view>\r\n          {this.guestData.length > 1 && (\r\n            <div class=\"mt-1 mt-md-0 text-right\">\r\n              {locales.entries.Lcz_TotalPrice} <span class=\"font-weight-bold font-medium-1\">{formatAmount(this.currency.symbol, this.bookingData.TOTAL_PRICE || '0')}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {Object.values(booking_store.ratePlanSelections).map(val =>\r\n          Object.values(val).map(ratePlan => {\r\n            const rp = ratePlan as IRatePlanSelection;\r\n            if (rp.reserved === 0) {\r\n              return null;\r\n            }\r\n\r\n            return [...new Array(rp.reserved)].map((_, i) => (\r\n              <igl-application-info\r\n                totalNights={Number(this.dateRangeData.dateDifference)}\r\n                bedPreferenceType={this.bedPreferenceType}\r\n                currency={this.currency}\r\n                guestInfo={rp.guest ? rp.guest[i] : null}\r\n                bookingType={this.bookingData.event_type}\r\n                rateplanSelection={rp}\r\n                key={`${rp.ratePlan.id}_${i}`}\r\n                roomIndex={i}\r\n                baseData={\r\n                  this.bookingData.event_type === 'EDIT_BOOKING'\r\n                    ? {\r\n                        roomtypeId: this.bookingData.currentRoomType.roomtype.id,\r\n                        unit: this.bookingData.currentRoomType.unit,\r\n                      }\r\n                    : undefined\r\n                }\r\n              ></igl-application-info>\r\n            ));\r\n          }),\r\n        )}\r\n\r\n        {this.isEditOrAddRoomEvent || this.showSplitBookingOption ? null : (\r\n          <igl-property-booked-by\r\n            propertyId={this.propertyId}\r\n            countries={this.countries}\r\n            language={this.language}\r\n            showPaymentDetails={this.showPaymentDetails}\r\n            defaultData={this.bookedByInfoData}\r\n            onDataUpdateEvent={event => {\r\n              this.handleEventData(event, 'propertyBookedBy', 0);\r\n            }}\r\n          ></igl-property-booked-by>\r\n        )}\r\n\r\n        {this.isEditOrAddRoomEvent ? (\r\n          <div class=\"d-flex p-0 mb-1 mt-2\">\r\n            <div class=\"flex-fill mr-2\">\r\n              <ir-button\r\n                icon=\"\"\r\n                text={locales.entries.Lcz_Back}\r\n                class=\"full-width\"\r\n                btn_color=\"secondary\"\r\n                btn_styles=\"justify-content-center\"\r\n                onClickHandler={() => this.buttonClicked.emit({ key: 'back' })}\r\n              ></ir-button>\r\n            </div>\r\n            <div class=\"flex-fill\">\r\n              <ir-button\r\n                isLoading={this.isLoading === 'save'}\r\n                onClickHandler={() => this.buttonClicked.emit({ key: 'save' })}\r\n                btn_styles=\"full-width align-items-center justify-content-center\"\r\n                text={locales.entries.Lcz_Save}\r\n              ></ir-button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div class=\"d-flex flex-column flex-md-row p-0 mb-1 mt-2 justify-content-md-between align-items-md-center\">\r\n            <div class=\"flex-fill mr-md-1\">\r\n              <ir-button\r\n                icon_name=\"angles_left\"\r\n                btn_color=\"secondary\"\r\n                btn_styles=\"full-width align-items-center justify-content-center\"\r\n                onClickHandler={() => this.buttonClicked.emit({ key: 'back' })}\r\n                text={locales.entries.Lcz_Back}\r\n                style={{ '--icon-size': '1rem' }}\r\n                icon_style={{ paddingBottom: '1.9px' }}\r\n              ></ir-button>\r\n            </div>\r\n            <div class={`mt-1 mt-md-0 flex-fill ${showBookAndCheckin ? 'mr-md-1' : ''}`}>\r\n              <ir-button\r\n                isLoading={this.isLoading === 'book'}\r\n                btn_styles=\"full-width align-items-center justify-content-center\"\r\n                onClickHandler={() => this.buttonClicked.emit({ key: 'book' })}\r\n                text={locales.entries.Lcz_Book}\r\n              ></ir-button>\r\n            </div>\r\n            {showBookAndCheckin && (\r\n              <div class=\"mt-1 mt-md-0 flex-fill\">\r\n                <ir-button\r\n                  isLoading={this.isLoading === 'bookAndCheckIn'}\r\n                  btn_styles=\"full-width align-items-center justify-content-center\"\r\n                  onClickHandler={() => this.buttonClicked.emit({ key: 'bookAndCheckIn' })}\r\n                  text={locales.entries.Lcz_BookAndChekcIn}\r\n                ></ir-button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n:host > * {\r\n  margin: 0;\r\n  padding: auto;\r\n}\r\n.scrollContent {\r\n  height: calc(100% - 79px);\r\n  overflow: auto;\r\n  position: relative;\r\n}\r\n.loading-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  background: white;\r\n  position: absolute;\r\n  inset: 0;\r\n  z-index: 100;\r\n}\r\n.loader {\r\n  width: 1.25rem;\r\n  height: 1.25rem;\r\n  border: 2.5px solid #3f3f3f;\r\n  border-bottom-color: transparent;\r\n  border-radius: 50%;\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  animation: rotation 1s linear infinite;\r\n}\r\n","import { Component, Event, EventEmitter, Fragment, Host, Prop, h } from '@stencil/core';\r\nimport { TAdultChildConstraints, TSourceOptions } from '../../../../models/igl-book-property';\r\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\r\nimport moment from 'moment';\r\nimport booking_store from '@/stores/booking.store';\r\n@Component({\r\n  tag: 'igl-booking-overview-page',\r\n  styleUrl: 'igl-booking-overview-page.css',\r\n  scoped: true,\r\n})\r\nexport class IglBookingOverviewPage {\r\n  @Prop() bookingData: any;\r\n  @Prop() propertyId: number;\r\n  @Prop() message: string;\r\n  @Prop() showSplitBookingOption: boolean;\r\n  @Prop() eventType: string;\r\n  @Prop() currency: any;\r\n  @Prop() adultChildConstraints: TAdultChildConstraints;\r\n  @Prop() ratePricingMode: any;\r\n  @Prop() dateRangeData: any;\r\n  @Prop() defaultDaterange: { from_date: string; to_date: string };\r\n  @Prop() selectedRooms: Map<string, Map<string, any>>;\r\n  @Prop() adultChildCount: { adult: number; child: number };\r\n  @Prop() sourceOptions: TSourceOptions[];\r\n  @Prop() bookedByInfoData: any;\r\n  @Prop() initialRoomIds: any;\r\n\r\n  @Event() roomsDataUpdate: EventEmitter;\r\n\r\n  getSplitBookings() {\r\n    return (this.bookingData.hasOwnProperty('splitBookingEvents') && this.bookingData.splitBookingEvents) || [];\r\n  }\r\n  isEventType(event: string) {\r\n    return event === this.eventType;\r\n  }\r\n  setMinDate() {\r\n    if (!this.isEventType('EDIT_BOOKING')) {\r\n      return;\r\n    }\r\n    const from_date = moment(this.bookingData.FROM_DATE, 'YYYY-MM-DD');\r\n    const today = moment();\r\n    if (from_date.isAfter(today)) {\r\n      return today.add(-2, 'weeks').format('YYYY-MM-DD');\r\n    }\r\n    return from_date.add(-2, 'weeks').format('YYYY-MM-DD');\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <igl-book-property-header\r\n          bookedByInfoData={this.bookedByInfoData}\r\n          defaultDaterange={this.defaultDaterange}\r\n          dateRangeData={this.dateRangeData}\r\n          minDate={this.setMinDate()}\r\n          // minDate={this.isEventType('ADD_ROOM') || this.isEventType('SPLIT_BOOKING') ? this.bookedByInfoData.from_date || this.bookingData.FROM_DATE : undefined}\r\n          adultChildCount={this.adultChildCount}\r\n          splitBookingId={this.showSplitBookingOption}\r\n          bookingData={this.bookingData}\r\n          sourceOptions={this.sourceOptions}\r\n          message={this.message}\r\n          bookingDataDefaultDateRange={this.bookingData.defaultDateRange}\r\n          showSplitBookingOption={this.showSplitBookingOption}\r\n          adultChildConstraints={this.adultChildConstraints}\r\n          splitBookings={this.getSplitBookings()}\r\n          propertyId={this.propertyId}\r\n        ></igl-book-property-header>\r\n        {/* {this.adultChildCount.adult === 0 && <p class={'col text-left'}>Please select the number of guests</p>} */}\r\n        <div class=\" text-left\">\r\n          {isRequestPending('/Check_Availability') && this.isEventType('EDIT_BOOKING') ? (\r\n            <div class=\"loading-container\">\r\n              <div class=\"loader\"></div>\r\n            </div>\r\n          ) : (\r\n            <Fragment>\r\n              {booking_store.roomTypes?.map(roomType => (\r\n                <igl-room-type\r\n                  initialRoomIds={this.initialRoomIds}\r\n                  isBookDisabled={Object.keys(this.bookedByInfoData).length <= 1}\r\n                  key={`room-type-${roomType.id}`}\r\n                  currency={this.currency}\r\n                  ratePricingMode={this.ratePricingMode}\r\n                  dateDifference={this.dateRangeData.dateDifference}\r\n                  bookingType={this.bookingData.event_type}\r\n                  roomType={roomType}\r\n                  class=\"mt-2 mb-1 p-0\"\r\n                  data-testid={`room_type_${roomType.id}`}\r\n                  id={roomType.id.toString()}\r\n                  roomInfoId={this.selectedRooms.has(`c_${roomType.id}`) ? roomType.id : null}\r\n                  onDataUpdateEvent={evt => this.roomsDataUpdate.emit(evt.detail)}\r\n                ></igl-room-type>\r\n              ))}\r\n            </Fragment>\r\n          )}\r\n        </div>\r\n\r\n        <igl-book-property-footer class={'p-0 mb-1 mt-3'} eventType={this.bookingData.event_type}></igl-book-property-footer>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n\r\n.row {\r\n  padding: 0 0 0 15px;\r\n  margin: 0;\r\n}\r\n\r\n.bookedByEmailContainer {\r\n  flex: auto;\r\n  max-width: 350px;\r\n}\r\n\r\n.bookedDetailsForm label {\r\n  min-width: 125px;\r\n  max-width: 125px;\r\n}\r\n.row.sc-igl-booking-form {\r\n  padding: 0 !important;\r\n}\r\n.bookedDetailsForm .form-group {\r\n  margin-bottom: 10px !important;\r\n}\r\n\r\n.bookedDetailsForm .checkBoxContainer input {\r\n  height: 1.2rem !important;\r\n  width: 30px;\r\n}\r\n/* .controlContainer1 .textarea-container {\r\n  border: 1px solid #ced4da; \r\n  border-radius: 0.25rem; \r\n  height: 60px; \r\n  width: 100%;\r\n} */\r\n.controlContainer textarea {\r\n  height: 60px !important;\r\n}\r\n.margin3 {\r\n  margin-bottom: 5px !important;\r\n}\r\n@media (min-width: 768px) {\r\n  .bookedByEmailContainer {\r\n    margin-left: 37px;\r\n  }\r\n}\r\n","import { Component, Host, h, Prop, Event, EventEmitter, State, Fragment, Listen } from '@stencil/core';\r\nimport { BookingService } from '@/services/booking.service';\r\nimport { IEntries, ICountry } from '@/models/IBooking';\r\nimport { v4 } from 'uuid';\r\nimport locales from '@/stores/locales.store';\r\nimport { TPropertyButtonsTypes } from '@/components';\r\nimport { z } from 'zod';\r\nimport { validateEmail } from '@/utils/utils';\r\nimport booking_store, { BookingStore, modifyBookingStore } from '@/stores/booking.store';\r\n\r\n@Component({\r\n  tag: 'igl-property-booked-by',\r\n  styleUrl: 'igl-property-booked-by.css',\r\n  scoped: true,\r\n})\r\nexport class IglPropertyBookedBy {\r\n  @Prop() language: string;\r\n  @Prop() showPaymentDetails: boolean = false;\r\n  @Prop() defaultData: { [key: string]: any };\r\n  @Event() dataUpdateEvent: EventEmitter<{ [key: string]: any }>;\r\n  @Prop() countries: ICountry[] = [];\r\n  @Prop() propertyId: number;\r\n  @State() isButtonPressed: boolean = false;\r\n  private bookingService: BookingService = new BookingService();\r\n  private arrivalTimeList: IEntries[] = [];\r\n  private expiryMonths: string[] = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\r\n  private expiryYears: string[] = [];\r\n  private currentMonth: string = '01';\r\n  private country;\r\n  @State() bookedByData: { [key: string]: any } = {\r\n    id: undefined,\r\n    email: '',\r\n    firstName: '',\r\n    lastName: '',\r\n    countryId: '',\r\n    isdCode: '',\r\n    contactNumber: '',\r\n    selectedArrivalTime: '',\r\n    emailGuest: false,\r\n    message: '',\r\n    cardNumber: '',\r\n    cardHolderName: '',\r\n    expiryMonth: '',\r\n    expiryYear: '',\r\n  };\r\n\r\n  async componentWillLoad() {\r\n    this.assignCountryCode();\r\n    this.initializeExpiryYears();\r\n    this.initializeDateData();\r\n    this.populateBookedByData();\r\n  }\r\n\r\n  private initializeExpiryYears() {\r\n    const currentYear = new Date().getFullYear();\r\n    this.expiryYears = Array.from({ length: 4 }, (_, index) => (currentYear + index).toString());\r\n  }\r\n  private async assignCountryCode() {\r\n    const country = await this.bookingService.getUserDefaultCountry();\r\n\r\n    const countryId = country['COUNTRY_ID'];\r\n    this.country = countryId;\r\n    this.bookedByData = { ...this.bookedByData, isdCode: countryId.toString(), countryId };\r\n  }\r\n  private initializeDateData() {\r\n    const dt = new Date();\r\n    const month = dt.getMonth() + 1;\r\n    this.currentMonth = month < 10 ? `0${month}` : month.toString();\r\n  }\r\n\r\n  private populateBookedByData() {\r\n    this.bookedByData = this.defaultData ? { ...this.bookedByData, ...this.defaultData } : {};\r\n    this.arrivalTimeList = this.defaultData?.arrivalTime || [];\r\n    this.bookedByData = { ...this.bookedByData, selectedArrivalTime: this.arrivalTimeList[0].CODE_NAME };\r\n    if (!this.bookedByData.expiryMonth) {\r\n      this.bookedByData.expiryMonth = this.currentMonth;\r\n    }\r\n    if (!this.bookedByData.expiryYear) {\r\n      this.bookedByData.expiryYear = new Date().getFullYear();\r\n    }\r\n    console.log('initial bookedby data', this.bookedByData);\r\n  }\r\n\r\n  private handleDataChange(key, event) {\r\n    this.bookedByData[key] = key === 'emailGuest' ? event.target.checked : event.target.value;\r\n    this.dataUpdateEvent.emit({\r\n      key: 'bookedByInfoUpdated',\r\n      data: { ...this.bookedByData },\r\n    });\r\n    if (key === 'countryId') {\r\n      this.bookedByData = {\r\n        ...this.bookedByData,\r\n        isdCode: event.target.value,\r\n      };\r\n    }\r\n    // console.log(this.bookedByData);\r\n  }\r\n  private handleCountryChange(value) {\r\n    this.bookedByData = {\r\n      ...this.bookedByData,\r\n      isdCode: value,\r\n      countryId: value,\r\n    };\r\n    this.dataUpdateEvent.emit({\r\n      key: 'bookedByInfoUpdated',\r\n      data: { ...this.bookedByData },\r\n    });\r\n    // console.log(this.bookedByData);\r\n  }\r\n\r\n  private handleNumberInput(key, event: InputEvent) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    const inputValue = inputElement.value;\r\n\r\n    // Regular expression to match only numeric characters (0-9)\r\n    const numericRegex = /^[0-9]+$/;\r\n\r\n    if (!numericRegex.test(inputValue)) {\r\n      // If the input is not numeric, prevent it from being entered\r\n      inputElement.value = inputValue.replace(/[^0-9]/g, '');\r\n    }\r\n    if (inputValue === inputElement.value) {\r\n      this.handleDataChange(key, event);\r\n    }\r\n  }\r\n\r\n  // async handleEmailInput(key, event: InputEvent) {\r\n  //   const inputElement = event.target as HTMLInputElement;\r\n  //   const inputValue = inputElement.value;\r\n  //   if (z.string().email().safeParse(inputValue).success) {\r\n  //     this.handleDataChange(key, event);\r\n  //   }\r\n  // }\r\n  async checkUser() {\r\n    try {\r\n      const email = this.bookedByData.email;\r\n      if (z.string().email().safeParse(email).success) {\r\n        const res = await this.bookingService.getUserInfo(email);\r\n        if (res !== null) {\r\n          this.bookedByData = {\r\n            ...this.bookedByData,\r\n            id: res.id,\r\n            firstName: res.first_name,\r\n            lastName: res.last_name,\r\n            contactNumber: res.mobile_without_prefix,\r\n            countryId: res.country_id,\r\n            isdCode: res?.country_phone_prefix ?? res.isdCode.toString(),\r\n          };\r\n          console.log(this.bookedByData);\r\n        } else {\r\n          let prevBookedByData = { ...this.bookedByData };\r\n          prevBookedByData = { ...prevBookedByData, email };\r\n          this.bookedByData = { ...prevBookedByData };\r\n        }\r\n      } else {\r\n        let prevBookedByData = { ...this.bookedByData };\r\n        prevBookedByData = { ...prevBookedByData, email: '' };\r\n        this.bookedByData = { ...prevBookedByData };\r\n      }\r\n      this.dataUpdateEvent.emit({\r\n        key: 'bookedByInfoUpdated',\r\n        data: { ...this.bookedByData },\r\n      });\r\n    } catch (error) {\r\n      //   toastr.error(error);\r\n    }\r\n  }\r\n  private updateGuest(props: Partial<BookingStore['checkout_guest']>) {\r\n    modifyBookingStore('checkout_guest', { ...(booking_store.checkout_guest ?? {}), ...props });\r\n  }\r\n  handleComboboxChange(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    const { key, data } = e.detail;\r\n    console.log(key, data);\r\n    if (key === 'blur') {\r\n      if (z.string().email().safeParse(data).success) {\r\n        this.bookedByData.email = data;\r\n        this.checkUser();\r\n      } else if (this.bookedByData.email !== '' && data == '') {\r\n        this.bookedByData.email = '';\r\n      }\r\n      this.dataUpdateEvent.emit({\r\n        key: 'bookedByInfoUpdated',\r\n        data: this.bookedByData,\r\n      });\r\n    }\r\n    if (key === 'select') {\r\n      this.bookedByData.email = data.email;\r\n      this.bookedByData = {\r\n        ...this.bookedByData,\r\n        id: data.id,\r\n        firstName: data.first_name,\r\n        lastName: data.last_name,\r\n        contactNumber: data.mobile_without_prefix,\r\n        countryId: data.country_id,\r\n        isdCode: data['country_phone_prefix'] ?? data?.country_id,\r\n      };\r\n      this.dataUpdateEvent.emit({\r\n        key: 'bookedByInfoUpdated',\r\n        data: this.bookedByData,\r\n      });\r\n    }\r\n\r\n    // console.log('data', data, 'key', key);\r\n    // switch (key) {\r\n    //   case 'blur':\r\n    //     if (data !== '') {\r\n    //       this.bookedByData.email = data;\r\n    //       this.checkUser();\r\n    //     } else {\r\n    //       let prevBookedByData = { ...this.bookedByData };\r\n    //       prevBookedByData = { ...prevBookedByData, email: '' };\r\n    //       this.bookedByData = { ...prevBookedByData };\r\n    //       this.dataUpdateEvent.emit({\r\n    //         key: 'bookedByInfoUpdated',\r\n    //         data: { ...this.bookedByData },\r\n    //       });\r\n    //     }\r\n\r\n    //     break;\r\n    //   case 'select':\r\n    //     this.bookedByData.email = data.email;\r\n    //     this.bookedByData = {\r\n    //       ...this.bookedByData,\r\n    //       id: data.id,\r\n    //       firstName: data.first_name,\r\n    //       lastName: data.last_name,\r\n    //       contactNumber: data.mobile,\r\n    //       countryId: data.country_id,\r\n    //       isdCode: data.country_id.toString(),\r\n    //     };\r\n    //     this.dataUpdateEvent.emit({\r\n    //       key: 'bookedByInfoUpdated',\r\n    //       data: this.bookedByData,\r\n    //     });\r\n    //     break;\r\n    //   default:\r\n    //     break;\r\n    // }\r\n  }\r\n  clearEvent() {\r\n    this.bookedByData = {\r\n      ...this.bookedByData,\r\n      id: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      contactNumber: '',\r\n      isdCode: this.country.toString(),\r\n      countryId: this.country,\r\n    };\r\n    this.dataUpdateEvent.emit({\r\n      key: 'bookedByInfoUpdated',\r\n      data: { ...this.bookedByData },\r\n    });\r\n  }\r\n  @Listen('buttonClicked', { target: 'body' })\r\n  handleButtonClicked(\r\n    event: CustomEvent<{\r\n      key: TPropertyButtonsTypes;\r\n      data?: CustomEvent;\r\n    }>,\r\n  ) {\r\n    switch (event.detail.key) {\r\n      case 'book':\r\n      case 'bookAndCheckIn':\r\n        this.isButtonPressed = true;\r\n        break;\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div class=\"text-left mt-3\">\r\n          <div class=\"form-group d-flex flex-column flex-md-row align-items-md-center text-left \">\r\n            <label class=\"p-0 m-0 label-control mr-1 font-weight-bold\">{locales.entries.Lcz_BookedBy}</label>\r\n            <div class=\"bookedByEmailContainer mt-1 mt-md-0 d-flex align-items-center\">\r\n              {/* <input\r\n                id={v4()}\r\n                type=\"email\"\r\n                class=\"form-control\"\r\n                placeholder=\"Email address\"\r\n                name=\"bookeyByEmail\"\r\n                value={this.bookedByData.email}\r\n                onInput={event => this.handleEmailInput('email', event)}\r\n                required\r\n                onBlur={() => this.checkUser()}\r\n              /> */}\r\n              <ir-autocomplete\r\n                testId={'main_guest_email'}\r\n                onComboboxValue={this.handleComboboxChange.bind(this)}\r\n                propertyId={this.propertyId}\r\n                type=\"text\"\r\n                value={this.bookedByData.email}\r\n                required\r\n                class={'flex-fill'}\r\n                placeholder={locales.entries.Lcz_FindEmailAddress}\r\n                onInputCleared={() => this.clearEvent()}\r\n                danger_border={this.isButtonPressed && this.bookedByData.email !== '' && validateEmail(this.bookedByData.email)}\r\n              ></ir-autocomplete>\r\n              <ir-tooltip class={'ml-1'} message=\"Leave empty if email is unavailable\"></ir-tooltip>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"bookedDetailsForm text-left mt-2 font-small-3 \">\r\n          <div class=\"d-flex flex-column flex-md-row  justify-content-md-between \">\r\n            <div class=\"p-0 flex-fill \">\r\n              <div class=\"form-group d-flex flex-column flex-md-row align-items-md-center p-0 flex-fill \">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_FirstName}</label>\r\n                <div class=\"p-0 m-0  controlContainer flex-fill  \">\r\n                  <input\r\n                    data-testid=\"main_guest_first_name\"\r\n                    class={`form-control flex-fill ${this.isButtonPressed && this.bookedByData.firstName === '' && 'border-danger'}`}\r\n                    type=\"text\"\r\n                    placeholder={locales.entries.Lcz_FirstName}\r\n                    id={v4()}\r\n                    value={this.bookedByData.firstName}\r\n                    onInput={event => {\r\n                      this.updateGuest({ first_name: (event.target as HTMLInputElement).value });\r\n                      this.handleDataChange('firstName', event);\r\n                    }}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_LastName}</label>\r\n                <div class=\"p-0 m-0  controlContainer flex-fill\">\r\n                  <input\r\n                    data-testid=\"main_guest_last_name\"\r\n                    class={`form-control ${this.isButtonPressed && this.bookedByData.lastName === '' && 'border-danger'}`}\r\n                    type=\"text\"\r\n                    placeholder={locales.entries.Lcz_LastName}\r\n                    id={v4()}\r\n                    value={this.bookedByData.lastName}\r\n                    onInput={event => this.handleDataChange('lastName', event)}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"form-group  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_Country}</label>\r\n                {/* <div class=\"p-0 m-0  controlContainer flex-fill\"> */}\r\n                <ir-country-picker\r\n                  testId=\"main_guest_country\"\r\n                  class=\"flex-grow-1 m-0\"\r\n                  onCountryChange={e => this.handleCountryChange(e.detail.id)}\r\n                  countries={this.countries}\r\n                  country={this.countries.find(c => c.id === this.bookedByData.countryId)}\r\n                ></ir-country-picker>\r\n                {/* <select class={`form-control input-sm pr-0`} id={v4()} onChange={event => this.handleDataChange('countryId', event)}>\r\n                    <option value=\"\" selected={this.bookedByData.countryId === ''}>\r\n                      {locales.entries.Lcz_Select}\r\n                    </option>\r\n                    {this.countries.map(countryNode => (\r\n                      <option value={countryNode.id} selected={this.bookedByData.countryId === countryNode.id}>\r\n                        {countryNode.name}\r\n                      </option>\r\n                    ))}\r\n                  </select> */}\r\n                {/* </div> */}\r\n              </div>\r\n\r\n              {/* <div class=\"form-group  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_MobilePhone}</label>\r\n                <div class=\"p-0 m-0  d-flex  controlContainer flex-fill\">\r\n                  <div class=\" p-0 m-0\">\r\n                    <select class={`form-control input-sm pr-0`} id={v4()} onChange={event => this.handleDataChange('isdCode', event)}>\r\n                      <option value=\"\" selected={this.bookedByData.isdCode === ''}>\r\n                        {locales.entries.Lcz_Isd}\r\n                      </option>\r\n                      {this.countries.map(country => (\r\n                        <option value={country.id} selected={this.bookedByData.isdCode === country.id.toString()}>\r\n                          {country.phone_prefix}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"flex-fill p-0 m-0\">\r\n                    <input\r\n                      class={`form-control\r\n                     \r\n                      `}\r\n                      type=\"tel\"\r\n                      placeholder={locales.entries.Lcz_ContactNumber}\r\n                      id={v4()}\r\n                      value={this.bookedByData.contactNumber}\r\n                      onInput={event => this.handleNumberInput('contactNumber', event)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div> */}\r\n              <div class=\"form-group p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_MobilePhone}</label>\r\n                <div class=\"p-0 m-0 controlContainer flex-fill\">\r\n                  <ir-phone-input\r\n                    testId=\"main_guest_phone\"\r\n                    language={this.language}\r\n                    // label={locales.entries.Lcz_MobilePhone}\r\n                    value={this.bookedByData.contactNumber}\r\n                    phone_prefix={this.bookedByData.isdCode}\r\n                    default_country={this.bookedByData.countryId}\r\n                    onTextChange={e => {\r\n                      this.handleDataChange('isdCode', { target: { value: e.detail.phone_prefix } });\r\n                      this.handleDataChange('contactNumber', { target: { value: e.detail.mobile } });\r\n                    }}\r\n                  ></ir-phone-input>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-group  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_YourArrivalTime}</label>\r\n                <div class=\"p-0 m-0  controlContainer flex-fill\">\r\n                  <select\r\n                    data-testid=\"arrival_time\"\r\n                    class={`form-control input-sm pr-0 ${this.isButtonPressed && this.bookedByData.selectedArrivalTime.code === '' && 'border-danger'}`}\r\n                    id={v4()}\r\n                    onChange={event => this.handleDataChange('selectedArrivalTime', event)}\r\n                  >\r\n                    {/* <option value=\"\" selected={this.bookedByData.selectedArrivalTime.code === ''}>\r\n                      -\r\n                    </option> */}\r\n                    {this.arrivalTimeList.map(time => (\r\n                      <option value={time.CODE_NAME} selected={this.bookedByData.selectedArrivalTime.code === time.CODE_NAME}>\r\n                        {time.CODE_VALUE_EN}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div class=\"p-0 flex-fill  ml-md-3\">\r\n              <div class=\"  p-0 d-flex flex-column flex-md-row align-items-md-center \">\r\n                <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_AnyMessageForUs}</label>\r\n                <div class=\"p-0 m-0  controlContainer flex-fill \">\r\n                  <textarea\r\n                    data-testid=\"note\"\r\n                    id={v4()}\r\n                    rows={4}\r\n                    class=\"form-control \"\r\n                    name=\"message\"\r\n                    value={this.bookedByData.message}\r\n                    onInput={event => this.handleDataChange('message', event)}\r\n                  ></textarea>\r\n                </div>\r\n              </div>\r\n              {this.showPaymentDetails && (\r\n                <Fragment>\r\n                  <div class=\"form-group mt-md-1  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                    <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_CardNumber}</label>\r\n                    <div class=\"p-0 m-0  controlContainer flex-fill\">\r\n                      <input\r\n                        class=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"\"\r\n                        pattern=\"0-9 \"\r\n                        id={v4()}\r\n                        value={this.bookedByData.cardNumber}\r\n                        onInput={event => this.handleNumberInput('cardNumber', event)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                    <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_CardHolderName}</label>\r\n                    <div class=\"p-0 m-0  controlContainer flex-fill\">\r\n                      <input\r\n                        class=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"\"\r\n                        pattern=\"0-9 \"\r\n                        id={v4()}\r\n                        value={this.bookedByData.cardHolderName}\r\n                        onInput={event => this.handleDataChange('cardHolderName', event)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group  p-0 d-flex flex-column flex-md-row align-items-md-center\">\r\n                    <label class=\"p-0 m-0 margin3\">{locales.entries.Lcz_ExpiryDate}</label>\r\n                    <div class=\"p-0 m-0 row  controlContainer flex-fill\">\r\n                      <div class=\"p-0 m-0\">\r\n                        <select class=\"form-control input-sm pr-0\" id={v4()} onChange={event => this.handleDataChange('expiryMonth', event)}>\r\n                          {this.expiryMonths.map(month => (\r\n                            <option value={month} selected={month === this.bookedByData.expiryMonth}>\r\n                              {month}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n                      <div class=\"p-0 m-0 ml-1\">\r\n                        <select class=\"form-control input-sm pr-0\" id={v4()} onChange={event => this.handleDataChange('expiryYear', event)}>\r\n                          {this.expiryYears.map((year, index) => (\r\n                            <option value={year} selected={index === this.bookedByData.expiryYear}>\r\n                              {year}\r\n                            </option>\r\n                          ))}\r\n                        </select>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Fragment>\r\n              )}\r\n              <div class=\"form-group mt-1 p-0 d-flex flex-row align-items-center\">\r\n                <label class=\"p-0 m-0\" htmlFor={'emailTheGuestId'}>\r\n                  {locales.entries.Lcz_EmailTheGuest}\r\n                </label>\r\n                <div class=\"p-0 m-0  controlContainer flex-fill checkBoxContainer\">\r\n                  <input\r\n                    class=\"form-control\"\r\n                    type=\"checkbox\"\r\n                    checked={this.bookedByData.emailGuest}\r\n                    id={'emailTheGuestId'}\r\n                    onChange={event => this.handleDataChange('emailGuest', event)}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n  margin-bottom: 0.5rem;\r\n}\r\n.currency {\r\n  display: block;\r\n  position: absolute;\r\n  margin: 0;\r\n  padding: 0;\r\n  height: auto;\r\n  left: 10px;\r\n}\r\n.rate-input {\r\n  font-size: 14px;\r\n  line-height: 0;\r\n  padding: 0;\r\n  height: 0;\r\n  border-left: 0;\r\n}\r\n.rate-input-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  box-sizing: border-box;\r\n  flex: 1;\r\n}\r\n.new-currency {\r\n  color: #3b4781;\r\n  border: 1px solid #cacfe7;\r\n  font-size: 0.975rem;\r\n  height: 2rem;\r\n  background: white;\r\n  border-right: 0;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\r\n}\r\n.input-group-prepend span[data-state='focus'] {\r\n  border-color: var(--blue);\r\n}\r\n.input-group-prepend span[data-disabled] {\r\n  background-color: #eceff1;\r\n  border-color: rgba(118, 118, 118, 0.3);\r\n}\r\n.non-ref-span {\r\n  font-size: 12px;\r\n  color: var(--green);\r\n}\r\n.rateplan-name-container {\r\n  margin-bottom: 0.5rem !important;\r\n}\r\n.rateplan-container {\r\n  margin-top: 0.5rem;\r\n}\r\n@media only screen and (min-width: 1200px) {\r\n  .rateplan-name-container {\r\n    width: 40%;\r\n    margin-top: 0;\r\n  }\r\n  .rateplan-container {\r\n    width: 40%;\r\n  }\r\n}\r\n@media only screen and (min-width: 991px) {\r\n  .max-w-300 {\r\n    max-width: 200px;\r\n  }\r\n  .rate-input-container {\r\n    max-width: 50px;\r\n  }\r\n  .rateplan-name-container {\r\n    margin-bottom: 0 !important;\r\n  }\r\n}\r\n@media only screen and (min-width: 991px) and (max-width: 1300px) {\r\n  .rateplan-name-container {\r\n    width: 40%;\r\n  }\r\n  .price-amount {\r\n    max-width: 150px !important;\r\n  }\r\n}\r\n@media only screen and (max-width: 768px) {\r\n  .booking-btn {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n.total-nights-container {\r\n  width: max-content;\r\n}\r\n.nightBorder {\r\n  border-left-width: 0;\r\n  border-top-right-radius: 3px !important;\r\n  border-bottom-right-radius: 3px !important;\r\n}\r\n","import { Component, Host, Prop, h, Event, EventEmitter, Fragment } from '@stencil/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport locales from '@/stores/locales.store';\r\nimport { RatePlan, Variation } from '@/models/property';\r\nimport booking_store, { IRatePlanSelection, reserveRooms, updateRoomParams } from '@/stores/booking.store';\r\n\r\n@Component({\r\n  tag: 'igl-rate-plan',\r\n  styleUrl: 'igl-rate-plan.css',\r\n  scoped: true,\r\n})\r\nexport class IglRatePlan {\r\n  // Used Props with type annotations\r\n  @Prop() ratePlan: RatePlan;\r\n  @Prop() roomTypeId: number;\r\n  @Prop() ratePricingMode: Array<{ CODE_NAME: string; CODE_VALUE_EN: string }> = [];\r\n  @Prop() currency!: { symbol: string };\r\n  @Prop() shouldBeDisabled!: boolean;\r\n  @Prop() bookingType: string = 'PLUS_BOOKING';\r\n  @Prop() isBookDisabled: boolean = false;\r\n  @Prop() visibleInventory!: IRatePlanSelection;\r\n\r\n  @Event() buttonClicked!: EventEmitter<{ [key: string]: any }>;\r\n\r\n  // Determine if the form inputs should be disabled\r\n  private disableForm(): boolean {\r\n    const { bookingType, shouldBeDisabled, ratePlan, visibleInventory } = this;\r\n    if (bookingType === 'EDIT_BOOKING' && shouldBeDisabled) {\r\n      return false;\r\n    }\r\n    return !ratePlan.is_available_to_book || visibleInventory?.visibleInventory === 0;\r\n  }\r\n\r\n  // Update the rate plan selection in the booking store\r\n  private updateRateplanSelection(props: Partial<IRatePlanSelection>): void {\r\n    const { roomTypeId, ratePlan } = this;\r\n    const currentSelections = booking_store.ratePlanSelections;\r\n\r\n    booking_store.ratePlanSelections = {\r\n      ...currentSelections,\r\n      [roomTypeId]: {\r\n        ...currentSelections[roomTypeId],\r\n        [ratePlan.id]: {\r\n          ...currentSelections[roomTypeId][ratePlan.id],\r\n          ...props,\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  // Handle changes to select inputs\r\n  private handleDataChange(key: 'adult_child_offering' | 'rate' | 'totalRooms', evt: Event): void {\r\n    const value = (evt.target as HTMLInputElement | HTMLSelectElement).value;\r\n    if (key === 'adult_child_offering') {\r\n      this.handleVariationChange(value);\r\n    } else if (key === 'rate') {\r\n      this.updateRateplanSelection({ view_mode: value as any });\r\n    } else if (key === 'totalRooms') {\r\n      reserveRooms({\r\n        roomTypeId: this.roomTypeId,\r\n        ratePlanId: this.ratePlan.id,\r\n        rooms: Number(value),\r\n      });\r\n    }\r\n  }\r\n\r\n  // Navigate to the next page for booking\r\n  private bookProperty(): void {\r\n    if (this.bookingType === 'BAR_BOOKING') {\r\n      this.resetReserved();\r\n    }\r\n    this.reserveRoom();\r\n    this.buttonClicked.emit({ key: 'next' });\r\n  }\r\n\r\n  private reserveRoom() {\r\n    reserveRooms({\r\n      roomTypeId: this.roomTypeId,\r\n      ratePlanId: this.ratePlan.id,\r\n      rooms: 1,\r\n      guest: [\r\n        {\r\n          last_name: booking_store.guest?.last_name,\r\n          first_name: booking_store.guest?.first_name,\r\n          unit: this.roomTypeId === booking_store.guest?.roomtype_id ? booking_store.guest?.unit : null,\r\n          bed_preference: this.visibleInventory.roomtype.is_bed_configuration_enabled ? booking_store.guest?.bed_preference : null,\r\n          infant_nbr: this.visibleInventory.selected_variation.child_nbr > 0 ? booking_store.guest.infant_nbr : null,\r\n        },\r\n      ],\r\n    });\r\n  }\r\n  // Render the rate amount\r\n  private renderRate(): string {\r\n    const { visibleInventory } = this;\r\n    if (!visibleInventory) return '';\r\n    if (visibleInventory.is_amount_modified) {\r\n      return visibleInventory.rp_amount.toString();\r\n    }\r\n    const { selected_variation, view_mode } = visibleInventory;\r\n    const amount = view_mode === '001' ? selected_variation?.discounted_amount : selected_variation?.amount_per_night_gross;\r\n    return amount?.toString() || '';\r\n  }\r\n\r\n  // Format variation for display\r\n  private formatVariation(variation: Variation): string {\r\n    if (!variation) return '';\r\n    const adults = `${variation.adult_nbr} ${variation.adult_nbr === 1 ? locales.entries['Lcz_Adult']?.toLowerCase() : locales.entries['Lcz_Adults']?.toLowerCase()}`;\r\n    const children =\r\n      variation.child_nbr > 0\r\n        ? `${variation.child_nbr} ${variation.child_nbr > 1 ? locales.entries['Lcz_Children']?.toLowerCase() : locales.entries['Lcz_Child']?.toLowerCase()}`\r\n        : '';\r\n    return children ? `${adults} ${children}` : adults;\r\n  }\r\n\r\n  // Get tooltip messages for the rate plan\r\n  private getTooltipMessages(): string | undefined {\r\n    const { ratePlan, visibleInventory } = this;\r\n    const selectedVariation = visibleInventory?.selected_variation;\r\n    if (!selectedVariation) return;\r\n\r\n    const matchingVariation = ratePlan.variations?.find(variation => this.formatVariation(variation) === this.formatVariation(selectedVariation));\r\n\r\n    if (!matchingVariation) return;\r\n\r\n    const cancellationPolicy = matchingVariation.applicable_policies?.find(p => p.type === 'cancelation')?.combined_statement;\r\n    const guaranteePolicy = matchingVariation.applicable_policies?.find(p => p.type === 'guarantee')?.combined_statement;\r\n\r\n    let tooltip = '';\r\n    if (cancellationPolicy) {\r\n      tooltip += `<b><u>Cancellation:</u></b> ${cancellationPolicy}<br/>`;\r\n    }\r\n    if (guaranteePolicy) {\r\n      tooltip += `<b><u>Guarantee:</u></b> ${guaranteePolicy}`;\r\n    }\r\n    return tooltip || undefined;\r\n  }\r\n\r\n  // Handle variation change when a different option is selected\r\n  private async handleVariationChange(value: string): Promise<void> {\r\n    const { ratePlan, roomTypeId } = this;\r\n    const variations = ratePlan.variations || [];\r\n    const selectedVariation = variations.find(v => this.formatVariation(v) === value);\r\n\r\n    if (!selectedVariation) return;\r\n\r\n    updateRoomParams({\r\n      params: { selected_variation: selectedVariation },\r\n      ratePlanId: ratePlan.id,\r\n      roomTypeId,\r\n    });\r\n  }\r\n\r\n  // Reset reserved rooms in the booking store\r\n  private resetReserved(): void {\r\n    const updatedSelections = Object.entries(booking_store.ratePlanSelections).reduce((acc, [roomTypeId, ratePlans]) => {\r\n      acc[roomTypeId] = Object.entries(ratePlans).reduce((rpAcc, [ratePlanId, ratePlan]) => {\r\n        rpAcc[ratePlanId] = { ...ratePlan, reserved: 0 };\r\n        return rpAcc;\r\n      }, {} as any);\r\n      return acc;\r\n    }, {} as any);\r\n    booking_store.ratePlanSelections = updatedSelections;\r\n  }\r\n\r\n  render() {\r\n    const { ratePlan, bookingType, currency, ratePricingMode, visibleInventory } = this;\r\n    const isAvailableToBook = ratePlan.is_available_to_book;\r\n    const disableForm = this.disableForm();\r\n    const selectedVariation = visibleInventory?.selected_variation;\r\n    const formattedVariations = ratePlan.variations?.map(v => this.formatVariation(v));\r\n    // if (!this.visibleInventory) {\r\n    //   return null;\r\n    // }\r\n    return (\r\n      <Host data-testid={`rp-${this.ratePlan.id}`}>\r\n        <div\r\n          class={`d-flex mt-1  p-0 ${\r\n            isAvailableToBook ? 'flex-column flex-lg-row align-items-lg-center justify-content-lg-between' : 'align-items-center justify-content-between'\r\n          }`}\r\n        >\r\n          <div data-testid={'rp_name'} class=\"rateplan-name-container m-0 p-0  d-flex align-items-center\" style={{ gap: '0.5rem' }}>\r\n            {bookingType === 'BAR_BOOKING' ? (\r\n              <p class=\"m-0 p-0\">\r\n                {/* <span class=\"font-weight-bold\">{ratePlan.name.split('/')[0]}</span> */}\r\n                <span>\r\n                  {ratePlan.name.split('/')[1]} {ratePlan.is_non_refundable && <span class=\"non-ref-span\">Non Refundable</span>}\r\n                </span>\r\n              </p>\r\n            ) : (\r\n              <span>\r\n                {ratePlan.short_name} {ratePlan.is_non_refundable && <span class=\"non-ref-span\">Non Refundable</span>}\r\n              </span>\r\n            )}\r\n            {isAvailableToBook && <ir-tooltip message={this.getTooltipMessages()}></ir-tooltip>}\r\n          </div>\r\n\r\n          {isAvailableToBook ? (\r\n            <div class=\"d-md-flex m-md-0  justify-content-md-end align-items-md-center flex-fill rateplan-container\">\r\n              <div class=\"flex-fill max-w-300 flex-grow-1\">\r\n                <fieldset class=\"position-relative flex-grow-1 w-100\">\r\n                  <select\r\n                    disabled={disableForm}\r\n                    data-testid=\"adult-child-offering\"\r\n                    class=\"form-control input-sm flex-grow-1 w-100\"\r\n                    id={uuidv4()}\r\n                    onChange={evt => this.handleDataChange('adult_child_offering', evt)}\r\n                  >\r\n                    {formattedVariations?.map(variation => (\r\n                      <option value={variation} selected={this.formatVariation(selectedVariation) === variation}>\r\n                        {variation}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </fieldset>\r\n              </div>\r\n              <div class=\"m-0 p-0 mt-1 mt-md-0 d-flex justify-content-between align-items-md-center ml-md-1\">\r\n                <div class=\"d-flex m-0 p-0 rate-total-night-view mt-0 flex-grow-1\">\r\n                  <ir-price-input\r\n                    testId={'amount_input'}\r\n                    disabled={disableForm}\r\n                    onTextChange={e =>\r\n                      this.updateRateplanSelection({\r\n                        is_amount_modified: true,\r\n                        rp_amount: Number(e.detail),\r\n                      })\r\n                    }\r\n                    aria-label={`${this.visibleInventory?.roomtype?.name} ${this.ratePlan.short_name}'s rate`}\r\n                    aria-describedby={`${this.ratePlan.short_name}'s rate`}\r\n                    class=\"ir-br-input-none price-amount w-100 flex-grow-1\"\r\n                    currency={currency.symbol}\r\n                    value={this.renderRate()}\r\n                    placeholder={locales.entries.Lcz_Rate || 'Rate'}\r\n                  ></ir-price-input>\r\n                  <fieldset class=\"position-relative m-0 total-nights-container p-0\">\r\n                    <select\r\n                      data-testid={'nigh_stay_select'}\r\n                      disabled={disableForm}\r\n                      class=\"form-control input-sm m-0 nightBorder rounded-0 py-0\"\r\n                      id={uuidv4()}\r\n                      onChange={evt =>\r\n                        this.updateRateplanSelection({\r\n                          view_mode: (evt.target as HTMLSelectElement).value as any,\r\n                        })\r\n                      }\r\n                    >\r\n                      {ratePricingMode.map(data => (\r\n                        <option value={data.CODE_NAME} selected={visibleInventory?.view_mode === data.CODE_NAME}>\r\n                          {data.CODE_VALUE_EN}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                  </fieldset>\r\n                </div>\r\n                {(bookingType === 'PLUS_BOOKING' || bookingType === 'ADD_ROOM') && (\r\n                  <div class=\"flex-fill mt-0 ml-1 m-0 mt-md-0 p-0\">\r\n                    <fieldset class=\"position-relative\">\r\n                      <select\r\n                        data-testid={'inventory_select'}\r\n                        disabled={visibleInventory.visibleInventory === 0}\r\n                        class=\"form-control input-sm\"\r\n                        id={uuidv4()}\r\n                        onChange={evt => this.handleDataChange('totalRooms', evt)}\r\n                      >\r\n                        {Array.from({ length: (visibleInventory.visibleInventory || 0) + 1 }, (_, i) => i).map(i => (\r\n                          <option value={i} selected={visibleInventory.reserved === i}>\r\n                            {i}\r\n                          </option>\r\n                        ))}\r\n                      </select>\r\n                    </fieldset>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {bookingType === 'EDIT_BOOKING' && (\r\n                <Fragment>\r\n                  <div class=\"m-0 p-0 ml-md-1 mt-md-0 d-none d-md-block\">\r\n                    <fieldset class=\"position-relative\">\r\n                      <input\r\n                        data-testid={'inventory_radio'}\r\n                        disabled={disableForm}\r\n                        type=\"radio\"\r\n                        name=\"ratePlanGroup\"\r\n                        value=\"1\"\r\n                        onChange={() => {\r\n                          this.resetReserved();\r\n                          this.reserveRoom();\r\n                        }}\r\n                        checked={visibleInventory.reserved === 1}\r\n                      />\r\n                    </fieldset>\r\n                  </div>\r\n                  <button\r\n                    data-testid=\"book_property\"\r\n                    disabled={disableForm}\r\n                    type=\"button\"\r\n                    class=\"btn btn-primary booking-btn mt-lg-0 btn-sm ml-md-1 mt-1 d-md-none\"\r\n                    onClick={() => {\r\n                      this.resetReserved();\r\n                      this.reserveRoom();\r\n                      this.bookProperty();\r\n                    }}\r\n                  >\r\n                    {visibleInventory.reserved === 1 ? locales.entries.Lcz_Current : locales.entries.Lcz_Select}\r\n                  </button>\r\n                </Fragment>\r\n              )}\r\n\r\n              {(bookingType === 'BAR_BOOKING' || bookingType === 'SPLIT_BOOKING') && (\r\n                <button\r\n                  data-testid=\"book\"\r\n                  disabled={disableForm || (bookingType === 'SPLIT_BOOKING' && this.isBookDisabled)}\r\n                  type=\"button\"\r\n                  class=\"btn btn-primary booking-btn mt-md-0 btn-sm ml-md-1 mt-1\"\r\n                  onClick={() => this.bookProperty()}\r\n                >\r\n                  {locales.entries.Lcz_Book}\r\n                </button>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <p class=\"text-danger m-0 p-0\">{locales.entries['Lcz_NotAvailable'] || 'Not available'}</p>\r\n          )}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n.margin-bottom-8 {\r\n  margin-bottom: 8px !important;\r\n}\r\n","import { RoomType } from '@/models/property';\r\nimport { getVisibleInventory } from '@/stores/booking.store';\r\nimport { Component, Host, h, Prop, Event, EventEmitter, State } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'igl-room-type',\r\n  styleUrl: 'igl-room-type.css',\r\n  scoped: true,\r\n})\r\nexport class IglRoomType {\r\n  @Prop() roomType: RoomType;\r\n  @Prop() bookingType = 'PLUS_BOOKING';\r\n  @Prop() dateDifference: number;\r\n  @Prop() ratePricingMode = [];\r\n  @Prop() roomInfoId: number | null = null;\r\n  @Prop() currency;\r\n  @Prop() initialRoomIds: any;\r\n  @Prop() isBookDisabled: boolean;\r\n\r\n  @State() selectedRooms: number[] = [];\r\n  @State() totalRooms: number;\r\n  @State() roomsDistributions: number[] = [];\r\n\r\n  @Event() dataUpdateEvent: EventEmitter<{ [key: string]: any }>;\r\n\r\n  private validBookingTypes = ['PLUS_BOOKING', 'ADD_ROOM', 'EDIT_BOOKING', 'SPLIT_BOOKING'];\r\n\r\n  render() {\r\n    const isValidBookingType = this.validBookingTypes.includes(this.bookingType);\r\n\r\n    return (\r\n      <Host>\r\n        {isValidBookingType && this.roomType.rateplans?.length > 0 && <div class=\"font-weight-bold font-medium-1 margin-bottom-8 \">{this.roomType.name}</div>}\r\n        {this.roomType.rateplans?.map(ratePlan => {\r\n          if (!!ratePlan.variations) {\r\n            let shouldBeDisabled = this.roomInfoId && this.roomInfoId === this.roomType.id;\r\n            // let roomId = -1;\r\n            // if (shouldBeDisabled && this.initialRoomIds) {\r\n            //   roomId = this.initialRoomIds.roomId;\r\n            // }\r\n            const visibleInventory = getVisibleInventory(this.roomType.id, ratePlan.id);\r\n            return (\r\n              <igl-rate-plan\r\n                // is_bed_configuration_enabled={this.roomType.is_bed_configuration_enabled}\r\n                // index={index}\r\n                isBookDisabled={this.isBookDisabled}\r\n                visibleInventory={visibleInventory}\r\n                key={`rate-plan-${ratePlan.id}`}\r\n                ratePricingMode={this.ratePricingMode}\r\n                class={isValidBookingType ? '' : ''}\r\n                currency={this.currency}\r\n                // dateDifference={this.dateDifference}\r\n                ratePlan={ratePlan}\r\n                roomTypeId={this.roomType.id}\r\n                // totalAvailableRooms={this.roomsDistributions[index]}\r\n                bookingType={this.bookingType}\r\n                shouldBeDisabled={shouldBeDisabled}\r\n                // physicalrooms={this.roomType.physicalrooms}\r\n                // defaultRoomId={roomId}\r\n              ></igl-rate-plan>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}