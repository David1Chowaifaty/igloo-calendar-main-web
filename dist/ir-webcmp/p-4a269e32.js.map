{"version":3,"names":["initialState","checkout_guest","guest","tax_statement","roomTypes","enableBooking","resetBooking","ratePlanSelections","isInFreeCancelationZone","bookingAvailabilityParams","from_date","to_date","adult_nbr","child_nbr","infant_nbr","booking","fictus_booking_nbr","event_type","type","state","booking_store","onChange","onRoomTypeChange","reset","createStore","resetBookingStore","checkVariation","variations","selected_variation","_a","find","v","newValue","currentSelections","forEach","roomType","is_active","id","rateplans","ratePlan","length","currentRatePlanSelection","_c","Object","keys","_d","visibleInventory","inventory","reserved","checkoutVariations","checkoutBedSelection","checkoutSmokingSelection","guestName","roomtype","assign","rp_amount","view_mode","_e","is_bed_configuration_enabled","physicalrooms","availabilities","updateInventory","roomTypeId","roomTypeSelection","calculateTotalSelectedRoomsExcludingIndex","excludedRatePlanId","entries","reduce","acc","ratePlanId","Number","newRatePlans","fromEntries","map","totalSelectedRoomsExcludingCurrent","roomTypeData","rt","availableRooms","JSON","stringify","updateRoomParams","params","console","log","reserveRooms","rooms","r","Error","newGuest","Array","from","name","unit","bed_preference","rate","bedding_setup","smoking_option","getVisibleInventory","modifyBookingStore","key","value","calculateTotalRooms","values","total","innerTotal","days","months","fromDate","toDate","calendar_dates","onCalendarDatesChange","async","getMyBookings","myBookings","stayStatus","getStayStatus","month","day","room","room_types","assignBooking","physicalRoom","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","data","axios","post","TBL_NAMES","My_Result","d","code","CODE_NAME","CODE_VALUE_EN","error","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","isAfter","DATE","blockedToDate","ID","POOL","NOTES","BALANCE","NAME","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","TO_DATE","NO_OF_DAYS","dateDifference","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","defaultDates","booking_nbr","toString","bookingFromDate","bookingToDate","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","is_direct","remark","PRIVATE_NOTE","getPrivateNote","extras","_b","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","booked_on","PHONE_PREFIX","country_phone_prefix","IS_EDITABLE","is_editable","ARRIVAL","PHONE","mobile","RATE","RATE_PLAN","rateplan","SPLIT_BOOKING","RATE_PLAN_ID","RATE_TYPE","ADULTS_COUNT","occupancy","CHILDREN_COUNT","children_nbr","origin","GUEST","ROOMS","cancelation","guarantee","TOTAL_PRICE","gross_total","COUNTRY","country_id","adult_child_offering","SOURCE","source","tag","CHECKIN","in_out","CHECKOUT","_f","index","findIndex","newData","push","e","transformNewBooking","bookings","renderStatus","calendar_data","checkin_enabled","now","isSame","isBefore","filter","ota_notes","transformNewBLockedRooms","calculateDaysBetweenDates","startDate","endDate","daysDiff","diff","BookingService","handleExposedRoomInOut","props","ExceptionMsg","getCalendarData","propertyid","customMonths","myBooking","daysCount","monthName","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","unassigned_units_nbr","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","defaultMonths","handleExposedRoomGuests","fetchGuest","email","changeExposedBookingStatus","fetchPMSLogs","getExposedBookingEvents","editExposedGuest","book_nbr","getBookingAvailability","adultChildCount","currency","rest","__rest","adult","child","currency_ref","skip_getting_assignable_units","is_frontdesk_enabled","is_backend","results","this","modifyRateplans","sortRoomTypes","message","userCriteria","sort","a","b","is_available_to_book","zeroCalculatedA","some","plan","variation","discounted_amount","zeroCalculatedB","matchA","matchB","maxVariationA","Math","max","flatMap","maxVariationB","rp","sortVariations","getCountries","language","getSetupEntriesByTableName","TBL_NAME","res","fetchSetupEntries","arrivalTime","ratePricingMode","bedPreferenceType","doBookingExtraService","service","is_remove","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","getUserInfo","getExposedBooking","withExtras","generateDays","amount","toISOString","split","cost","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","doReservation","body","bookUser","bookedByInfoData","check_in","guestData","pickup_info","bookingNumber","defaultGuest","fromDateStr","dateToFormattedString","toDateStr","countryId","city","contactNumber","phone_prefix","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","assign_units","is_pms","is_in_loyalty_mode","promo_key","property","selectedArrivalTime","roomCategoryId","roomCategoryName","ratePlanName","rate_restrictions","roomId","adultCount","childrenCount","notes","rateType"],"sources":["src/stores/booking.store.ts","src/stores/calendar-dates.store.ts","src/utils/booking.ts","src/services/booking.service.ts"],"sourcesContent":["import { Booking, Guest } from '@/models/booking.dto';\r\nimport { TEventType } from '@/models/igl-book-property';\r\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation | null;\r\n  ratePlan: RatePlan;\r\n  guest: RatePlanGuest[] | null;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  is_amount_modified?: boolean;\r\n  view_mode: '002' | '001';\r\n  rp_amount: number;\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    is_bed_configuration_enabled: boolean;\r\n  };\r\n}\r\nexport interface RatePlanGuest {\r\n  name: string;\r\n  unit: string | null;\r\n  bed_preference: string | null;\r\n  infant_nbr: number | null;\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface ISelectedVariation {\r\n  variation: Variation;\r\n  state: 'default' | 'modified';\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  infant_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n  agent_code?: string;\r\n}\r\nexport interface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  checkout_guest: Guest | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  event_type: { type: TEventType };\r\n  guest: RatePlanGuest;\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n  booking: Booking;\r\n  resetBooking: boolean;\r\n  isInFreeCancelationZone: boolean;\r\n  fictus_booking_nbr: { nbr: string | null };\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  checkout_guest: null,\r\n  guest: null,\r\n  tax_statement: null,\r\n  roomTypes: [],\r\n  enableBooking: false,\r\n  resetBooking: false,\r\n  ratePlanSelections: {},\r\n  isInFreeCancelationZone: false,\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n    infant_nbr: 0,\r\n  },\r\n  booking: null,\r\n  fictus_booking_nbr: null,\r\n  event_type: { type: 'PLUS_BOOKING' },\r\n};\r\n\r\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\r\nexport function resetBookingStore() {\r\n  reset();\r\n}\r\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\r\n  if (!variations) {\r\n    return null;\r\n  }\r\n  if (!selected_variation || booking_store.resetBooking) {\r\n    return variations[0];\r\n  }\r\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\r\n}\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (!roomType.is_active) return;\r\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n    roomType.rateplans.forEach(ratePlan => {\r\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\r\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\r\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\r\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\r\n      ratePlanSelections[roomType.id][ratePlan.id] =\r\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\r\n          ? {\r\n              ...currentRatePlanSelection,\r\n              ratePlan,\r\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\r\n              visibleInventory: roomType.inventory,\r\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\r\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\r\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\r\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\r\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\r\n              roomtype: {\r\n                ...currentRatePlanSelection.roomtype,\r\n              },\r\n            }\r\n          : {\r\n              reserved: 0,\r\n              rp_amount: 0,\r\n              view_mode: '001',\r\n              guest: null,\r\n              visibleInventory: roomType.inventory,\r\n              selected_variation: ratePlan?.variations[0] ?? null,\r\n              ratePlan,\r\n              guestName: [],\r\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n              roomtype: {\r\n                ...roomType,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n              },\r\n              checkoutVariations: [],\r\n              checkoutBedSelection: [],\r\n              checkoutSmokingSelection: [],\r\n            };\r\n    });\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n  booking_store.resetBooking = false;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  console.log(ratePlanId, roomTypeId, params);\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n  console.log(booking_store.ratePlanSelections);\r\n}\r\n\r\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  let newGuest = Array.from({ length: rooms }, () => ({ name: '', unit: null, bed_preference: null, infant_nbr: null }));\r\n  console.log('guest', guest);\r\n  if (guest) {\r\n    newGuest = guest;\r\n  }\r\n  console.log('newGuest', newGuest);\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    console.log('new guest', newGuest);\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      view_mode: '001',\r\n      rp_amount: 0,\r\n      guest: newGuest,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        reserved: rooms,\r\n        checkoutVariations: [],\r\n        guest: newGuest,\r\n      },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return {\r\n      reserved: 0,\r\n      guest: null,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan: null,\r\n      guestName: [],\r\n      is_bed_configuration_enabled: false,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      rp_amount: 0,\r\n      view_mode: '001',\r\n      roomtype: null,\r\n    };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\r\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\r\n      if (isPrePayment) {\r\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\r\n      }\r\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\r\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\r\n      }, 0);\r\n    } else if (ratePlan.reserved > 0) {\r\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\r\n      return ratePlan.reserved * (amount ?? 0);\r\n    }\r\n    return 0;\r\n  };\r\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\r\n    Object.values(value).forEach(ratePlan => {\r\n      totalAmount += calculateCost(ratePlan);\r\n      prePaymentAmount += calculateCost(ratePlan, true);\r\n    });\r\n  });\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport function validateBooking() {\r\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\r\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\r\n  );\r\n}\r\nexport function calculateTotalRooms() {\r\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan) => {\r\n        if (ratePlan.reserved === 0) {\r\n          return innerTotal;\r\n        }\r\n        return innerTotal + ratePlan.reserved;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n}\r\nexport default booking_store;\r\n","import { DayData } from '@/models/DayType';\r\nimport { createStore } from '@stencil/store';\r\nexport interface ICalendarDates {\r\n  days: DayData[];\r\n  months: { daysCount: number; monthName: string }[];\r\n  fromDate: string;\r\n  toDate: string;\r\n}\r\nconst initialState: ICalendarDates = {\r\n  days: [],\r\n  months: [],\r\n  fromDate: '',\r\n  toDate: '',\r\n};\r\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\r\n\r\nexport default calendar_dates;\r\n","import { Extras } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: 1,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    if (calendar_data.checkin_enabled) {\r\n      if (room.in_out?.code === '001') {\r\n        return bookingStatus['000'];\r\n      } else if (room.in_out?.code === '002') {\r\n        return bookingStatus['003'];\r\n      }\r\n      return bookingStatus[data?.status.code || '001'];\r\n    } else {\r\n      const now = moment();\r\n      const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n      const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n      if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n        return bookingStatus['000'];\r\n      } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n        return bookingStatus['000'];\r\n      } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n        return bookingStatus['000'];\r\n      } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n        return bookingStatus['003'];\r\n      } else {\r\n        return bookingStatus[data?.status.code || '001'];\r\n      }\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    console.log(\r\n      `\r\n  bookingFromDate:${bookingFromDate},\\n\r\n  roomFromDate:${room.from_date},\\n\r\n  bookingToDate:${bookingToDate},\\n\r\n  roomToDate:${bookingToDate}\\n\r\n      `,\r\n    );\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\n","import { HandleExposedRoomGuestsRequest } from './../models/booking.dto';\r\nimport { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString, extras } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, ExtraService, Guest, IBookingPickupInfo, IPmsLog, RoomInOut } from '../models/booking.dto';\r\nimport booking_store from '@/stores/booking.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\nexport interface IBookingParams {\r\n  bookedByInfoData: any;\r\n  check_in: boolean;\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  guestData;\r\n  totalNights: number;\r\n  source: { code: string; description: string };\r\n  propertyid: number;\r\n  rooms: any[];\r\n  currency: { id: number; code: string };\r\n  pickup_info: IBookingPickupInfo | null;\r\n  bookingNumber?: string;\r\n  defaultGuest?: any;\r\n  arrivalTime?: any;\r\n  pr_id?: number;\r\n  identifier?: string;\r\n  extras: { key: string; value: string }[] | null;\r\n}\r\nexport interface ExposedBookingEvent {\r\n  date: string;\r\n  hour: number;\r\n  id: number;\r\n  minute: number;\r\n  second: number;\r\n  user: string;\r\n  type: string;\r\n}\r\nexport class BookingService {\r\n  public async handleExposedRoomInOut(props: { booking_nbr: string; room_identifier: string; status: RoomInOut['code'] }) {\r\n    const { data } = await axios.post(`/Handle_Exposed_Room_InOut`, props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Calendar`, {\r\n        propertyid,\r\n        from_date,\r\n        to_date,\r\n        extras,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const months: MonthType[] = data.My_Result.months;\r\n      const customMonths: { daysCount: number; monthName: string }[] = [];\r\n      const myBooking = await getMyBookings(months);\r\n      const days: DayData[] = months\r\n        .map(month => {\r\n          customMonths.push({\r\n            daysCount: month.days.length,\r\n            monthName: month.description,\r\n          });\r\n          return month.days.map(day => ({\r\n            day: convertDateToCustomFormat(day.description, month.description),\r\n            currentDate: convertDateToTime(day.description, month.description),\r\n            dayDisplayName: day.description,\r\n            rate: day.room_types,\r\n            unassigned_units_nbr: day.unassigned_units_nbr,\r\n            occupancy: day.occupancy,\r\n          }));\r\n        })\r\n        .flat();\r\n\r\n      return Promise.resolve({\r\n        ExceptionCode: null,\r\n        ExceptionMsg: '',\r\n        My_Params_Get_Rooming_Data: {\r\n          AC_ID: propertyid,\r\n          FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n          TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n        },\r\n        days,\r\n        months: customMonths,\r\n        myBookings: myBooking,\r\n        defaultMonths: months,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async handleExposedRoomGuests(props: HandleExposedRoomGuestsRequest) {\r\n    const { data } = await axios.post('/Handle_Exposed_Room_Guests', props);\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data;\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Guest`, { email });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async changeExposedBookingStatus(props: { book_nbr: string; status: string }) {\r\n    try {\r\n      const { data } = await axios.post(`/Change_Exposed_Booking_Status`, props);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_PMS_Logs`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBookingEvents(booking_nbr: string | number): Promise<ExposedBookingEvent[] | null> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking_Events`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(props: {\r\n    from_date: string;\r\n    to_date: string;\r\n    propertyid: number;\r\n    adultChildCount: { adult: number; child: number };\r\n    language: string;\r\n    room_type_ids: number[];\r\n    room_type_ids_to_update?: number[];\r\n    rate_plan_ids?: number[];\r\n    currency: { id: number; code: string };\r\n    is_in_agent_mode?: boolean;\r\n    agent_id?: string | number;\r\n  }): Promise<BookingDetails> {\r\n    try {\r\n      const { adultChildCount, currency, ...rest } = props;\r\n      const { data } = await axios.post(`/Check_Availability`, {\r\n        ...rest,\r\n        adult_nbr: adultChildCount.adult,\r\n        child_nbr: adultChildCount.child,\r\n        currency_ref: currency.code,\r\n        skip_getting_assignable_units: !calendar_data.is_frontdesk_enabled,\r\n        is_backend: true,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const results = this.modifyRateplans(this.sortRoomTypes(data['My_Result'], { adult_nbr: Number(adultChildCount.adult), child_nbr: Number(adultChildCount.child) }));\r\n      booking_store.roomTypes = [...results];\r\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\r\n      return results;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private sortRoomTypes(roomTypes, userCriteria: { adult_nbr: number; child_nbr: number }) {\r\n    return roomTypes.sort((a, b) => {\r\n      // Priority to available rooms\r\n      if (a.is_available_to_book && !b.is_available_to_book) return -1;\r\n      if (!a.is_available_to_book && b.is_available_to_book) return 1;\r\n\r\n      // Check for variations where is_calculated is true and amount is 0 or null\r\n      const zeroCalculatedA = a.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n      const zeroCalculatedB = b.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\r\n\r\n      // Prioritize these types to be before inventory 0 but after all available ones\r\n      if (zeroCalculatedA && !zeroCalculatedB) return 1;\r\n      if (!zeroCalculatedA && zeroCalculatedB) return -1;\r\n\r\n      // Check for exact matching variations based on user criteria\r\n      const matchA = a.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n      const matchB = b.rateplans?.some(plan =>\r\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\r\n      );\r\n\r\n      if (matchA && !matchB) return -1;\r\n      if (!matchA && matchB) return 1;\r\n\r\n      // Sort by the highest variation amount\r\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\r\n\r\n      if (maxVariationA < maxVariationB) return -1;\r\n      if (maxVariationA > maxVariationB) return 1;\r\n\r\n      return 0;\r\n    });\r\n  }\r\n  private modifyRateplans(roomTypes) {\r\n    return roomTypes?.map(rt => ({ ...rt, rateplans: rt.rateplans?.map(rp => ({ ...rp, variations: this.sortVariations(rp?.variations ?? []) })) }));\r\n  }\r\n  private sortVariations(variations) {\r\n    return variations.sort((a, b) => {\r\n      if (a.adult_nbr !== b.adult_nbr) {\r\n        return b.adult_nbr - a.adult_nbr;\r\n      }\r\n      return b.child_nbr - a.child_nbr;\r\n    });\r\n  }\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Countries`, {\r\n        language,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getSetupEntriesByTableName(TBL_NAME: string) {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME`, {\r\n      TBL_NAME,\r\n    });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    const res: IEntries[] = data.My_Result;\r\n    return res;\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n        TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const res: any[] = data.My_Result;\r\n      return {\r\n        arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n        ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n        bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doBookingExtraService({ booking_nbr, service, is_remove }: { service: ExtraService; booking_nbr: number | string; is_remove: boolean }) {\r\n    const { data } = await axios.post(`/Do_Booking_Extra_Service`, { ...service, booking_nbr, is_remove });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    return data.My_Result;\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Country_By_IP`, {\r\n        IP: '',\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const { data } = await axios.post(`/Block_Exposed_Unit`, params);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      console.log(data);\r\n      return data['My_Params_Block_Exposed_Unit'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const { data } = await axios.post(`/GET_EXPOSED_GUEST`, {\r\n        email,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string, withExtras: boolean = true): Promise<Booking> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n        booking_nbr,\r\n        language,\r\n        extras: withExtras ? extras : null,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Guests`, {\r\n        email,\r\n        property_id,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Bookings`, {\r\n        booking_nbr,\r\n        property_id,\r\n        from_date,\r\n        to_date,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Get_PCI_Card_Info_URL`, {\r\n        BOOK_NBR,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doReservation(body: any) {\r\n    const { data } = await axios.post(`/DoReservation`, { ...body, extras: body.extras ? body.extras : extras });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    console.log(data['My_Result']);\r\n    return data['My_Result'];\r\n  }\r\n\r\n  public async bookUser({\r\n    bookedByInfoData,\r\n    check_in,\r\n    currency,\r\n    extras = null,\r\n    fromDate,\r\n    guestData,\r\n    pickup_info,\r\n    propertyid,\r\n    rooms,\r\n    source,\r\n    toDate,\r\n    totalNights,\r\n    arrivalTime,\r\n    bookingNumber,\r\n    defaultGuest,\r\n    identifier,\r\n    pr_id,\r\n  }: IBookingParams) {\r\n    try {\r\n      const fromDateStr = dateToFormattedString(fromDate);\r\n      const toDateStr = dateToFormattedString(toDate);\r\n      let guest: any = {\r\n        email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n        first_name: bookedByInfoData.firstName,\r\n        last_name: bookedByInfoData.lastName,\r\n        country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n        city: null,\r\n        mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n        phone_prefix: null,\r\n        address: '',\r\n        dob: null,\r\n        subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n        cci: bookedByInfoData.cardNumber\r\n          ? {\r\n              nbr: bookedByInfoData.cardNumber,\r\n              holder_name: bookedByInfoData.cardHolderName,\r\n              expiry_month: bookedByInfoData.expiryMonth,\r\n              expiry_year: bookedByInfoData.expiryYear,\r\n            }\r\n          : null,\r\n      };\r\n      if (defaultGuest) {\r\n        guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\r\n      }\r\n      if (bookedByInfoData.id) {\r\n        guest = { ...guest, id: bookedByInfoData.id };\r\n      }\r\n      const body = {\r\n        assign_units: true,\r\n        check_in,\r\n        is_pms: true,\r\n        is_direct: true,\r\n        is_in_loyalty_mode: false,\r\n        promo_key: null,\r\n        extras,\r\n        booking: {\r\n          booking_nbr: bookingNumber || '',\r\n          from_date: fromDateStr,\r\n          to_date: toDateStr,\r\n          remark: bookedByInfoData.message || null,\r\n          property: {\r\n            id: propertyid,\r\n          },\r\n          source,\r\n          currency,\r\n          arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n          guest,\r\n          rooms: [\r\n            ...guestData.map(data => ({\r\n              identifier: identifier || null,\r\n              roomtype: {\r\n                id: data.roomCategoryId,\r\n                name: data.roomCategoryName,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n                inventory: data.inventory,\r\n                rate: data.rate / totalNights,\r\n              },\r\n              rateplan: {\r\n                id: data.ratePlanId,\r\n                name: data.ratePlanName,\r\n                rate_restrictions: null,\r\n                variations: null,\r\n                cancelation: data.cancelation,\r\n                guarantee: data.guarantee,\r\n              },\r\n              unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n              occupancy: {\r\n                adult_nbr: data.adultCount,\r\n                children_nbr: data.childrenCount,\r\n                infant_nbr: null,\r\n              },\r\n              bed_preference: data.preference,\r\n              from_date: fromDateStr,\r\n              to_date: toDateStr,\r\n              notes: null,\r\n              days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n              guest: {\r\n                email: null,\r\n                first_name: data.guestName,\r\n                last_name: null,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n              },\r\n            })),\r\n            ...rooms,\r\n          ],\r\n        },\r\n        pickup_info,\r\n      };\r\n      console.log('book user payload', body);\r\n      // const result = await this.doReservation(body);\r\n      // return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}