{"version":3,"names":["CONSTANTS","PASSWORD","UserService","sendVerificationEmail","sleep","checkUserExistence","params","data","axios","post","My_Result","handleExposedUser","base_user_type_code","property_id","rest","__rest","body","Object","assign","includes","Number","console","warn","getExposedPropertyUsers"],"sources":["src/utils/constants.ts","src/services/user.service.ts"],"sourcesContent":["export const CONSTANTS = {\r\n  PASSWORD: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()\\-_=+]).{8,16}$/,\r\n};\r\n","import { UserParams } from '@/models/Users';\r\nimport { sleep } from '@/utils/utils';\r\nimport axios from 'axios';\r\n\r\nexport class UserService {\r\n  public async sendVerificationEmail() {\r\n    // throw new Error('Method not implemented.');\r\n    await sleep(400);\r\n  }\r\n  public async checkUserExistence(params: { UserName: string }): Promise<boolean> {\r\n    const { data } = await axios.post('/CheckUserExistence', params);\r\n    return data.My_Result;\r\n  }\r\n  public async handleExposedUser(params: UserParams) {\r\n    const { base_user_type_code, property_id, ...rest } = params;\r\n    let body: any = { ...rest };\r\n    if ([1, 4].includes(Number(base_user_type_code))) {\r\n      body = { ...body, property_id };\r\n    }\r\n    const { data } = await axios.post('/Handle_Exposed_User', body);\r\n    console.warn('data<==>', data);\r\n    return data.My_Result;\r\n  }\r\n  public async getExposedPropertyUsers({ property_id }: { property_id: number }) {\r\n    const { data } = await axios.post('/Get_Exposed_Property_Users', { property_id });\r\n    return data.My_Result;\r\n  }\r\n}\r\n"],"mappings":"8EAAaA,EAAY,CACvBC,SAAU,kE,oXCGCC,EACJ,2BAAMC,SAELC,EAAM,I,CAEP,wBAAMC,CAAmBC,GAC9B,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,sBAAuBH,GACzD,OAAOC,EAAKG,S,CAEP,uBAAMC,CAAkBL,GAC7B,MAAMM,oBAAEA,EAAmBC,YAAEA,GAAyBP,EAATQ,EAAIC,EAAKT,EAAhD,uCACN,IAAIU,EAAIC,OAAAC,OAAA,GAAaJ,GACrB,GAAI,CAAC,EAAG,GAAGK,SAASC,OAAOR,IAAuB,CAChDI,EAAIC,OAAAC,OAAAD,OAAAC,OAAA,GAAQF,GAAI,CAAEH,e,CAEpB,MAAMN,KAAEA,SAAeC,EAAMC,KAAK,uBAAwBO,GAC1DK,QAAQC,KAAK,WAAYf,GACzB,OAAOA,EAAKG,S,CAEP,6BAAMa,EAAwBV,YAAEA,IACrC,MAAMN,KAAEA,SAAeC,EAAMC,KAAK,8BAA+B,CAAEI,gBACnE,OAAON,EAAKG,S","ignoreList":[]}