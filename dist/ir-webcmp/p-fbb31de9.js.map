{"version":3,"names":["async","getMyBookings","months","myBookings","stayStatus","getStayStatus","month","day","days","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","from_date","isAfter","DATE","blockedToDate","to_date","ID","POOL","NOTES","BALANCE","NAME","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","find","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","TO_DATE","NO_OF_DAYS","dateDifference","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","defaultDates","booking","booking_nbr","toString","bookingFromDate","bookingToDate","mainGuest","_a","sharing_persons","p","is_main","_b","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","is_direct","remark","PRIVATE_NOTE","getPrivateNote","extras","_c","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","booked_on","PHONE_PREFIX","guest","country_phone_prefix","IS_EDITABLE","is_editable","ARRIVAL","PHONE","_d","mobile_without_prefix","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","RATE_TYPE","_f","_e","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","origin","GUEST","ROOMS","rooms","cancelation","guarantee","TOTAL_PRICE","_g","gross_total","COUNTRY","country_id","adult_child_offering","selected_variation","SOURCE","source","tag","CHECKIN","_h","in_out","CHECKOUT","_j","ROOM_INFO","unit","BASE_STATUS_CODE","_k","index","findIndex","newData","push","e","initialState","checkout_guest","tax_statement","roomTypes","enableBooking","resetBooking","ratePlanSelections","isInFreeCancelationZone","bookingAvailabilityParams","child_nbr","infant_nbr","fictus_booking_nbr","event_type","type","state","booking_store","onChange","onRoomTypeChange","reset","createStore","resetBookingStore","checkVariation","variations","v","newValue","currentSelections","forEach","roomType","is_active","rateplans","ratePlan","length","currentRatePlanSelection","Object","keys","visibleInventory","inventory","reserved","checkoutVariations","checkoutBedSelection","checkoutSmokingSelection","guestName","assign","rp_amount","view_mode","is_bed_configuration_enabled","availabilities","updateInventory","roomTypeId","roomTypeSelection","calculateTotalSelectedRoomsExcludingIndex","excludedRatePlanId","reduce","acc","ratePlanId","Number","newRatePlans","fromEntries","totalSelectedRoomsExcludingCurrent","roomTypeData","rt","availableRooms","JSON","stringify","updateRoomParams","params","reserveRooms","r","Error","newGuest","Array","from","bed_preference","rate","bedding_setup","smoking_option","getVisibleInventory","modifyBookingStore","calculateTotalRooms","values","innerTotal","resetReserved","updatedSelections","ratePlans","rpAcc"],"sources":["src/utils/booking.ts","src/stores/booking.store.ts"],"sourcesContent":["import { Extras, Room } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(mainGuest?.first_name, mainGuest?.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: cell.room?.roomtype?.id,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n    ROOM_INFO: {\r\n      occupancy: cell.room.occupancy,\r\n      sharing_persons: cell.room.sharing_persons,\r\n      unit: cell.room.unit,\r\n      in_out: cell.room.in_out,\r\n    },\r\n    BASE_STATUS_CODE: cell.booking.status?.code,\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\r\n  const { in_out, status_code, from_date, to_date } = params;\r\n  if (calendar_data.checkin_enabled) {\r\n    if (in_out?.code === '001') {\r\n      return bookingStatus['000'];\r\n    } else if (in_out?.code === '002') {\r\n      if (!calendar_data.is_automatic_check_in_out) {\r\n        const now = moment();\r\n        const toDate = moment(to_date, 'YYYY-MM-DD');\r\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n        const isNowAfterOrSameAsHotelHour = compareTime(\r\n          now.toDate(),\r\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n        );\r\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\r\n          return bookingStatus['003'];\r\n        } else {\r\n          return bookingStatus['002'];\r\n        }\r\n      }\r\n    }\r\n    return bookingStatus[status_code || '001'];\r\n  } else {\r\n    const now = moment();\r\n    const toDate = moment(to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n    const isNowAfterOrSameAsHotelHour = compareTime(\r\n      now.toDate(),\r\n      createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n    );\r\n    if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[status_code || '001'];\r\n    }\r\n  }\r\n}\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: getRoomStatus({\r\n        in_out: room.in_out,\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n        status_code: data.status?.code,\r\n      }),\r\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n      PHONE: data.guest.mobile_without_prefix ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n      ROOM_INFO: {\r\n        occupancy: room.occupancy,\r\n        sharing_persons: room.sharing_persons,\r\n        unit: room.unit,\r\n        in_out: room.in_out,\r\n      },\r\n      BASE_STATUS_CODE: data.status?.code,\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD').startOf('day');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD').endOf('day');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\nexport function compareTime(date1: Date, date2: Date) {\r\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\r\n}\r\n/**\r\n * Creates a Date object for today at the specified hour in a given time zone.\r\n * The offset is the number of hours that the target time zone is ahead of UTC.\r\n *\r\n * For example, if offset = 3 and hour = 9, then the function returns a Date\r\n * which, when converted to the target time zone, represents 9:00.\r\n *\r\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\r\n * @param hour - The desired hour in the target time zone (0-23)\r\n * @returns Date object representing the target time (in UTC)\r\n */\r\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\r\n  const now = new Date();\r\n  const offsetMs = offset * 60 * 60 * 1000;\r\n  const targetTzDate = new Date(now.getTime() + offsetMs);\r\n  const year = targetTzDate.getUTCFullYear();\r\n  const month = targetTzDate.getUTCMonth();\r\n  const day = targetTzDate.getUTCDate();\r\n  const utcHour = hour - offset;\r\n  return new Date(Date.UTC(year, month, day, utcHour));\r\n}\r\n","import { Booking, Guest } from '@/models/booking.dto';\r\nimport { TEventType } from '@/models/igl-book-property';\r\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\r\nimport { createStore } from '@stencil/store';\r\n\r\nexport interface IRatePlanSelection {\r\n  reserved: number;\r\n  visibleInventory: number;\r\n  selected_variation: Variation | null;\r\n  ratePlan: RatePlan;\r\n  guest: RatePlanGuest[] | null;\r\n  guestName: string[];\r\n  is_bed_configuration_enabled: boolean;\r\n  checkoutVariations: Variation[];\r\n  checkoutBedSelection: string[];\r\n  is_amount_modified?: boolean;\r\n  view_mode: '002' | '001';\r\n  rp_amount: number;\r\n  checkoutSmokingSelection: string[];\r\n  roomtype: {\r\n    id: number;\r\n    name: string;\r\n    physicalrooms: null;\r\n    rateplans: null;\r\n    availabilities: null;\r\n    inventory: number;\r\n    rate: number;\r\n    smoking_option: ISmokingOption;\r\n    bedding_setup: BeddingSetup[];\r\n    is_bed_configuration_enabled: boolean;\r\n  };\r\n}\r\nexport interface RatePlanGuest {\r\n  first_name: string;\r\n  last_name: string;\r\n  unit: string | null;\r\n  bed_preference: string | null;\r\n  infant_nbr: number | null;\r\n  roomtype_id?: number;\r\n}\r\n\r\nexport interface IRoomTypeSelection {\r\n  [ratePlanId: number]: IRatePlanSelection;\r\n}\r\nexport interface ISelectedVariation {\r\n  variation: Variation;\r\n  state: 'default' | 'modified';\r\n}\r\nexport interface IBookinAvailabilityParams {\r\n  from_date: Date | null;\r\n  to_date: Date | null;\r\n  adult_nbr: number;\r\n  child_nbr: number;\r\n  infant_nbr: number;\r\n  coupon?: string;\r\n  agent?: number;\r\n  loyalty?: boolean;\r\n  agent_code?: string;\r\n}\r\nexport interface BookingStore {\r\n  tax_statement: { message: string } | null;\r\n  checkout_guest: Guest | null;\r\n  roomTypes: RoomType[];\r\n  enableBooking: boolean;\r\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\r\n  event_type: { type: TEventType };\r\n  guest: RatePlanGuest;\r\n  bookingAvailabilityParams: IBookinAvailabilityParams;\r\n  booking: Booking;\r\n  resetBooking: boolean;\r\n  isInFreeCancelationZone: boolean;\r\n  fictus_booking_nbr: { nbr: string | null };\r\n}\r\n\r\nconst initialState: BookingStore = {\r\n  checkout_guest: null,\r\n  guest: null,\r\n  tax_statement: null,\r\n  roomTypes: [],\r\n  enableBooking: false,\r\n  resetBooking: false,\r\n  ratePlanSelections: {},\r\n  isInFreeCancelationZone: false,\r\n  bookingAvailabilityParams: {\r\n    from_date: null,\r\n    to_date: null,\r\n    adult_nbr: 0,\r\n    child_nbr: 0,\r\n    infant_nbr: 0,\r\n  },\r\n  booking: null,\r\n  fictus_booking_nbr: null,\r\n  event_type: { type: 'PLUS_BOOKING' },\r\n};\r\n\r\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\r\nexport function resetBookingStore() {\r\n  reset();\r\n}\r\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\r\n  if (!variations) {\r\n    return null;\r\n  }\r\n  if (!selected_variation || booking_store.resetBooking) {\r\n    return variations[0];\r\n  }\r\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\r\n}\r\n\r\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\r\n  const currentSelections = booking_store.ratePlanSelections;\r\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\r\n  newValue.forEach(roomType => {\r\n    if (!roomType.is_active) return;\r\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\r\n\r\n    roomType.rateplans.forEach(ratePlan => {\r\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\r\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\r\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\r\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\r\n      ratePlanSelections[roomType.id][ratePlan.id] =\r\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\r\n          ? {\r\n              ...currentRatePlanSelection,\r\n              ratePlan,\r\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\r\n              visibleInventory: roomType.inventory,\r\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\r\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\r\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\r\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\r\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\r\n              roomtype: {\r\n                ...currentRatePlanSelection.roomtype,\r\n              },\r\n            }\r\n          : {\r\n              reserved: 0,\r\n              rp_amount: 0,\r\n              view_mode: '001',\r\n              guest: null,\r\n              visibleInventory: roomType.inventory,\r\n              selected_variation: ratePlan?.variations[0] ?? null,\r\n              ratePlan,\r\n              guestName: [],\r\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n              roomtype: {\r\n                ...roomType,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n              },\r\n              checkoutVariations: [],\r\n              checkoutBedSelection: [],\r\n              checkoutSmokingSelection: [],\r\n            };\r\n    });\r\n  });\r\n  booking_store.ratePlanSelections = ratePlanSelections;\r\n  booking_store.resetBooking = false;\r\n});\r\n\r\nexport function updateInventory(roomTypeId: number) {\r\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\r\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\r\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\r\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\r\n    }, 0);\r\n  };\r\n  const newRatePlans = Object.fromEntries(\r\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\r\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\r\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\r\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\r\n\r\n      return [\r\n        ratePlanId,\r\n        {\r\n          ...ratePlan,\r\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\r\n        },\r\n      ];\r\n    }),\r\n  );\r\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\r\n    booking_store.ratePlanSelections = {\r\n      ...booking_store.ratePlanSelections,\r\n      [roomTypeId]: newRatePlans,\r\n    };\r\n  }\r\n}\r\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        ...params,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\r\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\r\n    booking_store.ratePlanSelections[roomTypeId] = {};\r\n  }\r\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\r\n  if (!roomType) {\r\n    throw new Error('Invalid room type id');\r\n  }\r\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\r\n  if (!ratePlan) {\r\n    throw new Error('Invalid rate plan');\r\n  }\r\n  let newGuest = Array.from({ length: rooms }, () => ({ first_name: '', last_name: '', unit: null, bed_preference: null, infant_nbr: null }));\r\n  if (guest) {\r\n    newGuest = guest;\r\n  }\r\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\r\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\r\n      guestName: null,\r\n      reserved: 0,\r\n      view_mode: '001',\r\n      rp_amount: 0,\r\n      guest: newGuest,\r\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      roomtype: {\r\n        id: roomType.id,\r\n        name: roomType.name,\r\n        physicalrooms: null,\r\n        rateplans: null,\r\n        availabilities: null,\r\n        inventory: roomType.inventory,\r\n        rate: roomType.rate,\r\n        bedding_setup: roomType.bedding_setup,\r\n        smoking_option: roomType.smoking_option,\r\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\r\n      },\r\n    };\r\n  }\r\n\r\n  booking_store.ratePlanSelections = {\r\n    ...booking_store.ratePlanSelections,\r\n    [Number(roomTypeId)]: {\r\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\r\n      [ratePlanId]: {\r\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\r\n        reserved: rooms,\r\n        checkoutVariations: [],\r\n        guest: newGuest,\r\n      },\r\n    },\r\n  };\r\n  updateInventory(roomTypeId);\r\n}\r\n\r\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\r\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\r\n    return {\r\n      reserved: 0,\r\n      guest: null,\r\n      visibleInventory: 0,\r\n      selected_variation: null,\r\n      ratePlan: null,\r\n      guestName: [],\r\n      is_bed_configuration_enabled: false,\r\n      checkoutVariations: [],\r\n      checkoutBedSelection: [],\r\n      checkoutSmokingSelection: [],\r\n      rp_amount: 0,\r\n      view_mode: '001',\r\n      roomtype: null,\r\n    };\r\n  }\r\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\r\n}\r\n\r\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\r\n  booking_store[key] = value;\r\n}\r\n\r\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\r\n  let prePaymentAmount = 0;\r\n  let totalAmount = 0;\r\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\r\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\r\n      if (isPrePayment) {\r\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\r\n      }\r\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\r\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\r\n      }, 0);\r\n    } else if (ratePlan.reserved > 0) {\r\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\r\n      return ratePlan.reserved * (amount ?? 0);\r\n    }\r\n    return 0;\r\n  };\r\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\r\n    Object.values(value).forEach(ratePlan => {\r\n      totalAmount += calculateCost(ratePlan);\r\n      prePaymentAmount += calculateCost(ratePlan, true);\r\n    });\r\n  });\r\n  return { totalAmount, prePaymentAmount };\r\n}\r\n\r\nexport function validateBooking() {\r\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\r\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\r\n  );\r\n}\r\nexport function calculateTotalRooms() {\r\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\r\n    return (\r\n      total +\r\n      Object.values(value).reduce((innerTotal, ratePlan) => {\r\n        if (ratePlan.reserved === 0) {\r\n          return innerTotal;\r\n        }\r\n        return innerTotal + ratePlan.reserved;\r\n      }, 0)\r\n    );\r\n  }, 0);\r\n}\r\nexport function resetReserved(): void {\r\n  const updatedSelections = Object.entries(booking_store.ratePlanSelections).reduce((acc, [roomTypeId, ratePlans]) => {\r\n    const roomType = booking_store.roomTypes.find(rt => rt.id.toString() === roomTypeId.toString());\r\n    acc[roomTypeId] = Object.entries(ratePlans).reduce((rpAcc, [ratePlanId, ratePlan]) => {\r\n      rpAcc[ratePlanId] = { ...ratePlan, reserved: 0, visibleInventory: roomType?.inventory ?? ratePlan.visibleInventory };\r\n      return rpAcc;\r\n    }, {} as any);\r\n    return acc;\r\n  }, {} as any);\r\n  booking_store.ratePlanSelections = { ...updatedSelections };\r\n}\r\nexport default booking_store;\r\n"],"mappings":"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","ignoreList":[]}