{"version":3,"names":["ToBeAssignedService","getUnassignedDates","propertyid","from_date","to_date","data","axios","post","ExceptionMsg","Error","this","convertUnassignedDates","My_Result","error","console","getUnassignedRooms","calendarFromDates","specific_date","roomInfo","formattedLegendData","transformToAssignable","assignUnit","props","Object","assign","extras","log","cleanSpacesAndSpecialChars","str","regex","replace","result","forEach","customer","unassigned_rooms","room","roomCategory","roomTypeName","room_type_name","ID","identifier","NAME","guest_name","FROM_DATE","unassigned_date","TO_DATE","BOOKING_NUMBER","book_nbr","STATUS","defaultDateRange","fromDate","undefined","toDate","fromDateTimeStamp","toDateTimeStamp","fromDateStr","toDateStr","dateDifference","NO_OF_DAYS","roomsInfo","legendData","availableRooms","RT_ID","getRoomTypeId","updateAvailableRooms","addDefaultDateRange","push","Date","dateToFormattedString","getTime","roomName","_a","find","name","id","rooms","assignable_units","unit","Is_Fully_Available","Is_Not_Available","days","moment","isAfter","isBefore","PR_ID","pr_id","NOTES","BALANCE","INTERNAL_NOTE","hideBubble","dates","convertedDates","date","newDate","setHours","categories","dateStr","description"],"sources":["src/services/toBeAssigned.service.ts"],"sourcesContent":["import axios from 'axios';\nimport { IAvailableRoom, IRoomCategory, IUnassignedDates, InnerRecord } from '../models/tobeassigned';\nimport { dateDifference, dateToFormattedString, extras } from '../utils/utils';\nimport moment from 'moment';\nimport { Booking } from '@/models/booking.dto';\n\nexport class ToBeAssignedService {\n  public async getUnassignedDates(propertyid: number, from_date: string, to_date: string) {\n    try {\n      const { data } = await axios.post(`/Get_UnAssigned_Dates`, {\n        propertyid,\n        from_date,\n        to_date,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return this.convertUnassignedDates(data.My_Result);\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async getUnassignedRooms(calendarFromDates: { from_date: string; to_date: string }, propertyid: number, specific_date: string, roomInfo: any, formattedLegendData: any) {\n    try {\n      const { data } = await axios.post(`/Get_Aggregated_UnAssigned_Rooms`, {\n        propertyid,\n        specific_date,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return this.transformToAssignable(calendarFromDates, data, roomInfo, formattedLegendData);\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async assignUnit(props: { booking_nbr: string; identifier: string; pr_id: number; check_in: boolean }): Promise<Booking> {\n    try {\n      const { data } = await axios.post(`/Assign_Exposed_Room`, {\n        ...props,\n        extras,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      console.log(data);\n      return data['My_Result'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  private cleanSpacesAndSpecialChars(str: string) {\n    const regex = /[^a-zA-Z0-9]+/g;\n    return str.replace(regex, '');\n  }\n\n  private transformToAssignable(calendarFromDates: { from_date: string; to_date: string }, data: any, roomInfo, formattedLegendData): IRoomCategory[] {\n    const result: IRoomCategory[] = [];\n    data.My_Result.forEach((customer: any) => {\n      customer.unassigned_rooms.forEach((room: any) => {\n        let roomCategory: IRoomCategory = {\n          roomTypeName: room.room_type_name,\n          ID: room.identifier,\n          NAME: room.guest_name,\n          identifier: room.identifier,\n          FROM_DATE: room.unassigned_date,\n          TO_DATE: room.unassigned_date,\n          BOOKING_NUMBER: room.book_nbr,\n          STATUS: 'IN-HOUSE',\n          defaultDateRange: {\n            fromDate: undefined,\n            toDate: undefined,\n            fromDateTimeStamp: 0,\n            toDateTimeStamp: 0,\n            fromDateStr: '',\n            toDateStr: '',\n            dateDifference: 0,\n          },\n          NO_OF_DAYS: 1,\n          roomsInfo: roomInfo,\n          legendData: formattedLegendData,\n          availableRooms: [],\n          RT_ID: this.getRoomTypeId(room.room_type_name, roomInfo),\n        };\n        this.updateAvailableRooms(calendarFromDates, room, roomCategory, formattedLegendData, roomInfo);\n        this.addDefaultDateRange(roomCategory);\n        result.push(roomCategory);\n      });\n    });\n    return result;\n  }\n  addDefaultDateRange(roomCategory: IRoomCategory) {\n    roomCategory.defaultDateRange.fromDate = new Date(roomCategory.FROM_DATE + 'T00:00:00');\n    roomCategory.defaultDateRange.fromDateStr = dateToFormattedString(roomCategory.defaultDateRange.fromDate);\n    roomCategory.defaultDateRange.fromDateTimeStamp = roomCategory.defaultDateRange.fromDate.getTime();\n\n    roomCategory.defaultDateRange.toDate = new Date(roomCategory.TO_DATE + 'T00:00:00');\n    roomCategory.defaultDateRange.toDateStr = dateToFormattedString(roomCategory.defaultDateRange.toDate);\n    roomCategory.defaultDateRange.toDateTimeStamp = roomCategory.defaultDateRange.toDate.getTime();\n\n    roomCategory.defaultDateRange.dateDifference = roomCategory.NO_OF_DAYS;\n  }\n  private getRoomTypeId(roomName: string, roomInfo: any) {\n    return roomInfo.find(room => this.cleanSpacesAndSpecialChars(room.name) === this.cleanSpacesAndSpecialChars(roomName))?.id || null;\n  }\n  private updateAvailableRooms(calendarFromDates: { from_date: string; to_date: string }, room: any, roomCategory: IRoomCategory, formattedLegendData, roomsInfo): void {\n    const rooms: IAvailableRoom[] = [];\n    room.assignable_units.forEach((unit: any) => {\n      if (unit.Is_Fully_Available && !unit.Is_Not_Available) {\n        const days = dateDifference(unit.from_date, unit.to_date);\n        const fromDate = moment(new Date(calendarFromDates.from_date)).isAfter(moment(new Date(unit.from_date))) ? calendarFromDates.from_date : unit.from_date;\n        const toDate =\n          moment(new Date(calendarFromDates.to_date)).isBefore(moment(new Date(unit.to_date))) &&\n          moment(new Date(calendarFromDates.to_date)).isAfter(moment(new Date(unit.from_date)))\n            ? calendarFromDates.to_date\n            : unit.to_date;\n        rooms.push({\n          RT_ID: roomCategory.RT_ID,\n          STATUS: 'PENDING-CONFIRMATION',\n          FROM_DATE: fromDate,\n          roomName: unit.name,\n          PR_ID: unit.pr_id,\n          TO_DATE: toDate,\n          NO_OF_DAYS: days,\n          ID: 'NEW_TEMP_EVENT',\n          NAME: '',\n          NOTES: '',\n          BALANCE: '',\n          INTERNAL_NOTE: '',\n          hideBubble: true,\n          legendData: formattedLegendData,\n          roomsInfo,\n        });\n        roomCategory.TO_DATE = unit.to_date;\n        roomCategory.NO_OF_DAYS = days;\n      }\n    });\n    roomCategory.availableRooms = rooms;\n  }\n\n  private convertUnassignedDates(dates: IUnassignedDates[]): Record<number, InnerRecord> {\n    let convertedDates: Record<number, InnerRecord> = {};\n    dates.forEach(date => {\n      let newDate = new Date(date.date);\n      newDate.setHours(0, 0, 0, 0);\n      convertedDates[newDate.getTime()] = {\n        categories: {},\n        dateStr: date.description,\n      };\n    });\n    return convertedDates;\n  }\n}\n"],"mappings":"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","ignoreList":[]}