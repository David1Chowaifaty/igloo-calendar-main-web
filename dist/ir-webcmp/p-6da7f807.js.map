{"version":3,"names":["z","object","code","string","id","number","symbol","ChannelReportBaseSchema","NIGHTS","PCT","REVENUE","SOURCE","PROPERTY_ID","PROPERTY_NAME","currency","ExtendedChanelReportBaseSchema","extend","last_year","optional","ChannelReportResultSchema","array","nullable","ChannelSalesParamsSchema","AC_ID","BOOK_CASE","min","FROM_DATE","regex","TO_DATE","WINDOW","coerce","int","nonnegative","is_export_to_excel","boolean","default","LIST_AC_ID","include_previous_year","parseChannelReportResult","data","parse","parseChannelSalesParams","AllowedPropertiesSchema","name","PropertyService","getExposedProperty","params","axios","post","ExceptionMsg","Error","results","My_Result","calendar_data","adultChildConstraints","adult_child_constraints","allowedBookingSources","allowed_booking_sources","allowed_payment_methods","is_vacation_rental","pickup_service","max_nights","roomsInfo","roomtypes","taxes","country","is_automatic_check_in_out","tax_statement","is_frontdesk_enabled","is_pms_enabled","spitTime","_b","_a","time_constraints","check_out_till","split","checkin_checkout_hours","offset","city","gmt_offset","hour","Number","minute","error","console","log","getChannelSales","_params","downloadFile","My_Params_Get_Channel_Sales","Link_excel","getExposedAllowedProperties","getCountrySales","My_Params_Get_Country_Sales","getDailyRevenueReport","My_Params_Get_Daily_Revenue_Report","setExposedCleaningFrequency","getMonthlyStats","My_Params_Get_Monthly_Stats"],"sources":["src/components/ir-sales-by-channel/types.ts","src/services/property.service.ts"],"sourcesContent":["// src/components/ir-sales-by-channel/types.ts\nimport { z } from 'zod';\n\n/* ---------- Report (input) ---------- */\nexport const CurrencySchema = z.object({\n  code: z.string(),\n  id: z.number(),\n  symbol: z.string(),\n});\n\nconst ChannelReportBaseSchema = z.object({\n  NIGHTS: z.number(),\n  PCT: z.number(),\n  REVENUE: z.number(),\n  SOURCE: z.string(),\n  PROPERTY_ID: z.number(),\n  PROPERTY_NAME: z.string(),\n  currency: z.string(),\n});\n\n/**\n * Transforms UPPER_SNAKE_CASE keys to lowercase at parse time.\n * Output type is exactly the lowercased version of the base schema.\n */\nconst ExtendedChanelReportBaseSchema = ChannelReportBaseSchema.extend({\n  last_year: ChannelReportBaseSchema.optional(),\n});\nexport const ChannelReportSchema = ExtendedChanelReportBaseSchema;\n\nexport type ChannelReport = z.infer<typeof ExtendedChanelReportBaseSchema>;\n\nexport const ChannelReportResultSchema = z.array(ExtendedChanelReportBaseSchema).nullable();\nexport type ChannelReportResult = z.infer<typeof ChannelReportResultSchema>;\n\n/* ---------- Params ---------- */\n\nexport const ChannelSalesParamsSchema = z.object({\n  AC_ID: z.string().optional(),\n  BOOK_CASE: z.string().min(1),\n  FROM_DATE: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Use YYYY-MM-DD format'),\n  TO_DATE: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Use YYYY-MM-DD format'),\n  WINDOW: z.coerce.number().int().nonnegative(),\n  // Accepts true/false, \"true\"/\"false\", 1/0; defaults to false\n  is_export_to_excel: z.coerce.boolean().optional().default(false),\n  LIST_AC_ID: z.array(z.number()).optional(),\n});\n// .strict()\n// .refine(v => new Date(v.FROM_DATE) <= new Date(v.TO_DATE), { message: 'FROM_DATE must be on or before TO_DATE', path: ['TO_DATE'] });\n\nexport type ChannelSalesParams = z.infer<typeof ChannelSalesParamsSchema>;\n\n/* ---------- Filters ---------- */\n\nexport const ChannelSalesFilterSchema = ChannelSalesParamsSchema.extend({\n  include_previous_year: z.boolean(),\n});\n\nexport type ChannelSaleFilter = z.infer<typeof ChannelSalesFilterSchema>;\n\n/* ---------- Helpers (optional but handy) ---------- */\n\nexport const parseChannelReport = (data: unknown) => ChannelReportSchema.parse(data);\nexport const safeParseChannelReport = (data: unknown) => ChannelReportSchema.safeParse(data);\n\nexport const parseChannelReportResult = (data: unknown) => ChannelReportResultSchema.parse(data);\nexport const safeParseChannelReportResult = (data: unknown) => ChannelReportResultSchema.safeParse(data);\n\nexport const parseChannelSalesParams = (data: unknown) => ChannelSalesParamsSchema.parse(data);\nexport const safeParseChannelSalesParams = (data: unknown) => ChannelSalesParamsSchema.safeParse(data);\n\n/* ---------- Consolidated exports ---------- */\n\nexport { ChannelReportSchema as ReportSchema, ChannelReportResultSchema as ReportResultSchema, ChannelSalesParamsSchema as SalesParamsSchema };\n\nexport type { ChannelReport as Report, ChannelReportResult as ReportResult, ChannelSalesParams as SalesParams };\n","import { type ChannelReportResult, type ChannelSalesParams, parseChannelReportResult, parseChannelSalesParams } from '@/components/ir-sales-by-channel/types';\nimport calendar_data from '@/stores/calendar-data';\nimport { downloadFile } from '@/utils/utils';\nimport axios from 'axios';\nimport { z } from 'zod';\n\nexport type CountrySalesParams = {\n  AC_ID: number;\n  WINDOW: number;\n  FROM_DATE: string;\n  TO_DATE: string;\n  BOOK_CASE: string;\n  is_export_to_excel: boolean;\n};\nexport type DailyRevenueReportParams = {\n  date: string;\n  property_id: string;\n  is_export_to_excel: boolean;\n};\nexport type MonthlyStatsParams = {\n  property_id: number;\n  from_date: string;\n  to_date: string;\n  is_export_to_excel?: boolean;\n};\nexport interface MonthlyStatsResults {\n  AverageOccupancy: number;\n  DailyStats: DailyStat[];\n  ExcelLink: null;\n  PeakDays: PeakDay[];\n  Occupancy_Difference_From_Previous_Month: number;\n  TotalUnitsBooked: number;\n  Total_Guests: number;\n}\n\nexport interface PeakDay {\n  Date: string;\n  OccupancyPercent: number;\n}\n\nexport interface DailyStat {\n  Date: string;\n  Occupancy: number;\n  Units_booked: number;\n  Rooms_Revenue: number;\n  ADR: number;\n  Total_Guests: number | undefined;\n}\nexport const AllowedPropertiesSchema = z.array(z.object({ id: z.number(), name: z.string() })).nullable();\n\nexport type AllowedProperties = z.infer<typeof AllowedPropertiesSchema>;\nexport class PropertyService {\n  public async getExposedProperty(params: {\n    id: number | null;\n    language: string;\n    is_backend?: boolean;\n    aname?: string;\n    include_units_hk_status?: boolean;\n    include_sales_rate_plans?: boolean;\n  }) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Property`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = data.My_Result;\n      calendar_data.adultChildConstraints = results.adult_child_constraints;\n      calendar_data.allowedBookingSources = results.allowed_booking_sources;\n      calendar_data.allowed_payment_methods = results.allowed_payment_methods;\n      calendar_data.currency = results.currency;\n      calendar_data.is_vacation_rental = results.is_vacation_rental;\n      calendar_data.pickup_service = results.pickup_service;\n      calendar_data.max_nights = results.max_nights;\n      calendar_data.roomsInfo = results.roomtypes;\n      calendar_data.taxes = results.taxes;\n      calendar_data.id = results.id;\n      calendar_data.country = results.country;\n      calendar_data.name = results.name;\n      calendar_data.is_automatic_check_in_out = results.is_automatic_check_in_out;\n      calendar_data.tax_statement = results.tax_statement;\n      calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\n      calendar_data.is_pms_enabled = results.is_pms_enabled;\n      const spitTime = results?.time_constraints?.check_out_till?.split(':');\n      calendar_data.checkin_checkout_hours = {\n        offset: results.city.gmt_offset,\n        hour: Number(spitTime[0] || 0),\n        minute: Number(spitTime[1] || 0),\n      };\n      return data;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n\n  public async getChannelSales(params: ChannelSalesParams): Promise<ChannelReportResult> {\n    const _params = parseChannelSalesParams(params);\n    const { data } = await axios.post('/Get_Channel_Sales', _params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Channel_Sales.Link_excel);\n    }\n    return parseChannelReportResult(data.My_Result);\n  }\n\n  public async getExposedAllowedProperties() {\n    const { data } = await axios.post('/Get_Exposed_Allowed_Properties', {});\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return AllowedPropertiesSchema.parse(data.My_Result);\n  }\n\n  public async getCountrySales(params: CountrySalesParams) {\n    const { data } = await axios.post('/Get_Country_Sales', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Country_Sales.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async getDailyRevenueReport(params: DailyRevenueReportParams) {\n    const { data } = await axios.post('/Get_Daily_Revenue_Report', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Daily_Revenue_Report.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async setExposedCleaningFrequency(params: { property_id: number; code: string }) {\n    const { data } = await axios.post('/Set_Exposed_Cleaning_Frequency', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n  public async getMonthlyStats(params: MonthlyStatsParams): Promise<MonthlyStatsResults> {\n    const { data } = await axios.post('/Get_Monthly_Stats', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Monthly_Stats.Link_excel);\n    }\n    return data.My_Result;\n  }\n}\n"],"mappings":"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","ignoreList":[]}