{"version":3,"names":["Auth","constructor","this","baseUrl","isAuthUsed","init","axios","defaults","baseURL","subscribe","callback","subscribers","push","unsubscribe","filter","sub","setIsAuthenticated","value","_isAuthenticated","notifySubscribers","isAuthenticated","forEach","Token","super","isInterceptorAdded","interceptors","request","use","config","token","params","Ticket","setToken","getToken","MissingTokenError","Error","message","name"],"sources":["src/models/Auth.ts","src/models/Token.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass Auth {\r\n  private static isAuthUsed = false;\r\n  private static _isAuthenticated = false;\r\n  private baseUrl = 'https://gateway.igloorooms.com/IR';\r\n  private static subscribers: Array<(isAuthenticated: boolean) => void> = [];\r\n\r\n  constructor() {\r\n    if (!Auth.isAuthUsed) {\r\n      this.init();\r\n    }\r\n  }\r\n  public async init() {\r\n    // axios.defaults.withCredentials = true;\r\n    axios.defaults.baseURL = this.baseUrl;\r\n    // Auth.isAuthUsed = true;\r\n    // const { data } = await axios.post('/Is_Already_Athenticated');\r\n    // this.setIsAuthenticated(data.My_Result);\r\n  }\r\n  public subscribe(callback: (isAuthenticated: boolean) => void) {\r\n    Auth.subscribers.push(callback);\r\n  }\r\n  public unsubscribe(callback: (isAuthenticated: boolean) => void) {\r\n    Auth.subscribers = Auth.subscribers.filter(sub => sub !== callback);\r\n  }\r\n  public setIsAuthenticated(value: boolean) {\r\n    Auth._isAuthenticated = value;\r\n    Auth.notifySubscribers(value);\r\n  }\r\n\r\n  private static notifySubscribers(isAuthenticated: boolean) {\r\n    Auth.subscribers.forEach(callback => callback(isAuthenticated));\r\n  }\r\n  public isAuthenticated() {\r\n    return Auth._isAuthenticated;\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","// import axios from 'axios';\r\nimport axios from 'axios';\r\nimport Auth from './Auth';\r\n\r\nclass Token extends Auth {\r\n  private static token: string | null = '';\r\n\r\n  private static isInterceptorAdded = false;\r\n\r\n  constructor() {\r\n    super();\r\n    if (!Token.isInterceptorAdded) {\r\n      // axios.defaults.withCredentials = true;\r\n      axios.interceptors.request.use(config => {\r\n        if (Token.token) {\r\n          config.params = config.params || {};\r\n          config.params.Ticket = Token.token;\r\n        }\r\n        return config;\r\n      });\r\n      Token.isInterceptorAdded = true;\r\n    }\r\n  }\r\n\r\n  public setToken(token: string) {\r\n    Token.token = token;\r\n  }\r\n  public isAuthenticated() {\r\n    return super.isAuthenticated();\r\n  }\r\n  public getToken() {\r\n    if (!Token.token) {\r\n      throw new MissingTokenError();\r\n    }\r\n    return Token.token;\r\n  }\r\n}\r\nexport default Token;\r\nexport class MissingTokenError extends Error {\r\n  constructor(message = 'Missing token!!') {\r\n    super(message);\r\n    this.name = 'MissingTokenError';\r\n  }\r\n}\r\n"],"mappings":"oCAEA,MAAMA,EAMJ,WAAAC,GAHQC,KAAAC,QAAU,oCAIhB,IAAKH,EAAKI,WAAY,CACpBF,KAAKG,M,EAGF,UAAMA,GAEXC,EAAMC,SAASC,QAAUN,KAAKC,O,CAKzB,SAAAM,CAAUC,GACfV,EAAKW,YAAYC,KAAKF,E,CAEjB,WAAAG,CAAYH,GACjBV,EAAKW,YAAcX,EAAKW,YAAYG,QAAOC,GAAOA,IAAQL,G,CAErD,kBAAAM,CAAmBC,GACxBjB,EAAKkB,iBAAmBD,EACxBjB,EAAKmB,kBAAkBF,E,CAGjB,wBAAOE,CAAkBC,GAC/BpB,EAAKW,YAAYU,SAAQX,GAAYA,EAASU,I,CAEzC,eAAAA,GACL,OAAOpB,EAAKkB,gB,EAhCClB,EAAAI,WAAa,MACbJ,EAAAkB,iBAAmB,MAEnBlB,EAAAW,YAAyD,GCF1E,MAAMW,UAActB,EAKlB,WAAAC,GACEsB,QACA,IAAKD,EAAME,mBAAoB,CAE7BlB,EAAMmB,aAAaC,QAAQC,KAAIC,IAC7B,GAAIN,EAAMO,MAAO,CACfD,EAAOE,OAASF,EAAOE,QAAU,GACjCF,EAAOE,OAAOC,OAAST,EAAMO,K,CAE/B,OAAOD,CAAM,IAEfN,EAAME,mBAAqB,I,EAIxB,QAAAQ,CAASH,GACdP,EAAMO,MAAQA,C,CAET,eAAAT,GACL,OAAOG,MAAMH,iB,CAER,QAAAa,GACL,IAAKX,EAAMO,MAAO,CAChB,MAAM,IAAIK,C,CAEZ,OAAOZ,EAAMO,K,EA7BAP,EAAAO,MAAuB,GAEvBP,EAAAE,mBAAqB,M,MA+BzBU,UAA0BC,MACrC,WAAAlC,CAAYmC,EAAU,mBACpBb,MAAMa,GACNlC,KAAKmC,KAAO,mB","ignoreList":[]}