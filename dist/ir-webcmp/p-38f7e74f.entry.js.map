{"version":3,"names":["irHkTasksCss","IrHkTasks","constructor","hostRef","this","language","ticket","isLoading","selectedDuration","selectedHouseKeeper","selectedRoom","archiveOpened","tasks","selectedTasks","hkNameCache","roomService","RoomService","houseKeepingService","HouseKeepingService","token","Token","componentWillLoad","setToken","init","ticketChanged","newValue","oldValue","handleCloseSidebar","e","stopImmediatePropagation","stopPropagation","isSidebarOpen","propertyId","propertyid","p","Error","console","log","propertyData","getExposedProperty","id","aname","is_backend","include_units_hk_status","My_Result","property_id","requests","getHkTasks","from_date","moment","format","to_date","getExposedHKSetup","fetchLanguage","push","results","Promise","all","updateTasks","error","buildHousekeeperNameCache","_b","_a","housekeeping_store","hk_criteria","housekeepers","forEach","hk","name","map","t","Object","assign","v4","housekeeper","hkm_id","hkName","_c","find","handleHeaderButtonPress","detail","modal","openModal","handleModalConfirmation","length","executeHKAction","actions","description","unit_id","unit","booking_nbr","fetchTasksWithFilters","clearSelectedHkTasks","emit","closeModal","applyFilters","isApplyFiltersLoading","filters","cleaning_periods","cleaning_frequencies","dusty_units","highlight_check_ins","code","highlight_window","render","h","Host","class","style","gap","onHeaderButtonPress","bind","isCleanedEnabled","onApplyFilters","onRowSelectChange","autoClose","ref","el","isRequestPending","onConfirmModal","iconAvailable","icon","leftBtnText","locales","entries","Lcz_NO","rightBtnText","Lcz_Yes","leftBtnColor","rightBtnColor","modalTitle","Lcz_Confirmation","modalBody","open","side","onIrSidebarToggle","showCloseButton","slot"],"sources":["src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.css?tag=ir-hk-tasks&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n\r\n@media only screen and (min-width: 900px) {\r\n  /* td {\r\n    min-width: 140px !important;\r\n    width: max-content !important;\r\n  } */\r\n}\r\n@media only screen and (max-width: 900px) {\r\n  /* td {\r\n    min-width: 100px !important;\r\n  } */\r\n  .table-container {\r\n    width: max-content !important;\r\n  }\r\n}\r\n","import { IPendingActions, Task } from '@/models/housekeeping';\r\nimport Token from '@/models/Token';\r\nimport { HouseKeepingService } from '@/services/housekeeping.service';\r\nimport { RoomService } from '@/services/room.service';\r\nimport housekeeping_store from '@/stores/housekeeping.store';\r\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\r\nimport locales from '@/stores/locales.store';\r\nimport { Component, Host, Prop, State, h, Element, Watch, Event, EventEmitter, Listen } from '@stencil/core';\r\nimport moment from 'moment';\r\nimport { v4 } from 'uuid';\r\nimport { TaskFilters } from './types';\r\n\r\n@Component({\r\n  tag: 'ir-hk-tasks',\r\n  styleUrl: 'ir-hk-tasks.css',\r\n  scoped: true,\r\n})\r\nexport class IrHkTasks {\r\n  @Element() el: HTMLElement;\r\n\r\n  @Prop() language: string = '';\r\n  @Prop() ticket: string = '';\r\n  @Prop() propertyid: number;\r\n  @Prop() p: string;\r\n\r\n  @State() isLoading = false;\r\n  @State() selectedDuration = '';\r\n  @State() selectedHouseKeeper = '0';\r\n  @State() selectedRoom: IPendingActions | null = null;\r\n  @State() archiveOpened = false;\r\n  @State() property_id: number;\r\n  @State() tasks: Task[] = [];\r\n  @State() selectedTasks: Task[] = [];\r\n  @State() isSidebarOpen: boolean;\r\n  @State() isApplyFiltersLoading: boolean;\r\n  @State() filters: TaskFilters;\r\n\r\n  @Event({ bubbles: true, composed: true }) clearSelectedHkTasks: EventEmitter<void>;\r\n\r\n  private hkNameCache: Record<number, string> = {};\r\n  private roomService = new RoomService();\r\n  private houseKeepingService = new HouseKeepingService();\r\n  private token = new Token();\r\n  private modal: HTMLIrModalElement;\r\n\r\n  componentWillLoad() {\r\n    if (this.ticket !== '') {\r\n      this.token.setToken(this.ticket);\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  @Watch('ticket')\r\n  ticketChanged(newValue: string, oldValue: string) {\r\n    if (newValue === oldValue) {\r\n      return;\r\n    }\r\n    this.token.setToken(this.ticket);\r\n    this.init();\r\n  }\r\n\r\n  @Listen('closeSideBar')\r\n  handleCloseSidebar(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.isSidebarOpen = false;\r\n  }\r\n\r\n  private async init() {\r\n    try {\r\n      this.isLoading = true;\r\n      let propertyId = this.propertyid;\r\n      if (!this.propertyid && !this.p) {\r\n        throw new Error('Property ID or username is required');\r\n      }\r\n      // let roomResp = null;\r\n      if (!propertyId) {\r\n        console.log(propertyId);\r\n        const propertyData = await this.roomService.getExposedProperty({\r\n          id: 0,\r\n          aname: this.p,\r\n          language: this.language,\r\n          is_backend: true,\r\n          include_units_hk_status: true,\r\n        });\r\n        // roomResp = propertyData;\r\n        propertyId = propertyData.My_Result.id;\r\n      }\r\n      this.property_id = propertyId;\r\n      const requests = [\r\n        this.houseKeepingService.getHkTasks({ property_id: this.property_id, from_date: moment().format('YYYY-MM-DD'), to_date: moment().format('YYYY-MM-DD') }),\r\n        this.houseKeepingService.getExposedHKSetup(this.property_id),\r\n        this.roomService.fetchLanguage(this.language),\r\n      ];\r\n      if (this.propertyid) {\r\n        requests.push(\r\n          this.roomService.getExposedProperty({\r\n            id: this.propertyid,\r\n            language: this.language,\r\n            is_backend: true,\r\n            include_units_hk_status: true,\r\n          }),\r\n        );\r\n      }\r\n\r\n      const results = await Promise.all(requests);\r\n      const tasks = results[0];\r\n      if (tasks) {\r\n        this.updateTasks(tasks);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  private buildHousekeeperNameCache() {\r\n    this.hkNameCache = {};\r\n    housekeeping_store.hk_criteria?.housekeepers?.forEach(hk => {\r\n      if (hk.id != null && hk.name != null) {\r\n        this.hkNameCache[hk.id] = hk.name;\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateTasks(tasks) {\r\n    this.buildHousekeeperNameCache();\r\n    this.tasks = tasks.map(t => ({\r\n      ...t,\r\n      id: v4(),\r\n      housekeeper: (() => {\r\n        const name = this.hkNameCache[t.hkm_id];\r\n        if (name) {\r\n          return name;\r\n        }\r\n        const hkName = housekeeping_store.hk_criteria?.housekeepers?.find(hk => hk.id === t.hkm_id)?.name;\r\n        this.hkNameCache[t.hkm_id] = hkName;\r\n        return hkName;\r\n      })(),\r\n    }));\r\n  }\r\n\r\n  private handleHeaderButtonPress(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    const { name } = e.detail;\r\n    switch (name) {\r\n      case 'cleaned':\r\n        this.modal?.openModal();\r\n        break;\r\n      case 'export':\r\n        break;\r\n      case 'archive':\r\n        this.isSidebarOpen = true;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private async handleModalConfirmation(e: CustomEvent) {\r\n    try {\r\n      e.stopImmediatePropagation();\r\n      e.stopPropagation();\r\n      if (this.selectedTasks.length === 0) {\r\n        return;\r\n      }\r\n      await this.houseKeepingService.executeHKAction({\r\n        actions: this.selectedTasks.map(t => ({ description: 'Cleaned', hkm_id: t.hkm_id === 0 ? null : t.hkm_id, unit_id: t.unit.id, booking_nbr: t.booking_nbr })),\r\n      });\r\n      await this.fetchTasksWithFilters();\r\n    } finally {\r\n      this.selectedTasks = [];\r\n      this.clearSelectedHkTasks.emit();\r\n      this.modal.closeModal();\r\n    }\r\n  }\r\n\r\n  private async applyFilters(e: CustomEvent) {\r\n    try {\r\n      this.isApplyFiltersLoading = true;\r\n      e.stopImmediatePropagation();\r\n      e.stopPropagation();\r\n      this.filters = { ...e.detail };\r\n      await this.fetchTasksWithFilters();\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      this.isApplyFiltersLoading = false;\r\n    }\r\n  }\r\n  private async fetchTasksWithFilters() {\r\n    const { cleaning_periods, housekeepers, cleaning_frequencies, dusty_units, highlight_check_ins } = this.filters ?? {};\r\n\r\n    const tasks = await this.houseKeepingService.getHkTasks({\r\n      housekeepers,\r\n      cleaning_frequencies: cleaning_frequencies?.code,\r\n      dusty_units: dusty_units?.code,\r\n      highlight_window: highlight_check_ins?.code,\r\n      property_id: this.property_id,\r\n      from_date: moment().format('YYYY-MM-DD'),\r\n      to_date: cleaning_periods?.code || moment().format('YYYY-MM-DD'),\r\n    });\r\n    if (tasks) {\r\n      this.updateTasks(tasks);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (this.isLoading) {\r\n      return <ir-loading-screen></ir-loading-screen>;\r\n    }\r\n    return (\r\n      <Host data-testid=\"hk_tasks_base\">\r\n        <ir-toast></ir-toast>\r\n        <ir-interceptor></ir-interceptor>\r\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\r\n          <ir-tasks-header onHeaderButtonPress={this.handleHeaderButtonPress.bind(this)} isCleanedEnabled={this.selectedTasks.length > 0}></ir-tasks-header>\r\n          <div class=\"d-flex flex-column flex-md-row mt-1 \" style={{ gap: '1rem' }}>\r\n            <ir-tasks-filters\r\n              isLoading={this.isApplyFiltersLoading}\r\n              onApplyFilters={e => {\r\n                this.applyFilters(e);\r\n              }}\r\n            ></ir-tasks-filters>\r\n            <ir-tasks-table\r\n              onRowSelectChange={e => {\r\n                e.stopImmediatePropagation();\r\n                e.stopPropagation();\r\n                this.selectedTasks = e.detail;\r\n              }}\r\n              class=\"flex-grow-1 w-100\"\r\n              tasks={this.tasks}\r\n            ></ir-tasks-table>\r\n          </div>\r\n        </section>\r\n        <ir-modal\r\n          autoClose={false}\r\n          ref={el => (this.modal = el)}\r\n          isLoading={isRequestPending('/Execute_HK_Action')}\r\n          onConfirmModal={this.handleModalConfirmation.bind(this)}\r\n          iconAvailable={true}\r\n          icon=\"ft-alert-triangle danger h1\"\r\n          leftBtnText={locales.entries.Lcz_NO}\r\n          rightBtnText={locales.entries.Lcz_Yes}\r\n          leftBtnColor=\"secondary\"\r\n          rightBtnColor={'primary'}\r\n          modalTitle={locales.entries.Lcz_Confirmation}\r\n          modalBody={'Update selected unit(s) to Clean'}\r\n        ></ir-modal>\r\n        <ir-sidebar\r\n          open={this.isSidebarOpen}\r\n          side={'right'}\r\n          id=\"editGuestInfo\"\r\n          onIrSidebarToggle={e => {\r\n            e.stopImmediatePropagation();\r\n            e.stopPropagation();\r\n            this.isSidebarOpen = false;\r\n          }}\r\n          showCloseButton={false}\r\n        >\r\n          {this.isSidebarOpen && <ir-hk-archive propertyId={this.property_id} slot=\"sidebar-body\"></ir-hk-archive>}\r\n        </ir-sidebar>\r\n        {/* <ir-title class=\"d-none d-md-flex\" label={locales.entries.Lcz_HousekeepingTasks} justifyContent=\"space-between\">\r\n            <ir-button slot=\"title-body\" text={locales.entries.Lcz_Archive} size=\"sm\"></ir-button>\r\n          </ir-title> */}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"8ZAAA,MAAMA,EAAe,2I,MCiBRC,EAAS,MALtB,WAAAC,CAAAC,G,mEAQUC,KAAQC,SAAW,GACnBD,KAAME,OAAW,GAIhBF,KAASG,UAAG,MACZH,KAAgBI,iBAAG,GACnBJ,KAAmBK,oBAAG,IACtBL,KAAYM,aAA2B,KACvCN,KAAaO,cAAG,MAEhBP,KAAKQ,MAAW,GAChBR,KAAaS,cAAW,GAOzBT,KAAWU,YAA2B,GACtCV,KAAAW,YAAc,IAAIC,EAClBZ,KAAAa,oBAAsB,IAAIC,EAC1Bd,KAAAe,MAAQ,IAAIC,CAkOrB,CA/NC,iBAAAC,GACE,GAAIjB,KAAKE,SAAW,GAAI,CACtBF,KAAKe,MAAMG,SAASlB,KAAKE,QACzBF,KAAKmB,M,EAKT,aAAAC,CAAcC,EAAkBC,GAC9B,GAAID,IAAaC,EAAU,CACzB,M,CAEFtB,KAAKe,MAAMG,SAASlB,KAAKE,QACzBF,KAAKmB,M,CAIP,kBAAAI,CAAmBC,GACjBA,EAAEC,2BACFD,EAAEE,kBACF1B,KAAK2B,cAAgB,K,CAGf,UAAMR,GACZ,IACEnB,KAAKG,UAAY,KACjB,IAAIyB,EAAa5B,KAAK6B,WACtB,IAAK7B,KAAK6B,aAAe7B,KAAK8B,EAAG,CAC/B,MAAM,IAAIC,MAAM,sC,CAGlB,IAAKH,EAAY,CACfI,QAAQC,IAAIL,GACZ,MAAMM,QAAqBlC,KAAKW,YAAYwB,mBAAmB,CAC7DC,GAAI,EACJC,MAAOrC,KAAK8B,EACZ7B,SAAUD,KAAKC,SACfqC,WAAY,KACZC,wBAAyB,OAG3BX,EAAaM,EAAaM,UAAUJ,E,CAEtCpC,KAAKyC,YAAcb,EACnB,MAAMc,EAAW,CACf1C,KAAKa,oBAAoB8B,WAAW,CAAEF,YAAazC,KAAKyC,YAAaG,UAAWC,IAASC,OAAO,cAAeC,QAASF,IAASC,OAAO,gBACxI9C,KAAKa,oBAAoBmC,kBAAkBhD,KAAKyC,aAChDzC,KAAKW,YAAYsC,cAAcjD,KAAKC,WAEtC,GAAID,KAAK6B,WAAY,CACnBa,EAASQ,KACPlD,KAAKW,YAAYwB,mBAAmB,CAClCC,GAAIpC,KAAK6B,WACT5B,SAAUD,KAAKC,SACfqC,WAAY,KACZC,wBAAyB,O,CAK/B,MAAMY,QAAgBC,QAAQC,IAAIX,GAClC,MAAMlC,EAAQ2C,EAAQ,GACtB,GAAI3C,EAAO,CACTR,KAAKsD,YAAY9C,E,EAEnB,MAAO+C,GACPvB,QAAQC,IAAIsB,E,SAEZvD,KAAKG,UAAY,K,EAIb,yBAAAqD,G,QACNxD,KAAKU,YAAc,IACnB+C,GAAAC,EAAAC,EAAmBC,eAAW,MAAAF,SAAA,SAAAA,EAAEG,gBAAY,MAAAJ,SAAA,SAAAA,EAAEK,SAAQC,IACpD,GAAIA,EAAG3B,IAAM,MAAQ2B,EAAGC,MAAQ,KAAM,CACpChE,KAAKU,YAAYqD,EAAG3B,IAAM2B,EAAGC,I,KAK3B,WAAAV,CAAY9C,GAClBR,KAAKwD,4BACLxD,KAAKQ,MAAQA,EAAMyD,KAAIC,GAACC,OAAAC,OAAAD,OAAAC,OAAA,GACnBF,GAAC,CACJ9B,GAAIiC,IACJC,YAAa,M,UACX,MAAMN,EAAOhE,KAAKU,YAAYwD,EAAEK,QAChC,GAAIP,EAAM,CACR,OAAOA,C,CAET,MAAMQ,GAASC,GAAAhB,GAAAC,EAAAC,EAAmBC,eAAW,MAAAF,SAAA,SAAAA,EAAEG,gBAAY,MAAAJ,SAAA,SAAAA,EAAEiB,MAAKX,GAAMA,EAAG3B,KAAO8B,EAAEK,YAAS,MAAAE,SAAA,SAAAA,EAAAT,KAC7FhE,KAAKU,YAAYwD,EAAEK,QAAUC,EAC7B,OAAOA,CACR,EARY,M,CAYT,uBAAAG,CAAwBnD,G,MAC9BA,EAAEC,2BACFD,EAAEE,kBACF,MAAMsC,KAAEA,GAASxC,EAAEoD,OACnB,OAAQZ,GACN,IAAK,WACHN,EAAA1D,KAAK6E,SAAO,MAAAnB,SAAA,SAAAA,EAAAoB,YACZ,MACF,IAAK,SACH,MACF,IAAK,UACH9E,KAAK2B,cAAgB,KACrB,M,CAIE,6BAAMoD,CAAwBvD,GACpC,IACEA,EAAEC,2BACFD,EAAEE,kBACF,GAAI1B,KAAKS,cAAcuE,SAAW,EAAG,CACnC,M,OAEIhF,KAAKa,oBAAoBoE,gBAAgB,CAC7CC,QAASlF,KAAKS,cAAcwD,KAAIC,IAAC,CAAOiB,YAAa,UAAWZ,OAAQL,EAAEK,SAAW,EAAI,KAAOL,EAAEK,OAAQa,QAASlB,EAAEmB,KAAKjD,GAAIkD,YAAapB,EAAEoB,wBAEzItF,KAAKuF,uB,SAEXvF,KAAKS,cAAgB,GACrBT,KAAKwF,qBAAqBC,OAC1BzF,KAAK6E,MAAMa,Y,EAIP,kBAAMC,CAAanE,GACzB,IACExB,KAAK4F,sBAAwB,KAC7BpE,EAAEC,2BACFD,EAAEE,kBACF1B,KAAK6F,QAAO1B,OAAAC,OAAA,GAAQ5C,EAAEoD,cAChB5E,KAAKuF,uB,CACX,MAAOhC,GACPvB,QAAQC,IAAIsB,E,SAEZvD,KAAK4F,sBAAwB,K,EAGzB,2BAAML,G,MACZ,MAAMO,iBAAEA,EAAgBjC,aAAEA,EAAYkC,qBAAEA,EAAoBC,YAAEA,EAAWC,oBAAEA,IAAwBvC,EAAA1D,KAAK6F,WAAO,MAAAnC,SAAA,EAAAA,EAAI,GAEnH,MAAMlD,QAAcR,KAAKa,oBAAoB8B,WAAW,CACtDkB,eACAkC,qBAAsBA,IAAoB,MAApBA,SAAA,SAAAA,EAAsBG,KAC5CF,YAAaA,IAAW,MAAXA,SAAA,SAAAA,EAAaE,KAC1BC,iBAAkBF,IAAmB,MAAnBA,SAAA,SAAAA,EAAqBC,KACvCzD,YAAazC,KAAKyC,YAClBG,UAAWC,IAASC,OAAO,cAC3BC,SAAS+C,IAAA,MAAAA,SAAgB,SAAhBA,EAAkBI,OAAQrD,IAASC,OAAO,gBAErD,GAAItC,EAAO,CACTR,KAAKsD,YAAY9C,E,EAIrB,MAAA4F,GACE,GAAIpG,KAAKG,UAAW,CAClB,OAAOkG,EAAA,yB,CAET,OACEA,EAACC,EAAI,eAAa,iBAChBD,EAAqB,iBACrBA,EAAiC,uBACjCA,EAAS,WAAAE,MAAM,yBAAyBC,MAAO,CAAEC,IAAK,SACpDJ,EAAiB,mBAAAK,oBAAqB1G,KAAK2E,wBAAwBgC,KAAK3G,MAAO4G,iBAAkB5G,KAAKS,cAAcuE,OAAS,IAC7HqB,EAAK,OAAAE,MAAM,uCAAuCC,MAAO,CAAEC,IAAK,SAC9DJ,EACE,oBAAAlG,UAAWH,KAAK4F,sBAChBiB,eAAgBrF,IACdxB,KAAK2F,aAAanE,EAAE,IAGxB6E,EAAA,kBACES,kBAAmBtF,IACjBA,EAAEC,2BACFD,EAAEE,kBACF1B,KAAKS,cAAgBe,EAAEoD,MAAM,EAE/B2B,MAAM,oBACN/F,MAAOR,KAAKQ,UAIlB6F,EAAA,YACEU,UAAW,MACXC,IAAKC,GAAOjH,KAAK6E,MAAQoC,EACzB9G,UAAW+G,EAAiB,sBAC5BC,eAAgBnH,KAAK+E,wBAAwB4B,KAAK3G,MAClDoH,cAAe,KACfC,KAAK,8BACLC,YAAaC,EAAQC,QAAQC,OAC7BC,aAAcH,EAAQC,QAAQG,QAC9BC,aAAa,YACbC,cAAe,UACfC,WAAYP,EAAQC,QAAQO,iBAC5BC,UAAW,qCAEb3B,EAAA,cACE4B,KAAMjI,KAAK2B,cACXuG,KAAM,QACN9F,GAAG,gBACH+F,kBAAmB3G,IACjBA,EAAEC,2BACFD,EAAEE,kBACF1B,KAAK2B,cAAgB,KAAK,EAE5ByG,gBAAiB,OAEhBpI,KAAK2B,eAAiB0E,EAAe,iBAAAzE,WAAY5B,KAAKyC,YAAa4F,KAAK,kB","ignoreList":[]}