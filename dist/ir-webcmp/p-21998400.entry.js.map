{"version":3,"names":["irRadioCss","IrRadioStyle0","IrRadio","constructor","hostRef","this","checked","radioBoxId","v4","currentChecked","componentWillLoad","componentDidLoad","radioRef","setAttribute","JSON","stringify","handleCheckedChange","newValue","handleCheckChange","checkChange","emit","render","h","key","class","label","type","value","title","onChange","ref","el"],"sources":["src/components/ui/ir-radio/ir-radio.css?tag=ir-radio&encapsulation=scoped","src/components/ui/ir-radio/ir-radio.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Event, EventEmitter, Prop, State, h, Watch } from '@stencil/core';\nimport { v4 } from 'uuid';\n\n@Component({\n  tag: 'ir-radio',\n  styleUrl: 'ir-radio.css',\n  scoped: true,\n})\nexport class IrRadio {\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Prop() checked: boolean = false;\n\n  /**\n   * The label text associated with the checkbox.\n   */\n  @Prop() label: string;\n\n  /**\n   * The unique ID of the checkbox element.\n   */\n  @Prop() radioBoxId = v4();\n\n  /**\n   * The name attribute of the checkbox, used for form submission.\n   */\n  @Prop() name: string;\n\n  /**\n   * Whether the checkbox is in an indeterminate state.\n   */\n  @Prop() indeterminate: boolean;\n\n  /**\n   * Disables the checkbox when true.\n   */\n  @Prop() disabled: boolean;\n\n  /**\n   * CSS class applied to the label element.\n   */\n  @Prop() labelClass: string;\n\n  /**\n   * Internal state tracking whether the checkbox is currently checked.\n   */\n  @State() currentChecked = false;\n\n  /**\n   * Emitted when the checkbox's checked state changes.\n   */\n  @Event() checkChange: EventEmitter<boolean>;\n\n  private radioRef: HTMLInputElement;\n\n  componentWillLoad() {\n    this.currentChecked = this.checked;\n  }\n  componentDidLoad() {\n    if (this.radioRef) {\n      this.radioRef.setAttribute('aria-checked', JSON.stringify(this.checked));\n    }\n  }\n  /**\n   * Watcher for the `checked` property. Syncs internal state with external prop changes.\n   */\n  @Watch('checked')\n  handleCheckedChange(newValue: boolean) {\n    if (newValue === this.currentChecked) {\n      return;\n    }\n    this.currentChecked = this.checked;\n  }\n\n  /**\n   * Handles user interaction with the checkbox and updates its state.\n   */\n  private handleCheckChange() {\n    this.currentChecked = !this.currentChecked;\n    if (this.radioRef) {\n      this.radioRef.setAttribute('aria-checked', JSON.stringify(this.currentChecked));\n    }\n    this.checkChange.emit(this.currentChecked);\n  }\n  render() {\n    return (\n      <div class=\"input-group\">\n        <label class=\"check-container radio-container\">\n          <span>{this.label}</span>\n          <input\n            type=\"radio\"\n            value=\"000\"\n            title=\"\"\n            onChange={() => {\n              this.handleCheckChange();\n            }}\n            checked={this.currentChecked}\n            ref={el => (this.radioRef = el)}\n          />\n          <span class=\"checkmark\"></span>\n        </label>\n      </div>\n    );\n  }\n}\n"],"mappings":"sFAAA,MAAMA,EAAa,gCACnB,MAAAC,EAAeD,E,MCOFE,EAAO,MALpB,WAAAC,CAAAC,G,mDASUC,KAAAC,QAAmB,MAUnBD,KAAAE,WAAaC,IAyBZH,KAAAI,eAAiB,K,CAS1B,iBAAAC,GACEL,KAAKI,eAAiBJ,KAAKC,O,CAE7B,gBAAAK,GACE,GAAIN,KAAKO,SAAU,CACjBP,KAAKO,SAASC,aAAa,eAAgBC,KAAKC,UAAUV,KAAKC,S,EAOnE,mBAAAU,CAAoBC,GAClB,GAAIA,IAAaZ,KAAKI,eAAgB,CACpC,M,CAEFJ,KAAKI,eAAiBJ,KAAKC,O,CAMrB,iBAAAY,GACNb,KAAKI,gBAAkBJ,KAAKI,eAC5B,GAAIJ,KAAKO,SAAU,CACjBP,KAAKO,SAASC,aAAa,eAAgBC,KAAKC,UAAUV,KAAKI,gB,CAEjEJ,KAAKc,YAAYC,KAAKf,KAAKI,e,CAE7B,MAAAY,GACE,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAM,eACTF,EAAA,SAAAC,IAAA,2CAAOC,MAAM,mCACXF,EAAA,QAAAC,IAAA,4CAAOlB,KAAKoB,OACZH,EAAA,SAAAC,IAAA,2CACEG,KAAK,QACLC,MAAM,MACNC,MAAM,GACNC,SAAU,KACRxB,KAAKa,mBAAmB,EAE1BZ,QAASD,KAAKI,eACdqB,IAAKC,GAAO1B,KAAKO,SAAWmB,IAE9BT,EAAA,QAAAC,IAAA,2CAAMC,MAAM,e","ignoreList":[]}