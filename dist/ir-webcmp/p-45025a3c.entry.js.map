{"version":3,"names":["irInputTextCss","IrInputTextStyle0","IrInputText","constructor","hostRef","this","label","placeholder","inputStyles","LabelAvailable","readonly","type","submitted","inputStyle","size","textSize","labelPosition","labelBackground","labelColor","labelBorder","labelWidth","variant","disabled","error","autoValidate","initial","inputFocused","isError","componentWillLoad","el","id","v4","componentDidLoad","mask","initMask","handleMaskChange","watchHandler2","newValue","required","handleErrorChange","oldValue","validateInput","value","handleAriaInvalidChange","forceValidation","zod","parse","wrapKey","console","log","handleInputChange","event","target","maskInstance","maskedValue","textChange","emit","IMask","inputRef","on","handleBlur","e","inputBlur","render","h","class","htmlFor","name","ref","onFocus","inputFocus","onBlur","bind","onInput","className","style","inputForcedStyle","readOnly"],"sources":["src/components/ui/ir-input-text/ir-input-text.css?tag=ir-input-text&encapsulation=scoped","src/components/ui/ir-input-text/ir-input-text.tsx"],"sourcesContent":[":host {\r\n  margin: 0;\r\n  padding: 0;\r\n  display: inline;\r\n}\r\n.border-theme {\r\n  border: 1px solid #cacfe7;\r\n}\r\n.icon-container {\r\n  color: #3b4781;\r\n  border: 1px solid #cacfe7;\r\n  font-size: 0.975rem;\r\n  height: 2rem;\r\n  background: rgb(255, 255, 255);\r\n  padding-right: 0 !important;\r\n  border-right: 0;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\r\n}\r\ninput:focus {\r\n  border-color: #1e9ff2 !important;\r\n}\r\n.ir-input[data-state='empty'] {\r\n  color: #bbbfc6;\r\n}\r\n.input-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  box-sizing: border-box;\r\n  flex: 1;\r\n}\r\n.input-container input {\r\n  padding-left: 5px !important;\r\n  padding-right: 5px !important;\r\n  border-left: 0;\r\n  border-top-left-radius: 0 !important;\r\n  border-bottom-left-radius: 0 !important;\r\n}\r\n.icon-container[data-state='focus'] {\r\n  border-color: var(--blue);\r\n}\r\n.icon-container[data-disabled] {\r\n  background-color: #eceff1;\r\n  border-color: rgba(118, 118, 118, 0.3);\r\n}\r\n.danger-border {\r\n  border-color: var(--red);\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter, State, Watch, Element } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\nimport IMask, { FactoryArg, InputMask } from 'imask';\r\nimport { ZodType } from 'zod';\r\n\r\n@Component({\r\n  tag: 'ir-input-text',\r\n  styleUrl: 'ir-input-text.css',\r\n  scoped: true,\r\n})\r\nexport class IrInputText {\r\n  @Element() el: HTMLIrInputTextElement;\r\n  /** Name attribute for the input field */\r\n  @Prop() name: string;\r\n\r\n  /** Value of the input field */\r\n  @Prop() value: string;\r\n\r\n  /** Label text for the input */\r\n  @Prop() label = '';\r\n\r\n  /** Placeholder text for the input */\r\n  @Prop() placeholder = '';\r\n\r\n  /** Additional inline styles for the input */\r\n  @Prop() inputStyles = '';\r\n\r\n  /** Whether the input field is required */\r\n  @Prop() required: boolean;\r\n\r\n  /** Determines if the label is displayed */\r\n  @Prop() LabelAvailable: boolean = true;\r\n\r\n  /** Whether the input field is read-only */\r\n  @Prop() readonly: boolean = false;\r\n\r\n  /** Input type (e.g., text, password, email) */\r\n  @Prop() type:\r\n    | 'text'\r\n    | 'password'\r\n    | 'email'\r\n    | 'number'\r\n    | 'tel'\r\n    | 'url'\r\n    | 'search'\r\n    | 'date'\r\n    | 'datetime-local'\r\n    | 'month'\r\n    | 'week'\r\n    | 'time'\r\n    | 'color'\r\n    | 'file'\r\n    | 'hidden'\r\n    | 'checkbox'\r\n    | 'radio'\r\n    | 'range'\r\n    | 'button'\r\n    | 'reset'\r\n    | 'submit'\r\n    | 'image' = 'text';\r\n\r\n  /** Whether the form has been submitted */\r\n  @Prop() submitted: boolean = false;\r\n\r\n  /** Whether to apply default input styling */\r\n  @Prop() inputStyle: boolean = true;\r\n\r\n  /** Size of the input field: small (sm), medium (md), or large (lg) */\r\n  @Prop() size: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /** Text size inside the input field */\r\n  @Prop() textSize: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /** Position of the label: left, right, or center */\r\n  @Prop() labelPosition: 'left' | 'right' | 'center' = 'left';\r\n\r\n  /** Background color of the label */\r\n  @Prop() labelBackground: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null = null;\r\n\r\n  /** Text color of the label */\r\n  @Prop() labelColor: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' = 'dark';\r\n\r\n  /** Border color/style of the label */\r\n  @Prop() labelBorder: 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none' = 'theme';\r\n\r\n  /** Label width as a fraction of 12 columns (1-11) */\r\n  @Prop() labelWidth: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 = 3;\r\n\r\n  /** Variant of the input: default or icon */\r\n  @Prop() variant: 'default' | 'icon' = 'default';\r\n\r\n  /** Whether the input is disabled */\r\n  @Prop() disabled: boolean = false;\r\n\r\n  /** Whether the input has an error */\r\n  @Prop({ mutable: true }) error: boolean = false;\r\n\r\n  /** Mask for the input field (optional) */\r\n  @Prop() mask: FactoryArg;\r\n\r\n  /** Whether the input should auto-validate */\r\n  @Prop() autoValidate?: boolean = true;\r\n\r\n  /** A Zod schema for validating the input */\r\n  @Prop() zod?: ZodType<any, any>;\r\n\r\n  /** Key to wrap the value (e.g., 'price' or 'cost') */\r\n  @Prop() wrapKey?: string;\r\n\r\n  /** Forcing css style to the input */\r\n  @Prop() inputForcedStyle?: { [key: string]: string };\r\n\r\n  @State() initial: boolean = true;\r\n  @State() inputFocused: boolean = false;\r\n\r\n  @State() isError: boolean = false;\r\n\r\n  @Event({ bubbles: true, composed: true }) textChange: EventEmitter<any>;\r\n  @Event() inputBlur: EventEmitter<FocusEvent>;\r\n  @Event() inputFocus: EventEmitter<FocusEvent>;\r\n\r\n  private inputRef: HTMLInputElement;\r\n  private maskInstance: InputMask<FactoryArg>;\r\n  /**Input Id */\r\n  private id: string;\r\n  componentWillLoad() {\r\n    if (this.el.id) {\r\n      this.id = this.el.id;\r\n    } else {\r\n      this.id = v4();\r\n    }\r\n  }\r\n  componentDidLoad() {\r\n    if (this.mask) this.initMask();\r\n  }\r\n\r\n  @Watch('mask')\r\n  handleMaskChange() {\r\n    this.initMask();\r\n  }\r\n\r\n  @Watch('submitted')\r\n  watchHandler2(newValue: boolean) {\r\n    if (newValue && this.required) {\r\n      this.initial = false;\r\n    }\r\n  }\r\n\r\n  @Watch('error')\r\n  handleErrorChange(newValue: boolean, oldValue: boolean) {\r\n    if (newValue !== oldValue) {\r\n      this.validateInput(this.value, true);\r\n    }\r\n  }\r\n\r\n  @Watch('aria-invalid')\r\n  handleAriaInvalidChange(newValue: string) {\r\n    if (newValue === 'true') {\r\n      this.isError = true;\r\n    } else {\r\n      this.isError = false;\r\n    }\r\n  }\r\n\r\n  private validateInput(value: string, forceValidation: boolean = false): void {\r\n    if (!this.autoValidate && !forceValidation) {\r\n      return;\r\n    }\r\n    if (this.zod) {\r\n      try {\r\n        this.zod.parse(this.wrapKey ? { [this.wrapKey]: value } : value); // Validate the value using the Zod schema\r\n        this.error = false; // Clear the error if valid\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.error = true; // Set the error message\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleInputChange(event: InputEvent) {\r\n    this.initial = false;\r\n    const value = (event.target as HTMLInputElement).value;\r\n    if (this.maskInstance) {\r\n      this.maskInstance.value = value;\r\n    }\r\n    const maskedValue = this.maskInstance ? this.maskInstance.value : value;\r\n    this.textChange.emit(maskedValue);\r\n  }\r\n\r\n  private initMask() {\r\n    if (!this.mask || this.maskInstance) {\r\n      return;\r\n    }\r\n\r\n    this.maskInstance = IMask(this.inputRef, this.mask);\r\n\r\n    // Listen to mask changes to keep input value in sync\r\n    this.maskInstance.on('accept', () => {\r\n      this.inputRef.value = this.maskInstance.value; // Update the input field\r\n      this.textChange.emit(this.maskInstance.value); // Emit the masked value\r\n    });\r\n  }\r\n  // Function that handles the blur events\r\n  // it validates the input and emits the blur event\r\n  private handleBlur(e: FocusEvent) {\r\n    this.validateInput(this.value, this.submitted);\r\n    this.inputFocused = false;\r\n    this.inputBlur.emit(e);\r\n  }\r\n\r\n  render() {\r\n    if (this.variant === 'icon') {\r\n      return (\r\n        <fieldset class=\"position-relative has-icon-left input-container\">\r\n          <label htmlFor={this.id} class=\"input-group-prepend bg-white m-0\">\r\n            <span\r\n              data-disabled={this.disabled}\r\n              data-state={this.inputFocused ? 'focus' : ''}\r\n              class={`input-group-text icon-container bg-white ${(this.error || this.isError) && 'danger-border'}`}\r\n              id=\"basic-addon1\"\r\n            >\r\n              <slot name=\"icon\"></slot>\r\n            </span>\r\n          </label>\r\n          <input\r\n            data-state={!!this.value ? '' : this.mask ? 'empty' : ''}\r\n            ref={el => (this.inputRef = el)}\r\n            type={this.type}\r\n            onFocus={e => {\r\n              this.inputFocused = true;\r\n              this.inputFocus.emit(e);\r\n            }}\r\n            required={this.required}\r\n            onBlur={this.handleBlur.bind(this)}\r\n            disabled={this.disabled}\r\n            class={`ir-input form-control bg-white pl-0 input-sm rate-input py-0 m-0 rateInputBorder ${(this.error || this.isError) && 'danger-border'}`}\r\n            id={this.id}\r\n            value={this.value}\r\n            placeholder={this.placeholder}\r\n            onInput={this.handleInputChange.bind(this)}\r\n          />\r\n        </fieldset>\r\n      );\r\n    }\r\n    let className = 'form-control';\r\n    let label = (\r\n      <div class={`input-group-prepend col-${this.labelWidth} p-0 text-${this.labelColor}`}>\r\n        <label\r\n          htmlFor={this.id}\r\n          class={` input-group-text ${this.labelPosition === 'right' ? 'justify-content-end' : this.labelPosition === 'center' ? 'justify-content-center' : ''} ${\r\n            this.labelBackground ? 'bg-' + this.labelBackground : ''\r\n          } flex-grow-1 text-${this.labelColor} border-${this.labelBorder === 'none' ? 0 : this.labelBorder} `}\r\n        >\r\n          {this.label}\r\n          {this.required ? '*' : ''}\r\n        </label>\r\n      </div>\r\n    );\r\n    if (!this.LabelAvailable) {\r\n      label = '';\r\n    }\r\n    if (this.inputStyle === false) {\r\n      className = '';\r\n    }\r\n    if (this.required && !this.initial) {\r\n      className = `${className} border-danger`;\r\n    }\r\n    return (\r\n      <div class=\"form-group\">\r\n        <div class=\"input-group row m-0\">\r\n          {label}\r\n          <input\r\n            style={this.inputForcedStyle}\r\n            data-state={!!this.value ? '' : this.mask ? 'empty' : ''}\r\n            id={this.id}\r\n            ref={el => (this.inputRef = el)}\r\n            readOnly={this.readonly}\r\n            type={this.type}\r\n            class={`ir-input ${className} ${this.error || this.isError ? 'border-danger' : ''} form-control-${this.size} text-${this.textSize} col-${\r\n              this.LabelAvailable ? 12 - this.labelWidth : 12\r\n            } ${this.readonly && 'bg-white'} ${this.inputStyles}`}\r\n            onBlur={this.handleBlur.bind(this)}\r\n            onFocus={e => {\r\n              this.inputFocused = true;\r\n              this.inputFocus.emit(e);\r\n            }}\r\n            placeholder={this.placeholder}\r\n            value={this.value}\r\n            onInput={this.handleInputChange.bind(this)}\r\n            required={this.required}\r\n            disabled={this.disabled}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}