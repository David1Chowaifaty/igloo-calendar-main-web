{"version":3,"names":["arrayReduce","array","iteratee","accumulator","initAccum","index","length","basePropertyOf","object","key","undefined","deburredLetters","deburrLetter","deburrLetter$1","reLatin","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsCombo","reComboMark","RegExp","deburr","string","toString","replace","reAsciiWord","asciiWords","match","reHasUnicodeWord","hasUnicodeWord","test","rsAstralRange","rsDingbatRange","rsLowerRange","rsMathOpRange","rsNonCharRange","rsPunctuationRange","rsSpaceRange","rsUpperRange","rsVarRange","rsBreakRange","rsApos","rsBreak","rsDigits","rsDingbat","rsLower","rsMisc","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsUpper","rsZWJ","rsMiscLower","rsMiscUpper","rsOptContrLower","rsOptContrUpper","reOptMod","rsOptVar","rsOptJoin","join","rsOrdLower","rsOrdUpper","rsSeq","rsEmoji","reUnicodeWord","unicodeWords","words","pattern","guard","reApos","createCompounder","callback","mergeWith","createAssigner","source","srcIndex","customizer","baseMerge","mergeWith$1","startCase","result","word","upperFirst","startCase$1","blockAutoformatEditing","editor","plugin","callbackOrCommand","command","commands","get","execute","model","document","on","evt","batch","isEnabled","range","first","selection","getRanges","isCollapsed","isUndo","isLocal","changes","Array","from","differ","getChanges","entry","type","name","blockToFormat","position","parent","is","includes","value","firstNode","getChild","firstNodeRange","createRangeOn","containsRange","end","isEqual","exec","data","substr","offset","enqueueChange","writer","start","createPositionAt","LiveRange","wasChanged","remove","selectionRange","getFirstRange","blockRange","createRangeIn","isEmpty","detach","deletePlugin","plugins","requestUndoOnBackspace","inlineAutoformatEditing","testRegexpOrCallback","formatCallback","regExp","testCallback","text","format","leftDel","content","rightDel","found","delStart","delEnd","push","focus","block","getTextAfterCode","createRange","testOutput","rangesToFormat","testOutputToRanges","rangesToRemove","hasChanged","reverse","arrays","filter","map","getShiftedBy","getItems","reduce","rangeText","node","getAttribute","createPositionAfter","Autoformat","Plugin","requires","Delete","pluginName","afterInit","this","t","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","_addCodeBlockAutoformats","_addHorizontalLineAutoformats","accessibility","addKeystrokeInfos","keystrokes","label","keystroke","boldCallback","getCallbackFunctionForInlineAutoformat","italicCallback","codeCallback","strikethroughCallback","modelElements","forEach","modelName","level","getFirstPosition","usePreviousLanguageChoice","attributeKey","validRanges","schema","getValidRanges","setAttribute","removeSelectionAttribute","Autosave","adapter","_debouncedSave","_lastDocumentVersion","_savePromise","_domEmitter","_config","_pendingActions","_makeImmediateSave","_action","PendingActions","constructor","super","config","waitingTime","set","debounce","_save","bind","version","DomEmitterMixin","init","doc","listenTo","_saveCallbacks","state","_setPendingAction","_flush","priority","window","evtInfo","domEvt","hasAny","returnValue","message","destroy","stopListening","save","cancel","flush","Promise","resolve","then","all","cb","finally","catch","err","add","saveCallbacks","AttributeCommand","Command","refresh","_getValueFromFirstAllowedNode","checkAttributeInSelection","options","forceValue","change","setSelectionAttribute","ranges","removeAttribute","hasAttribute","item","checkAttribute","BOLD$1","BoldEditing","extend","allowAttributes","setAttributeProperties","isFormatting","copyOnEnter","conversion","attributeToElement","view","upcastAlso","viewElement","fontWeight","getStyle","Number","styles","getButtonCreator","commandName","icon","ButtonClass","locale","isToggleable","to","MenuBarMenuListItemButtonView","role","tooltip","editing","BOLD","BoldUI","createButton","icons","bold","ui","componentFactory","ButtonView","Bold","ITALIC$1","ItalicEditing","italicIcon","ITALIC","ItalicUI","Italic","UNDERLINE$1","UnderlineEditing","underlineIcon","UNDERLINE","UnderlineUI","Underline","ClassicEditorUI","EditorUI","_toolbarConfig","_elementReplacer","normalizeToolbarConfig","ElementReplacer","_handleScrollToTheSelectionWithStickyPanel","element","replacementElement","editingView","editable","editingRoot","getRoot","rootName","render","editableElement","setEditableElement","focusTracker","attachDomRoot","_initPlaceholder","_initToolbar","menuBarView","_initMenuBar","_initDialogPluginIntegration","_initContextualBalloonIntegration","fire","restore","getDomRoot","detachDomRoot","stickyPanel","limiterElement","top","toolbar","fillFromConfig","addToolbar","sourceElement","placeholderText","placeholder","tagName","toLowerCase","enablePlaceholder","isDirectHost","keepOnFocus","has","contextualBalloon","return","isSticky","stickyPanelHeight","Rect","height","target","limiter","viewportOffsetConfig","newTopViewportOffset","updateBalloonPosition","visibleView","updatePosition","originalArgs","viewportOffset","scrollViewportOnPanelGettingSticky","scrollToTheSelection","setTimeout","dialogPlugin","dialogView","wasMoved","stickyPanelContentRect","contentPanelElement","bottom","DialogView","defaultOffset","ClassicEditorUIView","BoxedEditorUIView","StickyPanelView","ToolbarView","shouldGroupWhenFull","shouldToolbarGroupWhenFull","useMenuBar","MenuBarView","InlineEditableUIView","addMany","main","ClassicEditor","ElementApiMixin","Editor","sourceElementOrData","isElement","initialData","CKEditorError","define","getInitialData","createRoot","menuBarConfig","isVisible","attachToForm","updateSourceElement","create","initPlugins","getDataFromElement","isElement$1","SelectAllCommand","affectsData","scopeElement","getLimitElement","containsEntireContent","isSelectAllScope","setSelection","isLimit","checkChild","SELECT_ALL_KEYSTROKE","parseKeystroke","SelectAllEditing","viewDocument","eventInfo","domEventData","getCode","preventDefault","selectAllIcon","SelectAllUI","buttonView","_createButton","SelectAll","BaseCommand","_stack","_createdBatches","WeakSet","_isEnabledBasedOnSelection","batchType","isUndoable","clearStack","createdBatches","addBatch","docSelection","hasOwnRange","isBackward","_restoreSelection","operations","selectionRanges","transformedRangeGroups","getTransformedByOperations","allRanges","flat","rangeGroup","transformed","root","graveyard","isRangeContainedByAnyOtherRange","normalizeRanges","backward","_undo","batchToUndo","undoingBatch","operationsToUndo","slice","operation","isDocumentOperation","operationToUndo","nextBaseVersion","baseVersion","historyOperations","history","getOperations","transformedSets","transformSets","getReversed","useRelations","padWithNoOps","forceWeakRemove","reversedOperations","operationsA","affectedSelectable","canEditAt","NoOperation","addOperation","applyOperation","setOperationAsUndone","sort","a","b","isBefore","i","previousRange","joinedRange","getJoined","splice","some","otherRange","UndoCommand","batchIndex","findIndex","createBatch","RedoCommand","pop","redoingBatch","lastOperation","UndoEditing","_undoCommand","_redoCommand","_batchRegistry","args","isRedoBatch","isUndoBatch","wasProcessed","undoneBatch","UndoUI","localizedUndoIcon","uiLanguageDirection","undo","redo","localizedRedoIcon","_addButtonsToFactory","Icon","Undo","Essentials","AccessibilityHelp","Clipboard","Enter","ShiftEnter","Typing","ParagraphCommand","getSelectedBlocks","checkCanBecomeParagraph","blocks","rename","isObject","InsertParagraphCommand","attributes","_findPositionToInsertParagraph","paragraph","createElement","setAllowedAttributes","insertContent","allowedParent","findAllowedParent","positionParent","isTextAllowed","isAtEnd","isAtStart","createPositionBefore","split","Paragraph","register","inheritAllFrom","elementToElement","for","paragraphLikeElements","converterPriority","static","Set","updateViewAttributes","oldViewAttributes","newViewAttributes","removeViewAttributes","setViewAttributes","viewAttributes","Object","entries","setStyle","classes","addClass","style","keys","removeStyle","removeClass","mergeViewElementAttributes","cloneDeep","modifyGhsAttribute","ghsAttributeName","subject","oldValue","newValue","kind","values","size","Map","fromEntries","toPascalCase","getHtmlAttributeName","viewElementName","viewToModelObjectConverter","conversionApi","htmlContent","getCustomProperty","toObjectWidgetConverter","viewName","isInline","modelElement","widgetLabel","createObjectView","viewContainer","createContainerElement","class","toWidget","createRawElement","domElement","domConverter","setContentOf","viewToAttributeInlineConverter","allowEmpty","dataFilter","dispatcher","processViewAttributes","viewItem","consumable","consume","modelRange","assign","convertChildren","modelCursor","safeInsert","parts","getSplitParts","updateConversionResult","setAttributeOnItem","nodeAttributes","attributesToAdd","emptyInlineModelElementToViewConverter","asWidget","attributeValue","getFillerOffset","attributeToViewInlineConverter","createAttributeElement","viewToModelBlockAttributeConverter","modelToViewBlockAttributeConverter","attributeOldValue","attributeNewValue","viewWriter","mapper","toViewElement","defaultConfig","modelSchema","allowWhere","isBlock","allowIn","allowChildren","allowContentOf","paragraphLikeModel","inline","appliesToBlock","coupledAttribute","attributeProperties","allowAttributesOf","DataSchema","_definitions","definition","registerBlockElement","registerInlineElement","extendBlockElement","_extendDefinition","extendInlineElement","getDefinitionsForView","includeReferences","definitions","_getMatchingViewDefinitions","reference","_getReferences","getDefinitionsForModel","def","testViewName","inheritProperties","property","referenceName","toArray","currentDefinitions","currentDefinition","idx","isArray","concat","DataFilter","_dataSchema","_allowedAttributes","_disallowedAttributes","_allowedElements","_disallowedElements","_dataInitialized","_coupledAttributes","Matcher","_registerElementsAfterInit","_registerElementHandlers","_registerCoupledAttributesPostFixer","_registerAssociatedHtmlAttributesPostFixer","Widget","loadAllowedConfig","elementName","rules","splitRules","allowElement","loadDisallowedConfig","disallowElement","disallowAttributes","loadAllowedEmptyElementsConfig","allowEmptyElement","_addAllowedElement","matchAndConsumeAttributes","prepareGHSAttribute","relatedDefinition","once","_fireRegisterEvent","priorities","highest","isRegistered","_registerObjectElement","_registerBlockElement","_registerInlineElement","stop","registerPostFixer","changed","coupledAttributes","_getCoupledAttributesMap","attributeKeys","getWalker","removeAttributes","coupledAttributeKeys","coupledAttributeKey","attr","startsWith","endsWith","nodeAfter","attributeNames","registerRawContentMatcher","low","elementToStructure","copyFromObject","htmlProcessor","registerInlineObjectMatcher","getAttributeKeys","matcher","matches","matchAll","stylesProcessor","sortedRelatedStyles","getRelatedStyles","relatedStyle","className","attributeName","getAttributes","getReducedStyles","attributesObject","isValidAttributeName","stylesMap","StylesMap","styleValue","getStylesEntries","splitPattern","isPlainObject","CodeBlockElementSupport","viewToModelCodeBlockAttributeConverter","modelToViewCodeBlockAttributeConverter","viewCodeElement","viewPreElement","preserveElementAttributes","DualContentModelElementSupport","blockDefinition","paragraphLikeModelDefinition","_hasBlockContent","_addAttributeConversion","blockElements","HeadingElementSupport","registerHeadingElements","dataSchema","headerModels","option","getDescendantElement","containerElement","ImageElementSupport","viewToModelFigureAttributeConverter$1","viewToModelImageAttributeConverter","modelToViewImageAttributeConverter","viewToModelLinkImageAttributeConverter","viewImageElement","imageUtils","viewLink","viewImage","findViewImgElement","modelImage","viewFigureElement","hasClass","addInlineAttributeConversion","addBlockAttributeConversion","MediaEmbedElementSupport","mediaElementName","viewToModelFigureAttributesConverter","viewToModelMediaAttributesConverter","modelToViewMediaAttributeConverter","upcastMedia","viewMediaElement","addAttributeConversionDispatcherHandler","ScriptElementSupport","isContent","TableElementSupport","tableUtils","viewToModelFigureAttributeConverter","viewToModelTableAttributeConverter","modelToViewTableAttributeConverter","createHeadingRowsPostFixer","wasFixed","table","hasTHeadAttributes","hasTBodyAttributes","getRows","viewTableElement","childNode","getChildren","StyleElementSupport","ListElementSupport","listEditing","listUtils","viewElements","registerDowncastStrategy","scope","setAttributeOnDowncast","viewToModelListAttributeConverter","listNodes","previousNodeInList","attribute","getAttributeFromListType","listType","isNumberedListType","indentList","changedBlocks","shallow","CustomElementSupport","unsafeElements","preLikeElements","preElements","isValidElementName","htmlElementName","htmlAttributes","UpcastWriter","documentFragment","createDocumentFragment","domFragment","viewToDom","firstChild","appendChild","htmlWriter","getHtml","error","GeneralHtmlSupport","getGhsAttributeNameForElement","inlineDefinition","find","addModelHtmlClass","selectable","getItemsToUpdateGhsAttribute","removeModelHtmlClass","delete","setModelHtmlAttributes","attributesMap","removeModelHtmlAttributes","setModelHtmlStyles","removeModelHtmlStyles","properties","Symbol","iterator","getValidRangesForSelectable","createSelection","HtmlPageDataProcessor","HtmlDataProcessor","toView","trim","docType","xmlDeclaration","_toDom","viewFragment","domToView","skipComments","setCustomProperty","ownerDocument","documentElement","outerHTML","toData","page","FullPage","processor","viewElementOrFragment","modelElementOrFragment","PageBreakCommand","isPageBreakAllowedInParent","pageBreakElement","insertObject","getInsertPageBreakParent","insertionRange","findOptimalInsertionRange","PageBreakEditing","divElement","viewWrapper","viewLabelElement","innerText","insert","toPageBreakWidget","hasPageBreakBefore","hasPageBreakAfter","childCount","viewSpan","pageBreakIcon","PageBreakUI","PageBreak","formatHtml","input","elementsToFormat","isVoid","elementNamesToFormat","lines","indentCount","isPreformattedLine","line","isPreformattedBlockLine","isNonVoidOpeningTag","indentLine","isClosingTag","indentChar","repeat","Math","max","isPreviousLinePreFormatted","sourceEditingIcon","COMMAND_FORCE_DISABLE_ID","SourceEditing","_replacedRoots","_dataFromRoots","_checkCompatibility","_isAllowedToHandleSourceEditingMode","isSourceEditingMode","_hideVisibleDialog","_showSourceEditing","_disableCommands","_hideSourceEditing","_enableCommands","_handleReadOnlyMode","isReadOnly","updateEditorData","domSourceEditingElementWrapper","oldData","newData","dataset","suppressErrorInCollaboration","allowCollaboration","collaborationPluginNamesToWarn","console","warn","domRootElement","domRoots","formatSource","domSourceEditingElementTextarea","rows","setSelectionRange","addEventListener","update","viewRoot","_focusSourceEditing","clear","textarea","querySelector","isFocused","forceDisabled","clearForceDisabled","readOnly","hasExternalElement","isOpen","hide","withText","isEditorReadOnly","hasAnyPendingActions","isHtml","irTextEditorCss","IrTextEditorStyle0","IrTextEditor","baseToolbarItems","basePlugins","AutoLink","TextTransformation","componentDidLoad","initEditor","onValueChanged","editorInstance","currentEditorValue","getData","setData","onErrorChanged","editorElement","el","log","classList","toggle","pluginsMode","items","toolbarItemsMode","toolbarItems","editorConfig","shouldNotGroupWhenFull","htmlSupport","allow","textData","dataTransfer","htmlRegex","fragment","editorData","handletextChange","textChange","emit","disconnectedCallback","h","Host","id"],"sources":["node_modules/lodash-es/_arrayReduce.js","node_modules/lodash-es/_basePropertyOf.js","node_modules/lodash-es/_deburrLetter.js","node_modules/lodash-es/deburr.js","node_modules/lodash-es/_asciiWords.js","node_modules/lodash-es/_hasUnicodeWord.js","node_modules/lodash-es/_unicodeWords.js","node_modules/lodash-es/words.js","node_modules/lodash-es/_createCompounder.js","node_modules/lodash-es/mergeWith.js","node_modules/lodash-es/startCase.js","node_modules/@ckeditor/ckeditor5-autoformat/dist/index.js","node_modules/@ckeditor/ckeditor5-autosave/dist/index.js","node_modules/@ckeditor/ckeditor5-basic-styles/dist/index.js","node_modules/@ckeditor/ckeditor5-editor-classic/dist/index.js","node_modules/@ckeditor/ckeditor5-select-all/dist/index.js","node_modules/@ckeditor/ckeditor5-undo/dist/index.js","node_modules/@ckeditor/ckeditor5-essentials/dist/index.js","node_modules/@ckeditor/ckeditor5-paragraph/dist/index.js","node_modules/@ckeditor/ckeditor5-html-support/dist/index.js","node_modules/@ckeditor/ckeditor5-page-break/dist/index.js","node_modules/@ckeditor/ckeditor5-source-editing/dist/index.js","src/components/ui/ir-text-editor/ir-text-editor.css?tag=ir-text-editor","src/components/ui/ir-text-editor/ir-text-editor.tsx"],"sourcesContent":["/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nexport default arrayReduce;\n","/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nexport default basePropertyOf;\n","import basePropertyOf from './_basePropertyOf.js';\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 's'\n};\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\nexport default deburrLetter;\n","import deburrLetter from './_deburrLetter.js';\nimport toString from './toString.js';\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;\n\n/** Used to compose unicode capture groups. */\nvar rsCombo = '[' + rsComboRange + ']';\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\nexport default deburr;\n","/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\nexport default asciiWords;\n","/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\nexport default hasUnicodeWord;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsOrdLower = '\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])',\n    rsOrdUpper = '\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',\n  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,\n  rsUpper + '+' + rsOptContrUpper,\n  rsOrdUpper,\n  rsOrdLower,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\nexport default unicodeWords;\n","import asciiWords from './_asciiWords.js';\nimport hasUnicodeWord from './_hasUnicodeWord.js';\nimport toString from './toString.js';\nimport unicodeWords from './_unicodeWords.js';\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nexport default words;\n","import arrayReduce from './_arrayReduce.js';\nimport deburr from './deburr.js';\nimport words from './words.js';\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\";\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\nexport default createCompounder;\n","import baseMerge from './_baseMerge.js';\nimport createAssigner from './_createAssigner.js';\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\nexport default mergeWith;\n","import createCompounder from './_createCompounder.js';\nimport upperFirst from './upperFirst.js';\n\n/**\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @static\n * @memberOf _\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @example\n *\n * _.startCase('--foo-bar--');\n * // => 'Foo Bar'\n *\n * _.startCase('fooBar');\n * // => 'Foo Bar'\n *\n * _.startCase('__FOO_BAR__');\n * // => 'FOO BAR'\n */\nvar startCase = createCompounder(function(result, word, index) {\n  return result + (index ? ' ' : '') + upperFirst(word);\n});\n\nexport default startCase;\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Delete } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { LiveRange } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the {@link module:autoformat/blockautoformatediting~blockAutoformatEditing `blockAutoformatEditing`} documentation\n * to learn how to create custom block autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n *\n * @module autoformat/blockautoformatediting\n */ /**\n * Creates a listener triggered on {@link module:engine/model/document~Document#event:change:data `change:data`} event in the document.\n * Calls the callback when inserted text matches the regular expression or the command name\n * if provided instead of the callback.\n *\n * Examples of usage:\n *\n * To convert a paragraph into heading 1 when `- ` is typed, using just the command name:\n *\n * ```ts\n * blockAutoformatEditing( editor, plugin, /^\\- $/, 'heading1' );\n * ```\n *\n * To convert a paragraph into heading 1 when `- ` is typed, using just the callback:\n *\n * ```ts\n * blockAutoformatEditing( editor, plugin, /^\\- $/, ( context ) => {\n * \tconst { match } = context;\n * \tconst headingLevel = match[ 1 ].length;\n *\n * \teditor.execute( 'heading', {\n * \t\tformatId: `heading${ headingLevel }`\n * \t} );\n * } );\n * ```\n *\n * @param editor The editor instance.\n * @param plugin The autoformat plugin instance.\n * @param pattern The regular expression to execute on just inserted text. The regular expression is tested against the text\n * from the beginning until the caret position.\n * @param callbackOrCommand The callback to execute or the command to run when the text is matched.\n * In case of providing the callback, it receives the following parameter:\n * * match RegExp.exec() result of matching the pattern to inserted text.\n */ function blockAutoformatEditing(editor, plugin, pattern, callbackOrCommand) {\n    let callback;\n    let command = null;\n    if (typeof callbackOrCommand == 'function') {\n        callback = callbackOrCommand;\n    } else {\n        // We assume that the actual command name was provided.\n        command = editor.commands.get(callbackOrCommand);\n        callback = ()=>{\n            editor.execute(callbackOrCommand);\n        };\n    }\n    editor.model.document.on('change:data', (evt, batch)=>{\n        if (command && !command.isEnabled || !plugin.isEnabled) {\n            return;\n        }\n        const range = first(editor.model.document.selection.getRanges());\n        if (!range.isCollapsed) {\n            return;\n        }\n        if (batch.isUndo || !batch.isLocal) {\n            return;\n        }\n        const changes = Array.from(editor.model.document.differ.getChanges());\n        const entry = changes[0];\n        // Typing is represented by only a single change.\n        if (changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1) {\n            return;\n        }\n        const blockToFormat = entry.position.parent;\n        // Block formatting should be disabled in codeBlocks (#5800).\n        if (blockToFormat.is('element', 'codeBlock')) {\n            return;\n        }\n        // Only list commands and custom callbacks can be applied inside a list.\n        if (blockToFormat.is('element', 'listItem') && typeof callbackOrCommand !== 'function' && ![\n            'numberedList',\n            'bulletedList',\n            'todoList'\n        ].includes(callbackOrCommand)) {\n            return;\n        }\n        // In case a command is bound, do not re-execute it over an existing block style which would result in a style removal.\n        // Instead, just drop processing so that autoformat trigger text is not lost. E.g. writing \"# \" in a level 1 heading.\n        if (command && command.value === true) {\n            return;\n        }\n        const firstNode = blockToFormat.getChild(0);\n        const firstNodeRange = editor.model.createRangeOn(firstNode);\n        // Range is only expected to be within or at the very end of the first text node.\n        if (!firstNodeRange.containsRange(range) && !range.end.isEqual(firstNodeRange.end)) {\n            return;\n        }\n        const match = pattern.exec(firstNode.data.substr(0, range.end.offset));\n        // ...and this text node's data match the pattern.\n        if (!match) {\n            return;\n        }\n        // Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n        editor.model.enqueueChange((writer)=>{\n            // Matched range.\n            const start = writer.createPositionAt(blockToFormat, 0);\n            const end = writer.createPositionAt(blockToFormat, match[0].length);\n            const range = new LiveRange(start, end);\n            const wasChanged = callback({\n                match\n            });\n            // Remove matched text.\n            if (wasChanged !== false) {\n                writer.remove(range);\n                const selectionRange = editor.model.document.selection.getFirstRange();\n                const blockRange = writer.createRangeIn(blockToFormat);\n                // If the block is empty and the document selection has been moved when\n                // applying formatting (e.g. is now in newly created block).\n                if (blockToFormat.isEmpty && !blockRange.isEqual(selectionRange) && !blockRange.containsRange(selectionRange, true)) {\n                    writer.remove(blockToFormat);\n                }\n            }\n            range.detach();\n            editor.model.enqueueChange(()=>{\n                const deletePlugin = editor.plugins.get('Delete');\n                deletePlugin.requestUndoOnBackspace();\n            });\n        });\n    });\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the {@link module:autoformat/inlineautoformatediting~inlineAutoformatEditing `inlineAutoformatEditing`} documentation\n * to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n *\n * @module autoformat/inlineautoformatediting\n */ /**\n * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n *\n * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n * On every {@link module:engine/model/document~Document#event:change:data data change} in the model document\n * the autoformatting engine checks the text on the left of the selection\n * and executes the provided action if the text matches given criteria (regular expression or callback).\n *\n * @param editor The editor instance.\n * @param plugin The autoformat plugin instance.\n * @param testRegexpOrCallback The regular expression or callback to execute on text.\n * Provided regular expression *must* have three capture groups. The first and the third capture group\n * should match opening and closing delimiters. The second capture group should match the text to format.\n *\n * ```ts\n * // Matches the `**bold text**` pattern.\n * // There are three capturing groups:\n * // - The first to match the starting `**` delimiter.\n * // - The second to match the text to format.\n * // - The third to match the ending `**` delimiter.\n * inlineAutoformatEditing( editor, plugin, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, formatCallback );\n * ```\n *\n * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n * The function should return proper \"ranges\" to delete and format.\n *\n * ```ts\n * {\n * \tremove: [\n * \t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n * \t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n * \t],\n * \tformat: [\n * \t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n * \t]\n * }\n * ```\n *\n * @param formatCallback A callback to apply actual formatting.\n * It should return `false` if changes should not be applied (e.g. if a command is disabled).\n *\n * ```ts\n * inlineAutoformatEditing( editor, plugin, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, rangesToFormat ) => {\n * \tconst command = editor.commands.get( 'bold' );\n *\n * \tif ( !command.isEnabled ) {\n * \t\treturn false;\n * \t}\n *\n * \tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, 'bold' );\n *\n * \tfor ( let range of validRanges ) {\n * \t\twriter.setAttribute( 'bold', true, range );\n * \t}\n * } );\n * ```\n */ function inlineAutoformatEditing(editor, plugin, testRegexpOrCallback, formatCallback) {\n    let regExp;\n    let testCallback;\n    if (testRegexpOrCallback instanceof RegExp) {\n        regExp = testRegexpOrCallback;\n    } else {\n        testCallback = testRegexpOrCallback;\n    }\n    // A test callback run on changed text.\n    testCallback = testCallback || ((text)=>{\n        let result;\n        const remove = [];\n        const format = [];\n        while((result = regExp.exec(text)) !== null){\n            // There should be full match and 3 capture groups.\n            if (result && result.length < 4) {\n                break;\n            }\n            let { index, '1': leftDel, '2': content, '3': rightDel } = result;\n            // Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n            const found = leftDel + content + rightDel;\n            index += result[0].length - found.length;\n            // Start and End offsets of delimiters to remove.\n            const delStart = [\n                index,\n                index + leftDel.length\n            ];\n            const delEnd = [\n                index + leftDel.length + content.length,\n                index + leftDel.length + content.length + rightDel.length\n            ];\n            remove.push(delStart);\n            remove.push(delEnd);\n            format.push([\n                index + leftDel.length,\n                index + leftDel.length + content.length\n            ]);\n        }\n        return {\n            remove,\n            format\n        };\n    });\n    editor.model.document.on('change:data', (evt, batch)=>{\n        if (batch.isUndo || !batch.isLocal || !plugin.isEnabled) {\n            return;\n        }\n        const model = editor.model;\n        const selection = model.document.selection;\n        // Do nothing if selection is not collapsed.\n        if (!selection.isCollapsed) {\n            return;\n        }\n        const changes = Array.from(model.document.differ.getChanges());\n        const entry = changes[0];\n        // Typing is represented by only a single change.\n        if (changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1) {\n            return;\n        }\n        const focus = selection.focus;\n        const block = focus.parent;\n        const { text, range } = getTextAfterCode(model.createRange(model.createPositionAt(block, 0), focus), model);\n        const testOutput = testCallback(text);\n        const rangesToFormat = testOutputToRanges(range.start, testOutput.format, model);\n        const rangesToRemove = testOutputToRanges(range.start, testOutput.remove, model);\n        if (!(rangesToFormat.length && rangesToRemove.length)) {\n            return;\n        }\n        // Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n        model.enqueueChange((writer)=>{\n            // Apply format.\n            const hasChanged = formatCallback(writer, rangesToFormat);\n            // Strict check on `false` to have backward compatibility (when callbacks were returning `undefined`).\n            if (hasChanged === false) {\n                return;\n            }\n            // Remove delimiters - use reversed order to not mix the offsets while removing.\n            for (const range of rangesToRemove.reverse()){\n                writer.remove(range);\n            }\n            model.enqueueChange(()=>{\n                const deletePlugin = editor.plugins.get('Delete');\n                deletePlugin.requestUndoOnBackspace();\n            });\n        });\n    });\n}\n/**\n * Converts output of the test function provided to the inlineAutoformatEditing and converts it to the model ranges\n * inside provided block.\n */ function testOutputToRanges(start, arrays, model) {\n    return arrays.filter((array)=>array[0] !== undefined && array[1] !== undefined).map((array)=>{\n        return model.createRange(start.getShiftedBy(array[0]), start.getShiftedBy(array[1]));\n    });\n}\n/**\n * Returns the last text line after the last code element from the given range.\n * It is similar to {@link module:typing/utils/getlasttextline.getLastTextLine `getLastTextLine()`},\n * but it ignores any text before the last `code`.\n */ function getTextAfterCode(range, model) {\n    let start = range.start;\n    const text = Array.from(range.getItems()).reduce((rangeText, node)=>{\n        // Trim text to a last occurrence of an inline element and update range start.\n        if (!(node.is('$text') || node.is('$textProxy')) || node.getAttribute('code')) {\n            start = model.createPositionAfter(node);\n            return '';\n        }\n        return rangeText + node.data;\n    }, '');\n    return {\n        text,\n        range: model.createRange(start, range.end)\n    };\n}\n\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting} feature guide\n * and the {@glink api/autoformat package page}.\n */ class Autoformat extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Delete\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Autoformat';\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        this._addListAutoformats();\n        this._addBasicStylesAutoformats();\n        this._addHeadingAutoformats();\n        this._addBlockQuoteAutoformats();\n        this._addCodeBlockAutoformats();\n        this._addHorizontalLineAutoformats();\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Revert autoformatting action'),\n                    keystroke: 'Backspace'\n                }\n            ]\n        });\n    }\n    /**\n\t * Adds autoformatting related to the {@link module:list/list~List}.\n\t *\n\t * When typed:\n\t * - `* ` or `- ` &ndash; A paragraph will be changed into a bulleted list.\n\t * - `1. ` or `1) ` &ndash; A paragraph will be changed into a numbered list (\"1\" can be any digit or a list of digits).\n\t * - `[] ` or `[ ] ` &ndash; A paragraph will be changed into a to-do list.\n\t * - `[x] ` or `[ x ] ` &ndash; A paragraph will be changed into a checked to-do list.\n\t */ _addListAutoformats() {\n        const commands = this.editor.commands;\n        if (commands.get('bulletedList')) {\n            blockAutoformatEditing(this.editor, this, /^[*-]\\s$/, 'bulletedList');\n        }\n        if (commands.get('numberedList')) {\n            blockAutoformatEditing(this.editor, this, /^1[.|)]\\s$/, 'numberedList');\n        }\n        if (commands.get('todoList')) {\n            blockAutoformatEditing(this.editor, this, /^\\[\\s?\\]\\s$/, 'todoList');\n        }\n        if (commands.get('checkTodoList')) {\n            blockAutoformatEditing(this.editor, this, /^\\[\\s?x\\s?\\]\\s$/, ()=>{\n                this.editor.execute('todoList');\n                this.editor.execute('checkTodoList');\n            });\n        }\n    }\n    /**\n\t * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n\t * {@link module:basic-styles/italic~Italic}, {@link module:basic-styles/code~Code}\n\t * and {@link module:basic-styles/strikethrough~Strikethrough}\n\t *\n\t * When typed:\n\t * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n\t * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n\t * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n\t * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n\t * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code,\n\t * - `~~foobar~~` &ndash; `~~` characters are removed and `foobar` is set to strikethrough.\n\t */ _addBasicStylesAutoformats() {\n        const commands = this.editor.commands;\n        if (commands.get('bold')) {\n            const boldCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'bold');\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback);\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(__)([^_]+)(__)$/g, boldCallback);\n        }\n        if (commands.get('italic')) {\n            const italicCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'italic');\n            // The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n            // text before the pattern (e.g. `(?:^|[^\\*])`).\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(\\*)([^*_]+)(\\*)$/g, italicCallback);\n            inlineAutoformatEditing(this.editor, this, /(?:^|\\s)(_)([^_]+)(_)$/g, italicCallback);\n        }\n        if (commands.get('code')) {\n            const codeCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'code');\n            inlineAutoformatEditing(this.editor, this, /(`)([^`]+)(`)$/g, codeCallback);\n        }\n        if (commands.get('strikethrough')) {\n            const strikethroughCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'strikethrough');\n            inlineAutoformatEditing(this.editor, this, /(~~)([^~]+)(~~)$/g, strikethroughCallback);\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:heading/heading~Heading}.\n\t *\n\t * It is using a number at the end of the command name to associate it with the proper trigger:\n\t *\n\t * * `heading` with a `heading1` value will be executed when typing `#`,\n\t * * `heading` with a `heading2` value will be executed when typing `##`,\n\t * * ... up to `heading6` for `######`.\n\t */ _addHeadingAutoformats() {\n        const command = this.editor.commands.get('heading');\n        if (command) {\n            command.modelElements.filter((name)=>name.match(/^heading[1-6]$/)).forEach((modelName)=>{\n                const level = modelName[7];\n                const pattern = new RegExp(`^(#{${level}})\\\\s$`);\n                blockAutoformatEditing(this.editor, this, pattern, ()=>{\n                    // Should only be active if command is enabled and heading style associated with pattern is inactive.\n                    if (!command.isEnabled || command.value === modelName) {\n                        return false;\n                    }\n                    this.editor.execute('heading', {\n                        value: modelName\n                    });\n                });\n            });\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n\t *\n\t * When typed:\n\t * * `> ` &ndash; A paragraph will be changed to a block quote.\n\t */ _addBlockQuoteAutoformats() {\n        if (this.editor.commands.get('blockQuote')) {\n            blockAutoformatEditing(this.editor, this, /^>\\s$/, 'blockQuote');\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:code-block/codeblock~CodeBlock}.\n\t *\n\t * When typed:\n\t * - `` ``` `` &ndash; A paragraph will be changed to a code block.\n\t */ _addCodeBlockAutoformats() {\n        const editor = this.editor;\n        const selection = editor.model.document.selection;\n        if (editor.commands.get('codeBlock')) {\n            blockAutoformatEditing(editor, this, /^```$/, ()=>{\n                if (selection.getFirstPosition().parent.is('element', 'listItem')) {\n                    return false;\n                }\n                this.editor.execute('codeBlock', {\n                    usePreviousLanguageChoice: true\n                });\n            });\n        }\n    }\n    /**\n\t * Adds autoformatting related to {@link module:horizontal-line/horizontalline~HorizontalLine}.\n\t *\n\t * When typed:\n\t * - `` --- `` &ndash; Will be replaced with a horizontal line.\n\t */ _addHorizontalLineAutoformats() {\n        if (this.editor.commands.get('horizontalLine')) {\n            blockAutoformatEditing(this.editor, this, /^---$/, 'horizontalLine');\n        }\n    }\n}\n/**\n * Helper function for getting `inlineAutoformatEditing` callbacks that checks if command is enabled.\n */ function getCallbackFunctionForInlineAutoformat(editor, attributeKey) {\n    return (writer, rangesToFormat)=>{\n        const command = editor.commands.get(attributeKey);\n        if (!command.isEnabled) {\n            return false;\n        }\n        const validRanges = editor.model.schema.getValidRanges(rangesToFormat, attributeKey);\n        for (const range of validRanges){\n            writer.setAttribute(attributeKey, true, range);\n        }\n        // After applying attribute to the text, remove given attribute from the selection.\n        // This way user is able to type a text without attribute used by auto formatter.\n        writer.removeSelectionAttribute(attributeKey);\n    };\n}\n\nexport { Autoformat, blockAutoformatEditing, inlineAutoformatEditing };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, PendingActions } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { DomEmitterMixin } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { debounce } from 'lodash-es';\n\n/* globals window */ /**\n * The {@link module:autosave/autosave~Autosave} plugin allows you to automatically save the data (e.g. send it to the server)\n * when needed (when the user changed the content).\n *\n * It listens to the {@link module:engine/model/document~Document#event:change:data `editor.model.document#change:data`}\n * and `window#beforeunload` events and calls the\n * {@link module:autosave/autosave~AutosaveAdapter#save `config.autosave.save()`} function.\n *\n * ```ts\n * ClassicEditor\n * \t.create( document.querySelector( '#editor' ), {\n * \t\tplugins: [ ArticlePluginSet, Autosave ],\n * \t\ttoolbar: [ 'heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'undo', 'redo' ],\n * \t\timage: {\n * \t\t\ttoolbar: [ 'imageStyle:block', 'imageStyle:side', '|', 'toggleImageCaption', 'imageTextAlternative' ],\n * \t\t},\n * \t\tautosave: {\n * \t\t\tsave( editor: Editor ) {\n * \t\t\t\t// The saveData() function must return a promise\n * \t\t\t\t// which should be resolved when the data is successfully saved.\n * \t\t\t\treturn saveData( editor.getData() );\n * \t\t\t}\n * \t\t}\n * \t} );\n * ```\n *\n * Read more about this feature in the {@glink features/autosave Autosave} feature guide.\n */ class Autosave extends Plugin {\n    /**\n\t * The adapter is an object with a `save()` method. That method will be called whenever\n\t * the data changes. It might be called some time after the change,\n\t * since the event is throttled for performance reasons.\n\t */ adapter;\n    /**\n\t * Debounced save method. The `save()` method is called the specified `waitingTime` after `debouncedSave()` is called,\n\t * unless a new action happens in the meantime.\n\t */ _debouncedSave;\n    /**\n\t * The last saved document version.\n\t */ _lastDocumentVersion;\n    /**\n\t * Promise used for asynchronous save calls.\n\t *\n\t * Created to handle the autosave call to an external data source. It resolves when that call is finished. It is re-used if\n\t * save is called before the promise has been resolved. It is set to `null` if there is no call in progress.\n\t */ _savePromise;\n    /**\n\t * DOM emitter.\n\t */ _domEmitter;\n    /**\n\t * The configuration of this plugins.\n\t */ _config;\n    /**\n\t * Editor's pending actions manager.\n\t */ _pendingActions;\n    /**\n\t * Informs whether there should be another autosave callback performed, immediately after current autosave callback finishes.\n\t *\n\t * This is set to `true` when there is a save request while autosave callback is already being processed\n\t * and the model has changed since the last save.\n\t */ _makeImmediateSave;\n    /**\n\t * An action that will be added to the pending action manager for actions happening in that plugin.\n\t */ _action = null;\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Autosave';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PendingActions\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        const config = editor.config.get('autosave') || {};\n        // A minimum amount of time that needs to pass after the last action.\n        // After that time the provided save callbacks are being called.\n        const waitingTime = config.waitingTime || 1000;\n        this.set('state', 'synchronized');\n        this._debouncedSave = debounce(this._save.bind(this), waitingTime);\n        this._lastDocumentVersion = editor.model.document.version;\n        this._savePromise = null;\n        this._domEmitter = new (DomEmitterMixin())();\n        this._config = config;\n        this._pendingActions = editor.plugins.get(PendingActions);\n        this._makeImmediateSave = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const doc = editor.model.document;\n        // Add the listener only after the editor is initialized to prevent firing save callback on data init.\n        this.listenTo(editor, 'ready', ()=>{\n            this.listenTo(doc, 'change:data', (evt, batch)=>{\n                if (!this._saveCallbacks.length) {\n                    return;\n                }\n                if (!batch.isLocal) {\n                    return;\n                }\n                if (this.state === 'synchronized') {\n                    this.state = 'waiting';\n                    // Set pending action already when we are waiting for the autosave callback.\n                    this._setPendingAction();\n                }\n                if (this.state === 'waiting') {\n                    this._debouncedSave();\n                }\n            // If the plugin is in `saving` state, it will change its state later basing on the `document.version`.\n            // If the `document.version` will be higher than stored `#_lastDocumentVersion`, then it means, that some `change:data`\n            // event has fired in the meantime.\n            });\n        });\n        // Flush on the editor's destroy listener with the highest priority to ensure that\n        // `editor.getData()` will be called before plugins are destroyed.\n        this.listenTo(editor, 'destroy', ()=>this._flush(), {\n            priority: 'highest'\n        });\n        // It's not possible to easy test it because karma uses `beforeunload` event\n        // to warn before full page reload and this event cannot be dispatched manually.\n        /* istanbul ignore next -- @preserve */ this._domEmitter.listenTo(window, 'beforeunload', (evtInfo, domEvt)=>{\n            if (this._pendingActions.hasAny) {\n                domEvt.returnValue = this._pendingActions.first.message;\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        // There's no need for canceling or flushing the throttled save, as\n        // it's done on the editor's destroy event with the highest priority.\n        this._domEmitter.stopListening();\n        super.destroy();\n    }\n    /**\n\t * Immediately calls autosave callback. All previously queued (debounced) callbacks are cleared. If there is already an autosave\n\t * callback in progress, then the requested save will be performed immediately after the current callback finishes.\n\t *\n\t * @returns A promise that will be resolved when the autosave callback is finished.\n\t */ save() {\n        this._debouncedSave.cancel();\n        return this._save();\n    }\n    /**\n\t * Invokes the remaining `_save()` method call.\n\t */ _flush() {\n        this._debouncedSave.flush();\n    }\n    /**\n\t * If the adapter is set and a new document version exists,\n\t * the `_save()` method creates a pending action and calls the `adapter.save()` method.\n\t * It waits for the result and then removes the created pending action.\n\t *\n\t * @returns A promise that will be resolved when the autosave callback is finished.\n\t */ _save() {\n        if (this._savePromise) {\n            this._makeImmediateSave = this.editor.model.document.version > this._lastDocumentVersion;\n            return this._savePromise;\n        }\n        // Make sure there is a pending action (in case if `_save()` was called through manual `save()` call).\n        this._setPendingAction();\n        this.state = 'saving';\n        this._lastDocumentVersion = this.editor.model.document.version;\n        // Wait one promise cycle to be sure that save callbacks are not called inside a conversion or when the editor's state changes.\n        this._savePromise = Promise.resolve()// Make autosave callback.\n        .then(()=>Promise.all(this._saveCallbacks.map((cb)=>cb(this.editor))))// When the autosave callback is finished, always clear `this._savePromise`, no matter if it was successful or not.\n        .finally(()=>{\n            this._savePromise = null;\n        })// If the save was successful, we have three scenarios:\n        //\n        // 1. If a save was requested when an autosave callback was already processed, we need to immediately call\n        // another autosave callback. In this case, `this._savePromise` will not be resolved until the next callback is done.\n        // 2. Otherwise, if changes happened to the model, make a delayed autosave callback (like the change just happened).\n        // 3. If no changes happened to the model, return to the `synchronized` state.\n        .then(()=>{\n            if (this._makeImmediateSave) {\n                this._makeImmediateSave = false;\n                // Start another autosave callback. Return a promise that will be resolved after the new autosave callback.\n                // This way promises returned by `_save()` will not be resolved until all changes are saved.\n                //\n                // If `save()` was called when another (most often automatic) autosave callback was already processed,\n                // the promise returned by `save()` call will be resolved only after new changes have been saved.\n                //\n                // Note that it would not work correctly if `this._savePromise` is not cleared.\n                return this._save();\n            } else {\n                if (this.editor.model.document.version > this._lastDocumentVersion) {\n                    this.state = 'waiting';\n                    this._debouncedSave();\n                } else {\n                    this.state = 'synchronized';\n                    this._pendingActions.remove(this._action);\n                    this._action = null;\n                }\n            }\n        })// In case of an error, retry the autosave callback after a delay (and also throw the original error).\n        .catch((err)=>{\n            // Change state to `error` so that listeners handling autosave error can be called.\n            this.state = 'error';\n            // Then, immediately change to the `saving` state as described above.\n            // Being in the `saving` state ensures that the autosave callback won't be delayed further by the `change:data` listener.\n            this.state = 'saving';\n            this._debouncedSave();\n            throw err;\n        });\n        return this._savePromise;\n    }\n    /**\n\t * Creates a pending action if it is not set already.\n\t */ _setPendingAction() {\n        const t = this.editor.t;\n        if (!this._action) {\n            this._action = this._pendingActions.add(t('Saving changes'));\n        }\n    }\n    /**\n\t * Saves callbacks.\n\t */ get _saveCallbacks() {\n        const saveCallbacks = [];\n        if (this.adapter && this.adapter.save) {\n            saveCallbacks.push(this.adapter.save);\n        }\n        if (this._config.save) {\n            saveCallbacks.push(this._config.save);\n        }\n        return saveCallbacks;\n    }\n}\n\nexport { Autosave };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { MenuBarMenuListItemButtonView, ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { TwoStepCaretMovement, inlineHighlight } from '@ckeditor/ckeditor5-typing/dist/index.js';\n\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n */ class AttributeCommand extends Command {\n    /**\n\t * The attribute that will be set by the command.\n\t */ attributeKey;\n    /**\n\t * @param attributeKey Attribute that will be set by the command.\n\t */ constructor(editor, attributeKey){\n        super(editor);\n        this.attributeKey = attributeKey;\n    }\n    /**\n\t * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n\t */ refresh() {\n        const model = this.editor.model;\n        const doc = model.document;\n        this.value = this._getValueFromFirstAllowedNode();\n        this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n    }\n    /**\n\t * Executes the command &ndash; applies the attribute to the selection or removes it from the selection.\n\t *\n\t * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n\t *\n\t * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n\t *\n\t * * If the selection is on a range, the command applies the attribute to all nodes in that range\n\t * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n\t * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n\t * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n\t * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n\t * that the selection inherits all attributes from a node if it is in an empty node).\n\t *\n\t * @fires execute\n\t * @param options Command options.\n\t * @param options.forceValue If set, it will force the command behavior. If `true`,\n\t * the command will apply the attribute, otherwise the command will remove the attribute.\n\t * If not set, the command will look for its current value to decide what it should do.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const doc = model.document;\n        const selection = doc.selection;\n        const value = options.forceValue === undefined ? !this.value : options.forceValue;\n        model.change((writer)=>{\n            if (selection.isCollapsed) {\n                if (value) {\n                    writer.setSelectionAttribute(this.attributeKey, true);\n                } else {\n                    writer.removeSelectionAttribute(this.attributeKey);\n                }\n            } else {\n                const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n                for (const range of ranges){\n                    if (value) {\n                        writer.setAttribute(this.attributeKey, value, range);\n                    } else {\n                        writer.removeAttribute(this.attributeKey, range);\n                    }\n                }\n            }\n        });\n    }\n    /**\n\t * Checks the attribute value of the first node in the selection that allows the attribute.\n\t * For the collapsed selection returns the selection attribute.\n\t *\n\t * @returns The attribute value.\n\t */ _getValueFromFirstAllowedNode() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        if (selection.isCollapsed) {\n            return selection.hasAttribute(this.attributeKey);\n        }\n        for (const range of selection.getRanges()){\n            for (const item of range.getItems()){\n                if (schema.checkAttribute(item, this.attributeKey)) {\n                    return item.hasAttribute(this.attributeKey);\n                }\n            }\n        }\n        return false;\n    }\n}\n\nconst BOLD$1 = 'bold';\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n */ class BoldEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BoldEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow bold attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: BOLD$1\n        });\n        editor.model.schema.setAttributeProperties(BOLD$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: BOLD$1,\n            view: 'strong',\n            upcastAlso: [\n                'b',\n                (viewElement)=>{\n                    const fontWeight = viewElement.getStyle('font-weight');\n                    if (!fontWeight) {\n                        return null;\n                    }\n                    // Value of the `font-weight` attribute can be defined as a string or a number.\n                    if (fontWeight == 'bold' || Number(fontWeight) >= 600) {\n                        return {\n                            name: true,\n                            styles: [\n                                'font-weight'\n                            ]\n                        };\n                    }\n                    return null;\n                }\n            ]\n        });\n        // Create bold command.\n        editor.commands.add(BOLD$1, new AttributeCommand(editor, BOLD$1));\n        // Set the Ctrl+B keystroke.\n        editor.keystrokes.set('CTRL+B', BOLD$1);\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Bold text'),\n                    keystroke: 'CTRL+B'\n                }\n            ]\n        });\n    }\n}\n\n/**\n * Returns a function that creates a (toolbar or menu bar) button for a basic style feature.\n */ function getButtonCreator({ editor, commandName, plugin, icon, label, keystroke }) {\n    return (ButtonClass)=>{\n        const command = editor.commands.get(commandName);\n        const view = new ButtonClass(editor.locale);\n        view.set({\n            label,\n            icon,\n            keystroke,\n            isToggleable: true\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        view.bind('isOn').to(command, 'value');\n        if (view instanceof MenuBarMenuListItemButtonView) {\n            view.set({\n                role: 'menuitemcheckbox'\n            });\n        } else {\n            view.set({\n                tooltip: true\n            });\n        }\n        // Execute the command.\n        plugin.listenTo(view, 'execute', ()=>{\n            editor.execute(commandName);\n            editor.editing.view.focus();\n        });\n        return view;\n    };\n}\n\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n */ class BoldUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'BoldUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: BOLD,\n            plugin: this,\n            icon: icons.bold,\n            label: t('Bold'),\n            keystroke: 'CTRL+B'\n        });\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + BOLD, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n */ class Bold extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            BoldEditing,\n            BoldUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Bold';\n    }\n}\n\nconst CODE$1 = 'code';\nconst HIGHLIGHT_CLASS = 'ck-code_selected';\n/**\n * The code editing feature.\n *\n * It registers the `'code'` command and introduces the `code` attribute in the model which renders to the view\n * as a `<code>` element.\n */ class CodeEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            TwoStepCaretMovement\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow code attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: CODE$1\n        });\n        editor.model.schema.setAttributeProperties(CODE$1, {\n            isFormatting: true,\n            copyOnEnter: false\n        });\n        editor.conversion.attributeToElement({\n            model: CODE$1,\n            view: 'code',\n            upcastAlso: {\n                styles: {\n                    'word-wrap': 'break-word'\n                }\n            }\n        });\n        // Create code command.\n        editor.commands.add(CODE$1, new AttributeCommand(editor, CODE$1));\n        // Enable two-step caret movement for `code` attribute.\n        editor.plugins.get(TwoStepCaretMovement).registerAttribute(CODE$1);\n        // Setup highlight over selected element.\n        inlineHighlight(editor, CODE$1, 'code', HIGHLIGHT_CLASS);\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Move out of an inline code style'),\n                    keystroke: [\n                        [\n                            'arrowleft',\n                            'arrowleft'\n                        ],\n                        [\n                            'arrowright',\n                            'arrowright'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n}\n\nvar codeIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m12.5 5.7 5.2 3.9v1.3l-5.6 4c-.1.2-.3.2-.5.2-.3-.1-.6-.7-.6-1l.3-.4 4.7-3.5L11.5 7l-.2-.2c-.1-.3-.1-.6 0-.8.2-.2.5-.4.8-.4a.8.8 0 0 1 .4.1zm-5.2 0L2 9.6v1.3l5.6 4c.1.2.3.2.5.2.3-.1.7-.7.6-1 0-.1 0-.3-.2-.4l-5-3.5L8.2 7l.2-.2c.1-.3.1-.6 0-.8-.2-.2-.5-.4-.8-.4a.8.8 0 0 0-.3.1z\\\"/></svg>\";\n\nconst CODE = 'code';\n/**\n * The code UI feature. It introduces the Code button.\n */ class CodeUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: CODE,\n            plugin: this,\n            icon: codeIcon,\n            label: t('Code')\n        });\n        // Add code button to feature components.\n        editor.ui.componentFactory.add(CODE, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + CODE, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The code feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/code/codeediting~CodeEditing code editing feature}\n * and {@link module:basic-styles/code/codeui~CodeUI code UI feature}.\n */ class Code extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            CodeEditing,\n            CodeUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Code';\n    }\n}\n\nconst ITALIC$1 = 'italic';\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n */ class ItalicEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ItalicEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow italic attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: ITALIC$1\n        });\n        editor.model.schema.setAttributeProperties(ITALIC$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: ITALIC$1,\n            view: 'i',\n            upcastAlso: [\n                'em',\n                {\n                    styles: {\n                        'font-style': 'italic'\n                    }\n                }\n            ]\n        });\n        // Create italic command.\n        editor.commands.add(ITALIC$1, new AttributeCommand(editor, ITALIC$1));\n        // Set the Ctrl+I keystroke.\n        editor.keystrokes.set('CTRL+I', ITALIC$1);\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Italic text'),\n                    keystroke: 'CTRL+I'\n                }\n            ]\n        });\n    }\n}\n\nvar italicIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m9.586 14.633.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\";\n\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n */ class ItalicUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ItalicUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: ITALIC,\n            plugin: this,\n            icon: italicIcon,\n            keystroke: 'CTRL+I',\n            label: t('Italic')\n        });\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + ITALIC, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n */ class Italic extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            ItalicEditing,\n            ItalicUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Italic';\n    }\n}\n\nconst STRIKETHROUGH$1 = 'strikethrough';\n/**\n * The strikethrough editing feature.\n *\n * It registers the `'strikethrough'` command, the <kbd>Ctrl+Shift+X</kbd> keystroke and introduces the\n * `strikethroughsthrough` attribute in the model which renders to the view\n * as a `<s>` element.\n */ class StrikethroughEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StrikethroughEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow strikethrough attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: STRIKETHROUGH$1\n        });\n        editor.model.schema.setAttributeProperties(STRIKETHROUGH$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: STRIKETHROUGH$1,\n            view: 's',\n            upcastAlso: [\n                'del',\n                'strike',\n                {\n                    styles: {\n                        'text-decoration': 'line-through'\n                    }\n                }\n            ]\n        });\n        // Create strikethrough command.\n        editor.commands.add(STRIKETHROUGH$1, new AttributeCommand(editor, STRIKETHROUGH$1));\n        // Set the Ctrl+Shift+X keystroke.\n        editor.keystrokes.set('CTRL+SHIFT+X', 'strikethrough');\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Strikethrough text'),\n                    keystroke: 'CTRL+SHIFT+X'\n                }\n            ]\n        });\n    }\n}\n\nvar strikethroughIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9 6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z\\\"/><path d=\\\"M3 10.5V9h14v1.5z\\\"/></svg>\";\n\nconst STRIKETHROUGH = 'strikethrough';\n/**\n * The strikethrough UI feature. It introduces the Strikethrough button.\n */ class StrikethroughUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StrikethroughUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: STRIKETHROUGH,\n            plugin: this,\n            icon: strikethroughIcon,\n            keystroke: 'CTRL+SHIFT+X',\n            label: t('Strikethrough')\n        });\n        // Add strikethrough button to feature components.\n        editor.ui.componentFactory.add(STRIKETHROUGH, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + STRIKETHROUGH, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The strikethrough feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/strikethrough/strikethroughediting~StrikethroughEditing} and\n * {@link module:basic-styles/strikethrough/strikethroughui~StrikethroughUI} plugins.\n */ class Strikethrough extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            StrikethroughEditing,\n            StrikethroughUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Strikethrough';\n    }\n}\n\nconst SUBSCRIPT$1 = 'subscript';\n/**\n * The subscript editing feature.\n *\n * It registers the `sub` command and introduces the `sub` attribute in the model which renders to the view\n * as a `<sub>` element.\n */ class SubscriptEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SubscriptEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow sub attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: SUBSCRIPT$1\n        });\n        editor.model.schema.setAttributeProperties(SUBSCRIPT$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: SUBSCRIPT$1,\n            view: 'sub',\n            upcastAlso: [\n                {\n                    styles: {\n                        'vertical-align': 'sub'\n                    }\n                }\n            ]\n        });\n        // Create sub command.\n        editor.commands.add(SUBSCRIPT$1, new AttributeCommand(editor, SUBSCRIPT$1));\n    }\n}\n\nvar subscriptIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m7.03 10.349 3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82zm8.147 7.829h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309z\\\"/></svg>\";\n\nconst SUBSCRIPT = 'subscript';\n/**\n * The subscript UI feature. It introduces the Subscript button.\n */ class SubscriptUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SubscriptUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: SUBSCRIPT,\n            plugin: this,\n            icon: subscriptIcon,\n            label: t('Subscript')\n        });\n        // Add subscript button to feature components.\n        editor.ui.componentFactory.add(SUBSCRIPT, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + SUBSCRIPT, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The subscript feature.\n *\n * It loads the {@link module:basic-styles/subscript/subscriptediting~SubscriptEditing} and\n * {@link module:basic-styles/subscript/subscriptui~SubscriptUI} plugins.\n */ class Subscript extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SubscriptEditing,\n            SubscriptUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Subscript';\n    }\n}\n\nconst SUPERSCRIPT$1 = 'superscript';\n/**\n * The superscript editing feature.\n *\n * It registers the `super` command and introduces the `super` attribute in the model which renders to the view\n * as a `<super>` element.\n */ class SuperscriptEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SuperscriptEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Allow super attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: SUPERSCRIPT$1\n        });\n        editor.model.schema.setAttributeProperties(SUPERSCRIPT$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        // Build converter from model to view for data and editing pipelines.\n        editor.conversion.attributeToElement({\n            model: SUPERSCRIPT$1,\n            view: 'sup',\n            upcastAlso: [\n                {\n                    styles: {\n                        'vertical-align': 'super'\n                    }\n                }\n            ]\n        });\n        // Create super command.\n        editor.commands.add(SUPERSCRIPT$1, new AttributeCommand(editor, SUPERSCRIPT$1));\n    }\n}\n\nvar superscriptIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M15.677 8.678h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309zM7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82z\\\"/></svg>\";\n\nconst SUPERSCRIPT = 'superscript';\n/**\n * The superscript UI feature. It introduces the Superscript button.\n */ class SuperscriptUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SuperscriptUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: SUPERSCRIPT,\n            plugin: this,\n            icon: superscriptIcon,\n            label: t('Superscript')\n        });\n        // Add superscript button to feature components.\n        editor.ui.componentFactory.add(SUPERSCRIPT, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + SUPERSCRIPT, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The superscript feature.\n *\n * It loads the {@link module:basic-styles/superscript/superscriptediting~SuperscriptEditing} and\n * {@link module:basic-styles/superscript/superscriptui~SuperscriptUI} plugins.\n */ class Superscript extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SuperscriptEditing,\n            SuperscriptUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Superscript';\n    }\n}\n\nconst UNDERLINE$1 = 'underline';\n/**\n * The underline editing feature.\n *\n * It registers the `'underline'` command, the <kbd>Ctrl+U</kbd> keystroke\n * and introduces the `underline` attribute in the model which renders to the view as an `<u>` element.\n */ class UnderlineEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UnderlineEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        // Allow strikethrough attribute on text nodes.\n        editor.model.schema.extend('$text', {\n            allowAttributes: UNDERLINE$1\n        });\n        editor.model.schema.setAttributeProperties(UNDERLINE$1, {\n            isFormatting: true,\n            copyOnEnter: true\n        });\n        editor.conversion.attributeToElement({\n            model: UNDERLINE$1,\n            view: 'u',\n            upcastAlso: {\n                styles: {\n                    'text-decoration': 'underline'\n                }\n            }\n        });\n        // Create underline command.\n        editor.commands.add(UNDERLINE$1, new AttributeCommand(editor, UNDERLINE$1));\n        // Set the Ctrl+U keystroke.\n        editor.keystrokes.set('CTRL+U', 'underline');\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Underline text'),\n                    keystroke: 'CTRL+U'\n                }\n            ]\n        });\n    }\n}\n\nvar underlineIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 18v-1.5h14V18zm2.2-8V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z\\\"/></svg>\";\n\nconst UNDERLINE = 'underline';\n/**\n * The underline UI feature. It introduces the Underline button.\n */ class UnderlineUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UnderlineUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.locale.t;\n        const createButton = getButtonCreator({\n            editor,\n            commandName: UNDERLINE,\n            plugin: this,\n            icon: underlineIcon,\n            label: t('Underline'),\n            keystroke: 'CTRL+U'\n        });\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(UNDERLINE, ()=>createButton(ButtonView));\n        editor.ui.componentFactory.add('menuBar:' + UNDERLINE, ()=>createButton(MenuBarMenuListItemButtonView));\n    }\n}\n\n/**\n * The underline feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature} guide\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/underline/underlineediting~UnderlineEditing} and\n * {@link module:basic-styles/underline/underlineui~UnderlineUI} plugins.\n */ class Underline extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            UnderlineEditing,\n            UnderlineUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Underline';\n    }\n}\n\nexport { AttributeCommand, Bold, BoldEditing, BoldUI, Code, CodeEditing, CodeUI, Italic, ItalicEditing, ItalicUI, Strikethrough, StrikethroughEditing, StrikethroughUI, Subscript, SubscriptEditing, SubscriptUI, Superscript, SuperscriptEditing, SuperscriptUI, Underline, UnderlineEditing, UnderlineUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { EditorUI, normalizeToolbarConfig, DialogView, BoxedEditorUIView, StickyPanelView, ToolbarView, MenuBarView, InlineEditableUIView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ElementReplacer, Rect, CKEditorError, getDataFromElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ElementApiMixin, Editor, attachToForm } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { isElement as isElement$1 } from 'lodash-es';\n\n/**\n * The classic editor UI class.\n */ class ClassicEditorUI extends EditorUI {\n    /**\n\t * The main (top–most) view of the editor UI.\n\t */ view;\n    /**\n\t * A normalized `config.toolbar` object.\n\t */ _toolbarConfig;\n    /**\n\t * The element replacer instance used to hide the editor's source element.\n\t */ _elementReplacer;\n    /**\n\t * Creates an instance of the classic editor UI class.\n\t *\n\t * @param editor The editor instance.\n\t * @param view The view of the UI.\n\t */ constructor(editor, view){\n        super(editor);\n        this.view = view;\n        this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n        this._elementReplacer = new ElementReplacer();\n        this.listenTo(editor.editing.view, 'scrollToTheSelection', this._handleScrollToTheSelectionWithStickyPanel.bind(this));\n    }\n    /**\n\t * @inheritDoc\n\t */ get element() {\n        return this.view.element;\n    }\n    /**\n\t * Initializes the UI.\n\t *\n\t * @param replacementElement The DOM element that will be the source for the created editor.\n\t */ init(replacementElement) {\n        const editor = this.editor;\n        const view = this.view;\n        const editingView = editor.editing.view;\n        const editable = view.editable;\n        const editingRoot = editingView.document.getRoot();\n        // The editable UI and editing root should share the same name. Then name is used\n        // to recognize the particular editable, for instance in ARIA attributes.\n        editable.name = editingRoot.rootName;\n        view.render();\n        // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n        // But it can be available earlier if a DOM element has been passed to BalloonEditor.create().\n        const editableElement = editable.element;\n        // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n        // editable areas (roots) but the classic editor has only one.\n        this.setEditableElement(editable.name, editableElement);\n        // Let the editable UI element respond to the changes in the global editor focus\n        // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n        // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n        // as they have focus, the editable should act like it is focused too (although technically\n        // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n        // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n        // toolbar gets focused.\n        view.editable.bind('isFocused').to(this.focusTracker);\n        // Bind the editable UI element to the editing view, making it an end– and entry–point\n        // of the editor's engine. This is where the engine meets the UI.\n        editingView.attachDomRoot(editableElement);\n        // If an element containing the initial data of the editor was provided, replace it with\n        // an editor instance's UI in DOM until the editor is destroyed. For instance, a <textarea>\n        // can be such element.\n        if (replacementElement) {\n            this._elementReplacer.replace(replacementElement, this.element);\n        }\n        this._initPlaceholder();\n        this._initToolbar();\n        if (view.menuBarView) {\n            this._initMenuBar(view.menuBarView);\n        }\n        this._initDialogPluginIntegration();\n        this._initContextualBalloonIntegration();\n        this.fire('ready');\n    }\n    /**\n\t * @inheritDoc\n\t */ destroy() {\n        super.destroy();\n        const view = this.view;\n        const editingView = this.editor.editing.view;\n        this._elementReplacer.restore();\n        if (editingView.getDomRoot(view.editable.name)) {\n            editingView.detachDomRoot(view.editable.name);\n        }\n        view.destroy();\n    }\n    /**\n\t * Initializes the editor toolbar.\n\t */ _initToolbar() {\n        const view = this.view;\n        // Set–up the sticky panel with toolbar.\n        view.stickyPanel.bind('isActive').to(this.focusTracker, 'isFocused');\n        view.stickyPanel.limiterElement = view.element;\n        view.stickyPanel.bind('viewportTopOffset').to(this, 'viewportOffset', ({ top })=>top || 0);\n        view.toolbar.fillFromConfig(this._toolbarConfig, this.componentFactory);\n        // Register the toolbar so it becomes available for Alt+F10 and Esc navigation.\n        this.addToolbar(view.toolbar);\n    }\n    /**\n\t * Enable the placeholder text on the editing root.\n\t */ _initPlaceholder() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const editingRoot = editingView.document.getRoot();\n        const sourceElement = editor.sourceElement;\n        let placeholderText;\n        const placeholder = editor.config.get('placeholder');\n        if (placeholder) {\n            placeholderText = typeof placeholder === 'string' ? placeholder : placeholder[this.view.editable.name];\n        }\n        if (!placeholderText && sourceElement && sourceElement.tagName.toLowerCase() === 'textarea') {\n            placeholderText = sourceElement.getAttribute('placeholder');\n        }\n        if (placeholderText) {\n            editingRoot.placeholder = placeholderText;\n        }\n        enablePlaceholder({\n            view: editingView,\n            element: editingRoot,\n            isDirectHost: false,\n            keepOnFocus: true\n        });\n    }\n    /**\n\t * Provides an integration between the sticky toolbar and {@link module:ui/panel/balloon/contextualballoon contextual balloon plugin}.\n\t * It allows the contextual balloon to consider the height of the\n\t * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel}. It prevents the balloon from overlapping\n\t * the sticky toolbar by adjusting the balloon's position using viewport offset configuration.\n\t */ _initContextualBalloonIntegration() {\n        if (!this.editor.plugins.has('ContextualBalloon')) {\n            return;\n        }\n        const { stickyPanel } = this.view;\n        const contextualBalloon = this.editor.plugins.get('ContextualBalloon');\n        contextualBalloon.on('getPositionOptions', (evt)=>{\n            const position = evt.return;\n            if (!position || !stickyPanel.isSticky || !stickyPanel.element) {\n                return;\n            }\n            // Measure toolbar (and menu bar) height.\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            // Handle edge case when the target element is larger than the limiter.\n            // It's an issue because the contextual balloon can overlap top table cells when the table is larger than the viewport\n            // and it's placed at the top of the editor. It's better to overlap toolbar in that situation.\n            // Check this issue: https://github.com/ckeditor/ckeditor5/issues/15744\n            const target = typeof position.target === 'function' ? position.target() : position.target;\n            const limiter = typeof position.limiter === 'function' ? position.limiter() : position.limiter;\n            if (target && limiter && new Rect(target).height >= new Rect(limiter).height - stickyPanelHeight) {\n                return;\n            }\n            // Ensure that viewport offset is present, it can be undefined according to the typing.\n            const viewportOffsetConfig = {\n                ...position.viewportOffsetConfig\n            };\n            const newTopViewportOffset = (viewportOffsetConfig.top || 0) + stickyPanelHeight;\n            evt.return = {\n                ...position,\n                viewportOffsetConfig: {\n                    ...viewportOffsetConfig,\n                    top: newTopViewportOffset\n                }\n            };\n        }, {\n            priority: 'low'\n        });\n        // Update balloon position when the toolbar becomes sticky or when ui viewportOffset changes.\n        const updateBalloonPosition = ()=>{\n            if (contextualBalloon.visibleView) {\n                contextualBalloon.updatePosition();\n            }\n        };\n        this.listenTo(stickyPanel, 'change:isSticky', updateBalloonPosition);\n        this.listenTo(this.editor.ui, 'change:viewportOffset', updateBalloonPosition);\n    }\n    /**\n\t * Provides an integration between the sticky toolbar and {@link module:utils/dom/scroll~scrollViewportToShowTarget}.\n\t * It allows the UI-agnostic engine method to consider the geometry of the\n\t * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel} that pins to the\n\t * edge of the viewport and can obscure the user caret after scrolling the window.\n\t *\n\t * @param evt The `scrollToTheSelection` event info.\n\t * @param data The payload carried by the `scrollToTheSelection` event.\n\t * @param originalArgs The original arguments passed to `scrollViewportToShowTarget()` method (see implementation to learn more).\n\t */ _handleScrollToTheSelectionWithStickyPanel(evt, data, originalArgs) {\n        const stickyPanel = this.view.stickyPanel;\n        if (stickyPanel.isSticky) {\n            const stickyPanelHeight = new Rect(stickyPanel.element).height;\n            data.viewportOffset.top += stickyPanelHeight;\n        } else {\n            const scrollViewportOnPanelGettingSticky = ()=>{\n                this.editor.editing.view.scrollToTheSelection(originalArgs);\n            };\n            this.listenTo(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            // This works as a post-scroll-fixer because it's impossible predict whether the panel will be sticky after scrolling or not.\n            // Listen for a short period of time only and if the toolbar does not become sticky very soon, cancel the listener.\n            setTimeout(()=>{\n                this.stopListening(stickyPanel, 'change:isSticky', scrollViewportOnPanelGettingSticky);\n            }, 20);\n        }\n    }\n    /**\n\t * Provides an integration between the sticky toolbar and {@link module:ui/dialog/dialog the Dialog plugin}.\n\t *\n\t * It moves the dialog down to ensure that the\n\t * {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#stickyPanel sticky panel}\n\t * used by the editor UI will not get obscured by the dialog when the dialog uses one of its automatic positions.\n\t */ _initDialogPluginIntegration() {\n        if (!this.editor.plugins.has('Dialog')) {\n            return;\n        }\n        const stickyPanel = this.view.stickyPanel;\n        const dialogPlugin = this.editor.plugins.get('Dialog');\n        dialogPlugin.on('show', ()=>{\n            const dialogView = dialogPlugin.view;\n            dialogView.on('moveTo', (evt, data)=>{\n                // Engage only when the panel is sticky, and the dialog is using one of default positions.\n                if (!stickyPanel.isSticky || dialogView.wasMoved) {\n                    return;\n                }\n                const stickyPanelContentRect = new Rect(stickyPanel.contentPanelElement);\n                if (data[1] < stickyPanelContentRect.bottom + DialogView.defaultOffset) {\n                    data[1] = stickyPanelContentRect.bottom + DialogView.defaultOffset;\n                }\n            }, {\n                priority: 'high'\n            });\n        }, {\n            priority: 'low'\n        });\n    }\n}\n\n/**\n * Classic editor UI view. Uses an inline editable and a sticky toolbar, all\n * enclosed in a boxed UI view.\n */ class ClassicEditorUIView extends BoxedEditorUIView {\n    /**\n\t * Sticky panel view instance. This is a parent view of a {@link #toolbar}\n\t * that makes toolbar sticky.\n\t */ stickyPanel;\n    /**\n\t * Toolbar view instance.\n\t */ toolbar;\n    /**\n\t * Editable UI view.\n\t */ editable;\n    /**\n\t * Creates an instance of the classic editor UI view.\n\t *\n\t * @param locale The {@link module:core/editor/editor~Editor#locale} instance.\n\t * @param editingView The editing view instance this view is related to.\n\t * @param options Configuration options for the view instance.\n\t * @param options.shouldToolbarGroupWhenFull When set `true` enables automatic items grouping\n\t * in the main {@link module:editor-classic/classiceditoruiview~ClassicEditorUIView#toolbar toolbar}.\n\t * See {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull} to learn more.\n\t * @param options.label When set, this value will be used as an accessible `aria-label` of the\n\t * {@link module:ui/editableui/editableuiview~EditableUIView editable view}.\n\t */ constructor(locale, editingView, options = {}){\n        super(locale);\n        this.stickyPanel = new StickyPanelView(locale);\n        this.toolbar = new ToolbarView(locale, {\n            shouldGroupWhenFull: options.shouldToolbarGroupWhenFull\n        });\n        if (options.useMenuBar) {\n            this.menuBarView = new MenuBarView(locale);\n        }\n        this.editable = new InlineEditableUIView(locale, editingView, undefined, {\n            label: options.label\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ render() {\n        super.render();\n        if (this.menuBarView) {\n            // Set toolbar as a child of a stickyPanel and makes toolbar sticky.\n            this.stickyPanel.content.addMany([\n                this.menuBarView,\n                this.toolbar\n            ]);\n        } else {\n            this.stickyPanel.content.add(this.toolbar);\n        }\n        this.top.add(this.stickyPanel);\n        this.main.add(this.editable);\n    }\n}\n\n/**\n * The classic editor implementation. It uses an inline editable and a sticky toolbar, all enclosed in a boxed UI.\n * See the {@glink examples/builds/classic-editor demo}.\n *\n * In order to create a classic editor instance, use the static\n * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method.\n */ class ClassicEditor extends /* #__PURE__ */ ElementApiMixin(Editor) {\n    /**\n\t * @inheritDoc\n\t */ ui;\n    /**\n\t * Creates an instance of the classic editor.\n\t *\n\t * **Note:** do not use the constructor to create editor instances. Use the static\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`} method instead.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data. For more information see\n\t * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}.\n\t * @param config The editor configuration.\n\t */ constructor(sourceElementOrData, config = {}){\n        // If both `config.initialData` is set and initial data is passed as the constructor parameter, then throw.\n        if (!isElement(sourceElementOrData) && config.initialData !== undefined) {\n            // Documented in core/editor/editorconfig.jsdoc.\n            // eslint-disable-next-line ckeditor5-rules/ckeditor-error-message\n            throw new CKEditorError('editor-create-initial-data', null);\n        }\n        super(config);\n        this.config.define('menuBar.isVisible', false);\n        if (this.config.get('initialData') === undefined) {\n            this.config.set('initialData', getInitialData(sourceElementOrData));\n        }\n        if (isElement(sourceElementOrData)) {\n            this.sourceElement = sourceElementOrData;\n        }\n        this.model.document.createRoot();\n        const shouldToolbarGroupWhenFull = !this.config.get('toolbar.shouldNotGroupWhenFull');\n        const menuBarConfig = this.config.get('menuBar');\n        const view = new ClassicEditorUIView(this.locale, this.editing.view, {\n            shouldToolbarGroupWhenFull,\n            useMenuBar: menuBarConfig.isVisible,\n            label: this.config.get('label')\n        });\n        this.ui = new ClassicEditorUI(this, view);\n        attachToForm(this);\n    }\n    /**\n\t * Destroys the editor instance, releasing all resources used by it.\n\t *\n\t * Updates the original editor element with the data if the\n\t * {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy `updateSourceElementOnDestroy`}\n\t * configuration option is set to `true`.\n\t */ destroy() {\n        if (this.sourceElement) {\n            this.updateSourceElement();\n        }\n        this.ui.destroy();\n        return super.destroy();\n    }\n    /**\n\t * Creates a new classic editor instance.\n\t *\n\t * There are three ways how the editor can be initialized.\n\t *\n\t * # Replacing a DOM element (and loading data from it)\n\t *\n\t * You can initialize the editor using an existing DOM element:\n\t *\n\t * ```ts\n\t * ClassicEditor\n\t * \t.create( document.querySelector( '#editor' ) )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * The element's content will be used as the editor data and the element will be replaced by the editor UI.\n\t *\n\t * # Creating a detached editor\n\t *\n\t * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n\t * In this case, the editor will render an element that must be inserted into the DOM:\n\t *\n\t * ```ts\n\t * ClassicEditor\n\t * \t.create( '<p>Hello world!</p>' )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t *\n\t * \t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n\t * \t\tdocument.body.appendChild( editor.ui.element );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n\t * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n\t *\n\t * # Replacing a DOM element (and data provided in `config.initialData`)\n\t *\n\t * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n\t *\n\t * ```ts\n\t * ClassicEditor\n\t * \t.create( document.querySelector( '#editor' ), {\n\t * \t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n\t * \t} )\n\t * \t.then( editor => {\n\t * \t\tconsole.log( 'Editor was initialized', editor );\n\t * \t} )\n\t * \t.catch( err => {\n\t * \t\tconsole.error( err.stack );\n\t * \t} );\n\t * ```\n\t *\n\t * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n\t * makes it difficult to set the content of the source element.\n\t *\n\t * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n\t *\n\t * # Configuring the editor\n\t *\n\t * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n\t * customizing plugins, toolbar and more.\n\t *\n\t * @param sourceElementOrData The DOM element that will be the source for the created editor\n\t * or the editor's initial data.\n\t *\n\t * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization\n\t * and the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element editor element} will replace the passed element\n\t * in the DOM (the original one will be hidden and the editor will be injected next to it).\n\t *\n\t * If the {@link module:core/editor/editorconfig~EditorConfig#updateSourceElementOnDestroy updateSourceElementOnDestroy}\n\t * option is set to `true`, the editor data will be set back to the original element once the editor is destroyed and when a form,\n\t * in which this element is contained, is submitted (if the original element is a `<textarea>`). This ensures seamless integration\n\t * with native web forms.\n\t *\n\t * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n\t * It is available under the {@link module:editor-classic/classiceditorui~ClassicEditorUI#element `editor.ui.element`} property.\n\t *\n\t * @param config The editor configuration.\n\t * @returns A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n\t */ static create(sourceElementOrData, config = {}) {\n        return new Promise((resolve)=>{\n            const editor = new this(sourceElementOrData, config);\n            resolve(editor.initPlugins().then(()=>editor.ui.init(isElement(sourceElementOrData) ? sourceElementOrData : null)).then(()=>editor.data.init(editor.config.get('initialData'))).then(()=>editor.fire('ready')).then(()=>editor));\n        });\n    }\n}\nfunction getInitialData(sourceElementOrData) {\n    return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}\nfunction isElement(value) {\n    return isElement$1(value);\n}\n\nexport { ClassicEditor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { getCode, parseKeystroke } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The select all command.\n *\n * It is used by the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature} to handle\n * the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke.\n *\n * Executing this command changes the {@glink framework/architecture/editing-engine#model model}\n * selection so it contains the entire content of the editable root of the editor the selection is\n * {@link module:engine/model/selection~Selection#anchor anchored} in.\n *\n * If the selection was anchored in a {@glink framework/tutorials/widgets/implementing-a-block-widget nested editable}\n * (e.g. a caption of an image), the new selection will contain its entire content. Successive executions of this command\n * will expand the selection to encompass more and more content up to the entire editable root of the editor.\n */ class SelectAllCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // It does not affect data so should be enabled in read-only mode.\n        this.affectsData = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ execute() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        let scopeElement = model.schema.getLimitElement(selection);\n        // If an entire scope is selected, or the selection's ancestor is not a scope yet,\n        // browse through ancestors to find the enclosing parent scope.\n        if (selection.containsEntireContent(scopeElement) || !isSelectAllScope(model.schema, scopeElement)) {\n            do {\n                scopeElement = scopeElement.parent;\n                // Do nothing, if the entire `root` is already selected.\n                if (!scopeElement) {\n                    return;\n                }\n            }while (!isSelectAllScope(model.schema, scopeElement))\n        }\n        model.change((writer)=>{\n            writer.setSelection(scopeElement, 'in');\n        });\n    }\n}\n/**\n * Checks whether the element is a valid select-all scope. Returns true, if the element is a\n * {@link module:engine/model/schema~Schema#isLimit limit}, and can contain any text or paragraph.\n *\n * @param schema Schema to check against.\n * @param element Model element.\n */ function isSelectAllScope(schema, element) {\n    return schema.isLimit(element) && (schema.checkChild(element, '$text') || schema.checkChild(element, 'paragraph'));\n}\n\nconst SELECT_ALL_KEYSTROKE = /* #__PURE__ */ parseKeystroke('Ctrl+A');\n/**\n * The select all editing feature.\n *\n * It registers the `'selectAll'` {@link module:select-all/selectallcommand~SelectAllCommand command}\n * and the <kbd>Ctrl/⌘</kbd>+<kbd>A</kbd> keystroke listener which executes it.\n */ class SelectAllEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SelectAllEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        editor.commands.add('selectAll', new SelectAllCommand(editor));\n        this.listenTo(viewDocument, 'keydown', (eventInfo, domEventData)=>{\n            if (getCode(domEventData) === SELECT_ALL_KEYSTROKE) {\n                editor.execute('selectAll');\n                domEventData.preventDefault();\n            }\n        });\n        // Add the information about the keystroke to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Select all'),\n                    keystroke: 'CTRL+A'\n                }\n            ]\n        });\n    }\n}\n\nvar selectAllIcon = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M.75 15.5a.75.75 0 0 1 .75.75V18l.008.09A.5.5 0 0 0 2 18.5h1.75a.75.75 0 1 1 0 1.5H1.5l-.144-.007a1.5 1.5 0 0 1-1.35-1.349L0 18.5v-2.25a.75.75 0 0 1 .75-.75zm18.5 0a.75.75 0 0 1 .75.75v2.25l-.007.144a1.5 1.5 0 0 1-1.349 1.35L18.5 20h-2.25a.75.75 0 1 1 0-1.5H18a.5.5 0 0 0 .492-.41L18.5 18v-1.75a.75.75 0 0 1 .75-.75zm-10.45 3c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2v-1.1c0-.11.09-.2.2-.2h1.6zm.45-5.5a.75.75 0 1 1 0 1.5h-8.5a.75.75 0 1 1 0-1.5h8.5zM1.3 11c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2v-1.6c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM1.3 7c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2H.2a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm18.5 0c.11 0 .2.09.2.2v1.6a.2.2 0 0 1-.2.2h-1.1a.2.2 0 0 1-.2-.2V7.2c0-.11.09-.2.2-.2h1.1zm-4.55-2a.75.75 0 1 1 0 1.5h-2.5a.75.75 0 1 1 0-1.5h2.5zm-5 0a.75.75 0 1 1 0 1.5h-5.5a.75.75 0 0 1 0-1.5h5.5zm-6.5-5a.75.75 0 0 1 0 1.5H2a.5.5 0 0 0-.492.41L1.5 2v1.75a.75.75 0 0 1-1.5 0V1.5l.007-.144A1.5 1.5 0 0 1 1.356.006L1.5 0h2.25zM18.5 0l.144.007a1.5 1.5 0 0 1 1.35 1.349L20 1.5v2.25a.75.75 0 1 1-1.5 0V2l-.008-.09A.5.5 0 0 0 18 1.5h-1.75a.75.75 0 1 1 0-1.5h2.25zM8.8 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2H7.2a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6zm4 0c.11 0 .2.09.2.2v1.1a.2.2 0 0 1-.2.2h-1.6a.2.2 0 0 1-.2-.2V.2c0-.11.09-.2.2-.2h1.6z\\\"/></svg>\";\n\n/**\n * The select all UI feature.\n *\n * It registers the `'selectAll'` UI button in the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}. When clicked, the button\n * executes the {@link module:select-all/selectallcommand~SelectAllCommand select all command}.\n */ class SelectAllUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SelectAllUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        editor.ui.componentFactory.add('selectAll', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:selectAll', ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView);\n        });\n    }\n    /**\n\t * Creates a button for select all command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('selectAll');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Select all'),\n            icon: selectAllIcon,\n            keystroke: 'Ctrl+A'\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('selectAll');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The select all feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:select-all/selectallediting~SelectAllEditing select all editing feature}\n * and the {@link module:select-all/selectallui~SelectAllUI select all UI feature}.\n *\n * Please refer to the documentation of individual features to learn more.\n */ class SelectAll extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            SelectAllEditing,\n            SelectAllUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SelectAll';\n    }\n}\n\nexport { SelectAll, SelectAllEditing, SelectAllUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { transformSets, NoOperation } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * Base class for the undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n */ class BaseCommand extends Command {\n    /**\n\t * Stack of items stored by the command. These are pairs of:\n\t *\n\t * * {@link module:engine/model/batch~Batch batch} saved by the command,\n\t * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n\t */ _stack = [];\n    /**\n\t * Stores all batches that were created by this command.\n\t *\n\t * @internal\n\t */ _createdBatches = new WeakSet();\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        // Refresh state, so the command is inactive right after initialization.\n        this.refresh();\n        // This command should not depend on selection change.\n        this._isEnabledBasedOnSelection = false;\n        // Set the transparent batch for the `editor.data.set()` call if the\n        // batch type is not set already.\n        this.listenTo(editor.data, 'set', (evt, data)=>{\n            // Create a shallow copy of the options to not change the original args.\n            // And make sure that an object is assigned to data[ 1 ].\n            data[1] = {\n                ...data[1]\n            };\n            const options = data[1];\n            // If batch type is not set, default to non-undoable batch.\n            if (!options.batchType) {\n                options.batchType = {\n                    isUndoable: false\n                };\n            }\n        }, {\n            priority: 'high'\n        });\n        // Clear the stack for the `transparent` batches.\n        this.listenTo(editor.data, 'set', (evt, data)=>{\n            // We can assume that the object exists and it has a `batchType` property.\n            // It was ensured with a higher priority listener before.\n            const options = data[1];\n            if (!options.batchType.isUndoable) {\n                this.clearStack();\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        this.isEnabled = this._stack.length > 0;\n    }\n    /**\n\t * Returns all batches created by this command.\n\t */ get createdBatches() {\n        return this._createdBatches;\n    }\n    /**\n\t * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n\t * created by the editor which this command is registered to.\n\t *\n\t * @param batch The batch to add.\n\t */ addBatch(batch) {\n        const docSelection = this.editor.model.document.selection;\n        const selection = {\n            ranges: docSelection.hasOwnRange ? Array.from(docSelection.getRanges()) : [],\n            isBackward: docSelection.isBackward\n        };\n        this._stack.push({\n            batch,\n            selection\n        });\n        this.refresh();\n    }\n    /**\n\t * Removes all items from the stack.\n\t */ clearStack() {\n        this._stack = [];\n        this.refresh();\n    }\n    /**\n\t * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n\t *\n\t * @param ranges Ranges to be restored.\n\t * @param isBackward A flag describing whether the restored range was selected forward or backward.\n\t * @param operations Operations which has been applied since selection has been stored.\n\t */ _restoreSelection(ranges, isBackward, operations) {\n        const model = this.editor.model;\n        const document = model.document;\n        // This will keep the transformed selection ranges.\n        const selectionRanges = [];\n        // Transform all ranges from the restored selection.\n        const transformedRangeGroups = ranges.map((range)=>range.getTransformedByOperations(operations));\n        const allRanges = transformedRangeGroups.flat();\n        for (const rangeGroup of transformedRangeGroups){\n            // While transforming there could appear ranges that are contained by other ranges, we shall ignore them.\n            const transformed = rangeGroup.filter((range)=>range.root != document.graveyard).filter((range)=>!isRangeContainedByAnyOtherRange(range, allRanges));\n            // All the transformed ranges ended up in graveyard.\n            if (!transformed.length) {\n                continue;\n            }\n            // After the range got transformed, we have an array of ranges. Some of those\n            // ranges may be \"touching\" -- they can be next to each other and could be merged.\n            normalizeRanges(transformed);\n            // For each `range` from `ranges`, we take only one transformed range.\n            // This is because we want to prevent situation where single-range selection\n            // got transformed to multi-range selection.\n            selectionRanges.push(transformed[0]);\n        }\n        // @if CK_DEBUG_ENGINE // console.log( `Restored selection by undo: ${ selectionRanges.join( ', ' ) }` );\n        // `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n        if (selectionRanges.length) {\n            model.change((writer)=>{\n                writer.setSelection(selectionRanges, {\n                    backward: isBackward\n                });\n            });\n        }\n    }\n    /**\n\t * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n\t * This is a helper method for {@link #execute}.\n\t *\n\t * @param batchToUndo The batch to be undone.\n\t * @param undoingBatch The batch that will contain undoing changes.\n\t */ _undo(batchToUndo, undoingBatch) {\n        const model = this.editor.model;\n        const document = model.document;\n        // All changes done by the command execution will be saved as one batch.\n        this._createdBatches.add(undoingBatch);\n        const operationsToUndo = batchToUndo.operations.slice().filter((operation)=>operation.isDocumentOperation);\n        operationsToUndo.reverse();\n        // We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n        // we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n        for (const operationToUndo of operationsToUndo){\n            const nextBaseVersion = operationToUndo.baseVersion + 1;\n            const historyOperations = Array.from(document.history.getOperations(nextBaseVersion));\n            const transformedSets = transformSets([\n                operationToUndo.getReversed()\n            ], historyOperations, {\n                useRelations: true,\n                document: this.editor.model.document,\n                padWithNoOps: false,\n                forceWeakRemove: true\n            });\n            const reversedOperations = transformedSets.operationsA;\n            // After reversed operation has been transformed by all history operations, apply it.\n            for (let operation of reversedOperations){\n                // Do not apply any operation on non-editable space.\n                const affectedSelectable = operation.affectedSelectable;\n                if (affectedSelectable && !model.canEditAt(affectedSelectable)) {\n                    operation = new NoOperation(operation.baseVersion);\n                }\n                // Before applying, add the operation to the `undoingBatch`.\n                undoingBatch.addOperation(operation);\n                model.applyOperation(operation);\n                document.history.setOperationAsUndone(operationToUndo, operation);\n            }\n        }\n    }\n}\n/**\n * Normalizes list of ranges by joining intersecting or \"touching\" ranges.\n *\n * @param ranges Ranges to be normalized.\n */ function normalizeRanges(ranges) {\n    ranges.sort((a, b)=>a.start.isBefore(b.start) ? -1 : 1);\n    for(let i = 1; i < ranges.length; i++){\n        const previousRange = ranges[i - 1];\n        const joinedRange = previousRange.getJoined(ranges[i], true);\n        if (joinedRange) {\n            // Replace the ranges on the list with the new joined range.\n            i--;\n            ranges.splice(i, 2, joinedRange);\n        }\n    }\n}\nfunction isRangeContainedByAnyOtherRange(range, ranges) {\n    return ranges.some((otherRange)=>otherRange !== range && otherRange.containsRange(range, true));\n}\n\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */ class UndoCommand extends BaseCommand {\n    /**\n\t * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n\t * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t * @fires revert\n\t * @param batch A batch that should be undone. If not set, the last added batch will be undone.\n\t */ execute(batch = null) {\n        // If batch is not given, set `batchIndex` to the last index in command stack.\n        const batchIndex = batch ? this._stack.findIndex((a)=>a.batch == batch) : this._stack.length - 1;\n        const item = this._stack.splice(batchIndex, 1)[0];\n        const undoingBatch = this.editor.model.createBatch({\n            isUndo: true\n        });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not\n        // step between consecutive operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(undoingBatch, ()=>{\n            this._undo(item.batch, undoingBatch);\n            const operations = this.editor.model.document.history.getOperations(item.batch.baseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n        });\n        // Firing `revert` event after the change block to make sure that it includes all changes from post-fixers\n        // and make sure that the selection is \"stabilized\" (the selection range is saved after undo is executed and then\n        // restored on redo, so it is important that the selection range is saved after post-fixers are done).\n        this.fire('revert', item.batch, undoingBatch);\n        this.refresh();\n    }\n}\n\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n */ class RedoCommand extends BaseCommand {\n    /**\n\t * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n\t * the command's stack, applies the reverted and transformed version on the\n\t * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n\t * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const item = this._stack.pop();\n        const redoingBatch = this.editor.model.createBatch({\n            isUndo: true\n        });\n        // All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n        // operations, or won't do changes to the document before selection is properly restored.\n        this.editor.model.enqueueChange(redoingBatch, ()=>{\n            const lastOperation = item.batch.operations[item.batch.operations.length - 1];\n            const nextBaseVersion = lastOperation.baseVersion + 1;\n            const operations = this.editor.model.document.history.getOperations(nextBaseVersion);\n            this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n            this._undo(item.batch, redoingBatch);\n        });\n        this.refresh();\n    }\n}\n\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n */ class UndoEditing extends Plugin {\n    /**\n\t * The command that manages the undo {@link module:engine/model/batch~Batch batches} stack (history).\n\t * Created and registered during the {@link #init feature initialization}.\n\t */ _undoCommand;\n    /**\n\t * The command that manages the redo {@link module:engine/model/batch~Batch batches} stack (history).\n\t * Created and registered during the {@link #init feature initialization}.\n\t */ _redoCommand;\n    /**\n\t * Keeps track of which batches were registered in undo.\n\t */ _batchRegistry = new WeakSet();\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UndoEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Create commands.\n        this._undoCommand = new UndoCommand(editor);\n        this._redoCommand = new RedoCommand(editor);\n        // Register command to the editor.\n        editor.commands.add('undo', this._undoCommand);\n        editor.commands.add('redo', this._redoCommand);\n        this.listenTo(editor.model, 'applyOperation', (evt, args)=>{\n            const operation = args[0];\n            // Do not register batch if the operation is not a document operation.\n            // This prevents from creating empty undo steps, where all operations where non-document operations.\n            // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n            // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n            // Such operations should not be reversed.\n            if (!operation.isDocumentOperation) {\n                return;\n            }\n            const batch = operation.batch;\n            const isRedoBatch = this._redoCommand.createdBatches.has(batch);\n            const isUndoBatch = this._undoCommand.createdBatches.has(batch);\n            const wasProcessed = this._batchRegistry.has(batch);\n            // Skip the batch if it was already processed.\n            if (wasProcessed) {\n                return;\n            }\n            // Add the batch to the registry so it will not be processed again.\n            this._batchRegistry.add(batch);\n            if (!batch.isUndoable) {\n                return;\n            }\n            if (isRedoBatch) {\n                // If this batch comes from `redoCommand`, add it to the `undoCommand` stack.\n                this._undoCommand.addBatch(batch);\n            } else if (!isUndoBatch) {\n                // If the batch comes neither  from `redoCommand` nor from `undoCommand` then it is a new, regular batch.\n                // Add the batch to the `undoCommand` stack and clear the `redoCommand` stack.\n                this._undoCommand.addBatch(batch);\n                this._redoCommand.clearStack();\n            }\n        }, {\n            priority: 'highest'\n        });\n        this.listenTo(this._undoCommand, 'revert', (evt, undoneBatch, undoingBatch)=>{\n            this._redoCommand.addBatch(undoingBatch);\n        });\n        editor.keystrokes.set('CTRL+Z', 'undo');\n        editor.keystrokes.set('CTRL+Y', 'redo');\n        editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n        // Add the information about the keystrokes to the accessibility database.\n        editor.accessibility.addKeystrokeInfos({\n            keystrokes: [\n                {\n                    label: t('Undo'),\n                    keystroke: 'CTRL+Z'\n                },\n                {\n                    label: t('Redo'),\n                    keystroke: [\n                        [\n                            'CTRL+Y'\n                        ],\n                        [\n                            'CTRL+SHIFT+Z'\n                        ]\n                    ]\n                }\n            ]\n        });\n    }\n}\n\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n */ class UndoUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'UndoUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? icons.undo : icons.redo;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? icons.redo : icons.undo;\n        this._addButtonsToFactory('undo', t('Undo'), 'CTRL+Z', localizedUndoIcon);\n        this._addButtonsToFactory('redo', t('Redo'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n\t * Creates a button for the specified command.\n\t *\n\t * @param name Command name.\n\t * @param label Button label.\n\t * @param keystroke Command keystroke.\n\t * @param Icon Source of the icon.\n\t */ _addButtonsToFactory(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, ()=>{\n            const buttonView = this._createButton(ButtonView, name, label, keystroke, Icon);\n            buttonView.set({\n                tooltip: true\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:' + name, ()=>{\n            return this._createButton(MenuBarMenuListItemButtonView, name, label, keystroke, Icon);\n        });\n    }\n    /**\n\t * TODO\n\t */ _createButton(ButtonClass, name, label, keystroke, Icon) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get(name);\n        const view = new ButtonClass(locale);\n        view.set({\n            label,\n            icon: Icon,\n            keystroke\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute(name);\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and the {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is an explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever an {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n * ```\n *    History                            Undo stack\n * ==============             ==================================\n * [operation A1]                      [  batch A  ]\n * [operation B1]                      [  batch B  ]\n * [operation B2]                      [  batch C  ]\n * [operation C1]\n * [operation C2]\n * [operation B3]\n * [operation C3]\n * ```\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n * ```\n *      History                             Undo stack\n * =================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]             [   processing undoing batch C   ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * ```\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * ```\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * the batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n * ```\n *      History                             Undo stack                                      Redo stack\n * =================             ==================================             ==================================\n * [ operation A1  ]                      [  batch A  ]\n * [ operation B1  ]                      [  batch B  ]\n * [ operation B2  ]                      [ batch Crr ]\n * [ operation C1  ]\n * [ operation C2  ]\n * [ operation B3  ]\n * [ operation C3  ]\n * [ operation C3r ]\n * [ operation C2' ]\n * [ operation C1' ]\n * [ operation C1'r]\n * [ operation C2'r]\n * [ operation C3rr]\n * ```\n */ class Undo extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            UndoEditing,\n            UndoUI\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Undo';\n    }\n}\n\nexport { Undo, UndoEditing, UndoUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { Clipboard } from '@ckeditor/ckeditor5-clipboard/dist/index.js';\nimport { Enter, ShiftEnter } from '@ckeditor/ckeditor5-enter/dist/index.js';\nimport { SelectAll } from '@ckeditor/ckeditor5-select-all/dist/index.js';\nimport { Typing } from '@ckeditor/ckeditor5-typing/dist/index.js';\nimport { Undo } from '@ckeditor/ckeditor5-undo/dist/index.js';\nimport { AccessibilityHelp } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:select-all/selectall~SelectAll},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n */ class Essentials extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            AccessibilityHelp,\n            Clipboard,\n            Enter,\n            SelectAll,\n            ShiftEnter,\n            Typing,\n            Undo\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Essentials';\n    }\n}\n\nexport { Essentials };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin, icons } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { first } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { ButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The paragraph command.\n */ class ParagraphCommand extends Command {\n    constructor(editor){\n        super(editor);\n        // Since this command may pass selection in execution block, it should be checked directly.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const document = model.document;\n        const block = first(document.selection.getSelectedBlocks());\n        this.value = !!block && block.is('element', 'paragraph');\n        this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);\n    }\n    /**\n\t * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n\t * will be turned to paragraphs.\n\t *\n\t * @fires execute\n\t * @param options Options for the executed command.\n\t * @param options.selection The selection that the command should be applied to. By default,\n\t * if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n\t */ execute(options = {}) {\n        const model = this.editor.model;\n        const document = model.document;\n        const selection = options.selection || document.selection;\n        // Don't execute command if selection is in non-editable place.\n        if (!model.canEditAt(selection)) {\n            return;\n        }\n        model.change((writer)=>{\n            const blocks = selection.getSelectedBlocks();\n            for (const block of blocks){\n                if (!block.is('element', 'paragraph') && checkCanBecomeParagraph(block, model.schema)) {\n                    writer.rename(block, 'paragraph');\n                }\n            }\n        });\n    }\n}\n/**\n * Checks whether the given block can be replaced by a paragraph.\n *\n * @param block A block to be tested.\n * @param schema The schema of the document.\n */ function checkCanBecomeParagraph(block, schema) {\n    return schema.checkChild(block.parent, 'paragraph') && !schema.isObject(block);\n}\n\n/**\n * The insert paragraph command. It inserts a new paragraph at a specific\n * {@link module:engine/model/position~Position document position}.\n *\n * ```ts\n * // Insert a new paragraph before an element in the document.\n * editor.execute( 'insertParagraph', {\n *   position: editor.model.createPositionBefore( element )\n * } );\n * ```\n *\n * If a paragraph is disallowed in the context of the specific position, the command\n * will attempt to split position ancestors to find a place where it is possible\n * to insert a paragraph.\n *\n * **Note**: This command moves the selection to the inserted paragraph.\n */ class InsertParagraphCommand extends Command {\n    constructor(editor){\n        super(editor);\n        // Since this command passes position in execution block instead of selection, it should be checked directly.\n        this._isEnabledBasedOnSelection = false;\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @param options Options for the executed command.\n\t * @param options.position The model position at which the new paragraph will be inserted.\n\t * @param options.attributes Attributes keys and values to set on a inserted paragraph.\n\t * @fires execute\n\t */ execute(options) {\n        const model = this.editor.model;\n        const attributes = options.attributes;\n        let position = options.position;\n        // Don't execute command if position is in non-editable place.\n        if (!model.canEditAt(position)) {\n            return;\n        }\n        model.change((writer)=>{\n            position = this._findPositionToInsertParagraph(position, writer);\n            if (!position) {\n                return;\n            }\n            const paragraph = writer.createElement('paragraph');\n            if (attributes) {\n                model.schema.setAllowedAttributes(paragraph, attributes, writer);\n            }\n            model.insertContent(paragraph, position);\n            writer.setSelection(paragraph, 'in');\n        });\n    }\n    /**\n\t * Returns the best position to insert a new paragraph.\n\t */ _findPositionToInsertParagraph(position, writer) {\n        const model = this.editor.model;\n        if (model.schema.checkChild(position, 'paragraph')) {\n            return position;\n        }\n        const allowedParent = model.schema.findAllowedParent(position, 'paragraph');\n        // It could be there's no ancestor limit that would allow paragraph.\n        // In theory, \"paragraph\" could be disallowed even in the \"$root\".\n        if (!allowedParent) {\n            return null;\n        }\n        const positionParent = position.parent;\n        const isTextAllowed = model.schema.checkChild(positionParent, '$text');\n        // At empty $block or at the end of $block.\n        // <paragraph>[]</paragraph> ---> <paragraph></paragraph><paragraph>[]</paragraph>\n        // <paragraph>foo[]</paragraph> ---> <paragraph>foo</paragraph><paragraph>[]</paragraph>\n        if (positionParent.isEmpty || isTextAllowed && position.isAtEnd) {\n            return model.createPositionAfter(positionParent);\n        }\n        // At the start of $block with text.\n        // <paragraph>[]foo</paragraph> ---> <paragraph>[]</paragraph><paragraph>foo</paragraph>\n        if (!positionParent.isEmpty && isTextAllowed && position.isAtStart) {\n            return model.createPositionBefore(positionParent);\n        }\n        return writer.split(position, allowedParent).position;\n    }\n}\n\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * It also brings two editors commands:\n *\n * * The {@link module:paragraph/paragraphcommand~ParagraphCommand `'paragraph'`} command that converts all\n * blocks in the model selection into paragraphs.\n * * The {@link module:paragraph/insertparagraphcommand~InsertParagraphCommand `'insertParagraph'`} command\n * that inserts a new paragraph at a specified location in the model.\n */ class Paragraph extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'Paragraph';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const model = editor.model;\n        editor.commands.add('paragraph', new ParagraphCommand(editor));\n        editor.commands.add('insertParagraph', new InsertParagraphCommand(editor));\n        // Schema.\n        model.schema.register('paragraph', {\n            inheritAllFrom: '$block'\n        });\n        editor.conversion.elementToElement({\n            model: 'paragraph',\n            view: 'p'\n        });\n        // Conversion for paragraph-like elements which has not been converted by any plugin.\n        editor.conversion.for('upcast').elementToElement({\n            model: (viewElement, { writer })=>{\n                if (!Paragraph.paragraphLikeElements.has(viewElement.name)) {\n                    return null;\n                }\n                // Do not auto-paragraph empty elements.\n                if (viewElement.isEmpty) {\n                    return null;\n                }\n                return writer.createElement('paragraph');\n            },\n            view: /.+/,\n            converterPriority: 'low'\n        });\n    }\n    /**\n\t * A list of element names which should be treated by the autoparagraphing algorithms as\n\t * paragraph-like. This means that e.g. the following content:\n\t *\n\t * ```html\n\t * <h1>Foo</h1>\n\t * <table>\n\t *   <tr>\n\t *     <td>X</td>\n\t *     <td>\n\t *       <ul>\n\t *         <li>Y</li>\n\t *         <li>Z</li>\n\t *       </ul>\n\t *     </td>\n\t *   </tr>\n\t * </table>\n\t * ```\n\t *\n\t * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n\t * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n\t * by the paragraph feature and converted to:\n\t *\n\t * ```html\n\t * <p>Foo</p>\n\t * <p>X</p>\n\t * <p>Y</p>\n\t * <p>Z</p>\n\t * ```\n\t *\n\t * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n\t * have a priority upon conversion.\n\t */ static paragraphLikeElements = new Set([\n        'blockquote',\n        'dd',\n        'div',\n        'dt',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'li',\n        'p',\n        'td',\n        'th'\n    ]);\n}\n\n/**\n * This plugin defines the `'paragraph'` button. It can be used together with\n * {@link module:heading/headingbuttonsui~HeadingButtonsUI} to replace the standard heading dropdown.\n *\n * This plugin is not loaded automatically by the {@link module:paragraph/paragraph~Paragraph} plugin. It must\n * be added manually.\n *\n * ```ts\n * ClassicEditor\n *   .create( {\n *     plugins: [ ..., Heading, Paragraph, HeadingButtonsUI, ParagraphButtonUI ]\n *     toolbar: [ 'paragraph', 'heading1', 'heading2', 'heading3' ]\n *   } )\n *   .then( ... )\n *   .catch( ... );\n * ```\n */ class ParagraphButtonUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            Paragraph\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('paragraph', (locale)=>{\n            const view = new ButtonView(locale);\n            const command = editor.commands.get('paragraph');\n            view.label = t('Paragraph');\n            view.icon = icons.paragraph;\n            view.tooltip = true;\n            view.isToggleable = true;\n            view.bind('isEnabled').to(command);\n            view.bind('isOn').to(command, 'value');\n            view.on('execute', ()=>{\n                editor.execute('paragraph');\n            });\n            return view;\n        });\n    }\n}\n\nexport { Paragraph, ParagraphButtonUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { toArray, priorities, CKEditorError, isValidAttributeName, uid } from '@ckeditor/ckeditor5-utils/dist/index.js';\nimport { Matcher, StylesMap, UpcastWriter, HtmlDataProcessor } from '@ckeditor/ckeditor5-engine/dist/index.js';\nimport { toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { cloneDeep, startCase, mergeWith, isPlainObject, isEqual } from 'lodash-es';\nimport { Enter } from '@ckeditor/ckeditor5-enter/dist/index.js';\n\n/**\n* Helper function for the downcast converter. Updates attributes on the given view element.\n*\n* @param writer The view writer.\n* @param oldViewAttributes The previous GHS attribute value.\n* @param newViewAttributes The current GHS attribute value.\n* @param viewElement The view element to update.\n*/ function updateViewAttributes(writer, oldViewAttributes, newViewAttributes, viewElement) {\n    if (oldViewAttributes) {\n        removeViewAttributes(writer, oldViewAttributes, viewElement);\n    }\n    if (newViewAttributes) {\n        setViewAttributes(writer, newViewAttributes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Sets attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n */ function setViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key, value] of Object.entries(viewAttributes.attributes)){\n            writer.setAttribute(key, value, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        writer.setStyle(viewAttributes.styles, viewElement);\n    }\n    if (viewAttributes.classes) {\n        writer.addClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n * Helper function for the downcast converter. Removes attributes on the given view element.\n *\n * @param writer The view writer.\n * @param viewAttributes The GHS attribute value.\n * @param viewElement The view element to update.\n */ function removeViewAttributes(writer, viewAttributes, viewElement) {\n    if (viewAttributes.attributes) {\n        for (const [key] of Object.entries(viewAttributes.attributes)){\n            writer.removeAttribute(key, viewElement);\n        }\n    }\n    if (viewAttributes.styles) {\n        for (const style of Object.keys(viewAttributes.styles)){\n            writer.removeStyle(style, viewElement);\n        }\n    }\n    if (viewAttributes.classes) {\n        writer.removeClass(viewAttributes.classes, viewElement);\n    }\n}\n/**\n* Merges view element attribute objects.\n*/ function mergeViewElementAttributes(target, source) {\n    const result = cloneDeep(target);\n    let key = 'attributes';\n    for(key in source){\n        // Merge classes.\n        if (key == 'classes') {\n            result[key] = Array.from(new Set([\n                ...target[key] || [],\n                ...source[key]\n            ]));\n        } else {\n            result[key] = {\n                ...target[key],\n                ...source[key]\n            };\n        }\n    }\n    return result;\n}\nfunction modifyGhsAttribute(writer, item, ghsAttributeName, subject, callback) {\n    const oldValue = item.getAttribute(ghsAttributeName);\n    const newValue = {};\n    for (const kind of [\n        'attributes',\n        'styles',\n        'classes'\n    ]){\n        // Properties other than `subject` should be assigned from `oldValue`.\n        if (kind != subject) {\n            if (oldValue && oldValue[kind]) {\n                newValue[kind] = oldValue[kind];\n            }\n            continue;\n        }\n        // `callback` should be applied on property [`subject`].\n        if (subject == 'classes') {\n            const values = new Set(oldValue && oldValue.classes || []);\n            callback(values);\n            if (values.size) {\n                newValue[kind] = Array.from(values);\n            }\n            continue;\n        }\n        const values = new Map(Object.entries(oldValue && oldValue[kind] || {}));\n        callback(values);\n        if (values.size) {\n            newValue[kind] = Object.fromEntries(values);\n        }\n    }\n    if (Object.keys(newValue).length) {\n        if (item.is('documentSelection')) {\n            writer.setSelectionAttribute(ghsAttributeName, newValue);\n        } else {\n            writer.setAttribute(ghsAttributeName, newValue, item);\n        }\n    } else if (oldValue) {\n        if (item.is('documentSelection')) {\n            writer.removeSelectionAttribute(ghsAttributeName);\n        } else {\n            writer.removeAttribute(ghsAttributeName, item);\n        }\n    }\n}\n/**\n * Transforms passed string to PascalCase format. Examples:\n * * `div` => `Div`\n * * `h1` => `H1`\n * * `table` => `Table`\n */ function toPascalCase(data) {\n    return startCase(data).replace(/ /g, '');\n}\n/**\n * Returns the attribute name of the model element that holds raw HTML attributes.\n */ function getHtmlAttributeName(viewElementName) {\n    return `html${toPascalCase(viewElementName)}Attributes`;\n}\n\n/**\n * View-to-model conversion helper for object elements.\n *\n * Preserves object element content in `htmlContent` attribute.\n *\n * @returns Returns a conversion callback.\n*/ function viewToModelObjectConverter({ model: modelName }) {\n    return (viewElement, conversionApi)=>{\n        // Let's keep element HTML and its attributes, so we can rebuild element in downcast conversions.\n        return conversionApi.writer.createElement(modelName, {\n            htmlContent: viewElement.getCustomProperty('$rawContent')\n        });\n    };\n}\n/**\n * Conversion helper converting an object element to an HTML object widget.\n *\n * @returns Returns a conversion callback.\n*/ function toObjectWidgetConverter(editor, { view: viewName, isInline }) {\n    const t = editor.t;\n    return (modelElement, { writer })=>{\n        const widgetLabel = t('HTML object');\n        const viewElement = createObjectView(viewName, modelElement, writer);\n        const viewAttributes = modelElement.getAttribute(getHtmlAttributeName(viewName));\n        writer.addClass('html-object-embed__content', viewElement);\n        if (viewAttributes) {\n            setViewAttributes(writer, viewAttributes, viewElement);\n        }\n        // Widget cannot be a raw element because the widget system would not be able\n        // to add its UI to it. Thus, we need separate view container.\n        const viewContainer = writer.createContainerElement(isInline ? 'span' : 'div', {\n            class: 'html-object-embed',\n            'data-html-object-embed-label': widgetLabel\n        }, viewElement);\n        return toWidget(viewContainer, writer, {\n            label: widgetLabel\n        });\n    };\n}\n/**\n* Creates object view element from the given model element.\n*/ function createObjectView(viewName, modelElement, writer) {\n    return writer.createRawElement(viewName, null, (domElement, domConverter)=>{\n        domConverter.setContentOf(domElement, modelElement.getAttribute('htmlContent'));\n    });\n}\n/**\n * View-to-attribute conversion helper preserving inline element attributes on `$text`.\n *\n * @returns Returns a conversion callback.\n*/ function viewToAttributeInlineConverter({ view: viewName, model: attributeKey, allowEmpty }, dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi)=>{\n            let viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            // Do not apply the attribute if the element itself is already consumed and there are no view attributes to store.\n            if (!viewAttributes && !conversionApi.consumable.test(data.viewItem, {\n                name: true\n            })) {\n                return;\n            }\n            // Otherwise, we might need to convert it to an empty object just to preserve element itself,\n            // for example `<cite>` => <$text htmlCite=\"{}\">.\n            viewAttributes = viewAttributes || {};\n            // Consume the element itself if it wasn't consumed by any other converter.\n            conversionApi.consumable.consume(data.viewItem, {\n                name: true\n            });\n            // Since we are converting to attribute we need a range on which we will set the attribute.\n            // If the range is not created yet, we will create it.\n            if (!data.modelRange) {\n                data = Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n            }\n            // Convert empty inline element if allowed and has any attributes.\n            if (allowEmpty && data.modelRange.isCollapsed && Object.keys(viewAttributes).length) {\n                const modelElement = conversionApi.writer.createElement('htmlEmptyElement');\n                if (!conversionApi.safeInsert(modelElement, data.modelCursor)) {\n                    return;\n                }\n                const parts = conversionApi.getSplitParts(modelElement);\n                data.modelRange = conversionApi.writer.createRange(data.modelRange.start, conversionApi.writer.createPositionAfter(parts[parts.length - 1]));\n                conversionApi.updateConversionResult(modelElement, data);\n                setAttributeOnItem(modelElement, viewAttributes, conversionApi);\n                return;\n            }\n            // Set attribute on each item in range according to the schema.\n            for (const node of data.modelRange.getItems()){\n                setAttributeOnItem(node, viewAttributes, conversionApi);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n    function setAttributeOnItem(node, viewAttributes, conversionApi) {\n        if (conversionApi.schema.checkAttribute(node, attributeKey)) {\n            // Node's children are converted recursively, so node can already include model attribute.\n            // We want to extend it, not replace.\n            const nodeAttributes = node.getAttribute(attributeKey);\n            const attributesToAdd = mergeViewElementAttributes(viewAttributes, nodeAttributes || {});\n            conversionApi.writer.setAttribute(attributeKey, attributesToAdd, node);\n        }\n    }\n}\n/**\n * Conversion helper converting an empty inline model element to an HTML element or widget.\n */ function emptyInlineModelElementToViewConverter({ model: attributeKey, view: viewName }, asWidget) {\n    return (item, { writer, consumable })=>{\n        if (!item.hasAttribute(attributeKey)) {\n            return null;\n        }\n        const viewElement = writer.createContainerElement(viewName);\n        const attributeValue = item.getAttribute(attributeKey);\n        consumable.consume(item, `attribute:${attributeKey}`);\n        setViewAttributes(writer, attributeValue, viewElement);\n        viewElement.getFillerOffset = ()=>null;\n        return asWidget ? toWidget(viewElement, writer) : viewElement;\n    };\n}\n/**\n * Attribute-to-view conversion helper applying attributes to view element preserved on `$text`.\n *\n * @returns Returns a conversion callback.\n*/ function attributeToViewInlineConverter({ priority, view: viewName }) {\n    return (attributeValue, conversionApi)=>{\n        if (!attributeValue) {\n            return;\n        }\n        const { writer } = conversionApi;\n        const viewElement = writer.createAttributeElement(viewName, null, {\n            priority\n        });\n        setViewAttributes(writer, attributeValue, viewElement);\n        return viewElement;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on block element.\n *\n * All matched attributes will be preserved on `html*Attributes` attribute.\n *\n * @returns Returns a conversion callback.\n*/ function viewToModelBlockAttributeConverter({ view: viewName }, dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on(`element:${viewName}`, (evt, data, conversionApi)=>{\n            // Converting an attribute of an element that has not been converted to anything does not make sense\n            // because there will be nowhere to set that attribute on. At this stage, the element should've already\n            // been converted. A collapsed range can show up in to-do lists (<input>) or complex widgets (e.g. table).\n            // (https://github.com/ckeditor/ckeditor5/issues/11000).\n            if (!data.modelRange || data.modelRange.isCollapsed) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(data.viewItem, conversionApi);\n            if (!viewAttributes) {\n                return;\n            }\n            conversionApi.writer.setAttribute(getHtmlAttributeName(data.viewItem.name), viewAttributes, data.modelRange);\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes preserved in `html*Attributes` attribute\n * for block elements.\n *\n * @returns Returns a conversion callback.\n*/ function modelToViewBlockAttributeConverter({ view: viewName, model: modelName }) {\n    return (dispatcher)=>{\n        dispatcher.on(`attribute:${getHtmlAttributeName(viewName)}:${modelName}`, (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewWriter = conversionApi.writer;\n            const viewElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(viewWriter, attributeOldValue, attributeNewValue, viewElement);\n        });\n    };\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module html-support/schemadefinitions\n */ // Skipped elements due to HTML deprecation:\n// * noframes (not sure if we should provide support for this element. CKE4 is not supporting frameset and frame,\n//   but it will unpack <frameset><noframes>foobar</noframes></frameset> to <noframes>foobar</noframes>, so there\n//   may be some content loss. Although using noframes as a standalone element seems invalid)\n// * keygen (this one is also empty)\n// * applet (support is limited mostly to old IE)\n// * basefont (this one is also empty)\n// * isindex (basically no support for modern browsers at all)\n//\n// Skipped elements due to lack empty element support:\n// * hr\n// * area\n// * br\n// * command\n// * map\n// * wbr\n// * colgroup -> col\n//\n// Skipped elements due to complexity:\n// * datalist with option elements used as a data source for input[list] element\n//\n// Skipped elements as they are handled as an object content:\n// * track\n// * source\n// * option\n// * param\n// * optgroup\n//\n// Skipped full page HTML elements:\n// * body\n// * html\n// * title\n// * head\n// * meta\n// * link\n// * etc...\n//\n// Skipped hidden elements:\n// noscript\nvar defaultConfig = {\n    block: [\n        // Existing features.\n        {\n            model: 'codeBlock',\n            view: 'pre'\n        },\n        {\n            model: 'paragraph',\n            view: 'p'\n        },\n        {\n            model: 'blockQuote',\n            view: 'blockquote'\n        },\n        {\n            model: 'listItem',\n            view: 'li'\n        },\n        {\n            model: 'pageBreak',\n            view: 'div'\n        },\n        {\n            model: 'rawHtml',\n            view: 'div'\n        },\n        {\n            model: 'table',\n            view: 'table'\n        },\n        {\n            model: 'tableRow',\n            view: 'tr'\n        },\n        {\n            model: 'tableCell',\n            view: 'td'\n        },\n        {\n            model: 'tableCell',\n            view: 'th'\n        },\n        {\n            model: 'tableColumnGroup',\n            view: 'colgroup'\n        },\n        {\n            model: 'tableColumn',\n            view: 'col'\n        },\n        {\n            model: 'caption',\n            view: 'caption'\n        },\n        {\n            model: 'caption',\n            view: 'figcaption'\n        },\n        {\n            model: 'imageBlock',\n            view: 'img'\n        },\n        {\n            model: 'imageInline',\n            view: 'img'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlP',\n            view: 'p',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlBlockquote',\n            view: 'blockquote',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        {\n            model: 'htmlTable',\n            view: 'table',\n            modelSchema: {\n                allowWhere: '$block',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlTbody',\n            view: 'tbody',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlThead',\n            view: 'thead',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTfoot',\n            view: 'tfoot',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCaption',\n            view: 'caption',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlColgroup',\n            view: 'colgroup',\n            modelSchema: {\n                allowIn: 'htmlTable',\n                allowChildren: 'col',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCol',\n            view: 'col',\n            modelSchema: {\n                allowIn: 'htmlColgroup',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlTr',\n            view: 'tr',\n            modelSchema: {\n                allowIn: [\n                    'htmlTable',\n                    'htmlThead',\n                    'htmlTbody'\n                ],\n                isLimit: true\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTd',\n            view: 'td',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlTh',\n            view: 'th',\n            modelSchema: {\n                allowIn: 'htmlTr',\n                allowContentOf: '$container',\n                isLimit: true,\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFigure',\n            view: 'figure',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlFigcaption',\n            view: 'figcaption',\n            modelSchema: {\n                allowIn: 'htmlFigure',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAddress',\n            view: 'address',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlAside',\n            view: 'aside',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlMain',\n            view: 'main',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlDetails',\n            view: 'details',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSummary',\n            view: 'summary',\n            modelSchema: {\n                allowChildren: [\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6',\n                    '$text'\n                ],\n                allowIn: 'htmlDetails',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDiv',\n            view: 'div',\n            paragraphLikeModel: 'htmlDivParagraph',\n            modelSchema: {\n                inheritAllFrom: '$container'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFieldset',\n            view: 'fieldset',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include h1-h6.\n        {\n            model: 'htmlLegend',\n            view: 'legend',\n            modelSchema: {\n                allowIn: 'htmlFieldset',\n                allowChildren: '$text'\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlHeader',\n            view: 'header',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlFooter',\n            view: 'footer',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlForm',\n            view: 'form',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: true\n            }\n        },\n        {\n            model: 'htmlHgroup',\n            view: 'hgroup',\n            modelSchema: {\n                allowIn: [\n                    '$root',\n                    '$container'\n                ],\n                allowChildren: [\n                    'paragraph',\n                    'htmlP',\n                    'htmlH1',\n                    'htmlH2',\n                    'htmlH3',\n                    'htmlH4',\n                    'htmlH5',\n                    'htmlH6'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlH1',\n            view: 'h1',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH2',\n            view: 'h2',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH3',\n            view: 'h3',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH4',\n            view: 'h4',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH5',\n            view: 'h5',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlH6',\n            view: 'h6',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: '$htmlList',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: [\n                    '$htmlList',\n                    'htmlLi'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDir',\n            view: 'dir',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlMenu',\n            view: 'menu',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlUl',\n            view: 'ul',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        {\n            model: 'htmlOl',\n            view: 'ol',\n            modelSchema: {\n                inheritAllFrom: '$htmlList'\n            }\n        },\n        // TODO can also include other block elements.\n        {\n            model: 'htmlLi',\n            view: 'li',\n            modelSchema: {\n                allowIn: '$htmlList',\n                allowChildren: '$text',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlPre',\n            view: 'pre',\n            modelSchema: {\n                inheritAllFrom: '$block'\n            }\n        },\n        {\n            model: 'htmlArticle',\n            view: 'article',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlSection',\n            view: 'section',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        // TODO can also include text.\n        {\n            model: 'htmlNav',\n            view: 'nav',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDivDl',\n            view: 'div',\n            modelSchema: {\n                allowChildren: [\n                    'htmlDt',\n                    'htmlDd'\n                ],\n                allowIn: 'htmlDl'\n            }\n        },\n        {\n            model: 'htmlDl',\n            view: 'dl',\n            modelSchema: {\n                allowWhere: '$container',\n                allowChildren: [\n                    'htmlDt',\n                    'htmlDd',\n                    'htmlDivDl'\n                ],\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDt',\n            view: 'dt',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlDd',\n            view: 'dd',\n            modelSchema: {\n                allowChildren: '$block',\n                isBlock: false\n            }\n        },\n        {\n            model: 'htmlCenter',\n            view: 'center',\n            modelSchema: {\n                inheritAllFrom: '$container',\n                isBlock: false\n            }\n        }\n    ],\n    inline: [\n        // Existing features (attribute set on an existing model element).\n        {\n            model: 'htmlLiAttributes',\n            view: 'li',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlOlAttributes',\n            view: 'ol',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlUlAttributes',\n            view: 'ul',\n            appliesToBlock: true,\n            coupledAttribute: 'listItemId'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTheadAttributes',\n            view: 'thead',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlTbodyAttributes',\n            view: 'tbody',\n            appliesToBlock: 'table'\n        },\n        {\n            model: 'htmlFigureAttributes',\n            view: 'figure',\n            appliesToBlock: 'imageBlock'\n        },\n        // Compatibility features.\n        {\n            model: 'htmlAcronym',\n            view: 'acronym',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTt',\n            view: 'tt',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlFont',\n            view: 'font',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlTime',\n            view: 'time',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlVar',\n            view: 'var',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBig',\n            view: 'big',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSmall',\n            view: 'small',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSamp',\n            view: 'samp',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlQ',\n            view: 'q',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlOutput',\n            view: 'output',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlKbd',\n            view: 'kbd',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdi',\n            view: 'bdi',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlBdo',\n            view: 'bdo',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlAbbr',\n            view: 'abbr',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlA',\n            view: 'a',\n            priority: 5,\n            coupledAttribute: 'linkHref'\n        },\n        {\n            model: 'htmlStrong',\n            view: 'strong',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlB',\n            view: 'b',\n            coupledAttribute: 'bold',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlI',\n            view: 'i',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlEm',\n            view: 'em',\n            coupledAttribute: 'italic',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlS',\n            view: 's',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlDel',\n            view: 'del',\n            coupledAttribute: 'strikethrough',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // TODO According to HTML-spec can behave as div-like element, although CKE4 only handles it as an inline element.\n        {\n            model: 'htmlIns',\n            view: 'ins',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlU',\n            view: 'u',\n            coupledAttribute: 'underline',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSub',\n            view: 'sub',\n            coupledAttribute: 'subscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSup',\n            view: 'sup',\n            coupledAttribute: 'superscript',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCode',\n            view: 'code',\n            coupledAttribute: 'code',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlMark',\n            view: 'mark',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlSpan',\n            view: 'span',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlCite',\n            view: 'cite',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlLabel',\n            view: 'label',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        {\n            model: 'htmlDfn',\n            view: 'dfn',\n            attributeProperties: {\n                copyOnEnter: true,\n                isFormatting: true\n            }\n        },\n        // Objects.\n        {\n            model: 'htmlObject',\n            view: 'object',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlIframe',\n            view: 'iframe',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlInput',\n            view: 'input',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlButton',\n            view: 'button',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlTextarea',\n            view: 'textarea',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlSelect',\n            view: 'select',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlVideo',\n            view: 'video',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlEmbed',\n            view: 'embed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlOembed',\n            view: 'oembed',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlAudio',\n            view: 'audio',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlImg',\n            view: 'img',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlCanvas',\n            view: 'canvas',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlMeter',\n            view: 'meter',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        // TODO it could be probably represented as non-object element, although it has graphical representation,\n        // so probably makes more sense to keep it as an object.\n        {\n            model: 'htmlProgress',\n            view: 'progress',\n            isObject: true,\n            modelSchema: {\n                inheritAllFrom: '$inlineObject'\n            }\n        },\n        {\n            model: 'htmlScript',\n            view: 'script',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlStyle',\n            view: 'style',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                isInline: true\n            }\n        },\n        {\n            model: 'htmlCustomElement',\n            view: '$customElement',\n            modelSchema: {\n                allowWhere: [\n                    '$text',\n                    '$block'\n                ],\n                allowAttributesOf: '$inlineObject',\n                isInline: true\n            }\n        }\n    ]\n};\n\n/**\n * Holds representation of the extended HTML document type definitions to be used by the\n * editor in HTML support.\n *\n * Data schema is represented by data schema definitions.\n *\n * To add new definition for block element,\n * use {@link module:html-support/dataschema~DataSchema#registerBlockElement} method:\n *\n * ```ts\n * dataSchema.registerBlockElement( {\n * \tview: 'section',\n * \tmodel: 'my-section',\n * \tmodelSchema: {\n * \t\tinheritAllFrom: '$block'\n * \t}\n * } );\n * ```\n *\n * To add new definition for inline element,\n * use {@link module:html-support/dataschema~DataSchema#registerInlineElement} method:\n *\n * ```\n * dataSchema.registerInlineElement( {\n * \tview: 'span',\n * \tmodel: 'my-span',\n * \tattributeProperties: {\n * \t\tcopyOnEnter: true\n * \t}\n * } );\n * ```\n */ class DataSchema extends Plugin {\n    /**\n\t * A map of registered data schema definitions.\n\t */ _definitions = [];\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DataSchema';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        for (const definition of defaultConfig.block){\n            this.registerBlockElement(definition);\n        }\n        for (const definition of defaultConfig.inline){\n            this.registerInlineElement(definition);\n        }\n    }\n    /**\n\t * Add new data schema definition describing block element.\n\t */ registerBlockElement(definition) {\n        this._definitions.push({\n            ...definition,\n            isBlock: true\n        });\n    }\n    /**\n\t * Add new data schema definition describing inline element.\n\t */ registerInlineElement(definition) {\n        this._definitions.push({\n            ...definition,\n            isInline: true\n        });\n    }\n    /**\n\t * Updates schema definition describing block element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ extendBlockElement(definition) {\n        this._extendDefinition({\n            ...definition,\n            isBlock: true\n        });\n    }\n    /**\n\t * Updates schema definition describing inline element with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ extendInlineElement(definition) {\n        this._extendDefinition({\n            ...definition,\n            isInline: true\n        });\n    }\n    /**\n\t * Returns all definitions matching the given view name.\n\t *\n\t * @param includeReferences Indicates if this method should also include definitions of referenced models.\n\t */ getDefinitionsForView(viewName, includeReferences = false) {\n        const definitions = new Set();\n        for (const definition of this._getMatchingViewDefinitions(viewName)){\n            if (includeReferences) {\n                for (const reference of this._getReferences(definition.model)){\n                    definitions.add(reference);\n                }\n            }\n            definitions.add(definition);\n        }\n        return definitions;\n    }\n    /**\n\t * Returns definitions matching the given model name.\n\t */ getDefinitionsForModel(modelName) {\n        return this._definitions.filter((definition)=>definition.model == modelName);\n    }\n    /**\n\t * Returns definitions matching the given view name.\n\t */ _getMatchingViewDefinitions(viewName) {\n        return this._definitions.filter((def)=>def.view && testViewName(viewName, def.view));\n    }\n    /**\n\t * Resolves all definition references registered for the given data schema definition.\n\t *\n\t * @param modelName Data schema model name.\n\t */ *_getReferences(modelName) {\n        const inheritProperties = [\n            'inheritAllFrom',\n            'inheritTypesFrom',\n            'allowWhere',\n            'allowContentOf',\n            'allowAttributesOf'\n        ];\n        const definitions = this._definitions.filter((definition)=>definition.model == modelName);\n        for (const { modelSchema } of definitions){\n            if (!modelSchema) {\n                continue;\n            }\n            for (const property of inheritProperties){\n                for (const referenceName of toArray(modelSchema[property] || [])){\n                    const definitions = this._definitions.filter((definition)=>definition.model == referenceName);\n                    for (const definition of definitions){\n                        if (referenceName !== modelName) {\n                            yield* this._getReferences(definition.model);\n                            yield definition;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n\t * Updates schema definition with new properties.\n\t *\n\t * Creates new scheme if it doesn't exist.\n\t * Array properties are concatenated with original values.\n\t *\n\t * @param definition Definition update.\n\t */ _extendDefinition(definition) {\n        const currentDefinitions = Array.from(this._definitions.entries()).filter(([, currentDefinition])=>currentDefinition.model == definition.model);\n        if (currentDefinitions.length == 0) {\n            this._definitions.push(definition);\n            return;\n        }\n        for (const [idx, currentDefinition] of currentDefinitions){\n            this._definitions[idx] = mergeWith({}, currentDefinition, definition, (target, source)=>{\n                return Array.isArray(target) ? target.concat(source) : undefined;\n            });\n        }\n    }\n}\n/**\n * Test view name against the given pattern.\n */ function testViewName(pattern, viewName) {\n    if (typeof pattern === 'string') {\n        return pattern === viewName;\n    }\n    if (pattern instanceof RegExp) {\n        return pattern.test(viewName);\n    }\n    return false;\n}\n\n/**\n * Allows to validate elements and element attributes registered by {@link module:html-support/dataschema~DataSchema}.\n *\n * To enable registered element in the editor, use {@link module:html-support/datafilter~DataFilter#allowElement} method:\n *\n * ```ts\n * dataFilter.allowElement( 'section' );\n * ```\n *\n * You can also allow or disallow specific element attributes:\n *\n * ```ts\n * // Allow `data-foo` attribute on `section` element.\n * dataFilter.allowAttributes( {\n * \tname: 'section',\n * \tattributes: {\n * \t\t'data-foo': true\n * \t}\n * } );\n *\n * // Disallow `color` style attribute on 'section' element.\n * dataFilter.disallowAttributes( {\n * \tname: 'section',\n * \tstyles: {\n * \t\tcolor: /[\\s\\S]+/\n * \t}\n * } );\n * ```\n *\n * To apply the information about allowed and disallowed attributes in custom integration plugin,\n * use the {@link module:html-support/datafilter~DataFilter#processViewAttributes `processViewAttributes()`} method.\n */ class DataFilter extends Plugin {\n    /**\n\t * An instance of the {@link module:html-support/dataschema~DataSchema}.\n\t */ _dataSchema;\n    /**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be allowed.\n\t */ _allowedAttributes;\n    /**\n\t * {@link module:engine/view/matcher~Matcher Matcher} instance describing rules upon which\n\t * content attributes should be disallowed.\n\t */ _disallowedAttributes;\n    /**\n\t * Allowed element definitions by {@link module:html-support/datafilter~DataFilter#allowElement} method.\n\t*/ _allowedElements;\n    /**\n\t * Disallowed element names by {@link module:html-support/datafilter~DataFilter#disallowElement} method.\n\t */ _disallowedElements;\n    /**\n\t * Indicates if {@link module:engine/controller/datacontroller~DataController editor's data controller}\n\t * data has been already initialized.\n\t*/ _dataInitialized;\n    /**\n\t * Cached map of coupled attributes. Keys are the feature attributes names\n\t * and values are arrays with coupled GHS attributes names.\n\t */ _coupledAttributes;\n    constructor(editor){\n        super(editor);\n        this._dataSchema = editor.plugins.get('DataSchema');\n        this._allowedAttributes = new Matcher();\n        this._disallowedAttributes = new Matcher();\n        this._allowedElements = new Set();\n        this._disallowedElements = new Set();\n        this._dataInitialized = false;\n        this._coupledAttributes = null;\n        this._registerElementsAfterInit();\n        this._registerElementHandlers();\n        this._registerCoupledAttributesPostFixer();\n        this._registerAssociatedHtmlAttributesPostFixer();\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DataFilter';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataSchema,\n            Widget\n        ];\n    }\n    /**\n\t * Load a configuration of one or many elements, where their attributes should be allowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes accepted in the editor.\n\t */ loadAllowedConfig(config) {\n        for (const pattern of config){\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            this.allowElement(elementName);\n            rules.forEach((pattern)=>this.allowAttributes(pattern));\n        }\n    }\n    /**\n\t * Load a configuration of one or many elements, where their attributes should be disallowed.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param config Configuration of elements that should have their attributes rejected from the editor.\n\t */ loadDisallowedConfig(config) {\n        for (const pattern of config){\n            // MatcherPattern allows omitting `name` to widen the search of elements.\n            // Let's keep it consistent and match every element if a `name` has not been provided.\n            const elementName = pattern.name || /[\\s\\S]+/;\n            const rules = splitRules(pattern);\n            // Disallow element itself if there is no other rules.\n            if (rules.length == 0) {\n                this.disallowElement(elementName);\n            } else {\n                rules.forEach((pattern)=>this.disallowAttributes(pattern));\n            }\n        }\n    }\n    /**\n\t * Load a configuration of one or many elements, where when empty should be allowed.\n\t *\n\t * **Note**: It modifies DataSchema so must be loaded before registering filtering rules.\n\t *\n\t * @param config Configuration of elements that should be preserved even if empty.\n\t */ loadAllowedEmptyElementsConfig(config) {\n        for (const elementName of config){\n            this.allowEmptyElement(elementName);\n        }\n    }\n    /**\n\t * Allow the given element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: Rules will be applied just before next data pipeline data init or set.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ allowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)){\n            this._addAllowedElement(definition);\n            // Reset cached map to recalculate it on the next usage.\n            this._coupledAttributes = null;\n        }\n    }\n    /**\n\t * Disallow the given element in the editor context.\n\t *\n\t * This method will only disallow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ disallowElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, false)){\n            this._disallowedElements.add(definition.view);\n        }\n    }\n    /**\n\t * Allow the given empty element in the editor context.\n\t *\n\t * This method will only allow elements described by the {@link module:html-support/dataschema~DataSchema} used\n\t * to create data filter.\n\t *\n\t * **Note**: It modifies DataSchema so must be called before registering filtering rules.\n\t *\n\t * @param viewName String or regular expression matching view name.\n\t */ allowEmptyElement(viewName) {\n        for (const definition of this._dataSchema.getDefinitionsForView(viewName, true)){\n            if (definition.isInline) {\n                this._dataSchema.extendInlineElement({\n                    ...definition,\n                    allowEmpty: true\n                });\n            }\n        }\n    }\n    /**\n\t * Allow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be allowed.\n\t */ allowAttributes(config) {\n        this._allowedAttributes.add(config);\n    }\n    /**\n\t * Disallow the given attributes for view element allowed by {@link #allowElement} method.\n\t *\n\t * @param config Pattern matching all attributes which should be disallowed.\n\t */ disallowAttributes(config) {\n        this._disallowedAttributes.add(config);\n    }\n    /**\n\t * Processes all allowed and disallowed attributes on the view element by consuming them and returning the allowed ones.\n\t *\n\t * This method applies the configuration set up by {@link #allowAttributes `allowAttributes()`}\n\t * and {@link #disallowAttributes `disallowAttributes()`} over the given view element by consuming relevant attributes.\n\t * It returns the allowed attributes that were found on the given view element for further processing by integration code.\n\t *\n\t * ```ts\n\t * dispatcher.on( 'element:myElement', ( evt, data, conversionApi ) => {\n\t * \t// Get rid of disallowed and extract all allowed attributes from a viewElement.\n\t * \tconst viewAttributes = dataFilter.processViewAttributes( data.viewItem, conversionApi );\n\t * \t// Do something with them, i.e. store inside a model as a dictionary.\n\t * \tif ( viewAttributes ) {\n\t * \t\tconversionApi.writer.setAttribute( 'htmlAttributesOfMyElement', viewAttributes, data.modelRange );\n\t * \t}\n\t * } );\n\t * ```\n\t *\n\t * @see module:engine/conversion/viewconsumable~ViewConsumable#consume\n\t *\n\t * @returns Object with following properties:\n\t * - attributes Set with matched attribute names.\n\t * - styles Set with matched style names.\n\t * - classes Set with matched class names.\n\t */ processViewAttributes(viewElement, conversionApi) {\n        const { consumable } = conversionApi;\n        // Make sure that the disabled attributes are handled before the allowed attributes are called.\n        // For example, for block images the <figure> converter triggers conversion for <img> first and then for other elements, i.e. <a>.\n        matchAndConsumeAttributes(viewElement, this._disallowedAttributes, consumable);\n        return prepareGHSAttribute(viewElement, matchAndConsumeAttributes(viewElement, this._allowedAttributes, consumable));\n    }\n    /**\n\t * Adds allowed element definition and fires registration event.\n\t */ _addAllowedElement(definition) {\n        if (this._allowedElements.has(definition)) {\n            return;\n        }\n        this._allowedElements.add(definition);\n        // For attribute based integrations (table figure, document lists, etc.) register related element definitions.\n        if ('appliesToBlock' in definition && typeof definition.appliesToBlock == 'string') {\n            for (const relatedDefinition of this._dataSchema.getDefinitionsForModel(definition.appliesToBlock)){\n                if (relatedDefinition.isBlock) {\n                    this._addAllowedElement(relatedDefinition);\n                }\n            }\n        }\n        // We need to wait for all features to be initialized before we can register\n        // element, so we can access existing features model schemas.\n        // If the data has not been initialized yet, _registerElementsAfterInit() method will take care of\n        // registering elements.\n        if (this._dataInitialized) {\n            // Defer registration to the next data pipeline data set so any disallow rules could be applied\n            // even if added after allow rule (disallowElement).\n            this.editor.data.once('set', ()=>{\n                this._fireRegisterEvent(definition);\n            }, {\n                // With the highest priority listener we are able to register elements right before\n                // running data conversion.\n                priority: priorities.highest + 1\n            });\n        }\n    }\n    /**\n\t * Registers elements allowed by {@link module:html-support/datafilter~DataFilter#allowElement} method\n\t * once {@link module:engine/controller/datacontroller~DataController editor's data controller} is initialized.\n\t*/ _registerElementsAfterInit() {\n        this.editor.data.on('init', ()=>{\n            this._dataInitialized = true;\n            for (const definition of this._allowedElements){\n                this._fireRegisterEvent(definition);\n            }\n        }, {\n            // With highest priority listener we are able to register elements right before\n            // running data conversion. Also:\n            // * Make sure that priority is higher than the one used by `RealTimeCollaborationClient`,\n            // as RTC is stopping event propagation.\n            // * Make sure no other features hook into this event before GHS because otherwise the\n            // downcast conversion (for these features) could run before GHS registered its converters\n            // (https://github.com/ckeditor/ckeditor5/issues/11356).\n            priority: priorities.highest + 1\n        });\n    }\n    /**\n\t * Registers default element handlers.\n\t */ _registerElementHandlers() {\n        this.on('register', (evt, definition)=>{\n            const schema = this.editor.model.schema;\n            // Object element should be only registered for new features.\n            // If the model schema is already registered, it should be handled by\n            // #_registerBlockElement() or #_registerObjectElement() attribute handlers.\n            if (definition.isObject && !schema.isRegistered(definition.model)) {\n                this._registerObjectElement(definition);\n            } else if (definition.isBlock) {\n                this._registerBlockElement(definition);\n            } else if (definition.isInline) {\n                this._registerInlineElement(definition);\n            } else {\n                /**\n\t\t\t\t * The definition cannot be handled by the data filter.\n\t\t\t\t *\n\t\t\t\t * Make sure that the registered definition is correct.\n\t\t\t\t *\n\t\t\t\t * @error data-filter-invalid-definition\n\t\t\t\t */ throw new CKEditorError('data-filter-invalid-definition', null, definition);\n            }\n            evt.stop();\n        }, {\n            priority: 'lowest'\n        });\n    }\n    /**\n\t * Registers a model post-fixer that is removing coupled GHS attributes of inline elements. Those attributes\n\t * are removed if a coupled feature attribute is removed.\n\t *\n\t * For example, consider following HTML:\n\t *\n\t * ```html\n\t * <a href=\"foo.html\" id=\"myId\">bar</a>\n\t * ```\n\t *\n\t * Which would be upcasted to following text node in the model:\n\t *\n\t * ```html\n\t * <$text linkHref=\"foo.html\" htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * When the user removes the link from that text (using UI), only `linkHref` attribute would be removed:\n\t *\n\t * ```html\n\t * <$text htmlA=\"{ attributes: { id: 'myId' } }\">bar</$text>\n\t * ```\n\t *\n\t * The `htmlA` attribute would stay in the model and would cause GHS to generate an `<a>` element.\n\t * This is incorrect from UX point of view, as the user wanted to remove the whole link (not only `href`).\n\t */ _registerCoupledAttributesPostFixer() {\n        const model = this.editor.model;\n        const selection = model.document.selection;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const change of changes){\n                // Handle only attribute removals.\n                if (change.type != 'attribute' || change.attributeNewValue !== null) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const attributeKeys = coupledAttributes.get(change.attributeKey);\n                if (!attributeKeys) {\n                    continue;\n                }\n                // Remove the coupled GHS attributes on the same range as the feature attribute was removed.\n                for (const { item } of change.range.getWalker()){\n                    for (const attributeKey of attributeKeys){\n                        if (item.hasAttribute(attributeKey)) {\n                            writer.removeAttribute(attributeKey, item);\n                            changed = true;\n                        }\n                    }\n                }\n            }\n            return changed;\n        });\n        this.listenTo(selection, 'change:attribute', (evt, { attributeKeys })=>{\n            const removeAttributes = new Set();\n            const coupledAttributes = this._getCoupledAttributesMap();\n            for (const attributeKey of attributeKeys){\n                // Handle only attribute removals.\n                if (selection.hasAttribute(attributeKey)) {\n                    continue;\n                }\n                // Find a list of coupled GHS attributes.\n                const coupledAttributeKeys = coupledAttributes.get(attributeKey);\n                if (!coupledAttributeKeys) {\n                    continue;\n                }\n                for (const coupledAttributeKey of coupledAttributeKeys){\n                    if (selection.hasAttribute(coupledAttributeKey)) {\n                        removeAttributes.add(coupledAttributeKey);\n                    }\n                }\n            }\n            if (removeAttributes.size == 0) {\n                return;\n            }\n            model.change((writer)=>{\n                for (const attributeKey of removeAttributes){\n                    writer.removeSelectionAttribute(attributeKey);\n                }\n            });\n        });\n    }\n    /**\n\t * Removes `html*Attributes` attributes from incompatible elements.\n\t *\n\t * For example, consider the following HTML:\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar[]</heading2>\n\t * ```\n\t *\n\t * Pressing `enter` creates a new `paragraph` element that inherits\n\t * the `htmlH2Attributes` attribute from `heading2`.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph htmlH2Attributes=\"...\">[]</paragraph>\n\t * ```\n\t *\n\t * This postfixer ensures that this doesn't happen, and that elements can\n\t * only have `html*Attributes` associated with them,\n\t * e.g.: `htmlPAttributes` for `<p>`, `htmlDivAttributes` for `<div>`, etc.\n\t *\n\t * With it enabled, pressing `enter` at the end of `<heading2>` will create\n\t * a new paragraph without the `htmlH2Attributes` attribute.\n\t *\n\t * ```html\n\t * <heading2 htmlH2Attributes=\"...\">foobar</heading2>\n\t * <paragraph>[]</paragraph>\n\t * ```\n\t */ _registerAssociatedHtmlAttributesPostFixer() {\n        const model = this.editor.model;\n        model.document.registerPostFixer((writer)=>{\n            const changes = model.document.differ.getChanges();\n            let changed = false;\n            for (const change of changes){\n                if (change.type !== 'insert' || change.name === '$text') {\n                    continue;\n                }\n                for (const attr of change.attributes.keys()){\n                    if (!attr.startsWith('html') || !attr.endsWith('Attributes')) {\n                        continue;\n                    }\n                    if (!model.schema.checkAttribute(change.name, attr)) {\n                        writer.removeAttribute(attr, change.position.nodeAfter);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n    }\n    /**\n\t * Collects the map of coupled attributes. The returned map is keyed by the feature attribute name\n\t * and coupled GHS attribute names are stored in the value array.\n\t */ _getCoupledAttributesMap() {\n        if (this._coupledAttributes) {\n            return this._coupledAttributes;\n        }\n        this._coupledAttributes = new Map();\n        for (const definition of this._allowedElements){\n            if (definition.coupledAttribute && definition.model) {\n                const attributeNames = this._coupledAttributes.get(definition.coupledAttribute);\n                if (attributeNames) {\n                    attributeNames.push(definition.model);\n                } else {\n                    this._coupledAttributes.set(definition.coupledAttribute, [\n                        definition.model\n                    ]);\n                }\n            }\n        }\n        return this._coupledAttributes;\n    }\n    /**\n\t * Fires `register` event for the given element definition.\n\t */ _fireRegisterEvent(definition) {\n        if (definition.view && this._disallowedElements.has(definition.view)) {\n            return;\n        }\n        this.fire(definition.view ? `register:${definition.view}` : 'register', definition);\n    }\n    /**\n\t * Registers object element and attribute converters for the given data schema definition.\n\t */ _registerObjectElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        schema.register(modelName, definition.modelSchema);\n        /* istanbul ignore next: paranoid check -- @preserve */ if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: [\n                getHtmlAttributeName(viewName),\n                'htmlContent'\n            ]\n        });\n        // Store element content in special `$rawContent` custom property to\n        // avoid editor's data filtering mechanism.\n        editor.data.registerRawContentMatcher({\n            name: viewName\n        });\n        conversion.for('upcast').elementToElement({\n            view: viewName,\n            model: viewToModelObjectConverter(definition),\n            // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n            // this listener is called before it. If not, some elements will be transformed into a paragraph.\n            // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n            converterPriority: priorities.low + 2\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('editingDowncast').elementToStructure({\n            model: {\n                name: modelName,\n                attributes: [\n                    getHtmlAttributeName(viewName)\n                ]\n            },\n            view: toObjectWidgetConverter(editor, definition)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: modelName,\n            view: (modelElement, { writer })=>{\n                return createObjectView(viewName, modelElement, writer);\n            }\n        });\n        conversion.for('dataDowncast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n\t * Registers block element and attribute converters for the given data schema definition.\n\t */ _registerBlockElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const { view: viewName, model: modelName } = definition;\n        if (!schema.isRegistered(definition.model)) {\n            schema.register(definition.model, definition.modelSchema);\n            if (!viewName) {\n                return;\n            }\n            conversion.for('upcast').elementToElement({\n                model: modelName,\n                view: viewName,\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                // `+ 2` is used to take priority over `_addDefaultH1Conversion` in the Heading plugin.\n                converterPriority: priorities.low + 2\n            });\n            conversion.for('downcast').elementToElement({\n                model: modelName,\n                view: viewName\n            });\n        }\n        if (!viewName) {\n            return;\n        }\n        schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(viewName)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, this));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n    /**\n\t * Registers inline element and attribute converters for the given data schema definition.\n\t *\n\t * Extends `$text` model schema to allow the given definition model attribute and its properties.\n\t */ _registerInlineElement(definition) {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const attributeKey = definition.model;\n        // This element is stored in the model as an attribute on a block element, for example DocumentLists.\n        if (definition.appliesToBlock) {\n            return;\n        }\n        schema.extend('$text', {\n            allowAttributes: attributeKey\n        });\n        if (definition.attributeProperties) {\n            schema.setAttributeProperties(attributeKey, definition.attributeProperties);\n        }\n        conversion.for('upcast').add(viewToAttributeInlineConverter(definition, this));\n        conversion.for('downcast').attributeToElement({\n            model: attributeKey,\n            view: attributeToViewInlineConverter(definition)\n        });\n        if (!definition.allowEmpty) {\n            return;\n        }\n        schema.setAttributeProperties(attributeKey, {\n            copyFromObject: false\n        });\n        if (!schema.isRegistered('htmlEmptyElement')) {\n            schema.register('htmlEmptyElement', {\n                inheritAllFrom: '$inlineObject'\n            });\n        }\n        editor.data.htmlProcessor.domConverter.registerInlineObjectMatcher((element)=>{\n            // Element must be empty and have any attribute.\n            if (element.name == definition.view && element.isEmpty && Array.from(element.getAttributeKeys()).length) {\n                return {\n                    name: true\n                };\n            }\n            return null;\n        });\n        conversion.for('editingDowncast').elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition, true)\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'htmlEmptyElement',\n            view: emptyInlineModelElementToViewConverter(definition)\n        });\n    }\n}\n/**\n * Matches and consumes matched attributes.\n *\n * @returns Object with following properties:\n * - attributes Array with matched attribute names.\n * - classes Array with matched class names.\n * - styles Array with matched style names.\n */ function matchAndConsumeAttributes(viewElement, matcher, consumable) {\n    const matches = matcher.matchAll(viewElement) || [];\n    const stylesProcessor = viewElement.document.stylesProcessor;\n    return matches.reduce((result, { match })=>{\n        // Verify and consume styles.\n        for (const style of match.styles || []){\n            // Check longer forms of the same style as those could be matched\n            // but not present in the element directly.\n            // Consider only longhand (or longer than current notation) so that\n            // we do not include all sides of the box if only one side is allowed.\n            const sortedRelatedStyles = stylesProcessor.getRelatedStyles(style).filter((relatedStyle)=>relatedStyle.split('-').length > style.split('-').length).sort((a, b)=>b.split('-').length - a.split('-').length);\n            for (const relatedStyle of sortedRelatedStyles){\n                if (consumable.consume(viewElement, {\n                    styles: [\n                        relatedStyle\n                    ]\n                })) {\n                    result.styles.push(relatedStyle);\n                }\n            }\n            // Verify and consume style as specified in the matcher.\n            if (consumable.consume(viewElement, {\n                styles: [\n                    style\n                ]\n            })) {\n                result.styles.push(style);\n            }\n        }\n        // Verify and consume class names.\n        for (const className of match.classes || []){\n            if (consumable.consume(viewElement, {\n                classes: [\n                    className\n                ]\n            })) {\n                result.classes.push(className);\n            }\n        }\n        // Verify and consume other attributes.\n        for (const attributeName of match.attributes || []){\n            if (consumable.consume(viewElement, {\n                attributes: [\n                    attributeName\n                ]\n            })) {\n                result.attributes.push(attributeName);\n            }\n        }\n        return result;\n    }, {\n        attributes: [],\n        classes: [],\n        styles: []\n    });\n}\n/**\n * Prepares the GHS attribute value as an object with element attributes' values.\n */ function prepareGHSAttribute(viewElement, { attributes, classes, styles }) {\n    if (!attributes.length && !classes.length && !styles.length) {\n        return null;\n    }\n    return {\n        ...attributes.length && {\n            attributes: getAttributes(viewElement, attributes)\n        },\n        ...styles.length && {\n            styles: getReducedStyles(viewElement, styles)\n        },\n        ...classes.length && {\n            classes\n        }\n    };\n}\n/**\n * Returns attributes as an object with names and values.\n */ function getAttributes(viewElement, attributes) {\n    const attributesObject = {};\n    for (const key of attributes){\n        const value = viewElement.getAttribute(key);\n        if (value !== undefined && isValidAttributeName(key)) {\n            attributesObject[key] = value;\n        }\n    }\n    return attributesObject;\n}\n/**\n * Returns styles as an object reduced to shorthand notation without redundant entries.\n */ function getReducedStyles(viewElement, styles) {\n    // Use StyleMap to reduce style value to the minimal form (without shorthand and long-hand notation and duplication).\n    const stylesMap = new StylesMap(viewElement.document.stylesProcessor);\n    for (const key of styles){\n        const styleValue = viewElement.getStyle(key);\n        if (styleValue !== undefined) {\n            stylesMap.set(key, styleValue);\n        }\n    }\n    return Object.fromEntries(stylesMap.getStylesEntries());\n}\n/**\n * Matcher by default has to match **all** patterns to count it as an actual match. Splitting the pattern\n * into separate patterns means that any matched pattern will be count as a match.\n *\n * @param pattern Pattern to split.\n * @param attributeName Name of the attribute to split (e.g. 'attributes', 'classes', 'styles').\n */ function splitPattern(pattern, attributeName) {\n    const { name } = pattern;\n    const attributeValue = pattern[attributeName];\n    if (isPlainObject(attributeValue)) {\n        return Object.entries(attributeValue).map(([key, value])=>({\n                name,\n                [attributeName]: {\n                    [key]: value\n                }\n            }));\n    }\n    if (Array.isArray(attributeValue)) {\n        return attributeValue.map((value)=>({\n                name,\n                [attributeName]: [\n                    value\n                ]\n            }));\n    }\n    return [\n        pattern\n    ];\n}\n/**\n * Rules are matched in conjunction (AND operation), but we want to have a match if *any* of the rules is matched (OR operation).\n * By splitting the rules we force the latter effect.\n */ function splitRules(rules) {\n    const { name, attributes, classes, styles } = rules;\n    const splitRules = [];\n    if (attributes) {\n        splitRules.push(...splitPattern({\n            name,\n            attributes\n        }, 'attributes'));\n    }\n    if (classes) {\n        splitRules.push(...splitPattern({\n            name,\n            classes\n        }, 'classes'));\n    }\n    if (styles) {\n        splitRules.push(...splitPattern({\n            name,\n            styles\n        }, 'styles'));\n    }\n    return splitRules;\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:code-block/codeblock~CodeBlock Code Block} feature.\n */ class CodeBlockElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CodeBlockElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        if (!this.editor.plugins.has('CodeBlockEditing')) {\n            return;\n        }\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:pre', (evt, definition)=>{\n            if (definition.model !== 'codeBlock') {\n                return;\n            }\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            // Extend codeBlock to allow attributes required by attribute filtration.\n            schema.extend('codeBlock', {\n                allowAttributes: [\n                    'htmlPreAttributes',\n                    'htmlContentAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelCodeBlockAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewCodeBlockAttributeConverter());\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n *\n * Attributes are preserved as a value of `html*Attributes` model attribute.\n * @param dataFilter\n * @returns Returns a conversion callback.\n */ function viewToModelCodeBlockAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:code', (evt, data, conversionApi)=>{\n            const viewCodeElement = data.viewItem;\n            const viewPreElement = viewCodeElement.parent;\n            if (!viewPreElement || !viewPreElement.is('element', 'pre')) {\n                return;\n            }\n            preserveElementAttributes(viewPreElement, 'htmlPreAttributes');\n            preserveElementAttributes(viewCodeElement, 'htmlContentAttributes');\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:code-block/codeblock~CodeBlock Code Block}\n * feature model element.\n * @returns Returns a conversion callback.\n */ function modelToViewCodeBlockAttributeConverter() {\n    return (dispatcher)=>{\n        dispatcher.on('attribute:htmlPreAttributes:codeBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            const viewPreElement = viewCodeElement.parent;\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewPreElement);\n        });\n        dispatcher.on('attribute:htmlContentAttributes:codeBlock', (evt, data, conversionApi)=>{\n            if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                return;\n            }\n            const { attributeOldValue, attributeNewValue } = data;\n            const viewCodeElement = conversionApi.mapper.toViewElement(data.item);\n            updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewCodeElement);\n        });\n    };\n}\n\n/**\n * Provides the General HTML Support integration for elements which can behave like sectioning element (e.g. article) or\n * element accepting only inline content (e.g. paragraph).\n *\n * The distinction between this two content models is important for choosing correct schema model and proper content conversion.\n * As an example, it ensures that:\n *\n * * children elements paragraphing is enabled for sectioning elements only,\n * * element and its content can be correctly handled by editing view (splitting and merging elements),\n * * model element HTML is semantically correct and easier to work with.\n *\n * If element contains any block element, it will be treated as a sectioning element and registered using\n * {@link module:html-support/dataschema~DataSchemaDefinition#model} and\n * {@link module:html-support/dataschema~DataSchemaDefinition#modelSchema} in editor schema.\n * Otherwise, it will be registered under {@link module:html-support/dataschema~DataSchemaBlockElementDefinition#paragraphLikeModel} model\n * name with model schema accepting only inline content (inheriting from `$block`).\n */ class DualContentModelElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'DualContentModelElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register', (evt, definition)=>{\n            const blockDefinition = definition;\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            if (!blockDefinition.paragraphLikeModel) {\n                return;\n            }\n            // Can only apply to newly registered features.\n            if (schema.isRegistered(blockDefinition.model) || schema.isRegistered(blockDefinition.paragraphLikeModel)) {\n                return;\n            }\n            const paragraphLikeModelDefinition = {\n                model: blockDefinition.paragraphLikeModel,\n                view: blockDefinition.view\n            };\n            schema.register(blockDefinition.model, blockDefinition.modelSchema);\n            schema.register(paragraphLikeModelDefinition.model, {\n                inheritAllFrom: '$block'\n            });\n            conversion.for('upcast').elementToElement({\n                view: blockDefinition.view,\n                model: (viewElement, { writer })=>{\n                    if (this._hasBlockContent(viewElement)) {\n                        return writer.createElement(blockDefinition.model);\n                    }\n                    return writer.createElement(paragraphLikeModelDefinition.model);\n                },\n                // With a `low` priority, `paragraph` plugin auto-paragraphing mechanism is executed. Make sure\n                // this listener is called before it. If not, some elements will be transformed into a paragraph.\n                converterPriority: priorities.low + 0.5\n            });\n            conversion.for('downcast').elementToElement({\n                view: blockDefinition.view,\n                model: blockDefinition.model\n            });\n            this._addAttributeConversion(blockDefinition);\n            conversion.for('downcast').elementToElement({\n                view: paragraphLikeModelDefinition.view,\n                model: paragraphLikeModelDefinition.model\n            });\n            this._addAttributeConversion(paragraphLikeModelDefinition);\n            evt.stop();\n        });\n    }\n    /**\n\t * Checks whether the given view element includes any other block element.\n\t */ _hasBlockContent(viewElement) {\n        const view = this.editor.editing.view;\n        const blockElements = view.domConverter.blockElements;\n        // Traversing the viewElement subtree looking for block elements.\n        // Especially for the cases like <div><a href=\"#\"><p>foo</p></a></div>.\n        // https://github.com/ckeditor/ckeditor5/issues/11513\n        for (const viewItem of view.createRangeIn(viewElement).getItems()){\n            if (viewItem.is('element') && blockElements.includes(viewItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n\t * Adds attribute filtering conversion for the given data schema.\n\t */ _addAttributeConversion(definition) {\n        const editor = this.editor;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        editor.model.schema.extend(definition.model, {\n            allowAttributes: getHtmlAttributeName(definition.view)\n        });\n        conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n        conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n    }\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:heading/heading~Heading Heading} feature.\n */ class HeadingElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataSchema,\n            Enter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HeadingElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('HeadingEditing')) {\n            return;\n        }\n        const options = editor.config.get('heading.options');\n        this.registerHeadingElements(editor, options);\n    }\n    /**\n\t * Registers all elements supported by HeadingEditing to enable custom attributes for those elements.\n\t */ registerHeadingElements(editor, options) {\n        const dataSchema = editor.plugins.get(DataSchema);\n        const headerModels = [];\n        for (const option of options){\n            if ('model' in option && 'view' in option) {\n                dataSchema.registerBlockElement({\n                    view: option.view,\n                    model: option.model\n                });\n                headerModels.push(option.model);\n            }\n        }\n        dataSchema.extendBlockElement({\n            model: 'htmlHgroup',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n        dataSchema.extendBlockElement({\n            model: 'htmlSummary',\n            modelSchema: {\n                allowChildren: headerModels\n            }\n        });\n    }\n}\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module html-support/integrations/integrationutils\n */ /**\n * Returns the first view element descendant matching the given view name.\n * Includes view element itself.\n *\n * @internal\n */ function getDescendantElement(writer, containerElement, elementName) {\n    const range = writer.createRangeOn(containerElement);\n    for (const { item } of range.getWalker()){\n        if (item.is('element', elementName)) {\n            return item;\n        }\n    }\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:image/image~Image Image} feature.\n */ class ImageElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ImageElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // At least one image plugin should be loaded for the integration to work properly.\n        if (!editor.plugins.has('ImageInlineEditing') && !editor.plugins.has('ImageBlockEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter$1(dataFilter));\n        });\n        dataFilter.on('register:img', (evt, definition)=>{\n            if (definition.model !== 'imageBlock' && definition.model !== 'imageInline') {\n                return;\n            }\n            if (schema.isRegistered('imageBlock')) {\n                schema.extend('imageBlock', {\n                    allowAttributes: [\n                        'htmlImgAttributes',\n                        // Figure and Link don't have model counterpart.\n                        // We will preserve attributes on image model element using these attribute keys.\n                        'htmlFigureAttributes',\n                        'htmlLinkAttributes'\n                    ]\n                });\n            }\n            if (schema.isRegistered('imageInline')) {\n                schema.extend('imageInline', {\n                    allowAttributes: [\n                        // `htmlA` is needed for standard GHS link integration.\n                        'htmlA',\n                        'htmlImgAttributes'\n                    ]\n                });\n            }\n            conversion.for('upcast').add(viewToModelImageAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewImageAttributeConverter());\n            if (editor.plugins.has('LinkImage')) {\n                conversion.for('upcast').add(viewToModelLinkImageAttributeConverter(dataFilter, editor));\n            }\n            evt.stop();\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on the {@link module:image/image~Image Image}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelImageAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:img', (evt, data, conversionApi)=>{\n            if (!data.modelRange) {\n                return;\n            }\n            const viewImageElement = data.viewItem;\n            const viewAttributes = dataFilter.processViewAttributes(viewImageElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlImgAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from link view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelLinkImageAttributeConverter(dataFilter, editor) {\n    const imageUtils = editor.plugins.get('ImageUtils');\n    return (dispatcher)=>{\n        dispatcher.on('element:a', (evt, data, conversionApi)=>{\n            const viewLink = data.viewItem;\n            const viewImage = imageUtils.findViewImgElement(viewLink);\n            if (!viewImage) {\n                return;\n            }\n            const modelImage = data.modelCursor.parent;\n            if (!modelImage.is('element', 'imageBlock')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewLink, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlLinkAttributes', viewAttributes, modelImage);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:image/image~Image Image}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributeConverter$1(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('image')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * A model-to-view conversion helper applying attributes from the {@link module:image/image~Image Image}\n * feature.\n * @returns Returns a conversion callback.\n */ function modelToViewImageAttributeConverter() {\n    return (dispatcher)=>{\n        addInlineAttributeConversion('htmlImgAttributes');\n        addBlockAttributeConversion('img', 'htmlImgAttributes');\n        addBlockAttributeConversion('figure', 'htmlFigureAttributes');\n        addBlockAttributeConversion('a', 'htmlLinkAttributes');\n        function addInlineAttributeConversion(attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageInline`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const viewElement = conversionApi.mapper.toViewElement(data.item);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            }, {\n                priority: 'low'\n            });\n        }\n        function addBlockAttributeConversion(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:imageBlock`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (viewElement) {\n                    updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n                    conversionApi.consumable.consume(data.item, evt.name);\n                }\n            }, {\n                priority: 'low'\n            });\n            if (elementName === 'a') {\n                // To have a link element in the view, we need to attach a converter to the `linkHref` attribute as well.\n                dispatcher.on('attribute:linkHref:imageBlock', (evt, data, conversionApi)=>{\n                    if (!conversionApi.consumable.consume(data.item, 'attribute:htmlLinkAttributes:imageBlock')) {\n                        return;\n                    }\n                    const containerElement = conversionApi.mapper.toViewElement(data.item);\n                    const viewElement = getDescendantElement(conversionApi.writer, containerElement, 'a');\n                    setViewAttributes(conversionApi.writer, data.item.getAttribute('htmlLinkAttributes'), viewElement);\n                }, {\n                    priority: 'low'\n                });\n            }\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:media-embed/mediaembed~MediaEmbed Media Embed} feature.\n */ class MediaEmbedElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'MediaEmbedElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Stop here if MediaEmbed plugin is not provided or the integrator wants to output markup with previews as\n        // we do not support filtering previews.\n        if (!editor.plugins.has('MediaEmbed') || editor.config.get('mediaEmbed.previewsInData')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        const mediaElementName = editor.config.get('mediaEmbed.elementName');\n        // Overwrite GHS schema definition for a given elementName.\n        dataSchema.registerBlockElement({\n            model: 'media',\n            view: mediaElementName\n        });\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributesConverter(dataFilter));\n        });\n        dataFilter.on(`register:${mediaElementName}`, (evt, definition)=>{\n            if (definition.model !== 'media') {\n                return;\n            }\n            schema.extend('media', {\n                allowAttributes: [\n                    getHtmlAttributeName(mediaElementName),\n                    'htmlFigureAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelMediaAttributesConverter(dataFilter, mediaElementName));\n            conversion.for('dataDowncast').add(modelToViewMediaAttributeConverter(mediaElementName));\n            evt.stop();\n        });\n    }\n}\nfunction viewToModelMediaAttributesConverter(dataFilter, mediaElementName) {\n    const upcastMedia = (evt, data, conversionApi)=>{\n        const viewMediaElement = data.viewItem;\n        preserveElementAttributes(viewMediaElement, getHtmlAttributeName(mediaElementName));\n        function preserveElementAttributes(viewElement, attributeName) {\n            const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n            }\n        }\n    };\n    return (dispatcher)=>{\n        dispatcher.on(`element:${mediaElementName}`, upcastMedia, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:media-embed/mediaembed~MediaEmbed MediaEmbed}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributesConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('media')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\nfunction modelToViewMediaAttributeConverter(mediaElementName) {\n    return (dispatcher)=>{\n        addAttributeConversionDispatcherHandler(mediaElementName, getHtmlAttributeName(mediaElementName));\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:media`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.consume(data.item, evt.name)) {\n                    return;\n                }\n                const { attributeOldValue, attributeNewValue } = data;\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                updateViewAttributes(conversionApi.writer, attributeOldValue, attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support for `script` elements.\n */ class ScriptElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ScriptElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:script', (evt, definition)=>{\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlScript', definition.modelSchema);\n            schema.extend('htmlScript', {\n                allowAttributes: [\n                    'htmlScriptAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'script'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'script',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlScript',\n                view: (modelElement, { writer })=>{\n                    return createObjectView('script', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n\n/**\n * Provides the General HTML Support integration with {@link module:table/table~Table Table} feature.\n */ class TableElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'TableElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('TableEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const tableUtils = editor.plugins.get('TableUtils');\n        dataFilter.on('register:figure', ()=>{\n            conversion.for('upcast').add(viewToModelFigureAttributeConverter(dataFilter));\n        });\n        dataFilter.on('register:table', (evt, definition)=>{\n            if (definition.model !== 'table') {\n                return;\n            }\n            schema.extend('table', {\n                allowAttributes: [\n                    'htmlTableAttributes',\n                    // Figure, thead and tbody elements don't have model counterparts.\n                    // We will be preserving attributes on table element using these attribute keys.\n                    'htmlFigureAttributes',\n                    'htmlTheadAttributes',\n                    'htmlTbodyAttributes'\n                ]\n            });\n            conversion.for('upcast').add(viewToModelTableAttributeConverter(dataFilter));\n            conversion.for('downcast').add(modelToViewTableAttributeConverter());\n            editor.model.document.registerPostFixer(createHeadingRowsPostFixer(editor.model, tableUtils));\n            evt.stop();\n        });\n    }\n}\n/**\n * Creates a model post-fixer for thead and tbody GHS related attributes.\n */ function createHeadingRowsPostFixer(model, tableUtils) {\n    return (writer)=>{\n        const changes = model.document.differ.getChanges();\n        let wasFixed = false;\n        for (const change of changes){\n            if (change.type != 'attribute' || change.attributeKey != 'headingRows') {\n                continue;\n            }\n            const table = change.range.start.nodeAfter;\n            const hasTHeadAttributes = table.getAttribute('htmlTheadAttributes');\n            const hasTBodyAttributes = table.getAttribute('htmlTbodyAttributes');\n            if (hasTHeadAttributes && !change.attributeNewValue) {\n                writer.removeAttribute('htmlTheadAttributes', table);\n                wasFixed = true;\n            } else if (hasTBodyAttributes && change.attributeNewValue == tableUtils.getRows(table)) {\n                writer.removeAttribute('htmlTbodyAttributes', table);\n                wasFixed = true;\n            }\n        }\n        return wasFixed;\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelTableAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:table', (evt, data, conversionApi)=>{\n            if (!data.modelRange) {\n                return;\n            }\n            const viewTableElement = data.viewItem;\n            preserveElementAttributes(viewTableElement, 'htmlTableAttributes');\n            for (const childNode of viewTableElement.getChildren()){\n                if (childNode.is('element', 'thead')) {\n                    preserveElementAttributes(childNode, 'htmlTheadAttributes');\n                }\n                if (childNode.is('element', 'tbody')) {\n                    preserveElementAttributes(childNode, 'htmlTbodyAttributes');\n                }\n            }\n            function preserveElementAttributes(viewElement, attributeName) {\n                const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                if (viewAttributes) {\n                    conversionApi.writer.setAttribute(attributeName, viewAttributes, data.modelRange);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link module:table/table~Table Table}\n * feature model element from figure view element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelFigureAttributeConverter(dataFilter) {\n    return (dispatcher)=>{\n        dispatcher.on('element:figure', (evt, data, conversionApi)=>{\n            const viewFigureElement = data.viewItem;\n            if (!data.modelRange || !viewFigureElement.hasClass('table')) {\n                return;\n            }\n            const viewAttributes = dataFilter.processViewAttributes(viewFigureElement, conversionApi);\n            if (viewAttributes) {\n                conversionApi.writer.setAttribute('htmlFigureAttributes', viewAttributes, data.modelRange);\n            }\n        }, {\n            priority: 'low'\n        });\n    };\n}\n/**\n * Model-to-view conversion helper applying attributes from {@link module:table/table~Table Table}\n * feature.\n *\n * @returns Returns a conversion callback.\n */ function modelToViewTableAttributeConverter() {\n    return (dispatcher)=>{\n        addAttributeConversionDispatcherHandler('table', 'htmlTableAttributes');\n        addAttributeConversionDispatcherHandler('figure', 'htmlFigureAttributes');\n        addAttributeConversionDispatcherHandler('thead', 'htmlTheadAttributes');\n        addAttributeConversionDispatcherHandler('tbody', 'htmlTbodyAttributes');\n        function addAttributeConversionDispatcherHandler(elementName, attributeName) {\n            dispatcher.on(`attribute:${attributeName}:table`, (evt, data, conversionApi)=>{\n                if (!conversionApi.consumable.test(data.item, evt.name)) {\n                    return;\n                }\n                const containerElement = conversionApi.mapper.toViewElement(data.item);\n                const viewElement = getDescendantElement(conversionApi.writer, containerElement, elementName);\n                if (!viewElement) {\n                    return;\n                }\n                conversionApi.consumable.consume(data.item, evt.name);\n                updateViewAttributes(conversionApi.writer, data.attributeOldValue, data.attributeNewValue, viewElement);\n            });\n        }\n    };\n}\n\n/**\n * Provides the General HTML Support for `style` elements.\n */ class StyleElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'StyleElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        dataFilter.on('register:style', (evt, definition)=>{\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            schema.register('htmlStyle', definition.modelSchema);\n            schema.extend('htmlStyle', {\n                allowAttributes: [\n                    'htmlStyleAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            editor.data.registerRawContentMatcher({\n                name: 'style'\n            });\n            conversion.for('upcast').elementToElement({\n                view: 'style',\n                model: viewToModelObjectConverter(definition)\n            });\n            conversion.for('upcast').add(viewToModelBlockAttributeConverter(definition, dataFilter));\n            conversion.for('downcast').elementToElement({\n                model: 'htmlStyle',\n                view: (modelElement, { writer })=>{\n                    return createObjectView('style', modelElement, writer);\n                }\n            });\n            conversion.for('downcast').add(modelToViewBlockAttributeConverter(definition));\n            evt.stop();\n        });\n    }\n}\n\n/**\n * Provides the General HTML Support integration with the {@link module:list/list~List List} feature.\n */ class ListElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'ListElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        if (!editor.plugins.has('ListEditing')) {\n            return;\n        }\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const dataFilter = editor.plugins.get(DataFilter);\n        const listEditing = editor.plugins.get('ListEditing');\n        const listUtils = editor.plugins.get('ListUtils');\n        const viewElements = [\n            'ul',\n            'ol',\n            'li'\n        ];\n        // Register downcast strategy.\n        // Note that this must be done before document list editing registers conversion in afterInit.\n        listEditing.registerDowncastStrategy({\n            scope: 'item',\n            attributeName: 'htmlLiAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlUlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        listEditing.registerDowncastStrategy({\n            scope: 'list',\n            attributeName: 'htmlOlAttributes',\n            setAttributeOnDowncast: setViewAttributes\n        });\n        dataFilter.on('register', (evt, definition)=>{\n            if (!viewElements.includes(definition.view)) {\n                return;\n            }\n            evt.stop();\n            // Do not register same converters twice.\n            if (schema.checkAttribute('$block', 'htmlLiAttributes')) {\n                return;\n            }\n            const allowAttributes = viewElements.map((element)=>getHtmlAttributeName(element));\n            schema.extend('$listItem', {\n                allowAttributes\n            });\n            conversion.for('upcast').add((dispatcher)=>{\n                dispatcher.on('element:ul', viewToModelListAttributeConverter('htmlUlAttributes', dataFilter), {\n                    priority: 'low'\n                });\n                dispatcher.on('element:ol', viewToModelListAttributeConverter('htmlOlAttributes', dataFilter), {\n                    priority: 'low'\n                });\n                dispatcher.on('element:li', viewToModelListAttributeConverter('htmlLiAttributes', dataFilter), {\n                    priority: 'low'\n                });\n            });\n        });\n        // Make sure that all items in a single list (items at the same level & listType) have the same properties.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node, previousNodeInList } of listNodes){\n                // This is a first item of a nested list.\n                if (!previousNodeInList) {\n                    continue;\n                }\n                if (previousNodeInList.getAttribute('listType') == node.getAttribute('listType')) {\n                    const attribute = getAttributeFromListType(previousNodeInList.getAttribute('listType'));\n                    const value = previousNodeInList.getAttribute(attribute);\n                    if (!isEqual(node.getAttribute(attribute), value) && writer.model.schema.checkAttribute(node, attribute)) {\n                        writer.setAttribute(attribute, value, node);\n                        evt.return = true;\n                    }\n                }\n                if (previousNodeInList.getAttribute('listItemId') == node.getAttribute('listItemId')) {\n                    const value = previousNodeInList.getAttribute('htmlLiAttributes');\n                    if (!isEqual(node.getAttribute('htmlLiAttributes'), value) && writer.model.schema.checkAttribute(node, 'htmlLiAttributes')) {\n                        writer.setAttribute('htmlLiAttributes', value, node);\n                        evt.return = true;\n                    }\n                }\n            }\n        });\n        // Remove `ol` attributes from `ul` elements and vice versa.\n        listEditing.on('postFixer', (evt, { listNodes, writer })=>{\n            for (const { node } of listNodes){\n                const listType = node.getAttribute('listType');\n                if (!listUtils.isNumberedListType(listType) && node.getAttribute('htmlOlAttributes')) {\n                    writer.removeAttribute('htmlOlAttributes', node);\n                    evt.return = true;\n                }\n                if (listUtils.isNumberedListType(listType) && node.getAttribute('htmlUlAttributes')) {\n                    writer.removeAttribute('htmlUlAttributes', node);\n                    evt.return = true;\n                }\n            }\n        });\n    }\n    /**\n\t * @inheritDoc\n\t */ afterInit() {\n        const editor = this.editor;\n        if (!editor.commands.get('indentList')) {\n            return;\n        }\n        // Reset list attributes after indenting list items.\n        const indentList = editor.commands.get('indentList');\n        this.listenTo(indentList, 'afterExecute', (evt, changedBlocks)=>{\n            editor.model.change((writer)=>{\n                for (const node of changedBlocks){\n                    const attribute = getAttributeFromListType(node.getAttribute('listType'));\n                    if (!editor.model.schema.checkAttribute(node, attribute)) {\n                        continue;\n                    }\n                    // Just reset the attribute.\n                    // If there is a previous indented list that this node should be merged into,\n                    // the postfixer will unify all the attributes of both sub-lists.\n                    writer.setAttribute(attribute, {}, node);\n                }\n            });\n        });\n    }\n}\n/**\n * View-to-model conversion helper preserving allowed attributes on {@link TODO}\n * feature model element.\n *\n * @returns Returns a conversion callback.\n */ function viewToModelListAttributeConverter(attributeName, dataFilter) {\n    return (evt, data, conversionApi)=>{\n        const viewElement = data.viewItem;\n        if (!data.modelRange) {\n            Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n        }\n        const viewAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n        for (const item of data.modelRange.getItems({\n            shallow: true\n        })){\n            // Apply only to list item blocks.\n            if (!item.hasAttribute('listItemId')) {\n                continue;\n            }\n            // Set list attributes only on same level items, those nested deeper are already handled\n            // by the recursive conversion.\n            if (item.hasAttribute('htmlUlAttributes') || item.hasAttribute('htmlOlAttributes')) {\n                continue;\n            }\n            if (conversionApi.writer.model.schema.checkAttribute(item, attributeName)) {\n                conversionApi.writer.setAttribute(attributeName, viewAttributes || {}, item);\n            }\n        }\n    };\n}\n/**\n * Returns HTML attribute name based on provided list type.\n */ function getAttributeFromListType(listType) {\n    return listType === 'numbered' || listType == 'customNumbered' ? 'htmlOlAttributes' : 'htmlUlAttributes';\n}\n\n/**\n * Provides the General HTML Support for custom elements (not registered in the {@link module:html-support/dataschema~DataSchema}).\n */ class CustomElementSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter,\n            DataSchema\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'CustomElementSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const dataFilter = this.editor.plugins.get(DataFilter);\n        const dataSchema = this.editor.plugins.get(DataSchema);\n        dataFilter.on('register:$customElement', (evt, definition)=>{\n            evt.stop();\n            const editor = this.editor;\n            const schema = editor.model.schema;\n            const conversion = editor.conversion;\n            const unsafeElements = editor.editing.view.domConverter.unsafeElements;\n            const preLikeElements = editor.data.htmlProcessor.domConverter.preElements;\n            schema.register(definition.model, definition.modelSchema);\n            schema.extend(definition.model, {\n                allowAttributes: [\n                    'htmlElementName',\n                    'htmlCustomElementAttributes',\n                    'htmlContent'\n                ],\n                isContent: true\n            });\n            // For the `<template>` element we use only raw-content because DOM API exposes its content\n            // only as a document fragment in the `content` property (or innerHTML).\n            editor.data.htmlProcessor.domConverter.registerRawContentMatcher({\n                name: 'template'\n            });\n            // Being executed on the low priority, it will catch all elements that were not caught by other converters.\n            conversion.for('upcast').elementToElement({\n                view: /.*/,\n                model: (viewElement, conversionApi)=>{\n                    // Do not try to convert $comment fake element.\n                    if (viewElement.name == '$comment') {\n                        return null;\n                    }\n                    if (!isValidElementName(viewElement.name)) {\n                        return null;\n                    }\n                    // Allow for fallback only if this element is not defined in data schema to make sure\n                    // that this will handle only custom elements not registered in the data schema.\n                    if (dataSchema.getDefinitionsForView(viewElement.name).size) {\n                        return null;\n                    }\n                    // Make sure that this element will not render in the editing view.\n                    if (!unsafeElements.includes(viewElement.name)) {\n                        unsafeElements.push(viewElement.name);\n                    }\n                    // Make sure that whitespaces will not be trimmed or replaced by nbsps while stringify content.\n                    if (!preLikeElements.includes(viewElement.name)) {\n                        preLikeElements.push(viewElement.name);\n                    }\n                    const modelElement = conversionApi.writer.createElement(definition.model, {\n                        htmlElementName: viewElement.name\n                    });\n                    const htmlAttributes = dataFilter.processViewAttributes(viewElement, conversionApi);\n                    if (htmlAttributes) {\n                        conversionApi.writer.setAttribute('htmlCustomElementAttributes', htmlAttributes, modelElement);\n                    }\n                    let htmlContent;\n                    // For the `<template>` element we use only raw-content because DOM API exposes its content\n                    // only as a document fragment in the `content` property.\n                    if (viewElement.is('element', 'template') && viewElement.getCustomProperty('$rawContent')) {\n                        htmlContent = viewElement.getCustomProperty('$rawContent');\n                    } else {\n                        // Store the whole element in the attribute so that DomConverter will be able to use the pre like element context.\n                        const viewWriter = new UpcastWriter(viewElement.document);\n                        const documentFragment = viewWriter.createDocumentFragment(viewElement);\n                        const domFragment = editor.data.htmlProcessor.domConverter.viewToDom(documentFragment);\n                        const domElement = domFragment.firstChild;\n                        while(domElement.firstChild){\n                            domFragment.appendChild(domElement.firstChild);\n                        }\n                        domElement.remove();\n                        htmlContent = editor.data.htmlProcessor.htmlWriter.getHtml(domFragment);\n                    }\n                    conversionApi.writer.setAttribute('htmlContent', htmlContent, modelElement);\n                    // Consume the content of the element.\n                    for (const { item } of editor.editing.view.createRangeIn(viewElement)){\n                        conversionApi.consumable.consume(item, {\n                            name: true\n                        });\n                    }\n                    return modelElement;\n                },\n                converterPriority: 'low'\n            });\n            // Because this element is unsafe (DomConverter#unsafeElements), it will render as a transparent <span> but it must\n            // be rendered anyway for the mapping between the model and the view to exist.\n            conversion.for('editingDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: [\n                        'htmlElementName',\n                        'htmlCustomElementAttributes',\n                        'htmlContent'\n                    ]\n                },\n                view: (modelElement, { writer })=>{\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const viewElement = writer.createRawElement(viewName);\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n            conversion.for('dataDowncast').elementToElement({\n                model: {\n                    name: definition.model,\n                    attributes: [\n                        'htmlElementName',\n                        'htmlCustomElementAttributes',\n                        'htmlContent'\n                    ]\n                },\n                view: (modelElement, { writer })=>{\n                    const viewName = modelElement.getAttribute('htmlElementName');\n                    const htmlContent = modelElement.getAttribute('htmlContent');\n                    const viewElement = writer.createRawElement(viewName, null, (domElement, domConverter)=>{\n                        domConverter.setContentOf(domElement, htmlContent);\n                    });\n                    if (modelElement.hasAttribute('htmlCustomElementAttributes')) {\n                        setViewAttributes(writer, modelElement.getAttribute('htmlCustomElementAttributes'), viewElement);\n                    }\n                    return viewElement;\n                }\n            });\n        });\n    }\n}\n/**\n * Returns true if name is valid for a DOM element name.\n */ function isValidElementName(name) {\n    try {\n        document.createElement(name);\n    } catch (error) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * The General HTML Support feature.\n *\n * This is a \"glue\" plugin which initializes the {@link module:html-support/datafilter~DataFilter data filter} configuration\n * and features integration with the General HTML Support.\n */ class GeneralHtmlSupport extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'GeneralHtmlSupport';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            DataFilter,\n            CodeBlockElementSupport,\n            DualContentModelElementSupport,\n            HeadingElementSupport,\n            ImageElementSupport,\n            MediaEmbedElementSupport,\n            ScriptElementSupport,\n            TableElementSupport,\n            StyleElementSupport,\n            ListElementSupport,\n            CustomElementSupport\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const dataFilter = editor.plugins.get(DataFilter);\n        // Load the allowed empty inline elements' configuration.\n        // Note that this modifies DataSchema so must be loaded before registering filtering rules.\n        dataFilter.loadAllowedEmptyElementsConfig(editor.config.get('htmlSupport.allowEmpty') || []);\n        // Load the filtering configuration.\n        dataFilter.loadAllowedConfig(editor.config.get('htmlSupport.allow') || []);\n        dataFilter.loadDisallowedConfig(editor.config.get('htmlSupport.disallow') || []);\n    }\n    /**\n\t * Returns a GHS model attribute name related to a given view element name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t */ getGhsAttributeNameForElement(viewElementName) {\n        const dataSchema = this.editor.plugins.get('DataSchema');\n        const definitions = Array.from(dataSchema.getDefinitionsForView(viewElementName, false));\n        const inlineDefinition = definitions.find((definition)=>definition.isInline && !definitions[0].isObject);\n        if (inlineDefinition) {\n            return inlineDefinition.model;\n        }\n        return getHtmlAttributeName(viewElementName);\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to add.\n\t * @param selectable The selection or element to update.\n\t */ addModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', (classes)=>{\n                    for (const value of toArray(className)){\n                        classes.add(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given class name.\n\t *\n\t * @internal\n\t * @param viewElementName A view element name.\n\t * @param className The css class to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlClass(viewElementName, className, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'classes', (classes)=>{\n                    for (const value of toArray(className)){\n                        classes.delete(value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributes The object with attributes to set.\n\t * @param selectable The selection or element to update.\n\t */ setModelHtmlAttributes(viewElementName, attributes, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', (attributesMap)=>{\n                    for (const [key, value] of Object.entries(attributes)){\n                        attributesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include the given attribute.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param attributeName The attribute name (or names) to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlAttributes(viewElementName, attributeName, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'attributes', (attributesMap)=>{\n                    for (const key of toArray(attributeName)){\n                        attributesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it includes a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param styles The object with styles to set.\n\t * @param selectable The selection or element to update.\n\t */ setModelHtmlStyles(viewElementName, styles, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', (stylesMap)=>{\n                    for (const [key, value] of Object.entries(styles)){\n                        stylesMap.set(key, value);\n                    }\n                });\n            }\n        });\n    }\n    /**\n\t * Updates GHS model attribute for a specified view element name, so it does not include a given style.\n\t *\n\t * @param viewElementName A view element name.\n\t * @param properties The style (or styles list) to remove.\n\t * @param selectable The selection or element to update.\n\t */ removeModelHtmlStyles(viewElementName, properties, selectable) {\n        const model = this.editor.model;\n        const ghsAttributeName = this.getGhsAttributeNameForElement(viewElementName);\n        model.change((writer)=>{\n            for (const item of getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName)){\n                modifyGhsAttribute(writer, item, ghsAttributeName, 'styles', (stylesMap)=>{\n                    for (const key of toArray(properties)){\n                        stylesMap.delete(key);\n                    }\n                });\n            }\n        });\n    }\n}\n/**\n * Returns an iterator over an items in the selectable that accept given GHS attribute.\n */ function* getItemsToUpdateGhsAttribute(model, selectable, ghsAttributeName) {\n    if (!selectable) {\n        return;\n    }\n    if (!(Symbol.iterator in selectable) && selectable.is('documentSelection') && selectable.isCollapsed) {\n        if (model.schema.checkAttributeInSelection(selectable, ghsAttributeName)) {\n            yield selectable;\n        }\n    } else {\n        for (const range of getValidRangesForSelectable(model, selectable, ghsAttributeName)){\n            yield* range.getItems({\n                shallow: true\n            });\n        }\n    }\n}\n/**\n * Translates a given selectable to an iterable of ranges.\n */ function getValidRangesForSelectable(model, selectable, ghsAttributeName) {\n    if (!(Symbol.iterator in selectable) && (selectable.is('node') || selectable.is('$text') || selectable.is('$textProxy'))) {\n        if (model.schema.checkAttribute(selectable, ghsAttributeName)) {\n            return [\n                model.createRangeOn(selectable)\n            ];\n        } else {\n            return [];\n        }\n    } else {\n        return model.schema.getValidRanges(model.createSelection(selectable).getRanges(), ghsAttributeName);\n    }\n}\n\n/**\n * The HTML comment feature. It preserves the HTML comments (`<!-- -->`) in the editor data.\n *\n * For a detailed overview, check the {@glink features/html/html-comments HTML comment feature documentation}.\n */ class HtmlComment extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'HtmlComment';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const loadedCommentsContent = new Map();\n        editor.data.processor.skipComments = false;\n        // Allow storing comment's content as the $root attribute with the name `$comment:<unique id>`.\n        editor.model.schema.addAttributeCheck((context, attributeName)=>{\n            if (context.endsWith('$root') && attributeName.startsWith('$comment')) {\n                return true;\n            }\n        });\n        // Convert the `$comment` view element to `$comment:<unique id>` marker and store its content (the comment itself) as a $root\n        // attribute. The comment content is needed in the `dataDowncast` pipeline to re-create the comment node.\n        editor.conversion.for('upcast').elementToMarker({\n            view: '$comment',\n            model: (viewElement)=>{\n                const markerUid = uid();\n                const markerName = `$comment:${markerUid}`;\n                const commentContent = viewElement.getCustomProperty('$rawContent');\n                loadedCommentsContent.set(markerName, commentContent);\n                return markerName;\n            }\n        });\n        // Convert the `$comment` marker to `$comment` UI element with `$rawContent` custom property containing the comment content.\n        editor.conversion.for('dataDowncast').markerToElement({\n            model: '$comment',\n            view: (modelElement, { writer })=>{\n                let root = undefined;\n                for (const rootName of this.editor.model.document.getRootNames()){\n                    root = this.editor.model.document.getRoot(rootName);\n                    if (root.hasAttribute(modelElement.markerName)) {\n                        break;\n                    }\n                }\n                const markerName = modelElement.markerName;\n                const commentContent = root.getAttribute(markerName);\n                const comment = writer.createUIElement('$comment');\n                writer.setCustomProperty('$rawContent', commentContent, comment);\n                return comment;\n            }\n        });\n        // Remove comments' markers and their corresponding $root attributes, which are moved to the graveyard.\n        editor.model.document.registerPostFixer((writer)=>{\n            let changed = false;\n            const markers = editor.model.document.differ.getChangedMarkers().filter((marker)=>marker.name.startsWith('$comment:'));\n            for (const marker of markers){\n                const { oldRange, newRange } = marker.data;\n                if (oldRange && newRange && oldRange.root == newRange.root) {\n                    continue;\n                }\n                if (oldRange) {\n                    // The comment marker was moved from one root to another (most probably to the graveyard).\n                    // Remove the related attribute from the previous root.\n                    const oldRoot = oldRange.root;\n                    if (oldRoot.hasAttribute(marker.name)) {\n                        writer.removeAttribute(marker.name, oldRoot);\n                        changed = true;\n                    }\n                }\n                if (newRange) {\n                    const newRoot = newRange.root;\n                    if (newRoot.rootName == '$graveyard') {\n                        // Comment marker was moved to the graveyard -- remove it entirely.\n                        writer.removeMarker(marker.name);\n                        changed = true;\n                    } else if (!newRoot.hasAttribute(marker.name)) {\n                        // Comment marker was just added or was moved to another root - updated roots attributes.\n                        //\n                        // Added fallback to `''` for the comment content in case if someone incorrectly added just the marker \"by hand\"\n                        // and forgot to add the root attribute or add them in different change blocks.\n                        //\n                        // It caused an infinite loop in one of the unit tests.\n                        writer.setAttribute(marker.name, loadedCommentsContent.get(marker.name) || '', newRoot);\n                        changed = true;\n                    }\n                }\n            }\n            return changed;\n        });\n        // Delete all comment markers from the document before setting new data.\n        editor.data.on('set', ()=>{\n            for (const commentMarker of editor.model.markers.getMarkersGroup('$comment')){\n                this.removeHtmlComment(commentMarker.name);\n            }\n        }, {\n            priority: 'high'\n        });\n        // Delete all comment markers that are within a removed range.\n        // Delete all comment markers at the limit element boundaries if the whole content of the limit element is removed.\n        editor.model.on('deleteContent', (evt, [selection])=>{\n            for (const range of selection.getRanges()){\n                const limitElement = editor.model.schema.getLimitElement(range);\n                const firstPosition = editor.model.createPositionAt(limitElement, 0);\n                const lastPosition = editor.model.createPositionAt(limitElement, 'end');\n                let affectedCommentIDs;\n                if (firstPosition.isTouching(range.start) && lastPosition.isTouching(range.end)) {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(editor.model.createRange(firstPosition, lastPosition));\n                } else {\n                    affectedCommentIDs = this.getHtmlCommentsInRange(range, {\n                        skipBoundaries: true\n                    });\n                }\n                for (const commentMarkerID of affectedCommentIDs){\n                    this.removeHtmlComment(commentMarkerID);\n                }\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Creates an HTML comment on the specified position and returns its ID.\n\t *\n\t * *Note*: If two comments are created at the same position, the second comment will be inserted before the first one.\n\t *\n\t * @returns Comment ID. This ID can be later used to e.g. remove the comment from the content.\n\t */ createHtmlComment(position, content) {\n        const id = uid();\n        const editor = this.editor;\n        const model = editor.model;\n        const root = model.document.getRoot(position.root.rootName);\n        const markerName = `$comment:${id}`;\n        return model.change((writer)=>{\n            const range = writer.createRange(position);\n            writer.addMarker(markerName, {\n                usingOperation: true,\n                affectsData: true,\n                range\n            });\n            writer.setAttribute(markerName, content, root);\n            return markerName;\n        });\n    }\n    /**\n\t * Removes an HTML comment with the given comment ID.\n\t *\n\t * It does nothing and returns `false` if the comment with the given ID does not exist.\n\t * Otherwise it removes the comment and returns `true`.\n\t *\n\t * Note that a comment can be removed also by removing the content around the comment.\n\t *\n\t * @param commentID The ID of the comment to be removed.\n\t * @returns `true` when the comment with the given ID was removed, `false` otherwise.\n\t */ removeHtmlComment(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return false;\n        }\n        editor.model.change((writer)=>{\n            writer.removeMarker(marker);\n        });\n        return true;\n    }\n    /**\n\t * Gets the HTML comment data for the comment with a given ID.\n\t *\n\t * Returns `null` if the comment does not exist.\n\t */ getHtmlCommentData(commentID) {\n        const editor = this.editor;\n        const marker = editor.model.markers.get(commentID);\n        if (!marker) {\n            return null;\n        }\n        let content = '';\n        for (const root of this.editor.model.document.getRoots()){\n            if (root.hasAttribute(commentID)) {\n                content = root.getAttribute(commentID);\n                break;\n            }\n        }\n        return {\n            content,\n            position: marker.getStart()\n        };\n    }\n    /**\n\t * Gets all HTML comments in the given range.\n\t *\n\t * By default, it includes comments at the range boundaries.\n\t *\n\t * @param range\n\t * @param options.skipBoundaries When set to `true` the range boundaries will be skipped.\n\t * @returns HTML comment IDs\n\t */ getHtmlCommentsInRange(range, { skipBoundaries = false } = {}) {\n        const includeBoundaries = !skipBoundaries;\n        // Unfortunately, MarkerCollection#getMarkersAtPosition() filters out collapsed markers.\n        return Array.from(this.editor.model.markers.getMarkersGroup('$comment')).filter((marker)=>isCommentMarkerInRange(marker, range)).map((marker)=>marker.name);\n        function isCommentMarkerInRange(commentMarker, range) {\n            const position = commentMarker.getRange().start;\n            return (position.isAfter(range.start) || includeBoundaries && position.isEqual(range.start)) && (position.isBefore(range.end) || includeBoundaries && position.isEqual(range.end));\n        }\n    }\n}\n\n/**\n * The full page HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n */ class HtmlPageDataProcessor extends HtmlDataProcessor {\n    /**\n\t * @inheritDoc\n\t */ toView(data) {\n        // Ignore content that is not a full page source.\n        if (!/<(?:html|body|head|meta)(?:\\s[^>]*)?>/i.test(data.trim().slice(0, 10_000))) {\n            return super.toView(data);\n        }\n        // Store doctype and xml declaration in a separate properties as they can't be stringified later.\n        let docType = '';\n        let xmlDeclaration = '';\n        data = data.trim().replace(/<\\?xml\\s[^?]*\\?>/i, (match)=>{\n            xmlDeclaration = match;\n            return '';\n        });\n        data = data.trim().replace(/^<!DOCTYPE\\s[^>]*?>/i, (match)=>{\n            docType = match;\n            return '';\n        });\n        // Convert input HTML data to DOM DocumentFragment.\n        const domFragment = this._toDom(data);\n        // Convert DOM DocumentFragment to view DocumentFragment.\n        const viewFragment = this.domConverter.domToView(domFragment, {\n            skipComments: this.skipComments\n        });\n        const writer = new UpcastWriter(viewFragment.document);\n        // Using the DOM document with body content extracted as a skeleton of the page.\n        writer.setCustomProperty('$fullPageDocument', domFragment.ownerDocument.documentElement.outerHTML, viewFragment);\n        if (docType) {\n            writer.setCustomProperty('$fullPageDocType', docType, viewFragment);\n        }\n        if (xmlDeclaration) {\n            writer.setCustomProperty('$fullPageXmlDeclaration', xmlDeclaration, viewFragment);\n        }\n        return viewFragment;\n    }\n    /**\n\t * @inheritDoc\n\t */ toData(viewFragment) {\n        let data = super.toData(viewFragment);\n        const page = viewFragment.getCustomProperty('$fullPageDocument');\n        const docType = viewFragment.getCustomProperty('$fullPageDocType');\n        const xmlDeclaration = viewFragment.getCustomProperty('$fullPageXmlDeclaration');\n        if (page) {\n            data = page.replace(/<\\/body\\s*>/, data + '$&');\n            if (docType) {\n                data = docType + '\\n' + data;\n            }\n            if (xmlDeclaration) {\n                data = xmlDeclaration + '\\n' + data;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * The full page editing feature. It preserves the whole HTML page in the editor data.\n */ class FullPage extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'FullPage';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const properties = [\n            '$fullPageDocument',\n            '$fullPageDocType',\n            '$fullPageXmlDeclaration'\n        ];\n        editor.data.processor = new HtmlPageDataProcessor(editor.data.viewDocument);\n        editor.model.schema.extend('$root', {\n            allowAttributes: properties\n        });\n        // Apply custom properties from view document fragment to the model root attributes.\n        editor.data.on('toModel', (evt, [viewElementOrFragment])=>{\n            const root = editor.model.document.getRoot();\n            editor.model.change((writer)=>{\n                for (const name of properties){\n                    const value = viewElementOrFragment.getCustomProperty(name);\n                    if (value) {\n                        writer.setAttribute(name, value, root);\n                    }\n                }\n            });\n        }, {\n            priority: 'low'\n        });\n        // Apply root attributes to the view document fragment.\n        editor.data.on('toView', (evt, [modelElementOrFragment])=>{\n            if (!modelElementOrFragment.is('rootElement')) {\n                return;\n            }\n            const root = modelElementOrFragment;\n            const viewFragment = evt.return;\n            if (!root.hasAttribute('$fullPageDocument')) {\n                return;\n            }\n            const writer = new UpcastWriter(viewFragment.document);\n            for (const name of properties){\n                const value = root.getAttribute(name);\n                if (value) {\n                    writer.setCustomProperty(name, value, viewFragment);\n                }\n            }\n        }, {\n            priority: 'low'\n        });\n        // Clear root attributes related to full page editing on editor content reset.\n        editor.data.on('set', ()=>{\n            const root = editor.model.document.getRoot();\n            editor.model.change((writer)=>{\n                for (const name of properties){\n                    if (root.hasAttribute(name)) {\n                        writer.removeAttribute(name, root);\n                    }\n                }\n            });\n        }, {\n            priority: 'high'\n        });\n        // Make sure that document is returned even if there is no content in the page body.\n        editor.data.on('get', (evt, args)=>{\n            if (!args[0]) {\n                args[0] = {};\n            }\n            args[0].trim = false;\n        }, {\n            priority: 'high'\n        });\n    }\n}\n\nexport { DataFilter, DataSchema, FullPage, GeneralHtmlSupport, HtmlComment, HtmlPageDataProcessor };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Command, Plugin } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { findOptimalInsertionRange, toWidget, Widget } from '@ckeditor/ckeditor5-widget/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\n\n/**\n * The page break command.\n *\n * The command is registered by {@link module:page-break/pagebreakediting~PageBreakEditing} as `'pageBreak'`.\n *\n * To insert a page break at the current selection, execute the command:\n *\n *\t\teditor.execute( 'pageBreak' );\n */ class PageBreakCommand extends Command {\n    /**\n\t * @inheritDoc\n\t */ refresh() {\n        const model = this.editor.model;\n        const schema = model.schema;\n        const selection = model.document.selection;\n        this.isEnabled = isPageBreakAllowedInParent(selection, schema, model);\n    }\n    /**\n\t * Executes the command.\n\t *\n\t * @fires execute\n\t */ execute() {\n        const model = this.editor.model;\n        model.change((writer)=>{\n            const pageBreakElement = writer.createElement('pageBreak');\n            model.insertObject(pageBreakElement, null, null, {\n                setSelection: 'after'\n            });\n        });\n    }\n}\n/**\n * Checks if a page break is allowed by the schema in the optimal insertion parent.\n */ function isPageBreakAllowedInParent(selection, schema, model) {\n    const parent = getInsertPageBreakParent(selection, model);\n    return schema.checkChild(parent, 'pageBreak');\n}\n/**\n * Returns a node that will be used to insert a page break with `model.insertContent` to check if the page break can be placed there.\n */ function getInsertPageBreakParent(selection, model) {\n    const insertionRange = findOptimalInsertionRange(selection, model);\n    const parent = insertionRange.start.parent;\n    if (parent.isEmpty && !parent.is('element', '$root')) {\n        return parent.parent;\n    }\n    return parent;\n}\n\n/**\n * The page break editing feature.\n */ class PageBreakEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PageBreakEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        schema.register('pageBreak', {\n            inheritAllFrom: '$blockObject'\n        });\n        conversion.for('dataDowncast').elementToStructure({\n            model: 'pageBreak',\n            view: (modelElement, { writer })=>{\n                const divElement = writer.createContainerElement('div', {\n                    class: 'page-break',\n                    // If user has no `.ck-content` styles, it should always break a page during print.\n                    style: 'page-break-after: always'\n                }, // For a rationale of using span inside a div see:\n                // https://github.com/ckeditor/ckeditor5-page-break/pull/1#discussion_r328934062.\n                writer.createContainerElement('span', {\n                    style: 'display: none'\n                }));\n                return divElement;\n            }\n        });\n        conversion.for('editingDowncast').elementToStructure({\n            model: 'pageBreak',\n            view: (modelElement, { writer })=>{\n                const label = t('Page break');\n                const viewWrapper = writer.createContainerElement('div');\n                const viewLabelElement = writer.createRawElement('span', {\n                    class: 'page-break__label'\n                }, function(domElement) {\n                    domElement.innerText = t('Page break');\n                });\n                writer.addClass('page-break', viewWrapper);\n                writer.insert(writer.createPositionAt(viewWrapper, 0), viewLabelElement);\n                return toPageBreakWidget(viewWrapper, writer, label);\n            }\n        });\n        conversion.for('upcast').elementToElement({\n            view: (element)=>{\n                // For upcast conversion it's enough if we check for element style and verify if it's empty\n                // or contains only hidden span element.\n                const hasPageBreakBefore = element.getStyle('page-break-before') == 'always';\n                const hasPageBreakAfter = element.getStyle('page-break-after') == 'always';\n                if (!hasPageBreakBefore && !hasPageBreakAfter) {\n                    return null;\n                }\n                // The \"page break\" div accepts only single child or no child at all.\n                if (element.childCount == 1) {\n                    const viewSpan = element.getChild(0);\n                    // The child must be the \"span\" element that is not displayed.\n                    if (!viewSpan.is('element', 'span') || viewSpan.getStyle('display') != 'none') {\n                        return null;\n                    }\n                } else if (element.childCount > 1) {\n                    return null;\n                }\n                return {\n                    name: true\n                };\n            },\n            model: 'pageBreak',\n            // This conversion must be checked before <br> conversion because some editors use\n            // <br style=\"page-break-before:always\"> as a page break marker.\n            converterPriority: 'high'\n        });\n        editor.commands.add('pageBreak', new PageBreakCommand(editor));\n    }\n}\n/**\n * Converts a given {@link module:engine/view/element~Element} to a page break widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to\n *   recognize the page break widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n */ function toPageBreakWidget(viewElement, writer, label) {\n    writer.setCustomProperty('pageBreak', true, viewElement);\n    return toWidget(viewElement, writer, {\n        label\n    });\n}\n\nvar pageBreakIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3.598.687h1.5v5h-1.5zm14.5 0h1.5v5h-1.5z\\\"/><path d=\\\"M19.598 4.187v1.5h-16v-1.5zm-16 14.569h1.5v-5h-1.5zm14.5 0h1.5v-5h-1.5z\\\"/><path d=\\\"M19.598 15.256v-1.5h-16v1.5zM5.081 9h6v2h-6zm8 0h6v2h-6zm-9.483 1L0 12.5v-5z\\\"/></svg>\";\n\n/**\n * The page break UI plugin.\n */ class PageBreakUI extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PageBreakUI';\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        const editor = this.editor;\n        // Add pageBreak button to feature components.\n        editor.ui.componentFactory.add('pageBreak', ()=>{\n            const view = this._createButton(ButtonView);\n            view.set({\n                tooltip: true\n            });\n            return view;\n        });\n        editor.ui.componentFactory.add('menuBar:pageBreak', ()=>this._createButton(MenuBarMenuListItemButtonView));\n    }\n    /**\n\t * Creates a button for page break command to use either in toolbar or in menu bar.\n\t */ _createButton(ButtonClass) {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const command = editor.commands.get('pageBreak');\n        const view = new ButtonClass(editor.locale);\n        const t = locale.t;\n        view.set({\n            label: t('Page break'),\n            icon: pageBreakIcon\n        });\n        view.bind('isEnabled').to(command, 'isEnabled');\n        // Execute the command.\n        this.listenTo(view, 'execute', ()=>{\n            editor.execute('pageBreak');\n            editor.editing.view.focus();\n        });\n        return view;\n    }\n}\n\n/**\n * The page break feature.\n *\n * It provides the possibility to insert a page break into the rich-text editor.\n *\n * For a detailed overview, check the {@glink features/page-break Page break feature} documentation.\n */ class PageBreak extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PageBreakEditing,\n            PageBreakUI,\n            Widget\n        ];\n    }\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'PageBreak';\n    }\n}\n\nexport { PageBreak, PageBreakEditing, PageBreakUI };\n//# sourceMappingURL=index.js.map\n","/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { Plugin, PendingActions } from '@ckeditor/ckeditor5-core/dist/index.js';\nimport { ButtonView, MenuBarMenuListItemButtonView } from '@ckeditor/ckeditor5-ui/dist/index.js';\nimport { ElementReplacer, CKEditorError, createElement } from '@ckeditor/ckeditor5-utils/dist/index.js';\n\n/**\n * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */ /**\n * @module source-editing/utils/formathtml\n */ /**\n * A simple (and naive) HTML code formatter that returns a formatted HTML markup that can be easily\n * parsed by human eyes. It beautifies the HTML code by adding new lines between elements that behave like block elements\n * (https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\n * and a few more like `tr`, `td`, and similar ones) and inserting indents for nested content.\n *\n * WARNING: This function works only on a text that does not contain any indentations or new lines.\n * Calling this function on the already formatted text will damage the formatting.\n *\n * @param input An HTML string to format.\n */ function formatHtml(input) {\n    // A list of block-like elements around which the new lines should be inserted, and within which\n    // the indentation of their children should be increased.\n    // The list is partially based on https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements that contains\n    // a full list of HTML block-level elements.\n    // A void element is an element that cannot have any child - https://html.spec.whatwg.org/multipage/syntax.html#void-elements.\n    // Note that <pre> element is not listed on this list to avoid breaking whitespace formatting.\n    // Note that <br> element is not listed and handled separately so no additional white spaces are injected.\n    const elementsToFormat = [\n        {\n            name: 'address',\n            isVoid: false\n        },\n        {\n            name: 'article',\n            isVoid: false\n        },\n        {\n            name: 'aside',\n            isVoid: false\n        },\n        {\n            name: 'blockquote',\n            isVoid: false\n        },\n        {\n            name: 'details',\n            isVoid: false\n        },\n        {\n            name: 'dialog',\n            isVoid: false\n        },\n        {\n            name: 'dd',\n            isVoid: false\n        },\n        {\n            name: 'div',\n            isVoid: false\n        },\n        {\n            name: 'dl',\n            isVoid: false\n        },\n        {\n            name: 'dt',\n            isVoid: false\n        },\n        {\n            name: 'fieldset',\n            isVoid: false\n        },\n        {\n            name: 'figcaption',\n            isVoid: false\n        },\n        {\n            name: 'figure',\n            isVoid: false\n        },\n        {\n            name: 'footer',\n            isVoid: false\n        },\n        {\n            name: 'form',\n            isVoid: false\n        },\n        {\n            name: 'h1',\n            isVoid: false\n        },\n        {\n            name: 'h2',\n            isVoid: false\n        },\n        {\n            name: 'h3',\n            isVoid: false\n        },\n        {\n            name: 'h4',\n            isVoid: false\n        },\n        {\n            name: 'h5',\n            isVoid: false\n        },\n        {\n            name: 'h6',\n            isVoid: false\n        },\n        {\n            name: 'header',\n            isVoid: false\n        },\n        {\n            name: 'hgroup',\n            isVoid: false\n        },\n        {\n            name: 'hr',\n            isVoid: true\n        },\n        {\n            name: 'li',\n            isVoid: false\n        },\n        {\n            name: 'main',\n            isVoid: false\n        },\n        {\n            name: 'nav',\n            isVoid: false\n        },\n        {\n            name: 'ol',\n            isVoid: false\n        },\n        {\n            name: 'p',\n            isVoid: false\n        },\n        {\n            name: 'section',\n            isVoid: false\n        },\n        {\n            name: 'table',\n            isVoid: false\n        },\n        {\n            name: 'tbody',\n            isVoid: false\n        },\n        {\n            name: 'td',\n            isVoid: false\n        },\n        {\n            name: 'th',\n            isVoid: false\n        },\n        {\n            name: 'thead',\n            isVoid: false\n        },\n        {\n            name: 'tr',\n            isVoid: false\n        },\n        {\n            name: 'ul',\n            isVoid: false\n        }\n    ];\n    const elementNamesToFormat = elementsToFormat.map((element)=>element.name).join('|');\n    // It is not the fastest way to format the HTML markup but the performance should be good enough.\n    const lines = input// Add new line before and after `<tag>` and `</tag>`.\n    // It may separate individual elements with two new lines, but this will be fixed below.\n    .replace(new RegExp(`</?(${elementNamesToFormat})( .*?)?>`, 'g'), '\\n$&\\n')// Keep `<br>`s at the end of line to avoid adding additional whitespaces before `<br>`.\n    .replace(/<br[^>]*>/g, '$&\\n')// Divide input string into lines, which start with either an opening tag, a closing tag, or just a text.\n    .split('\\n');\n    let indentCount = 0;\n    let isPreformattedLine = false;\n    return lines.filter((line)=>line.length).map((line)=>{\n        isPreformattedLine = isPreformattedBlockLine(line, isPreformattedLine);\n        if (isNonVoidOpeningTag(line, elementsToFormat)) {\n            return indentLine(line, indentCount++);\n        }\n        if (isClosingTag(line, elementsToFormat)) {\n            return indentLine(line, --indentCount);\n        }\n        if (isPreformattedLine === 'middle' || isPreformattedLine === 'last') {\n            return line;\n        }\n        return indentLine(line, indentCount);\n    }).join('\\n');\n}\n/**\n * Checks, if an argument is an opening tag of a non-void element to be formatted.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */ function isNonVoidOpeningTag(line, elementsToFormat) {\n    return elementsToFormat.some((element)=>{\n        if (element.isVoid) {\n            return false;\n        }\n        if (!new RegExp(`<${element.name}( .*?)?>`).test(line)) {\n            return false;\n        }\n        return true;\n    });\n}\n/**\n * Checks, if an argument is a closing tag.\n *\n * @param line String to check.\n * @param elementsToFormat Elements to be formatted.\n */ function isClosingTag(line, elementsToFormat) {\n    return elementsToFormat.some((element)=>{\n        return new RegExp(`</${element.name}>`).test(line);\n    });\n}\n/**\n * Indents a line by a specified number of characters.\n *\n * @param line Line to indent.\n * @param indentCount Number of characters to use for indentation.\n * @param indentChar Indentation character(s). 4 spaces by default.\n */ function indentLine(line, indentCount, indentChar = '    ') {\n    // More about Math.max() here in https://github.com/ckeditor/ckeditor5/issues/10698.\n    return `${indentChar.repeat(Math.max(0, indentCount))}${line}`;\n}\n/**\n * Checks whether a line belongs to a preformatted (`<pre>`) block.\n *\n * @param line Line to check.\n * @param isPreviousLinePreFormatted Information on whether the previous line was preformatted (and how).\n */ function isPreformattedBlockLine(line, isPreviousLinePreFormatted) {\n    if (new RegExp('<pre( .*?)?>').test(line)) {\n        return 'first';\n    } else if (new RegExp('</pre>').test(line)) {\n        return 'last';\n    } else if (isPreviousLinePreFormatted === 'first' || isPreviousLinePreFormatted === 'middle') {\n        return 'middle';\n    } else {\n        return false;\n    }\n}\n\nvar sourceEditingIcon = \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"m12.5 0 5 4.5v15.003h-16V0h11zM3 1.5v3.25l-1.497 1-.003 8 1.5 1v3.254L7.685 18l-.001 1.504H17.5V8.002L16 9.428l-.004-4.22-4.222-3.692L3 1.5z\\\"/><path d=\\\"M4.06 6.64a.75.75 0 0 1 .958 1.15l-.085.07L2.29 9.75l2.646 1.89c.302.216.4.62.232.951l-.058.095a.75.75 0 0 1-.951.232l-.095-.058-3.5-2.5V9.14l3.496-2.5zm4.194 6.22a.75.75 0 0 1-.958-1.149l.085-.07 2.643-1.89-2.646-1.89a.75.75 0 0 1-.232-.952l.058-.095a.75.75 0 0 1 .95-.232l.096.058 3.5 2.5v1.22l-3.496 2.5zm7.644-.836 2.122 2.122-5.825 5.809-2.125-.005.003-2.116zm2.539-1.847 1.414 1.414a.5.5 0 0 1 0 .707l-1.06 1.06-2.122-2.12 1.061-1.061a.5.5 0 0 1 .707 0z\\\"/></svg>\";\n\nconst COMMAND_FORCE_DISABLE_ID = 'SourceEditingMode';\n/**\n * The source editing feature.\n *\n * It provides the possibility to view and edit the source of the document.\n *\n * For a detailed overview, check the {@glink features/source-editing source editing feature documentation} and the\n * {@glink api/source-editing package page}.\n */ class SourceEditing extends Plugin {\n    /**\n\t * @inheritDoc\n\t */ static get pluginName() {\n        return 'SourceEditing';\n    }\n    /**\n\t * @inheritDoc\n\t */ static get requires() {\n        return [\n            PendingActions\n        ];\n    }\n    /**\n\t * The element replacer instance used to replace the editing roots with the wrapper elements containing the document source.\n\t */ _elementReplacer;\n    /**\n\t * Maps all root names to wrapper elements containing the document source.\n\t */ _replacedRoots;\n    /**\n\t * Maps all root names to their document data.\n\t */ _dataFromRoots;\n    /**\n\t * @inheritDoc\n\t */ constructor(editor){\n        super(editor);\n        this.set('isSourceEditingMode', false);\n        this._elementReplacer = new ElementReplacer();\n        this._replacedRoots = new Map();\n        this._dataFromRoots = new Map();\n        editor.config.define('sourceEditing.allowCollaborationFeatures', false);\n    }\n    /**\n\t * @inheritDoc\n\t */ init() {\n        this._checkCompatibility();\n        const editor = this.editor;\n        const t = editor.locale.t;\n        editor.ui.componentFactory.add('sourceEditing', ()=>{\n            const buttonView = this._createButton(ButtonView);\n            buttonView.set({\n                label: t('Source'),\n                icon: sourceEditingIcon,\n                tooltip: true,\n                class: 'ck-source-editing-button'\n            });\n            return buttonView;\n        });\n        editor.ui.componentFactory.add('menuBar:sourceEditing', ()=>{\n            const buttonView = this._createButton(MenuBarMenuListItemButtonView);\n            buttonView.set({\n                label: t('Show source'),\n                role: 'menuitemcheckbox'\n            });\n            return buttonView;\n        });\n        // Currently, the plugin handles the source editing mode by itself only for the classic editor. To use this plugin with other\n        // integrations, listen to the `change:isSourceEditingMode` event and act accordingly.\n        if (this._isAllowedToHandleSourceEditingMode()) {\n            this.on('change:isSourceEditingMode', (evt, name, isSourceEditingMode)=>{\n                if (isSourceEditingMode) {\n                    this._hideVisibleDialog();\n                    this._showSourceEditing();\n                    this._disableCommands();\n                } else {\n                    this._hideSourceEditing();\n                    this._enableCommands();\n                }\n            });\n            this.on('change:isEnabled', (evt, name, isEnabled)=>this._handleReadOnlyMode(!isEnabled));\n            this.listenTo(editor, 'change:isReadOnly', (evt, name, isReadOnly)=>this._handleReadOnlyMode(isReadOnly));\n        }\n        // Update the editor data while calling editor.getData() in the source editing mode.\n        editor.data.on('get', ()=>{\n            if (this.isSourceEditingMode) {\n                this.updateEditorData();\n            }\n        }, {\n            priority: 'high'\n        });\n    }\n    /**\n\t * Updates the source data in all hidden editing roots.\n\t */ updateEditorData() {\n        const editor = this.editor;\n        const data = {};\n        for (const [rootName, domSourceEditingElementWrapper] of this._replacedRoots){\n            const oldData = this._dataFromRoots.get(rootName);\n            const newData = domSourceEditingElementWrapper.dataset.value;\n            // Do not set the data unless some changes have been made in the meantime.\n            // This prevents empty undo steps after switching to the normal editor.\n            if (oldData !== newData) {\n                data[rootName] = newData;\n                this._dataFromRoots.set(rootName, newData);\n            }\n        }\n        if (Object.keys(data).length) {\n            editor.data.set(data, {\n                batchType: {\n                    isUndoable: true\n                },\n                suppressErrorInCollaboration: true\n            });\n        }\n    }\n    _checkCompatibility() {\n        const editor = this.editor;\n        const allowCollaboration = editor.config.get('sourceEditing.allowCollaborationFeatures');\n        if (!allowCollaboration && editor.plugins.has('RealTimeCollaborativeEditing')) {\n            /**\n\t\t\t * Source editing feature is not fully compatible with real-time collaboration,\n\t\t\t * and using it may lead to data loss. Please read\n\t\t\t * {@glink features/source-editing#limitations-and-incompatibilities source editing feature guide} to learn more.\n\t\t\t *\n\t\t\t * If you understand the possible risk of data loss, you can enable the source editing\n\t\t\t * by setting the\n\t\t\t * {@link module:source-editing/sourceeditingconfig~SourceEditingConfig#allowCollaborationFeatures}\n\t\t\t * configuration flag to `true`.\n\t\t\t *\n\t\t\t * @error source-editing-incompatible-with-real-time-collaboration\n\t\t\t */ throw new CKEditorError('source-editing-incompatible-with-real-time-collaboration', null);\n        }\n        const collaborationPluginNamesToWarn = [\n            'CommentsEditing',\n            'TrackChangesEditing',\n            'RevisionHistory'\n        ];\n        // Currently, the basic integration with Collaboration Features is to display a warning in the console.\n        //\n        // If `allowCollaboration` flag is set, do not show these warnings. If the flag is set, we assume that the integrator read\n        // appropriate section of the guide so there's no use to spam the console with warnings.\n        //\n        if (!allowCollaboration && collaborationPluginNamesToWarn.some((pluginName)=>editor.plugins.has(pluginName))) {\n            console.warn('You initialized the editor with the source editing feature and at least one of the collaboration features. ' + 'Please be advised that the source editing feature may not work, and be careful when editing document source ' + 'that contains markers created by the collaboration features.');\n        }\n        // Restricted Editing integration can also lead to problems. Warn the user accordingly.\n        if (editor.plugins.has('RestrictedEditingModeEditing')) {\n            console.warn('You initialized the editor with the source editing feature and restricted editing feature. ' + 'Please be advised that the source editing feature may not work, and be careful when editing document source ' + 'that contains markers created by the restricted editing feature.');\n        }\n    }\n    /**\n\t * Creates source editing wrappers that replace each editing root. Each wrapper contains the document source from the corresponding\n\t * root.\n\t *\n\t * The wrapper element contains a textarea and it solves the problem, that the textarea element cannot auto expand its height based on\n\t * the content it contains. The solution is to make the textarea more like a plain div element, which expands in height as much as it\n\t * needs to, in order to display the whole document source without scrolling. The wrapper element is a parent for the textarea and for\n\t * the pseudo-element `::after`, that replicates the look, content, and position of the textarea. The pseudo-element replica is hidden,\n\t * but it is styled to be an identical visual copy of the textarea with the same content. Then, the wrapper is a grid container and both\n\t * of its children (the textarea and the `::after` pseudo-element) are positioned within a CSS grid to occupy the same grid cell. The\n\t * content in the pseudo-element `::after` is set in CSS and it stretches the grid to the appropriate size based on the textarea value.\n\t * Since both children occupy the same grid cell, both have always the same height.\n\t */ _showSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        const model = editor.model;\n        model.change((writer)=>{\n            writer.setSelection(null);\n            writer.removeSelectionAttribute(model.document.selection.getAttributeKeys());\n        });\n        // It is not needed to iterate through all editing roots, as currently the plugin supports only the Classic Editor with a single\n        // main root, but this code may help understand and use this feature in external integrations.\n        for (const [rootName, domRootElement] of editingView.domRoots){\n            const data = formatSource(editor.data.get({\n                rootName\n            }));\n            const domSourceEditingElementTextarea = createElement(domRootElement.ownerDocument, 'textarea', {\n                rows: '1',\n                'aria-label': 'Source code editing area'\n            });\n            const domSourceEditingElementWrapper = createElement(domRootElement.ownerDocument, 'div', {\n                class: 'ck-source-editing-area',\n                'data-value': data\n            }, [\n                domSourceEditingElementTextarea\n            ]);\n            domSourceEditingElementTextarea.value = data;\n            // Setting a value to textarea moves the input cursor to the end. We want the selection at the beginning.\n            domSourceEditingElementTextarea.setSelectionRange(0, 0);\n            // Bind the textarea's value to the wrapper's `data-value` property. Each change of the textarea's value updates the\n            // wrapper's `data-value` property.\n            domSourceEditingElementTextarea.addEventListener('input', ()=>{\n                domSourceEditingElementWrapper.dataset.value = domSourceEditingElementTextarea.value;\n                editor.ui.update();\n            });\n            editingView.change((writer)=>{\n                const viewRoot = editingView.document.getRoot(rootName);\n                writer.addClass('ck-hidden', viewRoot);\n            });\n            // Register the element so it becomes available for Alt+F10 and Esc navigation.\n            editor.ui.setEditableElement('sourceEditing:' + rootName, domSourceEditingElementTextarea);\n            this._replacedRoots.set(rootName, domSourceEditingElementWrapper);\n            this._elementReplacer.replace(domRootElement, domSourceEditingElementWrapper);\n            this._dataFromRoots.set(rootName, data);\n        }\n        this._focusSourceEditing();\n    }\n    /**\n\t * Restores all hidden editing roots and sets the source data in them.\n\t */ _hideSourceEditing() {\n        const editor = this.editor;\n        const editingView = editor.editing.view;\n        this.updateEditorData();\n        editingView.change((writer)=>{\n            for (const [rootName] of this._replacedRoots){\n                writer.removeClass('ck-hidden', editingView.document.getRoot(rootName));\n            }\n        });\n        this._elementReplacer.restore();\n        this._replacedRoots.clear();\n        this._dataFromRoots.clear();\n        editingView.focus();\n    }\n    /**\n\t * Focuses the textarea containing document source from the first editing root.\n\t */ _focusSourceEditing() {\n        const editor = this.editor;\n        const [domSourceEditingElementWrapper] = this._replacedRoots.values();\n        const textarea = domSourceEditingElementWrapper.querySelector('textarea');\n        // The FocusObserver was disabled by View.render() while the DOM root was getting hidden and the replacer\n        // revealed the textarea. So it couldn't notice that the DOM root got blurred in the process.\n        // Let's sync this state manually here because otherwise Renderer will attempt to render selection\n        // in an invisible DOM root.\n        editor.editing.view.document.isFocused = false;\n        textarea.focus();\n    }\n    /**\n\t * Disables all commands.\n\t */ _disableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()){\n            command.forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n        // Comments archive UI plugin will be disabled manually too.\n        if (editor.plugins.has('CommentsArchiveUI')) {\n            editor.plugins.get('CommentsArchiveUI').forceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n\t * Clears forced disable for all commands, that was previously set through {@link #_disableCommands}.\n\t */ _enableCommands() {\n        const editor = this.editor;\n        for (const command of editor.commands.commands()){\n            command.clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n        // Comments archive UI plugin will be enabled manually too.\n        if (editor.plugins.has('CommentsArchiveUI')) {\n            editor.plugins.get('CommentsArchiveUI').clearForceDisabled(COMMAND_FORCE_DISABLE_ID);\n        }\n    }\n    /**\n\t * Adds or removes the `readonly` attribute from the textarea from all roots, if document source mode is active.\n\t *\n\t * @param isReadOnly Indicates whether all textarea elements should be read-only.\n\t */ _handleReadOnlyMode(isReadOnly) {\n        if (!this.isSourceEditingMode) {\n            return;\n        }\n        for (const [, domSourceEditingElementWrapper] of this._replacedRoots){\n            domSourceEditingElementWrapper.querySelector('textarea').readOnly = isReadOnly;\n        }\n    }\n    /**\n\t * Checks, if the plugin is allowed to handle the source editing mode by itself. Currently, the source editing mode is supported only\n\t * for the {@link module:editor-classic/classiceditor~ClassicEditor classic editor}.\n\t */ _isAllowedToHandleSourceEditingMode() {\n        const editor = this.editor;\n        const editable = editor.ui.view.editable;\n        // Checks, if the editor's editable belongs to the editor's DOM tree.\n        return editable && !editable.hasExternalElement;\n    }\n    /**\n\t * If any {@link module:ui/dialog/dialogview~DialogView editor dialog} is currently visible, hide it.\n\t */ _hideVisibleDialog() {\n        if (this.editor.plugins.has('Dialog')) {\n            const dialogPlugin = this.editor.plugins.get('Dialog');\n            if (dialogPlugin.isOpen) {\n                dialogPlugin.hide();\n            }\n        }\n    }\n    _createButton(ButtonClass) {\n        const editor = this.editor;\n        const buttonView = new ButtonClass(editor.locale);\n        buttonView.set({\n            withText: true,\n            isToggleable: true\n        });\n        buttonView.bind('isOn').to(this, 'isSourceEditingMode');\n        // The button should be disabled if one of the following conditions is met:\n        buttonView.bind('isEnabled').to(this, 'isEnabled', editor, 'isReadOnly', editor.plugins.get(PendingActions), 'hasAny', (isEnabled, isEditorReadOnly, hasAnyPendingActions)=>{\n            // (1) The plugin itself is disabled.\n            if (!isEnabled) {\n                return false;\n            }\n            // (2) The editor is in read-only mode.\n            if (isEditorReadOnly) {\n                return false;\n            }\n            // (3) Any pending action is scheduled. It may change the model, so modifying the document source should be prevented\n            // until the model is finally set.\n            if (hasAnyPendingActions) {\n                return false;\n            }\n            return true;\n        });\n        this.listenTo(buttonView, 'execute', ()=>{\n            this.isSourceEditingMode = !this.isSourceEditingMode;\n        });\n        return buttonView;\n    }\n}\n/**\n * Formats the content for a better readability.\n *\n * For a non-HTML source the unchanged input string is returned.\n *\n * @param input Input string to check.\n */ function formatSource(input) {\n    if (!isHtml(input)) {\n        return input;\n    }\n    return formatHtml(input);\n}\n/**\n * Checks, if the document source is HTML. It is sufficient to just check the first character from the document data.\n *\n * @param input Input string to check.\n */ function isHtml(input) {\n    return input.startsWith('<');\n}\n\nexport { SourceEditing };\n//# sourceMappingURL=index.js.map\n","@import url('../../../assets/ckeditor5.css');\r\n:host {\r\n  display: block;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n@media print {\r\n  body {\r\n    margin: 0 !important;\r\n  }\r\n}\r\n.ck-content {\r\n  height: var(--ir-editor-height, 100%);\r\n}\r\n.ck-content p {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.error {\r\n  border-color: red !important;\r\n}\r\n","import { Component, h, Element, Event, EventEmitter, Host, Prop, Watch } from '@stencil/core';\r\nimport {\r\n  ClassicEditor,\r\n  AccessibilityHelp,\r\n  Autoformat,\r\n  AutoLink,\r\n  Autosave,\r\n  Bold,\r\n  Essentials,\r\n  Italic,\r\n  Paragraph,\r\n  SelectAll,\r\n  TextTransformation,\r\n  Undo,\r\n  Underline,\r\n  PageBreak,\r\n  Enter,\r\n  EditorConfig,\r\n  GeneralHtmlSupport,\r\n  ShiftEnter,\r\n  SourceEditing,\r\n  FullPage,\r\n  PluginConstructor,\r\n  ToolbarConfigItem,\r\n} from 'ckeditor5';\r\n@Component({\r\n  tag: 'ir-text-editor',\r\n  styleUrl: 'ir-text-editor.css',\r\n  shadow: false,\r\n})\r\nexport class IrTextEditor {\r\n  @Element() el: HTMLElement;\r\n  @Prop() value: string;\r\n  @Prop() error: boolean;\r\n  @Prop() placeholder: string;\r\n\r\n  @Prop() plugins: (string | PluginConstructor)[] = [];\r\n  @Prop() pluginsMode: 'replace' | 'add' = 'add';\r\n  @Prop() toolbarItems: ToolbarConfigItem[] = [];\r\n  @Prop() toolbarItemsMode: 'replace' | 'add' = 'add';\r\n\r\n  @Event() textChange: EventEmitter<string>;\r\n\r\n  private editorInstance: ClassicEditor;\r\n  private baseToolbarItems: ToolbarConfigItem[] = ['undo', 'redo', '|', 'sourceEditing', '|', 'bold', 'italic', 'underline'];\r\n  private basePlugins: (string | PluginConstructor)[] = [\r\n    SourceEditing,\r\n    GeneralHtmlSupport,\r\n    AccessibilityHelp,\r\n    Autoformat,\r\n    AutoLink,\r\n    Autosave,\r\n    Bold,\r\n    Underline,\r\n    PageBreak,\r\n    Essentials,\r\n    Enter,\r\n    Italic,\r\n    Paragraph,\r\n    SelectAll,\r\n    TextTransformation,\r\n    Undo,\r\n    ShiftEnter,\r\n    FullPage,\r\n  ];\r\n  componentDidLoad() {\r\n    this.initEditor();\r\n  }\r\n\r\n  @Watch('value')\r\n  onValueChanged(newValue: string) {\r\n    if (this.editorInstance) {\r\n      const currentEditorValue = this.editorInstance.getData();\r\n      if (newValue !== currentEditorValue) {\r\n        this.editorInstance.setData(newValue);\r\n      }\r\n    }\r\n  }\r\n  @Watch('error')\r\n  onErrorChanged(newValue: boolean, oldValue: boolean) {\r\n    if (newValue !== oldValue) {\r\n      const editorElement = this.el.querySelector('.ck-content') as HTMLDivElement;\r\n      if (editorElement) {\r\n        console.log('first');\r\n        editorElement.classList.toggle('error', newValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  async initEditor() {\r\n    const plugins = this.pluginsMode === 'replace' ? this.plugins : this.basePlugins.concat(this.plugins);\r\n    const items = this.toolbarItemsMode === 'replace' ? this.toolbarItems : this.baseToolbarItems.concat(this.toolbarItems);\r\n    const editorConfig: EditorConfig = {\r\n      toolbar: {\r\n        items,\r\n        shouldNotGroupWhenFull: false,\r\n      },\r\n      plugins,\r\n      initialData: this.value,\r\n      htmlSupport: {\r\n        allow: [\r\n          {\r\n            name: /^(b|strong|br|p)$/,\r\n            attributes: true,\r\n            classes: true,\r\n            styles: true,\r\n          },\r\n        ],\r\n      },\r\n      // licenseKey: '',\r\n      placeholder: this.placeholder,\r\n    };\r\n\r\n    if (this.editorInstance) {\r\n      return;\r\n    }\r\n\r\n    const editorElement = this.el.querySelector('#editor') as HTMLDivElement;\r\n\r\n    try {\r\n      this.editorInstance = await ClassicEditor.create(editorElement, editorConfig);\r\n      this.editorInstance.editing.view.document.on('clipboardInput', (evt, data) => {\r\n        const textData = data.dataTransfer.getData('text/plain');\r\n        const htmlRegex = /<\\/?[a-z][\\s\\S]*>/i;\r\n\r\n        if (htmlRegex.test(textData)) {\r\n          // Process the text containing HTML tags\r\n          const fragment = this.editorInstance.data.htmlProcessor.toView(textData);\r\n          data.content = fragment;\r\n\r\n          // Prevent the default handling\r\n          evt.stop();\r\n\r\n          // Fire the 'inputTransformation' event manually\r\n          this.editorInstance.plugins.get('ClipboardPipeline').fire('inputTransformation', { content: fragment });\r\n        }\r\n      });\r\n      this.editorInstance.model.document.on('change:data', () => {\r\n        const editorData = this.editorInstance.getData();\r\n        this.handletextChange(editorData);\r\n      });\r\n      this.editorInstance.plugins.get('Enter').fire('');\r\n    } catch (error) {\r\n      console.error('There was a problem initializing the editor:', error);\r\n    }\r\n  }\r\n  handletextChange(data: string) {\r\n    this.textChange.emit(data);\r\n  }\r\n\r\n  disconnectedCallback() {\r\n    if (this.editorInstance) {\r\n      this.editorInstance.destroy().catch((error: any) => {\r\n        console.error('Error destroying editor:', error);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <div id=\"editor\"></div>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}