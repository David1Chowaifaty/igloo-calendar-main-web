{"version":3,"names":["initialState","unassigned_dates","state","onChange","handleUnAssignedDatesChange","createStore","addUnassignedDates","data","Object","assign","getUnassignedDates","removeUnassignedDates","from_date","to_date","fromTimestamp","convertToDateTimestamp","toTimestamp","keys","forEach","key","keyTimestamp","parseInt","dateStr","date","Date","setHours","getTime"],"sources":["src/stores/unassigned_dates.store.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\n\ntype EventCategories = {};\n\ntype EventInfo = {\n  categories: EventCategories;\n  dateStr: string;\n};\n\ntype UnassignedDates = {\n  [timestamp: string]: EventInfo;\n};\ninterface IUnassignedDatesStore {\n  unassigned_dates: UnassignedDates;\n}\n\nconst initialState: IUnassignedDatesStore = {\n  unassigned_dates: {},\n};\nexport let { state: unassigned_dates, onChange: handleUnAssignedDatesChange } = createStore<IUnassignedDatesStore>(initialState);\n\nexport function addUnassignedDates(data: UnassignedDates) {\n  unassigned_dates.unassigned_dates = { ...unassigned_dates.unassigned_dates, ...data };\n  /*\n   try {\n      //console.log(\"called\")\n      let categorisedRooms = {};\n      const result = await this.toBeAssignedService.getUnassignedRooms(\n        this.propertyid,\n        dateToFormattedString(new Date(+key)),\n        calendarData.roomsInfo,\n        calendarData.formattedLegendData,\n      );\n      result.forEach(room => {\n        if (!categorisedRooms.hasOwnProperty(room.RT_ID)) {\n          categorisedRooms[room.RT_ID] = [room];\n        } else {\n          categorisedRooms[room.RT_ID].push(room);\n        }\n      });\n      this.unassignedDates[key].categories = categorisedRooms;\n    } catch (error) {\n      //  toastr.error(error);\n    }\n  */\n  // console.log(unassigned_dates.unassigned_dates);\n}\nexport function getUnassignedDates() {\n  return unassigned_dates.unassigned_dates;\n}\nexport function removeUnassignedDates(from_date: string, to_date: string) {\n  const fromTimestamp = convertToDateTimestamp(from_date);\n  const toTimestamp = convertToDateTimestamp(to_date);\n  Object.keys(unassigned_dates.unassigned_dates).forEach(key => {\n    const keyTimestamp = parseInt(key);\n    if (fromTimestamp <= keyTimestamp && keyTimestamp <= toTimestamp) {\n      delete unassigned_dates.unassigned_dates[key];\n    }\n  });\n}\nfunction convertToDateTimestamp(dateStr: string) {\n  const date = new Date(dateStr);\n  date.setHours(0, 0, 0, 0);\n  return date.getTime();\n}\n\nexport default unassigned_dates;\n"],"mappings":"oCAgBA,MAAMA,EAAsC,CAC1CC,iBAAkB,I,IAEPC,MAAOD,EAAkBE,SAAUC,GAAgCC,EAAmCL,G,SAEnGM,EAAmBC,GACjCN,EAAiBA,iBAAgBO,OAAAC,OAAAD,OAAAC,OAAA,GAAQR,EAAiBA,kBAAqBM,EAwBjF,C,SACgBG,IACd,OAAOT,EAAiBA,gBAC1B,C,SACgBU,EAAsBC,EAAmBC,GACvD,MAAMC,EAAgBC,EAAuBH,GAC7C,MAAMI,EAAcD,EAAuBF,GAC3CL,OAAOS,KAAKhB,EAAiBA,kBAAkBiB,SAAQC,IACrD,MAAMC,EAAeC,SAASF,GAC9B,GAAIL,GAAiBM,GAAgBA,GAAgBJ,EAAa,QACzDf,EAAiBA,iBAAiBkB,E,IAG/C,CACA,SAASJ,EAAuBO,GAC9B,MAAMC,EAAO,IAAIC,KAAKF,GACtBC,EAAKE,SAAS,EAAG,EAAG,EAAG,GACvB,OAAOF,EAAKG,SACd,Q","ignoreList":[]}