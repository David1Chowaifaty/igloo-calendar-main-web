{"version":3,"names":["irLabelCss","IrLabelStyle0","IrLabel","constructor","hostRef","this","display","renderContentAsHtml","image","isCountryImage","imageStyle","ignoreEmptyContent","render","placeholder","content","h","Host","class","style","containerStyle","labelText","name","src","alt","_a","_b","_c","innerHTML"],"sources":["src/components/ui/ir-label/ir-label.css?tag=ir-label&encapsulation=scoped","src/components/ui/ir-label/ir-label.tsx"],"sourcesContent":[".logo {\n  height: 1.5rem;\n  width: 1.5rem;\n}\n:host {\n  display: flex;\n  gap: 5px;\n  align-items: center;\n}\n.icon {\n  margin-left: 3px;\n  padding: 0;\n  margin-top: 0;\n  display: flex;\n  align-items: center;\n}\n.label_message {\n  margin: 0 3px;\n  padding: 0;\n}\n.label_title {\n  min-width: max-content;\n  padding: 0;\n  margin: 0;\n  font-weight: 600;\n}\n.label_placeholder {\n  color: #cacfe7;\n  padding: 0 !important;\n  margin: 0 !important;\n}\n.icon-container {\n  margin: 0;\n  padding: 0;\n}\n.country {\n  height: 16px;\n  width: 23px;\n  border-radius: 3px;\n}\nsvg {\n  margin: 0;\n  padding: 0;\n}\n.label_wrapper_inline {\n  display: inline;\n  max-width: 100%;\n  gap: 5px;\n  margin-bottom: 5px;\n}\n.label_wrapper_flex {\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  max-width: 100%;\n  margin-bottom: 5px;\n}\n\n.label_title {\n  font-weight: 600;\n  white-space: nowrap;\n  display: inline;\n}\n\n.label_message {\n  display: inline; /* Keeps the message inline */\n  white-space: normal; /* Allows wrapping of the message text */\n  word-break: break-word; /* Breaks long words/URLs to prevent overflow */\n}\n","import { Component, Prop, h, Host } from '@stencil/core';\n\n@Component({\n  tag: 'ir-label',\n  styleUrl: 'ir-label.css',\n  scoped: true,\n})\nexport class IrLabel {\n  // -- Props --\n  /** The text to display as the label's title */\n  @Prop() labelText: string;\n\n  /** The main text or HTML content to display */\n  @Prop() content: string;\n\n  @Prop() display: 'inline' | 'flex' = 'flex';\n\n  /** If true, will render `content` as HTML */\n  @Prop() renderContentAsHtml: boolean = false;\n\n  /** Object representing the image used within the label */\n  @Prop() image?: { src: string; alt: string; style?: string } | null = null;\n\n  /** Renders a country-type image style (vs. a 'logo') */\n  @Prop() isCountryImage: boolean = false;\n\n  /** Additional CSS classes or style for the image */\n  @Prop() imageStyle: string = '';\n\n  /** If true, label will ignore checking for an empty content */\n  @Prop() ignoreEmptyContent: boolean = false;\n\n  /** Placeholder text to display if content is empty */\n  @Prop() placeholder: string;\n\n  /** inline styles for the component container */\n  @Prop() containerStyle: {\n    [key: string]: string;\n  };\n\n  render() {\n    // If we have no content and no placeholder, and we are NOT ignoring the empty content, return null.\n    if (!this.placeholder && !this.content && !this.ignoreEmptyContent) {\n      return null;\n    }\n\n    return (\n      <Host class={this.image ? 'align-items-center' : ''}>\n        {/* Label title */}\n        <div class={`${this.display === 'inline' ? 'label_wrapper_inline' : 'label_wrapper_flex'} `} style={this.containerStyle}>\n          {this.labelText && <p class=\"label_title\">{this.labelText}</p>}\n\n          {/* Slot BEFORE content (prefix slot) */}\n          <slot name=\"prefix\" />\n\n          {/* Optional image */}\n          {this.image && (\n            <img\n              src={this.image.src}\n              alt={this.image.alt ?? this.image.src}\n              class={`p-0 m-0 ${this.isCountryImage ? 'country' : 'logo'} ${this.image.style ?? ''} ${this.imageStyle ?? ''}`}\n            />\n          )}\n\n          {/* Main content or placeholder */}\n          {this.content ? (\n            this.renderContentAsHtml ? (\n              <p class=\"label_message\" innerHTML={this.content}></p>\n            ) : (\n              <p class=\"label_message\">{this.content}</p>\n            )\n          ) : (\n            <p class=\"label_placeholder\">{this.placeholder}</p>\n          )}\n\n          {/* Default slot goes after the main content, but before suffix */}\n          <slot />\n\n          {/* Slot AFTER content (suffix slot) */}\n          <slot name=\"suffix\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAa,24BACnB,MAAAC,EAAeD,E,MCMFE,EAAO,MALpB,WAAAC,CAAAC,G,UAaUC,KAAAC,QAA6B,OAG7BD,KAAAE,oBAA+B,MAG/BF,KAAAG,MAA8D,KAG9DH,KAAAI,eAA0B,MAG1BJ,KAAAK,WAAqB,GAGrBL,KAAAM,mBAA8B,K,CAUtC,MAAAC,G,UAEE,IAAKP,KAAKQ,cAAgBR,KAAKS,UAAYT,KAAKM,mBAAoB,CAClE,OAAO,I,CAGT,OACEI,EAACC,EAAI,CAACC,MAAOZ,KAAKG,MAAQ,qBAAuB,IAE/CO,EAAA,OAAKE,MAAO,GAAGZ,KAAKC,UAAY,SAAW,uBAAyB,wBAAyBY,MAAOb,KAAKc,gBACtGd,KAAKe,WAAaL,EAAA,KAAGE,MAAM,eAAeZ,KAAKe,WAGhDL,EAAA,QAAMM,KAAK,WAGVhB,KAAKG,OACJO,EAAA,OACEO,IAAKjB,KAAKG,MAAMc,IAChBC,KAAKC,EAAAnB,KAAKG,MAAMe,OAAG,MAAAC,SAAA,EAAAA,EAAInB,KAAKG,MAAMc,IAClCL,MAAO,WAAWZ,KAAKI,eAAiB,UAAY,WAAUgB,EAAApB,KAAKG,MAAMU,SAAK,MAAAO,SAAA,EAAAA,EAAI,OAAMC,EAAArB,KAAKK,cAAU,MAAAgB,SAAA,EAAAA,EAAI,OAK9GrB,KAAKS,QACJT,KAAKE,oBACHQ,EAAA,KAAGE,MAAM,gBAAgBU,UAAWtB,KAAKS,UAEzCC,EAAA,KAAGE,MAAM,iBAAiBZ,KAAKS,SAGjCC,EAAA,KAAGE,MAAM,qBAAqBZ,KAAKQ,aAIrCE,EAAA,aAGAA,EAAA,QAAMM,KAAK,Y","ignoreList":[]}