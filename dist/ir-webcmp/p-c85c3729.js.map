{"version":3,"names":["PropertyService","getExposedProperty","params","data","axios","post","ExceptionMsg","Error","results","My_Result","calendar_data","adultChildConstraints","adult_child_constraints","allowedBookingSources","allowed_booking_sources","allowed_payment_methods","currency","is_vacation_rental","pickup_service","max_nights","roomsInfo","roomtypes","taxes","id","country","name","is_automatic_check_in_out","tax_statement","is_frontdesk_enabled","is_pms_enabled","spitTime","_b","_a","time_constraints","check_out_till","split","checkin_checkout_hours","offset","city","gmt_offset","hour","Number","minute","error","console","log","getCountrySales","is_export_to_excel","downloadFile","My_Params_Get_Country_Sales","Link_excel","setExposedCleaningFrequency","getMonthlyStats","My_Params_Get_Monthly_Stats"],"sources":["src/services/property.service.ts"],"sourcesContent":["import calendar_data from '@/stores/calendar-data';\nimport { downloadFile } from '@/utils/utils';\nimport axios from 'axios';\nexport type CountrySalesParams = {\n  AC_ID: number;\n  WINDOW: number;\n  FROM_DATE: string;\n  TO_DATE: string;\n  BOOK_CASE: string;\n  is_export_to_excel: boolean;\n};\nexport type MonthlyStatsParams = {\n  property_id: number;\n  from_date: string;\n  to_date: string;\n  is_export_to_excel?: boolean;\n};\nexport interface MonthlyStatsResults {\n  AverageOccupancy: number;\n  DailyStats: DailyStat[];\n  ExcelLink: null;\n  PeakDays: PeakDay[];\n  Occupancy_Difference_From_Previous_Month: number;\n  TotalUnitsBooked: number;\n}\n\nexport interface PeakDay {\n  Date: string;\n  OccupancyPercent: number;\n}\n\nexport interface DailyStat {\n  Date: string;\n  Occupancy: number;\n  Units_booked: number;\n  Rooms_Revenue: number;\n  ADR: number;\n}\nexport class PropertyService {\n  public async getExposedProperty(params: {\n    id: number | null;\n    language: string;\n    is_backend?: boolean;\n    aname?: string;\n    include_units_hk_status?: boolean;\n    include_sales_rate_plans?: boolean;\n  }) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Property`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = data.My_Result;\n      calendar_data.adultChildConstraints = results.adult_child_constraints;\n      calendar_data.allowedBookingSources = results.allowed_booking_sources;\n      calendar_data.allowed_payment_methods = results.allowed_payment_methods;\n      calendar_data.currency = results.currency;\n      calendar_data.is_vacation_rental = results.is_vacation_rental;\n      calendar_data.pickup_service = results.pickup_service;\n      calendar_data.max_nights = results.max_nights;\n      calendar_data.roomsInfo = results.roomtypes;\n      calendar_data.taxes = results.taxes;\n      calendar_data.id = results.id;\n      calendar_data.country = results.country;\n      calendar_data.name = results.name;\n      calendar_data.is_automatic_check_in_out = results.is_automatic_check_in_out;\n      calendar_data.tax_statement = results.tax_statement;\n      calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\n      calendar_data.is_pms_enabled = results.is_pms_enabled;\n      const spitTime = results?.time_constraints?.check_out_till?.split(':');\n      calendar_data.checkin_checkout_hours = {\n        offset: results.city.gmt_offset,\n        hour: Number(spitTime[0] || 0),\n        minute: Number(spitTime[1] || 0),\n      };\n      return data;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async getCountrySales(params: CountrySalesParams) {\n    const { data } = await axios.post('/Get_Country_Sales', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Country_Sales.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async setExposedCleaningFrequency(params: { property_id: number; code: string }) {\n    const { data } = await axios.post('/Set_Exposed_Cleaning_Frequency', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n  public async getMonthlyStats(params: MonthlyStatsParams): Promise<MonthlyStatsResults> {\n    const { data } = await axios.post('/Get_Monthly_Stats', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Monthly_Stats.Link_excel);\n    }\n    return data.My_Result;\n  }\n}\n"],"mappings":"kHAsCaA,EACJ,wBAAMC,CAAmBC,G,QAQ9B,IACE,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,wBAAyBH,GAC3D,GAAIC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,MAAME,EAAUL,EAAKM,UACrBC,EAAcC,sBAAwBH,EAAQI,wBAC9CF,EAAcG,sBAAwBL,EAAQM,wBAC9CJ,EAAcK,wBAA0BP,EAAQO,wBAChDL,EAAcM,SAAWR,EAAQQ,SACjCN,EAAcO,mBAAqBT,EAAQS,mBAC3CP,EAAcQ,eAAiBV,EAAQU,eACvCR,EAAcS,WAAaX,EAAQW,WACnCT,EAAcU,UAAYZ,EAAQa,UAClCX,EAAcY,MAAQd,EAAQc,MAC9BZ,EAAca,GAAKf,EAAQe,GAC3Bb,EAAcc,QAAUhB,EAAQgB,QAChCd,EAAce,KAAOjB,EAAQiB,KAC7Bf,EAAcgB,0BAA4BlB,EAAQkB,0BAClDhB,EAAciB,cAAgBnB,EAAQmB,cACtCjB,EAAckB,qBAAuBpB,EAAQoB,qBAC7ClB,EAAcmB,eAAiBrB,EAAQqB,eACvC,MAAMC,GAAWC,GAAAC,EAAAxB,IAAO,MAAPA,SAAO,SAAPA,EAASyB,oBAAgB,MAAAD,SAAA,SAAAA,EAAEE,kBAAc,MAAAH,SAAA,SAAAA,EAAEI,MAAM,KAClEzB,EAAc0B,uBAAyB,CACrCC,OAAQ7B,EAAQ8B,KAAKC,WACrBC,KAAMC,OAAOX,EAAS,IAAM,GAC5BY,OAAQD,OAAOX,EAAS,IAAM,IAEhC,OAAO3B,C,CACP,MAAOwC,GACPC,QAAQC,IAAIF,GACZ,MAAM,IAAIpC,MAAMoC,E,EAGb,qBAAMG,CAAgB5C,GAC3B,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,qBAAsBH,GACxD,GAAIC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,GAAIJ,EAAO6C,mBAAoB,CAC7BC,EAAa7C,EAAK8C,4BAA4BC,W,CAEhD,OAAO/C,EAAKM,S,CAEP,iCAAM0C,CAA4BjD,GACvC,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,kCAAmCH,GACrE,GAAIC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,EAAKM,S,CAEP,qBAAM2C,CAAgBlD,GAC3B,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,qBAAsBH,GACxD,GAAIC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,GAAIJ,EAAO6C,mBAAoB,CAC7BC,EAAa7C,EAAKkD,4BAA4BH,W,CAEhD,OAAO/C,EAAKM,S","ignoreList":[]}