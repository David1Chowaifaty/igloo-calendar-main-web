{"version":3,"names":["irComboboxCss","IrComboboxStyle0","IrCombobox","constructor","hostRef","this","data","duration","disabled","autoFocus","input_id","v4","selectedIndex","actualIndex","isComboBoxVisible","isLoading","inputValue","filteredData","componentShouldAutoFocus","componentWillLoad","componentDidLoad","focusInput","watchHandler","newValue","oldValue","handleDocumentClick","event","target","el","contains","disconnectedCallback","clearTimeout","debounceTimer","blurTimeout","_a","inputRef","removeEventListener","handleBlur","_b","selectItem","_c","handleKeyDown","_d","handleFocus","dataSize","length","key","preventDefault","adjustScrollPosition","stopImmediatePropagation","stopPropagation","blur","requestAnimationFrame","focus","selectedItem","querySelector","scrollIntoView","block","index","isItemSelected","comboboxValueChange","emit","id","resetCombobox","debounceFetchData","setTimeout","fetchData","withBlur","filter","d","name","toLowerCase","startsWith","error","console","log","handleInputChange","value","handleItemKeyDown","renderDropdown","h","occupancy","map","onMouseEnter","role","onKeyDown","e","tabIndex","onClick","image","src","class","Fragment","xmlns","height","width","viewBox","fill","locales","entries","Lcz_NoResultsFound","handleSubmit","render","onSubmit","bind","type","ref","placeholder","onBlur","onInput","onFocus"],"sources":["src/components/ui/ir-combobox/ir-combobox.css?tag=ir-combobox&encapsulation=scoped","src/components/ui/ir-combobox/ir-combobox.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: relative;\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\nul {\n  position: absolute;\n  box-sizing: border-box;\n  margin: 0;\n  margin-top: 2px;\n  width: max-content;\n  max-height: 80px;\n  border-radius: 0.21rem;\n  z-index: 10000;\n  padding: 1px;\n  background: white;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  padding: 5px 0;\n  max-height: 250px;\n  overflow-y: auto;\n  min-width: 100%;\n}\nul[data-position='bottom-right'] {\n  right: 0;\n}\n.list-item-image {\n  height: 1rem;\n  aspect-ratio: 4/3;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n.dropdown-item {\n  cursor: pointer;\n}\nul li,\nspan,\nloader-container {\n  padding: 0px 16px;\n  margin: 0px;\n  margin-top: 2px;\n  width: 100%;\n  border-radius: 2px;\n}\nul li {\n  cursor: pointer;\n}\nul li {\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 3px;\n}\nul li p {\n  margin: 0;\n  padding: 0;\n}\nul li:hover {\n  background: #f4f5fa;\n}\n\nul li[data-selected],\nul li[data-selected]:hover {\n  color: #fff;\n  text-decoration: none;\n  background-color: #666ee8;\n}\n","import { IToast } from '@/components';\nimport locales from '@/stores/locales.store';\nimport { Component, Prop, State, h, Element, Event, EventEmitter, Listen, Watch, Fragment } from '@stencil/core';\nimport { v4 } from 'uuid';\n\nexport type ComboboxItem = { id: string; name: string; image?: string; occupancy?: number };\n@Component({\n  tag: 'ir-combobox',\n  styleUrl: 'ir-combobox.css',\n  scoped: true,\n})\nexport class IrCombobox {\n  @Element() el: HTMLElement;\n\n  /**\n   * The list of items displayed in the combobox.\n   */\n  @Prop({ mutable: true }) data: ComboboxItem[] = [];\n\n  /**\n   * Debounce duration in milliseconds for search input.\n   */\n  @Prop() duration: number = 300;\n\n  /**\n   * Placeholder text for the input field.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * The current value of the input field.\n   */\n  @Prop() value: string;\n\n  /**\n   * Disables the combobox input when set to true.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Autofocuses the input field when true.\n   */\n  @Prop() autoFocus: boolean = false;\n\n  /**\n   * Unique identifier for the input element.\n   */\n  @Prop() input_id: string = v4();\n\n  /**\n   * The index of the currently selected item.\n   */\n  @State() selectedIndex: number = -1;\n\n  /**\n   * Tracks the actual focused index during keyboard navigation.\n   */\n  @State() actualIndex: number = -1;\n\n  /**\n   * Whether the dropdown is visible.\n   */\n  @State() isComboBoxVisible: boolean = false;\n\n  /**\n   * Indicates if the component is in loading state.\n   */\n  @State() isLoading: boolean = true;\n\n  /**\n   * Whether a selection was made before blur.\n   */\n  @State() isItemSelected: boolean;\n\n  /**\n   * The current input value typed by the user.\n   */\n  @State() inputValue: string = '';\n\n  /**\n   * Filtered list based on user input.\n   */\n  @State() filteredData: ComboboxItem[] = [];\n\n  /**\n   * Determines if the input should automatically receive focus.\n   */\n  @State() componentShouldAutoFocus: boolean = false;\n\n  /**\n   * Emitted when a selection is made from the combobox.\n   */\n  @Event({ bubbles: true, composed: true }) comboboxValueChange: EventEmitter<{ key: string; data: unknown }>;\n\n  /**\n   * Emitted when the input is cleared by the user.\n   */\n  @Event() inputCleared: EventEmitter<null>;\n\n  /**\n   * Emits a toast notification.\n   */\n  @Event({ bubbles: true, composed: true }) toast: EventEmitter<IToast>;\n\n  private inputRef: HTMLInputElement;\n  private debounceTimer: any;\n  private blurTimeout: NodeJS.Timeout;\n\n  componentWillLoad() {\n    this.filteredData = this.data;\n  }\n\n  componentDidLoad() {\n    if (this.autoFocus) {\n      this.focusInput();\n    }\n  }\n\n  @Watch('isComboBoxVisible')\n  watchHandler(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue && newValue === true) {\n      this.focusInput();\n    }\n  }\n  @Listen('click', { target: 'document' })\n  handleDocumentClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (!this.el.contains(target)) {\n      this.isComboBoxVisible = false;\n    }\n  }\n  disconnectedCallback() {\n    clearTimeout(this.debounceTimer);\n    clearTimeout(this.blurTimeout);\n    this.inputRef?.removeEventListener('blur', this.handleBlur);\n    this.inputRef?.removeEventListener('click', this.selectItem);\n    this.inputRef?.removeEventListener('keydown', this.handleKeyDown);\n    this.inputRef?.removeEventListener('focus', this.handleFocus);\n  }\n\n  /**\n   * Handles keyboard navigation and selection inside the combobox.\n   */\n  private handleKeyDown(event: KeyboardEvent) {\n    const dataSize = this.filteredData.length;\n    if (dataSize > 0) {\n      switch (event.key) {\n        case 'ArrowUp':\n          event.preventDefault();\n          this.selectedIndex = (this.selectedIndex - 1 + dataSize) % dataSize;\n          this.adjustScrollPosition();\n          break;\n        case 'ArrowDown':\n          event.preventDefault();\n          this.selectedIndex = (this.selectedIndex + 1) % dataSize;\n          this.adjustScrollPosition();\n          break;\n        // case 'Enter':\n        // case ' ':\n        // case 'ArrowRight':\n        //   event.preventDefault();\n        //   this.selectItem(this.selectedIndex);\n        //   break;\n        case 'Escape':\n          event.stopImmediatePropagation();\n          event.stopPropagation();\n          this.inputRef?.blur();\n          this.isComboBoxVisible = false;\n          break;\n      }\n    }\n  }\n  /**\n   * Focuses the combobox input element.\n   */\n  private focusInput() {\n    requestAnimationFrame(() => {\n      this.inputRef?.focus();\n    });\n  }\n  /**\n   * Scrolls the selected item into view when navigating.\n   */\n  private adjustScrollPosition() {\n    const selectedItem = this.el?.querySelector(`[data-selected]`);\n    if (!selectedItem) return;\n    selectedItem.scrollIntoView({\n      block: 'center',\n    });\n  }\n  /**\n   * Selects an item at the given index.\n   */\n  private selectItem(index) {\n    if (this.filteredData[index]) {\n      this.isItemSelected = true;\n      this.comboboxValueChange.emit({ key: 'select', data: this.filteredData[index].id });\n      this.inputValue = '';\n      this.resetCombobox();\n      if (this.autoFocus) {\n        this.focusInput();\n      }\n    }\n  }\n  /**\n   * Debounces calls to the fetch data function.\n   */\n  private debounceFetchData() {\n    clearTimeout(this.debounceTimer);\n    this.debounceTimer = setTimeout(() => {\n      this.fetchData();\n    }, this.duration);\n  }\n  /**\n   * Makes the dropdown visible on input focus.\n   */\n  private handleFocus() {\n    this.isComboBoxVisible = true;\n  }\n  /**\n   * Resets the combobox state and optionally blurs the input.\n   */\n  private resetCombobox(withBlur: boolean = true) {\n    if (withBlur) {\n      this.inputRef?.blur();\n    }\n    this.selectedIndex = -1;\n    this.isComboBoxVisible = false;\n  }\n  /**\n   * Filters data based on input value.\n   */\n  private async fetchData() {\n    try {\n      this.isLoading = true;\n      this.filteredData = this.data.filter(d => d.name.toLowerCase().startsWith(this.inputValue));\n      this.selectedIndex = -1;\n    } catch (error) {\n      console.log('error', error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  /**\n   * Updates input value and triggers search.\n   */\n  private handleInputChange(event: Event) {\n    this.inputValue = (event.target as HTMLInputElement).value;\n    if (this.inputValue) {\n      this.debounceFetchData();\n    } else {\n      this.filteredData = this.data;\n    }\n  }\n\n  /**\n   * Clears input or resets dropdown if nothing selected on blur.\n   */\n  private handleBlur() {\n    this.blurTimeout = setTimeout(() => {\n      if (!this.isItemSelected) {\n        this.inputValue = '';\n        this.resetCombobox();\n      } else {\n        this.isItemSelected = false;\n      }\n    }, 300);\n  }\n\n  /**\n   * Handles key navigation on individual items.\n   */\n  private handleItemKeyDown(event: KeyboardEvent, index: number) {\n    if (event.key === 'Enter' || event.key === ' ' || event.key === 'ArrowRight') {\n      this.selectItem(index);\n      event.preventDefault();\n    } else if (event.key === 'Escape') {\n      this.isComboBoxVisible = false;\n      this.inputRef?.blur();\n      event.preventDefault();\n    }\n  }\n  /**\n   * Renders the dropdown list.\n   */\n  private renderDropdown() {\n    if (!this.isComboBoxVisible) {\n      return null;\n    }\n    return (\n      <ul data-position={this.filteredData.length > 0 && this.filteredData[0].occupancy ? 'bottom-right' : 'bottom-left'}>\n        {this.filteredData?.map((d, index) => (\n          <li\n            onMouseEnter={() => (this.selectedIndex = index)}\n            role=\"button\"\n            key={d.id}\n            onKeyDown={e => this.handleItemKeyDown(e, index)}\n            data-selected={this.selectedIndex === index}\n            tabIndex={0}\n            onClick={() => this.selectItem(index)}\n          >\n            {d.image && <img src={d.image} class={'list-item-image'}></img>}\n            <p>{d.name}</p>\n            {d.occupancy && (\n              <Fragment>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"14\" width=\"12.25\" viewBox=\"0 0 448 512\">\n                  <path\n                    fill={'currentColor'}\n                    d=\"M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512H418.3c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304H178.3z\"\n                  />\n                </svg>\n                <p>{d.occupancy}</p>\n              </Fragment>\n            )}\n          </li>\n        ))}\n\n        {this.filteredData.length === 0 && !this.isLoading && <span class={'text-center'}>{locales.entries.Lcz_NoResultsFound}</span>}\n      </ul>\n    );\n  }\n  /**\n   * Handles form submission by selecting the highlighted item.\n   */\n  private handleSubmit(e: Event) {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log('object');\n    if (!this.filteredData.length) {\n      return;\n    }\n    this.selectItem(this.selectedIndex === -1 ? 0 : this.selectedIndex);\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit.bind(this)} class=\"m-0 p-0\">\n        <input\n          type=\"text\"\n          class=\"form-control bg-white\"\n          id={this.input_id}\n          ref={el => (this.inputRef = el)}\n          disabled={this.disabled}\n          value={this.value}\n          placeholder={this.placeholder}\n          onKeyDown={this.handleKeyDown.bind(this)}\n          onBlur={this.handleBlur.bind(this)}\n          onInput={this.handleInputChange.bind(this)}\n          onFocus={this.handleFocus.bind(this)}\n          autoFocus={this.autoFocus}\n        />\n\n        {this.renderDropdown()}\n      </form>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}