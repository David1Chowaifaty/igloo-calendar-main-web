{"version":3,"names":["irResetPasswordCss","IrResetPasswordStyle0","IrResetPassword","constructor","hostRef","this","showValidator","autoValidate","error","submitted","isLoading","ResetPasswordSchema","z","object","password","string","regex","CONSTANTS","PASSWORD","confirm_password","nullable","refine","test","message","handleSignIn","e","preventDefault","parse","confirmPassword","Promise","r","setTimeout","ZodError","validationErrors","issues","map","issue","path","console","log","render","h","Host","key","onSubmit","bind","class","xmlns","viewBox","height","width","fill","d","_a","value","onTextChange","detail","label","inputStyles","zod","pick","wrapKey","placeholder","onInputFocus","type","_b","btn_type","text","size"],"sources":["src/components/ir-reset-password/ir-reset-password.css?tag=ir-reset-password&encapsulation=scoped","src/components/ir-reset-password/ir-reset-password.tsx"],"sourcesContent":[":host {\n  height: 100vh;\n  display: grid;\n  align-content: center;\n  padding: 2rem;\n  box-sizing: border-box;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  background: white;\n}\np,\ninput,\nbutton {\n  margin: 0;\n}\np,\ninput,\nbutton,\ndiv,\nsection,\nform {\n  box-sizing: border-box;\n}\n.lock-icon {\n  align-self: center;\n}\n.form-container {\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n  border-radius: 0.25rem;\n  gap: 1rem;\n  width: 100%;\n  max-width: 38rem;\n  margin-left: auto;\n  margin-right: auto;\n}\n.separator-container {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding-top: 1.5rem;\n  padding-bottom: 1rem;\n}\n.separator-container p {\n  color: #6b6f82;\n  /* color: green; */\n  font-size: 1rem;\n}\n.separator {\n  flex: 1 1 0%;\n  height: 1px;\n  background: #dadada;\n}\n.login-btn {\n  margin-top: 1rem;\n}\n.logo {\n  align-self: center;\n}\n.app_links {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1rem;\n  padding-block: 0.5rem;\n}\n.app_links a img {\n  width: 70%;\n}\n.password_toggle {\n  all: unset;\n  position: absolute;\n  top: 2px;\n  right: 1rem;\n}\n","import { CONSTANTS } from '@/utils/constants';\nimport { Component, Event, EventEmitter, Host, State, h } from '@stencil/core';\nimport { z, ZodError } from 'zod';\n\n@Component({\n  tag: 'ir-reset-password',\n  styleUrl: 'ir-reset-password.css',\n  scoped: true,\n})\nexport class IrResetPassword {\n  @State() confirmPassword: string;\n  @State() password: string;\n  @State() showValidator: boolean = false;\n  @State() autoValidate: boolean = false;\n  @State() error: { password?: boolean; confirm_password?: boolean } = {};\n  @State() submitted: boolean = false;\n  @State() isLoading = false;\n\n  @Event() authFinish: EventEmitter<{\n    token: string;\n    code: 'succsess' | 'error';\n  }>;\n\n  private ResetPasswordSchema = z.object({\n    password: z.string().regex(CONSTANTS.PASSWORD),\n    confirm_password: z\n      .string()\n      .nullable()\n      .refine(\n        password => {\n          if (!CONSTANTS.PASSWORD.test(password)) {\n            return false;\n          }\n          return password === this.password;\n        },\n        { message: 'Password must be at least 8 characters long.' },\n      ),\n  });\n\n  // private authService = new AuthService();\n  // private token = new Token();\n\n  private async handleSignIn(e: Event) {\n    e.preventDefault();\n    try {\n      this.error = {};\n      this.isLoading = true;\n      this.autoValidate = true;\n      this.ResetPasswordSchema.parse({\n        password: this.password,\n        confirm_password: this.confirmPassword,\n      });\n      await new Promise(r =>\n        setTimeout(() => {\n          r(true);\n        }, 300),\n      );\n      this.submitted = true;\n      // const token = await this.authService.authenticate({\n      //   password: this.password,\n      //   username: this.username,\n      // });\n      // this.token.setToken(token);\n      // this.authFinish.emit({ token, code: 'succsess' });\n    } catch (error) {\n      if (error instanceof ZodError) {\n        let validationErrors = {};\n        error.issues.map(issue => {\n          const path = issue.path[0];\n          console.log(path, issue);\n          if (path === 'password') {\n            this.showValidator = true;\n          }\n          validationErrors[path] = true;\n        });\n        this.error = validationErrors;\n      }\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  render() {\n    return (\n      <Host>\n        <ir-interceptor></ir-interceptor>\n        <ir-toast></ir-toast>\n        <form onSubmit={this.handleSignIn.bind(this)} class=\"form-container px-2\">\n          <svg class=\"lock-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\" height={24} width={24}>\n            <path\n              fill=\"currentColor\"\n              d=\"M144 144l0 48 160 0 0-48c0-44.2-35.8-80-80-80s-80 35.8-80 80zM80 192l0-48C80 64.5 144.5 0 224 0s144 64.5 144 144l0 48 16 0c35.3 0 64 28.7 64 64l0 192c0 35.3-28.7 64-64 64L64 512c-35.3 0-64-28.7-64-64L0 256c0-35.3 28.7-64 64-64l16 0z\"\n            />\n          </svg>\n          <div class=\"text-center mb-2\">\n            <h4 class=\"mb-1\">Set new Password</h4>\n            {this.submitted ? (\n              <p>An email has been sent to your address. Please check your inbox to confirm the password change.</p>\n            ) : (\n              <p>Your new password must be different to previously used password</p>\n            )}\n          </div>\n          {!this.submitted && (\n            <section>\n              <div class={'mb-2'}>\n                <div class=\"m-0 p-0\">\n                  <div class={'position-relative'}>\n                    <ir-input-text\n                      error={this.error?.password}\n                      autoValidate={this.autoValidate}\n                      value={this.password}\n                      onTextChange={e => (this.password = e.detail)}\n                      label=\"\"\n                      class=\"m-0 p-0\"\n                      inputStyles={'m-0'}\n                      zod={this.ResetPasswordSchema.pick({ password: true })}\n                      wrapKey=\"password\"\n                      placeholder=\"New Password\"\n                      onInputFocus={() => (this.showValidator = true)}\n                      type={'password'}\n                    ></ir-input-text>\n                    {/* <button type=\"button\" class=\"password_toggle\" onClick={() => (this.showPassword = !this.showPassword)}>\n                <ir-icons name={!this.showPassword ? 'open_eye' : 'closed_eye'}></ir-icons>\n              </button> */}\n                  </div>\n                  {this.showValidator && <ir-password-validator class=\"mb-1\" password={this.password}></ir-password-validator>}\n                </div>\n                <div class={'position-relative'}>\n                  <ir-input-text\n                    error={this.error?.confirm_password}\n                    autoValidate={this.autoValidate}\n                    zod={this.ResetPasswordSchema.pick({ confirm_password: true })}\n                    wrapKey=\"confirm_password\"\n                    value={this.confirmPassword}\n                    onTextChange={e => (this.confirmPassword = e.detail)}\n                    label=\"\"\n                    placeholder=\"Confirm Password\"\n                    type={'password'}\n                  ></ir-input-text>\n                  {/* <button type=\"button\" class=\"password_toggle\" onClick={() => (this.showPassword = !this.showPassword)}>\n              <ir-icons name={!this.showPassword ? 'open_eye' : 'closed_eye'}></ir-icons>\n            </button> */}\n                </div>\n              </div>\n              <ir-button isLoading={this.isLoading} btn_type=\"submit\" text={'Change password'} size=\"md\" class=\"login-btn mt-1\"></ir-button>\n            </section>\n          )}\n        </form>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}