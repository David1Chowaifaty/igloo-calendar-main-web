{"version":3,"names":["iglBookPropertyContainerCss","IglBookPropertyContainerStyle0","IglBookPropertyContainer","constructor","hostRef","this","language","ticket","withIrToastAndInterceptor","calendarData","bookingService","BookingService","roomService","RoomService","token","Token","setRoomsData","roomServiceResp","roomsData","Array","_b","_a","My_Result","roomtypes","length","forEach","roomCategory","expanded","roomsInfo","initializeApp","propertyid","p","Error","roomResponse","languageTexts","countriesList","Promise","all","getExposedProperty","id","aname","fetchLanguage","getCountries","locales","entries","direction","countryNodeList","allowed_payment_methods","paymentMethods","currency","allowed_booking_sources","adult_child_constraints","calendar_legends","legendData","paymentCodesToShow","showPaymentDetails","some","method","includes","code","error","console","componentWillLoad","setToken","ticketChanged","newValue","oldValue","handleCloseBookingWindow","bookingItem","handleTriggerClicked","tomorrow","Date","setDate","getDate","FROM_DATE","from_date","defaultDateRange","fromDate","fromDateStr","toDate","toDateStr","dateDifference","message","TO_DATE","to_date","EMAIL","event_type","ID","NAME","PHONE","REFERENCE_TYPE","TITLE","Lcz_NewBooking","render","h","Host","key","Fragment","class","onClick","bind","name","allowedBookingSources","adultChildConstraints","bookingData","onResetBookingEvt","e","stopImmediatePropagation","stopPropagation","resetBookingData","emit","onCloseBookingWindow"],"sources":["src/components/igl-book-property-container/igl-book-property-container.css?tag=igl-book-property-container&encapsulation=scoped","src/components/igl-book-property-container/igl-book-property-container.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n  margin: 0;\r\n  padding: 0;\r\n  letter-spacing: 0px !important;\r\n  font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif !important;\r\n  font-size: 1rem !important;\r\n  font-weight: 400 !important;\r\n  line-height: 1.45 !important;\r\n  color: #6b6f82 !important;\r\n  text-align: left !important;\r\n}\r\n.book-container {\r\n  width: min-content;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\nh3 {\r\n  font-size: 1rem;\r\n}\r\n","import { IglBookPropertyPayloadPlusBooking } from '@/models/igl-book-property';\r\nimport Token from '@/models/Token';\r\nimport { BookingService } from '@/services/booking.service';\r\nimport { RoomService } from '@/services/room.service';\r\nimport locales from '@/stores/locales.store';\r\nimport { Component, Host, State, h, Prop, Watch, Event, EventEmitter, Fragment } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'igl-book-property-container',\r\n  styleUrl: 'igl-book-property-container.css',\r\n  scoped: true,\r\n})\r\nexport class IglBookPropertyContainer {\r\n  @Prop() language: string = '';\r\n  @Prop() ticket: string = '';\r\n  @Prop() p: string;\r\n  @Prop() propertyid: number;\r\n  @Prop() from_date: string;\r\n  @Prop() to_date: string;\r\n  @Prop() withIrToastAndInterceptor: boolean = true;\r\n\r\n  @State() bookingItem: IglBookPropertyPayloadPlusBooking | null;\r\n  @State() showPaymentDetails: any;\r\n  @State() countryNodeList: any;\r\n  @State() calendarData: any = {};\r\n\r\n  @Event() resetBookingData: EventEmitter<null>;\r\n\r\n  private bookingService = new BookingService();\r\n  private roomService = new RoomService();\r\n  private token = new Token();\r\n\r\n  setRoomsData(roomServiceResp) {\r\n    let roomsData: { [key: string]: any }[] = new Array();\r\n    if (roomServiceResp.My_Result?.roomtypes?.length) {\r\n      roomsData = roomServiceResp.My_Result.roomtypes;\r\n      roomServiceResp.My_Result.roomtypes.forEach(roomCategory => {\r\n        roomCategory.expanded = true;\r\n      });\r\n    }\r\n    this.calendarData.roomsInfo = roomsData;\r\n  }\r\n  async initializeApp() {\r\n    try {\r\n      if (!this.propertyid && !this.p) {\r\n        throw new Error('Property ID or username is required');\r\n      }\r\n      const [roomResponse, languageTexts, countriesList] = await Promise.all([\r\n        this.roomService.getExposedProperty({ id: this.propertyid, language: this.language, aname: this.p }),\r\n        this.roomService.fetchLanguage(this.language),\r\n        this.bookingService.getCountries(this.language),\r\n      ]);\r\n      if (!locales.entries) {\r\n        locales.entries = languageTexts.entries;\r\n        locales.direction = languageTexts.direction;\r\n      }\r\n      this.countryNodeList = countriesList;\r\n\r\n      const { allowed_payment_methods: paymentMethods, currency, allowed_booking_sources, adult_child_constraints, calendar_legends } = roomResponse['My_Result'];\r\n      this.calendarData = { currency, allowed_booking_sources, adult_child_constraints, legendData: calendar_legends };\r\n      this.setRoomsData(roomResponse);\r\n      const paymentCodesToShow = ['001', '004'];\r\n      this.showPaymentDetails = paymentMethods.some(method => paymentCodesToShow.includes(method.code));\r\n    } catch (error) {\r\n      console.error('Error initializing app:', error);\r\n    }\r\n  }\r\n  componentWillLoad() {\r\n    if (this.ticket !== '') {\r\n      this.token.setToken(this.ticket);\r\n      this.initializeApp();\r\n    }\r\n  }\r\n  @Watch('ticket')\r\n  ticketChanged(newValue: string, oldValue: string) {\r\n    if (newValue === oldValue) {\r\n      return;\r\n    }\r\n    this.token.setToken(this.ticket);\r\n    this.initializeApp();\r\n  }\r\n  handleCloseBookingWindow() {\r\n    this.bookingItem = null;\r\n  }\r\n  handleTriggerClicked() {\r\n    const tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    (this.bookingItem as IglBookPropertyPayloadPlusBooking) = {\r\n      FROM_DATE: this.from_date,\r\n      defaultDateRange: {\r\n        fromDate: new Date(),\r\n        fromDateStr: '',\r\n        toDate: tomorrow,\r\n        toDateStr: '',\r\n        dateDifference: 0,\r\n        message: '',\r\n      },\r\n      TO_DATE: this.to_date,\r\n      EMAIL: '',\r\n      event_type: 'PLUS_BOOKING',\r\n      ID: '',\r\n      NAME: '',\r\n      PHONE: '',\r\n      REFERENCE_TYPE: '',\r\n      TITLE: locales.entries.Lcz_NewBooking,\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <Host>\r\n        {this.withIrToastAndInterceptor && (\r\n          <Fragment>\r\n            <ir-toast></ir-toast>\r\n            <ir-interceptor></ir-interceptor>\r\n          </Fragment>\r\n        )}\r\n\r\n        <div class=\"book-container\" onClick={this.handleTriggerClicked.bind(this)}>\r\n          <slot name=\"trigger\"></slot>\r\n        </div>\r\n        {this.bookingItem && (\r\n          <igl-book-property\r\n            allowedBookingSources={this.calendarData.allowed_booking_sources}\r\n            adultChildConstraints={this.calendarData.adult_child_constraints}\r\n            showPaymentDetails={this.showPaymentDetails}\r\n            countryNodeList={this.countryNodeList}\r\n            currency={this.calendarData.currency}\r\n            language={this.language}\r\n            propertyid={this.propertyid}\r\n            bookingData={this.bookingItem}\r\n            onResetBookingEvt={(e: CustomEvent) => {\r\n              e.stopImmediatePropagation();\r\n              e.stopPropagation();\r\n              this.resetBookingData.emit(null);\r\n            }}\r\n            onCloseBookingWindow={() => this.handleCloseBookingWindow()}\r\n          ></igl-book-property>\r\n        )}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"gWAAA,MAAMA,EAA8B,6eACpC,MAAAC,EAAeD,E,MCWFE,EAAwB,MALrC,WAAAC,CAAAC,G,6DAMUC,KAAAC,SAAmB,GACnBD,KAAAE,OAAiB,GAKjBF,KAAAG,0BAAqC,KAKpCH,KAAAI,aAAoB,GAIrBJ,KAAAK,eAAiB,IAAIC,EACrBN,KAAAO,YAAc,IAAIC,EAClBR,KAAAS,MAAQ,IAAIC,C,CAEpB,YAAAC,CAAaC,G,QACX,IAAIC,EAAsC,IAAIC,MAC9C,IAAIC,GAAAC,EAAAJ,EAAgBK,aAAS,MAAAD,SAAA,SAAAA,EAAEE,aAAS,MAAAH,SAAA,SAAAA,EAAEI,OAAQ,CAChDN,EAAYD,EAAgBK,UAAUC,UACtCN,EAAgBK,UAAUC,UAAUE,SAAQC,IAC1CA,EAAaC,SAAW,IAAI,G,CAGhCtB,KAAKI,aAAamB,UAAYV,C,CAEhC,mBAAMW,GACJ,IACE,IAAKxB,KAAKyB,aAAezB,KAAK0B,EAAG,CAC/B,MAAM,IAAIC,MAAM,sC,CAElB,MAAOC,EAAcC,EAAeC,SAAuBC,QAAQC,IAAI,CACrEhC,KAAKO,YAAY0B,mBAAmB,CAAEC,GAAIlC,KAAKyB,WAAYxB,SAAUD,KAAKC,SAAUkC,MAAOnC,KAAK0B,IAChG1B,KAAKO,YAAY6B,cAAcpC,KAAKC,UACpCD,KAAKK,eAAegC,aAAarC,KAAKC,YAExC,IAAKqC,EAAQC,QAAS,CACpBD,EAAQC,QAAUV,EAAcU,QAChCD,EAAQE,UAAYX,EAAcW,S,CAEpCxC,KAAKyC,gBAAkBX,EAEvB,MAAQY,wBAAyBC,EAAcC,SAAEA,EAAQC,wBAAEA,EAAuBC,wBAAEA,EAAuBC,iBAAEA,GAAqBnB,EAAa,aAC/I5B,KAAKI,aAAe,CAAEwC,WAAUC,0BAAyBC,0BAAyBE,WAAYD,GAC9F/C,KAAKW,aAAaiB,GAClB,MAAMqB,EAAqB,CAAC,MAAO,OACnCjD,KAAKkD,mBAAqBP,EAAeQ,MAAKC,GAAUH,EAAmBI,SAASD,EAAOE,O,CAC3F,MAAOC,GACPC,QAAQD,MAAM,0BAA2BA,E,EAG7C,iBAAAE,GACE,GAAIzD,KAAKE,SAAW,GAAI,CACtBF,KAAKS,MAAMiD,SAAS1D,KAAKE,QACzBF,KAAKwB,e,EAIT,aAAAmC,CAAcC,EAAkBC,GAC9B,GAAID,IAAaC,EAAU,CACzB,M,CAEF7D,KAAKS,MAAMiD,SAAS1D,KAAKE,QACzBF,KAAKwB,e,CAEP,wBAAAsC,GACE9D,KAAK+D,YAAc,I,CAErB,oBAAAC,GACE,MAAMC,EAAW,IAAIC,KACrBD,EAASE,QAAQF,EAASG,UAAY,GACrCpE,KAAK+D,YAAoD,CACxDM,UAAWrE,KAAKsE,UAChBC,iBAAkB,CAChBC,SAAU,IAAIN,KACdO,YAAa,GACbC,OAAQT,EACRU,UAAW,GACXC,eAAgB,EAChBC,QAAS,IAEXC,QAAS9E,KAAK+E,QACdC,MAAO,GACPC,WAAY,eACZC,GAAI,GACJC,KAAM,GACNC,MAAO,GACPC,eAAgB,GAChBC,MAAOhD,EAAQC,QAAQgD,e,CAG3B,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACF3F,KAAKG,2BACJsF,EAACG,EAAQ,CAAAD,IAAA,4CACPF,EAAA,YAAAE,IAAA,6CACAF,EAAA,kBAAAE,IAAA,8CAIJF,EAAA,OAAAE,IAAA,2CAAKE,MAAM,iBAAiBC,QAAS9F,KAAKgE,qBAAqB+B,KAAK/F,OAClEyF,EAAA,QAAAE,IAAA,2CAAMK,KAAK,aAEZhG,KAAK+D,aACJ0B,EAAA,qBAAAE,IAAA,2CACEM,sBAAuBjG,KAAKI,aAAayC,wBACzCqD,sBAAuBlG,KAAKI,aAAa0C,wBACzCI,mBAAoBlD,KAAKkD,mBACzBT,gBAAiBzC,KAAKyC,gBACtBG,SAAU5C,KAAKI,aAAawC,SAC5B3C,SAAUD,KAAKC,SACfwB,WAAYzB,KAAKyB,WACjB0E,YAAanG,KAAK+D,YAClBqC,kBAAoBC,IAClBA,EAAEC,2BACFD,EAAEE,kBACFvG,KAAKwG,iBAAiBC,KAAK,KAAK,EAElCC,qBAAsB,IAAM1G,KAAK8D,6B","ignoreList":[]}