{"version":3,"names":["initialState","checkout_guest","guest","tax_statement","roomTypes","enableBooking","resetBooking","ratePlanSelections","isInFreeCancelationZone","bookingAvailabilityParams","from_date","to_date","adult_nbr","child_nbr","infant_nbr","booking","fictus_booking_nbr","event_type","type","state","booking_store","onChange","onRoomTypeChange","reset","createStore","resetBookingStore","checkVariation","variations","selected_variation","_a","find","v","newValue","currentSelections","forEach","roomType","is_active","id","rateplans","ratePlan","length","currentRatePlanSelection","_c","Object","keys","_d","visibleInventory","inventory","reserved","checkoutVariations","checkoutBedSelection","checkoutSmokingSelection","guestName","roomtype","assign","rp_amount","view_mode","_e","is_bed_configuration_enabled","physicalrooms","availabilities","updateInventory","roomTypeId","roomTypeSelection","calculateTotalSelectedRoomsExcludingIndex","excludedRatePlanId","entries","reduce","acc","ratePlanId","Number","newRatePlans","fromEntries","map","totalSelectedRoomsExcludingCurrent","roomTypeData","rt","availableRooms","JSON","stringify","updateRoomParams","params","reserveRooms","rooms","r","Error","newGuest","Array","from","first_name","last_name","unit","bed_preference","name","rate","bedding_setup","smoking_option","getVisibleInventory","modifyBookingStore","key","value","calculateTotalRooms","values","total","innerTotal","resetReserved","updatedSelections","ratePlans","toString","rpAcc","buildPaymentTypes","paymentTypes","paymentTypesGroups","isArray","items","byCodes","codes","code","i","CODE_NAME","filter","x","Boolean","extractGroupCodes","paymentGroup","pt","CODE_VALUE_EN","split","rec","group","BookingService","unBlockUnitByPeriod","props","data","axios","post","ExceptionMsg","handleExposedRoomInOut","setExposedRestrictionPerRoomType","operation_type","getLov","sendBookingConfirmationEmail","booking_nbr","language","My_Result","getCalendarData","propertyid","extras","include_sales_rate_plans","months","customMonths","myBooking","getMyBookings","days","month","push","daysCount","monthName","description","day","console","log","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","room_types","unassigned_units_nbr","occupancy","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","myBookings","defaultMonths","error","handleExposedRoomGuests","fetchGuest","email","changeExposedBookingStatus","fetchPMSLogs","getExposedBookingEvents","editExposedGuest","book_nbr","getBookingAvailability","adultChildCount","currency","rest","__rest","adult","child","currency_ref","skip_getting_assignable_units","calendar_data","is_frontdesk_enabled","is_backend","results","this","modifyRateplans","sortRoomTypes","message","userCriteria","sort","a","b","is_available_to_book","zeroCalculatedA","some","plan","variation","discounted_amount","zeroCalculatedB","_b","matchA","matchB","maxVariationA","Math","max","flatMap","maxVariationB","rp","sortVariations","getCountries","getSetupEntriesByTableName","TBL_NAME","res","fetchSetupEntries","getSetupEntriesByTableNameMulti","arrival_time","rate_pricing_mode","bed_preference_type","groupEntryTablesResult","arrivalTime","ratePricingMode","bedPreferenceType","doBookingExtraService","service","is_remove","result","entry","substring","toLowerCase","TBL_NAMES","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","blockAvailabilityForBrackets","setDepartureTime","getUserInfo","getExposedBooking","withExtras","generateDays","amount","startDate","Date","endDate","date","toISOString","cost","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","doReservation","body","bookUser","bookedByInfoData","check_in","fromDate","guestData","pickup_info","source","toDate","bookingNumber","defaultGuest","identifier","pr_id","fromDateStr","dateToFormattedString","toDateStr","firstName","lastName","country_id","countryId","city","mobile","contactNumber","phone_prefix","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","assign_units","is_pms","is_direct","is_in_loyalty_mode","promo_key","remark","property","arrival","selectedArrivalTime","roomCategoryId","roomCategoryName","rateplan","ratePlanName","rate_restrictions","cancelation","guarantee","roomId","adultCount","children_nbr","childrenCount","notes","rateType"],"sources":["src/stores/booking.store.ts","src/services/booking.service.ts"],"sourcesContent":["import { Booking, Guest } from '@/models/booking.dto';\nimport { TEventType } from '@/models/igl-book-property';\nimport { BeddingSetup, ISmokingOption, RatePlan, RoomType, Variation } from '@/models/property';\nimport { createStore } from '@stencil/store';\n\nexport interface IRatePlanSelection {\n  reserved: number;\n  visibleInventory: number;\n  selected_variation: Variation | null;\n  ratePlan: RatePlan;\n  guest: RatePlanGuest[] | null;\n  guestName: string[];\n  is_bed_configuration_enabled: boolean;\n  checkoutVariations: Variation[];\n  checkoutBedSelection: string[];\n  is_amount_modified?: boolean;\n  view_mode: '002' | '001';\n  rp_amount: number;\n  checkoutSmokingSelection: string[];\n  roomtype: {\n    id: number;\n    name: string;\n    physicalrooms: null;\n    rateplans: null;\n    availabilities: null;\n    inventory: number;\n    rate: number;\n    smoking_option: ISmokingOption;\n    bedding_setup: BeddingSetup[];\n    is_bed_configuration_enabled: boolean;\n  };\n}\nexport interface RatePlanGuest {\n  first_name: string;\n  last_name: string;\n  unit: string | null;\n  bed_preference: string | null;\n  infant_nbr: number | null;\n  roomtype_id?: number;\n}\n\nexport interface IRoomTypeSelection {\n  [ratePlanId: number]: IRatePlanSelection;\n}\nexport interface ISelectedVariation {\n  variation: Variation;\n  state: 'default' | 'modified';\n}\nexport interface IBookinAvailabilityParams {\n  from_date: Date | null;\n  to_date: Date | null;\n  adult_nbr: number;\n  child_nbr: number;\n  infant_nbr: number;\n  coupon?: string;\n  agent?: number;\n  loyalty?: boolean;\n  agent_code?: string;\n}\nexport interface BookingStore {\n  tax_statement: { message: string } | null;\n  checkout_guest: Guest | null;\n  roomTypes: RoomType[];\n  enableBooking: boolean;\n  ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection };\n  event_type: { type: TEventType };\n  guest: RatePlanGuest;\n  bookingAvailabilityParams: IBookinAvailabilityParams;\n  booking: Booking;\n  resetBooking: boolean;\n  isInFreeCancelationZone: boolean;\n  fictus_booking_nbr: { nbr: string | null };\n}\n\nconst initialState: BookingStore = {\n  checkout_guest: null,\n  guest: null,\n  tax_statement: null,\n  roomTypes: [],\n  enableBooking: false,\n  resetBooking: false,\n  ratePlanSelections: {},\n  isInFreeCancelationZone: false,\n  bookingAvailabilityParams: {\n    from_date: null,\n    to_date: null,\n    adult_nbr: 0,\n    child_nbr: 0,\n    infant_nbr: 0,\n  },\n  booking: null,\n  fictus_booking_nbr: null,\n  event_type: { type: 'PLUS_BOOKING' },\n};\n\nexport let { state: booking_store, onChange: onRoomTypeChange, reset } = createStore<BookingStore>(initialState);\nexport function resetBookingStore() {\n  reset();\n}\nfunction checkVariation(variations: Variation[], selected_variation: Variation): Variation {\n  if (!variations) {\n    return null;\n  }\n  if (!selected_variation || booking_store.resetBooking) {\n    return variations[0];\n  }\n  return variations?.find(v => v.adult_nbr === selected_variation.adult_nbr && v.child_nbr === selected_variation.child_nbr) ?? null;\n}\n\nonRoomTypeChange('roomTypes', (newValue: RoomType[]) => {\n  const currentSelections = booking_store.ratePlanSelections;\n  const ratePlanSelections: { [roomTypeId: number]: IRoomTypeSelection } = {};\n  newValue.forEach(roomType => {\n    if (!roomType.is_active) return;\n    ratePlanSelections[roomType.id] = ratePlanSelections[roomType.id] || {};\n\n    roomType.rateplans.forEach(ratePlan => {\n      if (!ratePlan.is_active || !ratePlan?.variations?.length) return;\n      let lastVariation = ratePlan.variations[ratePlan.variations.length - 1];\n      lastVariation = ratePlan.selected_variation ?? lastVariation;\n      const currentRatePlanSelection = currentSelections[roomType.id]?.[ratePlan.id];\n      ratePlanSelections[roomType.id][ratePlan.id] =\n        currentRatePlanSelection && Object.keys(currentRatePlanSelection).length > 0\n          ? {\n              ...currentRatePlanSelection,\n              ratePlan,\n              selected_variation: checkVariation(ratePlan.variations, currentRatePlanSelection.selected_variation) ?? null,\n              visibleInventory: roomType.inventory,\n              reserved: roomType.inventory === 0 ? 0 : booking_store.resetBooking ? 0 : currentRatePlanSelection.reserved,\n              checkoutVariations: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutVariations,\n              checkoutBedSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutBedSelection,\n              checkoutSmokingSelection: roomType.inventory === 0 ? [] : currentRatePlanSelection.checkoutSmokingSelection,\n              guestName: roomType.inventory === 0 ? [] : currentRatePlanSelection.guestName,\n              roomtype: {\n                ...currentRatePlanSelection.roomtype,\n              },\n            }\n          : {\n              reserved: 0,\n              rp_amount: 0,\n              view_mode: '001',\n              guest: null,\n              visibleInventory: roomType.inventory,\n              selected_variation: ratePlan?.variations[0] ?? null,\n              ratePlan,\n              guestName: [],\n              is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\n              roomtype: {\n                ...roomType,\n                physicalrooms: null,\n                rateplans: null,\n                availabilities: null,\n              },\n              checkoutVariations: [],\n              checkoutBedSelection: [],\n              checkoutSmokingSelection: [],\n            };\n    });\n  });\n  booking_store.ratePlanSelections = ratePlanSelections;\n  booking_store.resetBooking = false;\n});\n\nexport function updateInventory(roomTypeId: number) {\n  const roomTypeSelection = booking_store.ratePlanSelections[roomTypeId];\n  const calculateTotalSelectedRoomsExcludingIndex = (excludedRatePlanId: number) => {\n    return Object.entries(roomTypeSelection).reduce((acc, [ratePlanId, ratePlan]) => {\n      return Number(ratePlanId) !== excludedRatePlanId ? acc + ratePlan.reserved : acc;\n    }, 0);\n  };\n  const newRatePlans = Object.fromEntries(\n    Object.entries(roomTypeSelection).map(([ratePlanId, ratePlan]) => {\n      const totalSelectedRoomsExcludingCurrent = calculateTotalSelectedRoomsExcludingIndex(Number(ratePlanId));\n      const roomTypeData = booking_store.roomTypes.find(rt => rt.id === roomTypeId);\n      const availableRooms = roomTypeData ? roomTypeData.inventory - totalSelectedRoomsExcludingCurrent : 0;\n\n      return [\n        ratePlanId,\n        {\n          ...ratePlan,\n          visibleInventory: availableRooms > 0 ? availableRooms : 0,\n        },\n      ];\n    }),\n  );\n  if (JSON.stringify(roomTypeSelection) !== JSON.stringify(newRatePlans)) {\n    booking_store.ratePlanSelections = {\n      ...booking_store.ratePlanSelections,\n      [roomTypeId]: newRatePlans,\n    };\n  }\n}\nexport function updateRoomParams({ ratePlanId, roomTypeId, params }: { roomTypeId: number; ratePlanId: number; params: Partial<IRatePlanSelection> }) {\n  booking_store.ratePlanSelections = {\n    ...booking_store.ratePlanSelections,\n    [Number(roomTypeId)]: {\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\n      [ratePlanId]: {\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\n        ...params,\n      },\n    },\n  };\n}\n\nexport function reserveRooms({ ratePlanId, roomTypeId, rooms, guest }: { roomTypeId: number; ratePlanId: number; rooms: number; guest?: RatePlanGuest[] }) {\n  if (!booking_store.ratePlanSelections[roomTypeId]) {\n    booking_store.ratePlanSelections[roomTypeId] = {};\n  }\n  const roomType = booking_store.roomTypes?.find(r => r.id === roomTypeId);\n  if (!roomType) {\n    throw new Error('Invalid room type id');\n  }\n  const ratePlan = roomType.rateplans.find(r => r.id === ratePlanId);\n  if (!ratePlan) {\n    throw new Error('Invalid rate plan');\n  }\n  let newGuest = Array.from({ length: rooms }, () => ({ first_name: '', last_name: '', unit: null, bed_preference: null, infant_nbr: null }));\n  if (guest) {\n    newGuest = guest;\n  }\n  if (!booking_store.ratePlanSelections[roomTypeId][ratePlanId]) {\n    booking_store.ratePlanSelections[roomTypeId][ratePlanId] = {\n      guestName: null,\n      reserved: 0,\n      view_mode: '001',\n      rp_amount: 0,\n      guest: newGuest,\n      is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\n      visibleInventory: 0,\n      selected_variation: null,\n      ratePlan,\n      checkoutVariations: [],\n      checkoutBedSelection: [],\n      checkoutSmokingSelection: [],\n      roomtype: {\n        id: roomType.id,\n        name: roomType.name,\n        physicalrooms: null,\n        rateplans: null,\n        availabilities: null,\n        inventory: roomType.inventory,\n        rate: roomType.rate,\n        bedding_setup: roomType.bedding_setup,\n        smoking_option: roomType.smoking_option,\n        is_bed_configuration_enabled: roomType.is_bed_configuration_enabled,\n      },\n    };\n  }\n\n  booking_store.ratePlanSelections = {\n    ...booking_store.ratePlanSelections,\n    [Number(roomTypeId)]: {\n      ...booking_store.ratePlanSelections[Number(roomTypeId)],\n      [ratePlanId]: {\n        ...booking_store.ratePlanSelections[roomTypeId][ratePlanId],\n        reserved: rooms,\n        checkoutVariations: [],\n        guest: newGuest,\n      },\n    },\n  };\n  updateInventory(roomTypeId);\n}\n\nexport function getVisibleInventory(roomTypeId: number, ratePlanId: number): IRatePlanSelection {\n  if (!booking_store.ratePlanSelections || !booking_store.ratePlanSelections[roomTypeId]) {\n    return {\n      reserved: 0,\n      guest: null,\n      visibleInventory: 0,\n      selected_variation: null,\n      ratePlan: null,\n      guestName: [],\n      is_bed_configuration_enabled: false,\n      checkoutVariations: [],\n      checkoutBedSelection: [],\n      checkoutSmokingSelection: [],\n      rp_amount: 0,\n      view_mode: '001',\n      roomtype: null,\n    };\n  }\n  return booking_store.ratePlanSelections[roomTypeId][ratePlanId];\n}\n\nexport function modifyBookingStore(key: keyof BookingStore, value: any) {\n  booking_store[key] = value;\n}\n\nexport function calculateTotalCost(gross: boolean = false): { totalAmount: number; prePaymentAmount: number } {\n  let prePaymentAmount = 0;\n  let totalAmount = 0;\n  const calculateCost = (ratePlan: IRatePlanSelection, isPrePayment: boolean = false) => {\n    if (ratePlan.checkoutVariations.length > 0 && ratePlan.reserved > 0) {\n      if (isPrePayment) {\n        return ratePlan.reserved * ratePlan.ratePlan.pre_payment_amount || 0;\n      }\n      return ratePlan.checkoutVariations.reduce((sum, variation) => {\n        return sum + Number(variation[gross ? 'discounted_gross_amount' : 'discounted_amount']);\n      }, 0);\n    } else if (ratePlan.reserved > 0) {\n      const amount = isPrePayment ? ratePlan.ratePlan.pre_payment_amount ?? 0 : ratePlan.selected_variation[gross ? 'discounted_gross_amount' : 'discounted_amount'];\n      return ratePlan.reserved * (amount ?? 0);\n    }\n    return 0;\n  };\n  Object.values(booking_store.ratePlanSelections).forEach(value => {\n    Object.values(value).forEach(ratePlan => {\n      totalAmount += calculateCost(ratePlan);\n      prePaymentAmount += calculateCost(ratePlan, true);\n    });\n  });\n  return { totalAmount, prePaymentAmount };\n}\n\nexport function validateBooking() {\n  return Object.values(booking_store.ratePlanSelections).every(roomTypeSelection =>\n    Object.values(roomTypeSelection).every(ratePlan => ratePlan.guestName.every(name => name.trim() !== '')),\n  );\n}\nexport function calculateTotalRooms() {\n  return Object.values(booking_store.ratePlanSelections).reduce((total, value) => {\n    return (\n      total +\n      Object.values(value).reduce((innerTotal, ratePlan) => {\n        if (ratePlan.reserved === 0) {\n          return innerTotal;\n        }\n        return innerTotal + ratePlan.reserved;\n      }, 0)\n    );\n  }, 0);\n}\nexport function resetReserved(): void {\n  const updatedSelections = Object.entries(booking_store.ratePlanSelections).reduce((acc, [roomTypeId, ratePlans]) => {\n    const roomType = booking_store.roomTypes.find(rt => rt.id.toString() === roomTypeId.toString());\n    acc[roomTypeId] = Object.entries(ratePlans).reduce((rpAcc, [ratePlanId, ratePlan]) => {\n      rpAcc[ratePlanId] = { ...ratePlan, reserved: 0, visibleInventory: roomType?.inventory ?? ratePlan.visibleInventory };\n      return rpAcc;\n    }, {} as any);\n    return acc;\n  }, {} as any);\n  booking_store.ratePlanSelections = { ...updatedSelections };\n}\nexport default booking_store;\n","import { ExposedBookingEvent, HandleExposedRoomGuestsRequest } from './../models/booking.dto';\nimport { DayData } from '../models/DayType';\nimport axios from 'axios';\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString, extras } from '../utils/utils';\nimport { getMyBookings } from '../utils/booking';\nimport { Booking, Day, ExtraService, Guest, IBookingPickupInfo, IPmsLog, RoomInOut } from '../models/booking.dto';\nimport booking_store from '@/stores/booking.store';\nimport calendar_data from '@/stores/calendar-data';\nexport interface IBookingParams {\n  bookedByInfoData: any;\n  check_in: boolean;\n  fromDate: Date;\n  toDate: Date;\n  guestData;\n  totalNights: number;\n  source: { code: string; description: string };\n  propertyid: number;\n  rooms: any[];\n  currency: { id: number; code: string };\n  pickup_info: IBookingPickupInfo | null;\n  bookingNumber?: string;\n  defaultGuest?: any;\n  arrivalTime?: any;\n  pr_id?: number;\n  identifier?: string;\n  extras: { key: string; value: string }[] | null;\n}\n\nexport type TableEntries =\n  | '_CALENDAR_BLOCKED_TILL'\n  | '_DEPARTURE_TIME'\n  | '_ARRIVAL_TIME'\n  | '_RATE_PRICING_MODE'\n  | '_BED_PREFERENCE_TYPE'\n  | '_PAY_TYPE'\n  | '_PAY_TYPE_GROUP'\n  | (string & {});\n\nexport type GroupedTableEntries = {\n  [K in TableEntries as K extends `_${infer Rest}` ? Lowercase<Rest> : never]: IEntries[];\n};\n\n/**\n * Builds a grouped payment types record from raw entries and groups.\n *\n * @param paymentTypes - The flat list of all available payment type entries.\n * @param paymentTypesGroups - The list of groups that define how payment types should be organized.\n * @returns A record where each key is a group CODE_NAME and the value is the\n *          ordered array of payment type entries belonging to that group.\n *\n * @example\n * const result = buildPaymentTypes(paymentTypes, paymentTypesGroups);\n * // {\n * //   PAYMENTS: [ { CODE_NAME: \"001\", CODE_VALUE_EN: \"Cash\", ... }, ... ],\n * //   ADJUSTMENTS: [ ... ],\n * //   ...\n * // }\n */\nexport function buildPaymentTypes(paymentTypes: IEntries[], paymentTypesGroups: IEntries[]): Record<string, IEntries[]> {\n  if (!Array.isArray(paymentTypes) || paymentTypes.length === 0 || !Array.isArray(paymentTypesGroups) || paymentTypesGroups.length === 0) {\n    return {};\n  }\n\n  const items = [...paymentTypes];\n\n  const byCodes = (codes: string[]) => codes.map(code => items.find(i => i.CODE_NAME === code)).filter((x): x is IEntries => Boolean(x));\n\n  const extractGroupCodes = (code: string) => {\n    const paymentGroup = paymentTypesGroups.find(pt => pt.CODE_NAME === code);\n    return paymentGroup ? paymentGroup.CODE_VALUE_EN.split(',') : [];\n  };\n\n  let rec: Record<string, IEntries[]> = {};\n\n  paymentTypesGroups.forEach(group => {\n    rec[group.CODE_NAME] = byCodes(extractGroupCodes(group.CODE_NAME));\n  });\n  return rec;\n}\nexport class BookingService {\n  public async unBlockUnitByPeriod(props: { unit_id: number; from_date: string; to_date: string }) {\n    const { data } = await axios.post(`/Unblock_Unit_By_Period`, props);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n\n  public async handleExposedRoomInOut(props: { booking_nbr: string; room_identifier: string; status: RoomInOut['code'] }) {\n    const { data } = await axios.post(`/Handle_Exposed_Room_InOut`, props);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n  public async setExposedRestrictionPerRoomType(params: { is_closed: boolean; restrictions: { room_type_id: number | string; night: string }[]; operation_type?: string }) {\n    const { data } = await axios.post(`https://gateway.igloorooms.com/IRBE/Set_Exposed_Restriction_Per_Room_Type`, {\n      operation_type: params.operation_type ?? 'close_open',\n      ...params,\n    });\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n  public async getLov() {\n    const { data } = await axios.post(`/Get_LOV`, {});\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n  public async sendBookingConfirmationEmail(booking_nbr: string, language: string) {\n    const { data } = await axios.post(`/Send_Booking_Confirmation_Email`, {\n      booking_nbr,\n      language,\n    });\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Calendar`, {\n        propertyid,\n        from_date,\n        to_date,\n        extras,\n        include_sales_rate_plans: true,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const months: MonthType[] = data.My_Result.months;\n      const customMonths: { daysCount: number; monthName: string }[] = [];\n      const myBooking = await getMyBookings(months);\n      const days: DayData[] = months\n        .map(month => {\n          customMonths.push({\n            daysCount: month.days.length,\n            monthName: month.description,\n          });\n          return month.days.map(day => {\n            if (day['value'] === '2025-05-30') {\n              console.log(day);\n            }\n            return {\n              day: convertDateToCustomFormat(day.description, month.description),\n              value: day.value,\n              currentDate: convertDateToTime(day.description, month.description),\n              dayDisplayName: day.description,\n              rate: day.room_types,\n              unassigned_units_nbr: day.unassigned_units_nbr,\n              occupancy: day.occupancy,\n            };\n          });\n        })\n        .flat();\n\n      return Promise.resolve({\n        ExceptionCode: null,\n        ExceptionMsg: '',\n        My_Params_Get_Rooming_Data: {\n          AC_ID: propertyid,\n          FROM: data.My_Params_Get_Exposed_Calendar.from_date,\n          TO: data.My_Params_Get_Exposed_Calendar.to_date,\n        },\n        days,\n        months: customMonths,\n        myBookings: myBooking,\n        defaultMonths: months,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  public async handleExposedRoomGuests(props: HandleExposedRoomGuestsRequest) {\n    const { data } = await axios.post('/Handle_Exposed_Room_Guests', props);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n  public async fetchGuest(email: string): Promise<Guest> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Guest`, { email });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async changeExposedBookingStatus(props: { book_nbr: string; status: string }) {\n    try {\n      const { data } = await axios.post(`/Change_Exposed_Booking_Status`, props);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_PMS_Logs`, { booking_nbr });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async getExposedBookingEvents(booking_nbr: string | number): Promise<ExposedBookingEvent[] | null> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Booking_Events`, { booking_nbr });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\n    try {\n      const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async getBookingAvailability(props: {\n    from_date: string;\n    to_date: string;\n    propertyid: number;\n    adultChildCount: { adult: number; child: number };\n    language: string;\n    room_type_ids: number[];\n    room_type_ids_to_update?: number[];\n    rate_plan_ids?: number[];\n    currency: { id: number; code: string };\n    is_in_agent_mode?: boolean;\n    agent_id?: string | number;\n  }): Promise<BookingDetails> {\n    try {\n      const { adultChildCount, currency, ...rest } = props;\n      const { data } = await axios.post(`/Check_Availability`, {\n        ...rest,\n        adult_nbr: adultChildCount.adult,\n        child_nbr: adultChildCount.child,\n        currency_ref: currency.code,\n        skip_getting_assignable_units: !calendar_data.is_frontdesk_enabled,\n        is_backend: true,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = this.modifyRateplans(this.sortRoomTypes(data['My_Result'], { adult_nbr: Number(adultChildCount.adult), child_nbr: Number(adultChildCount.child) }));\n      booking_store.roomTypes = [...results];\n      booking_store.tax_statement = { message: data.My_Result.tax_statement };\n      return results;\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  private sortRoomTypes(roomTypes, userCriteria: { adult_nbr: number; child_nbr: number }) {\n    return roomTypes.sort((a, b) => {\n      // Priority to available rooms\n      if (a.is_available_to_book && !b.is_available_to_book) return -1;\n      if (!a.is_available_to_book && b.is_available_to_book) return 1;\n\n      // Check for variations where is_calculated is true and amount is 0 or null\n      const zeroCalculatedA = a.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\n      const zeroCalculatedB = b.rateplans?.some(plan => plan.variations?.some(variation => variation.discounted_amount === 0 || variation.discounted_amount === null));\n\n      // Prioritize these types to be before inventory 0 but after all available ones\n      if (zeroCalculatedA && !zeroCalculatedB) return 1;\n      if (!zeroCalculatedA && zeroCalculatedB) return -1;\n\n      // Check for exact matching variations based on user criteria\n      const matchA = a.rateplans?.some(plan =>\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\n      );\n      const matchB = b.rateplans?.some(plan =>\n        plan.variations?.some(variation => variation.adult_nbr === userCriteria.adult_nbr && variation.child_nbr === userCriteria.child_nbr),\n      );\n\n      if (matchA && !matchB) return -1;\n      if (!matchA && matchB) return 1;\n\n      // Sort by the highest variation amount\n      const maxVariationA = Math.max(...a.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\n      const maxVariationB = Math.max(...b.rateplans.flatMap(plan => plan.variations?.map(variation => variation.discounted_amount ?? 0)));\n\n      if (maxVariationA < maxVariationB) return -1;\n      if (maxVariationA > maxVariationB) return 1;\n\n      return 0;\n    });\n  }\n  private modifyRateplans(roomTypes) {\n    return roomTypes?.map(rt => ({ ...rt, rateplans: rt.rateplans?.map(rp => ({ ...rp, variations: this.sortVariations(rp?.variations ?? []) })) }));\n  }\n  private sortVariations(variations) {\n    return variations.sort((a, b) => {\n      if (a.adult_nbr !== b.adult_nbr) {\n        return b.adult_nbr - a.adult_nbr;\n      }\n      return b.child_nbr - a.child_nbr;\n    });\n  }\n  public async getCountries(language: string): Promise<ICountry[]> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Countries`, {\n        language,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async getSetupEntriesByTableName(TBL_NAME: string): Promise<IEntries[]> {\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME`, {\n      TBL_NAME,\n    });\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    const res: IEntries[] = data.My_Result ?? [];\n    return res;\n  }\n\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\n    try {\n      const data = await this.getSetupEntriesByTableNameMulti(['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE']);\n      const { arrival_time, rate_pricing_mode, bed_preference_type } = this.groupEntryTablesResult(data);\n      return {\n        arrivalTime: arrival_time,\n        ratePricingMode: rate_pricing_mode,\n        bedPreferenceType: bed_preference_type,\n      };\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async doBookingExtraService({ booking_nbr, service, is_remove }: { service: ExtraService; booking_nbr: number | string; is_remove: boolean }) {\n    const { data } = await axios.post(`/Do_Booking_Extra_Service`, { ...service, booking_nbr, is_remove });\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n\n  public groupEntryTablesResult(entries: IEntries[]): GroupedTableEntries {\n    let result = {};\n    for (const entry of entries) {\n      const key = entry.TBL_NAME.substring(1, entry.TBL_NAME.length).toLowerCase();\n      if (!result[key]) {\n        result[key] = [];\n      }\n      result[key] = [...result[key], entry];\n    }\n    return result as GroupedTableEntries;\n  }\n  public async getSetupEntriesByTableNameMulti(entries: TableEntries[]): Promise<IEntries[]> {\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, { TBL_NAMES: entries });\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n  public async getBlockedInfo(): Promise<IEntries[]> {\n    return await this.getSetupEntriesByTableNameMulti(['_CALENDAR_BLOCKED_TILL']);\n  }\n  public async getUserDefaultCountry() {\n    try {\n      const { data } = await axios.post(`/Get_Country_By_IP`, {\n        IP: '',\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data['My_Result'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n\n  public async blockUnit(params: IBlockUnit) {\n    try {\n      const { data } = await axios.post(`/Block_Exposed_Unit`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      console.log(data);\n      return data['My_Params_Block_Exposed_Unit'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async blockAvailabilityForBrackets(params: {\n    unit_id: number;\n    block_status_code?: '003' | '004' | '002';\n    description?: string;\n    brackets: { from_date: string; to_date: string }[];\n  }) {\n    try {\n      const { data } = await axios.post(`/Block_Availability_For_Brackets`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data;\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async setDepartureTime(params: { property_id: number; room_identifier: string; code: string }) {\n    const { data } = await axios.post('/Set_Departure_Time', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n\n  public async getUserInfo(email: string) {\n    try {\n      const { data } = await axios.post(`/GET_EXPOSED_GUEST`, {\n        email,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async getExposedBooking(booking_nbr: string, language: string, withExtras: boolean = true): Promise<Booking> {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Booking`, {\n        booking_nbr,\n        language,\n        extras: withExtras ? extras : null,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data.My_Result;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\n    const startDate = new Date(from_date);\n    const endDate = new Date(to_date);\n    const days: Day[] = [];\n\n    while (startDate < endDate) {\n      days.push({\n        date: startDate.toISOString().split('T')[0],\n        amount: amount,\n        cost: null,\n      });\n      startDate.setDate(startDate.getDate() + 1);\n    }\n\n    return days;\n  }\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\n    if (isRateModified && preference === 2) {\n      return +rate;\n    }\n    return +rate / +totalNights;\n  }\n  public async fetchExposedGuest(email: string, property_id: number) {\n    try {\n      const { data } = await axios.post(`/Fetch_Exposed_Guests`, {\n        email,\n        property_id,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data['My_Result'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\n    try {\n      const { data } = await axios.post(`/Fetch_Exposed_Bookings`, {\n        booking_nbr,\n        property_id,\n        from_date,\n        to_date,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data['My_Result'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async getPCICardInfoURL(BOOK_NBR: string) {\n    try {\n      const { data } = await axios.post(`/Get_PCI_Card_Info_URL`, {\n        BOOK_NBR,\n      });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      return data['My_Result'];\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n  public async doReservation(body: any) {\n    const { data } = await axios.post(`/DoReservation`, { ...body, extras: body.extras ? body.extras : extras });\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    console.log(data['My_Result']);\n    return data['My_Result'];\n  }\n\n  public async bookUser({\n    bookedByInfoData,\n    check_in,\n    currency,\n    extras = null,\n    fromDate,\n    guestData,\n    pickup_info,\n    propertyid,\n    rooms,\n    source,\n    toDate,\n    totalNights,\n    arrivalTime,\n    bookingNumber,\n    defaultGuest,\n    identifier,\n    pr_id,\n  }: IBookingParams) {\n    try {\n      const fromDateStr = dateToFormattedString(fromDate);\n      const toDateStr = dateToFormattedString(toDate);\n      let guest: any = {\n        email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\n        first_name: bookedByInfoData.firstName,\n        last_name: bookedByInfoData.lastName,\n        country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\n        city: null,\n        mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\n        phone_prefix: null,\n        address: '',\n        dob: null,\n        subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\n        cci: bookedByInfoData.cardNumber\n          ? {\n              nbr: bookedByInfoData.cardNumber,\n              holder_name: bookedByInfoData.cardHolderName,\n              expiry_month: bookedByInfoData.expiryMonth,\n              expiry_year: bookedByInfoData.expiryYear,\n            }\n          : null,\n      };\n      if (defaultGuest) {\n        guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\n      }\n      if (bookedByInfoData.id) {\n        guest = { ...guest, id: bookedByInfoData.id };\n      }\n      const body = {\n        assign_units: true,\n        check_in,\n        is_pms: true,\n        is_direct: true,\n        is_in_loyalty_mode: false,\n        promo_key: null,\n        extras,\n        booking: {\n          booking_nbr: bookingNumber || '',\n          from_date: fromDateStr,\n          to_date: toDateStr,\n          remark: bookedByInfoData.message || null,\n          property: {\n            id: propertyid,\n          },\n          source,\n          currency,\n          arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\n\n          guest,\n          rooms: [\n            ...guestData.map(data => ({\n              identifier: identifier || null,\n              roomtype: {\n                id: data.roomCategoryId,\n                name: data.roomCategoryName,\n                physicalrooms: null,\n                rateplans: null,\n                availabilities: null,\n                inventory: data.inventory,\n                rate: data.rate / totalNights,\n              },\n              rateplan: {\n                id: data.ratePlanId,\n                name: data.ratePlanName,\n                rate_restrictions: null,\n                variations: null,\n                cancelation: data.cancelation,\n                guarantee: data.guarantee,\n              },\n              unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\n              occupancy: {\n                adult_nbr: data.adultCount,\n                children_nbr: data.childrenCount,\n                infant_nbr: null,\n              },\n              bed_preference: data.preference,\n              from_date: fromDateStr,\n              to_date: toDateStr,\n              notes: null,\n              days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\n              guest: {\n                email: null,\n                first_name: data.guestName,\n                last_name: null,\n                country_id: null,\n                city: null,\n                mobile: null,\n                address: null,\n                dob: null,\n                subscribe_to_news_letter: null,\n              },\n            })),\n            ...rooms,\n          ],\n        },\n        pickup_info,\n      };\n      console.log('book user payload', body);\n      // const result = await this.doReservation(body);\n      // return result;\n    } catch (error) {\n      console.error(error);\n      throw new Error(error);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}