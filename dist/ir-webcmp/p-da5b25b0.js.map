{"version":3,"names":["Auth","constructor","isAuthUsed","this","init","subscribe","callback","subscribers","push","unsubscribe","filter","sub","setIsAuthenticated","value","_isAuthenticated","notifySubscribers","isAuthenticated","forEach","Token","super","baseUrl","initialize","isInterceptorAdded","axios","defaults","baseURL","interceptors","request","use","config","token","MissingTokenError","headers","Authorization","setToken","Error","message","name"],"sources":["src/models/Auth.ts","src/models/Token.ts"],"sourcesContent":["// import axios from 'axios';\r\n\r\nclass Auth {\r\n  private static isAuthUsed = false;\r\n  private static _isAuthenticated = false;\r\n  private static subscribers: Array<(isAuthenticated: boolean) => void> = [];\r\n\r\n  constructor() {\r\n    if (!Auth.isAuthUsed) {\r\n      this.init();\r\n    }\r\n  }\r\n  public async init() {\r\n    // axios.defaults.withCredentials = true;\r\n    // Auth.isAuthUsed = true;\r\n    // const { data } = await axios.post('/Is_Already_Athenticated');\r\n    // this.setIsAuthenticated(data.My_Result);\r\n  }\r\n  public subscribe(callback: (isAuthenticated: boolean) => void) {\r\n    Auth.subscribers.push(callback);\r\n  }\r\n  public unsubscribe(callback: (isAuthenticated: boolean) => void) {\r\n    Auth.subscribers = Auth.subscribers.filter(sub => sub !== callback);\r\n  }\r\n  public setIsAuthenticated(value: boolean) {\r\n    Auth._isAuthenticated = value;\r\n    Auth.notifySubscribers(value);\r\n  }\r\n\r\n  private static notifySubscribers(isAuthenticated: boolean) {\r\n    Auth.subscribers.forEach(callback => callback(isAuthenticated));\r\n  }\r\n  public isAuthenticated() {\r\n    return Auth._isAuthenticated;\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","import axios from 'axios';\r\nimport Auth from './Auth';\r\n\r\nclass Token extends Auth {\r\n  private baseUrl = 'https://gateway.igloorooms.com/IR';\r\n  private static token: string | null = '';\r\n\r\n  private static isInterceptorAdded = false;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  private initialize() {\r\n    if (Token.isInterceptorAdded) {\r\n      return;\r\n    }\r\n    axios.defaults.baseURL = this.baseUrl;\r\n    axios.interceptors.request.use(config => {\r\n      if (!Token.token) {\r\n        throw new MissingTokenError();\r\n      }\r\n      config.headers.Authorization = Token.token;\r\n      // config.params = config.params || {};\r\n      // config.params.Ticket = Token.token;\r\n      return config;\r\n    });\r\n\r\n    Token.isInterceptorAdded = true;\r\n  }\r\n\r\n  public setToken(token: string) {\r\n    Token.token = token;\r\n    this.initialize();\r\n  }\r\n}\r\nexport default Token;\r\nexport class MissingTokenError extends Error {\r\n  constructor(message = 'Missing token!!') {\r\n    super(message);\r\n    this.name = 'MissingTokenError';\r\n  }\r\n}\r\n"],"mappings":"oCAEA,MAAMA,EAKJ,WAAAC,GACE,IAAKD,EAAKE,WAAY,CACpBC,KAAKC,M,EAGF,UAAMA,G,CAMN,SAAAC,CAAUC,GACfN,EAAKO,YAAYC,KAAKF,E,CAEjB,WAAAG,CAAYH,GACjBN,EAAKO,YAAcP,EAAKO,YAAYG,QAAOC,GAAOA,IAAQL,G,CAErD,kBAAAM,CAAmBC,GACxBb,EAAKc,iBAAmBD,EACxBb,EAAKe,kBAAkBF,E,CAGjB,wBAAOE,CAAkBC,GAC/BhB,EAAKO,YAAYU,SAAQX,GAAYA,EAASU,I,CAEzC,eAAAA,GACL,OAAOhB,EAAKc,gB,EA9BCd,EAAAE,WAAa,MACbF,EAAAc,iBAAmB,MACnBd,EAAAO,YAAyD,GCF1E,MAAMW,UAAclB,EAMlB,WAAAC,GACEkB,QANMhB,KAAAiB,QAAU,mC,CASV,UAAAC,GACN,GAAIH,EAAMI,mBAAoB,CAC5B,M,CAEFC,EAAMC,SAASC,QAAUtB,KAAKiB,QAC9BG,EAAMG,aAAaC,QAAQC,KAAIC,IAC7B,IAAKX,EAAMY,MAAO,CAChB,MAAM,IAAIC,C,CAEZF,EAAOG,QAAQC,cAAgBf,EAAMY,MAGrC,OAAOD,CAAM,IAGfX,EAAMI,mBAAqB,I,CAGtB,QAAAY,CAASJ,GACdZ,EAAMY,MAAQA,EACd3B,KAAKkB,Y,EA5BQH,EAAAY,MAAuB,GAEvBZ,EAAAI,mBAAqB,M,MA8BzBS,UAA0BI,MACrC,WAAAlC,CAAYmC,EAAU,mBACpBjB,MAAMiB,GACNjC,KAAKkC,KAAO,mB","ignoreList":[]}