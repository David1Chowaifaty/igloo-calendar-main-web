{"version":3,"names":["irHkTasksCss","IrHkTasksStyle0","IrHkTasks","constructor","hostRef","this","language","ticket","isLoading","isCleaningLoading","selectedDuration","selectedHouseKeeper","selectedRoom","archiveOpened","hkNameCache","roomService","RoomService","houseKeepingService","HouseKeepingService","token","Token","table_sorting","Map","componentWillLoad","baseUrl","setBaseUrl","setToken","init","ticketChanged","newValue","oldValue","handleCloseSidebar","e","stopImmediatePropagation","stopPropagation","isSidebarOpen","handleSortingChanged","field","direction","detail","console","log","set","handleSkipSelectedTask","modalCauses","task","cause","_a","modal","openModal","setLoading","propertyId","propertyid","p","Error","propertyData","getExposedProperty","id","aname","is_backend","include_units_hk_status","My_Result","property_id","requests","getExposedHKSetup","fetchLanguage","push","Promise","all","tasksResult","getHkTasks","from_date","moment","format","to_date","housekeepers","housekeeping_store","hk_criteria","map","h","cleaning_frequency","_d","_b","calendar_data","_c","cleaning_frequencies","code","dusty_window","_f","_e","dusty_periods","highlight_window","_h","_g","highlight_checkin_options","tasks","updateTasks","error","buildHousekeeperNameCache","forEach","hk","name","updateTasksStore","t","Object","assign","v4","housekeeper","hkm_id","hkName","find","handleHeaderButtonPress","sortingArray","Array","from","entries","key","value","url","fetchTasksWithFilters","downloadFile","handleSelectedTaskCleaningEvent","handleModalConfirmation","hkTasksStore","selectedTasks","length","booking_nbr","date","unit","editHkSkip","BOOK_NBR","DATE","COMMENT","HK_SKIP_ID","HK_SKIP_REASON_CODE","PR_ID","executeHKAction","actions","description","unit_id","clearSelectedTasks","closeModal","applyFilters","isApplyFiltersLoading","filters","export_to_excel","cleaning_periods","dusty_units","highlight_check_ins","is_export_to_excel","render","Host","class","style","gap","onApplyFilters","onRowSelectChange","updateSelectedTasks","autoClose","ref","el","onConfirmModal","bind","onCancelModal","iconAvailable","icon","leftBtnText","locales","Lcz_Cancel","rightBtnText","Lcz_Confirm","leftBtnColor","rightBtnColor","modalTitle","Lcz_Confirmation","modalBody","open","onIrSidebarToggle","showCloseButton","getToken","slot","PropertyService","params","data","axios","post","ExceptionMsg","results","adultChildConstraints","adult_child_constraints","allowedBookingSources","allowed_booking_sources","allowed_payment_methods","currency","is_vacation_rental","pickup_service","max_nights","roomsInfo","roomtypes","taxes","country","is_automatic_check_in_out","tax_statement","is_frontdesk_enabled","is_pms_enabled","spitTime","time_constraints","check_out_till","split","checkin_checkout_hours","offset","city","gmt_offset","hour","Number","minute","getCountrySales","My_Params_Get_Country_Sales","Link_excel","setExposedCleaningFrequency","getMonthlyStats","My_Params_Get_Monthly_Stats","irHousekeepingCss","IrHousekeepingStyle0","IrHousekeeping","propertyService","initializeApp","handleResetData","include_sales_rate_plans","updateHKStore","housekeeping_enabled","selectedCleaningFrequency","saveAutomaticCheckInCheckout","SetAutomaticCheckInOut","default_properties","flag","toast","emit","position","title","type","saveCleaningFrequency","Lcz_HouseKeepingAndCheckInSetup","borderShown","label","Lcz_CheckInOutGuestsAutomatically","LabelAvailable","showFirstOption","selectedValue","onSelectChange","text","Lcz_YesAsPerPropertyPolicy","Lcz_NoIWillDoItManually","Lcz_CleaningFrequency","v","isRequestPending","irMonthlyBookingsReportCss","IrMonthlyBookingsReportStyle0","IrMonthlyBookingsReport","isPageLoading","reports","tokenService","baseFilters","firstOfMonth","startOf","lastOfMonth","endOf","include_previous_year","handleTicketChange","handleApplyFiltersChange","getReports","isExportToExcel","getReportObj","report","day","Date","units_booked","Units_booked","occupancy_percent","Occupancy","adr","ADR","rooms_revenue","Rooms_Revenue","total_guests","Total_Guests","add","currentReports","enrichedReports","DailyStats","rest","__rest$1","stats","previousYearReports","formattedReports","current","previous","prev","last_year","size","btn_color","Lcz_Export","onClickHandler","async","btnStyle","height","iconPosition","icon_name","icon_style","alignItems","Occupancy_Difference_From_Previous_Month","cardTitle","AverageOccupancy","toFixed","subtitle","TotalUnitsBooked","toString","_j","reduce","curr","_k","PeakDays","_m","_l","pd","concat","join","Math","max","_o","OccupancyPercent","irSalesByCountryCss","IrSalesByCountryStyle0","IrSalesByCountry","countries","bookingService","BookingService","FROM_DATE","TO_DATE","BOOK_CASE","WINDOW","salesFilters","getCountries","mappedCountries","formatSalesData","COUNTRY","country_id","COUNTRY_ID","nights","NIGHTS","percentage","PCT","revenue","REVENUE","number_of_guests","filterParams","__rest","currentSales","AC_ID","shouldFetchPreviousYear","enrichedSales","previousYearSales","subtract","toLowerCase","record","salesData","records","irUserManagementCss","IrUserManagementStyle0","IrUserManagement","isSuperAdmin","users","allowedUsersTypes","userService","UserService","userTypes","superAdminId","fetchUsers","fetchUserTypes","socket","io","on","msg","handleSocketMessage","msgAsObject","JSON","parse","REASON","KEY","PAYLOAD","result","reasonHandlers","EMAIL_VERIFIED","updateUserVerificationStatus","handler","call","warn","idx","findIndex","u","is_email_verified","getExposedPropertyUsers","sort","u1","u2","priority","p1","p2","username","localeCompare","res","getSetupEntriesByTableName","getLov","allowedUsers","allowed_user_types","toUpperCase","f","CODE_NAME","disconnectedCallback","disconnect","suppressToastEndpoints","Lcz_ExtranetUsers","baseUserTypeCode","userTypeCode","haveAdminPrivileges","includes"],"sources":["src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.css?tag=ir-hk-tasks&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.tsx","src/services/property.service.ts","src/components/ir-housekeeping/ir-housekeeping.css?tag=ir-housekeeping&encapsulation=scoped","src/components/ir-housekeeping/ir-housekeeping.tsx","src/components/ir-monthly-bookings-report/ir-monthly-bookings-report.css?tag=ir-monthly-bookings-report&encapsulation=scoped","src/components/ir-monthly-bookings-report/ir-monthly-bookings-report.tsx","src/components/ir-sales-by-country/ir-sales-by-country.css?tag=ir-sales-by-country&encapsulation=scoped","src/components/ir-sales-by-country/ir-sales-by-country.tsx","src/components/ir-user-management/ir-user-management.css?tag=ir-user-management&encapsulation=scoped","src/components/ir-user-management/ir-user-management.tsx"],"sourcesContent":[":host {\n  display: block;\n  box-sizing: border-box;\n}\n:host * {\n  box-sizing: border-box;\n}\n\n@media only screen and (min-width: 900px) {\n  /* td {\n    min-width: 140px !important;\n    width: max-content !important;\n  } */\n}\n@media only screen and (max-width: 900px) {\n  /* td {\n    min-width: 100px !important;\n  } */\n  /* .table-container {\n    width: max-content !important;\n  } */\n}\n/*sm*/\n@media (min-width: 640px) {\n}\n\n/*md*/\n@media (min-width: 768px) {\n}\n\n.tasks-view {\n  display: flex;\n  flex-direction: column;\n}\n/*lg*/\n@media (min-width: 1024px) {\n  .tasks-view {\n    flex-direction: row;\n  }\n}\n\n/*xl*/\n@media (min-width: 1280px) {\n}\n\n/*2xl*/\n@media (min-width: 1536px) {\n}\n","import { IPendingActions, Task } from '@/models/housekeeping';\nimport Token from '@/models/Token';\nimport { HouseKeepingService } from '@/services/housekeeping.service';\nimport { RoomService } from '@/services/room.service';\nimport housekeeping_store from '@/stores/housekeeping.store';\n// import { isRequestPending } from '@/stores/ir-interceptor.store';\nimport locales from '@/stores/locales.store';\nimport { Component, Host, Prop, State, h, Element, Watch, Event, EventEmitter, Listen } from '@stencil/core';\nimport moment from 'moment';\nimport { v4 } from 'uuid';\nimport { TaskFilters } from './types';\nimport { downloadFile } from '@/utils/utils';\nimport { updateTasks as updateTasksStore, updateSelectedTasks, clearSelectedTasks, hkTasksStore, setLoading } from '@/stores/hk-tasks.store';\nimport calendar_data from '@/stores/calendar-data';\n\n@Component({\n  tag: 'ir-hk-tasks',\n  styleUrl: 'ir-hk-tasks.css',\n  scoped: true,\n})\nexport class IrHkTasks {\n  @Element() el: HTMLElement;\n\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: number;\n  @Prop() p: string;\n  @Prop() baseUrl: string;\n\n  @State() isLoading = false;\n  @State() isCleaningLoading = false;\n  @State() selectedDuration = '';\n  @State() selectedHouseKeeper = '0';\n  @State() selectedRoom: IPendingActions | null = null;\n  @State() archiveOpened = false;\n  @State() property_id: number;\n  @State() isSidebarOpen: boolean;\n  @State() isApplyFiltersLoading: boolean;\n  @State() filters: TaskFilters;\n  @State() modalCauses: { task?: Task; cause: 'skip' | 'clean' };\n\n  @Event({ bubbles: true, composed: true }) clearSelectedHkTasks: EventEmitter<void>;\n\n  private hkNameCache: Record<number, string> = {};\n  private roomService = new RoomService();\n  private houseKeepingService = new HouseKeepingService();\n  private token = new Token();\n  private table_sorting: Map<string, 'ASC' | 'DESC'> = new Map();\n  private modal: HTMLIrModalElement;\n\n  componentWillLoad() {\n    if (this.baseUrl) {\n      this.token.setBaseUrl(this.baseUrl);\n    }\n    if (this.ticket !== '') {\n      this.token.setToken(this.ticket);\n      this.init();\n    }\n  }\n\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.init();\n  }\n\n  @Listen('closeSideBar')\n  handleCloseSidebar(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.isSidebarOpen = false;\n  }\n  @Listen('sortingChanged')\n  handleSortingChanged(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    const { field, direction } = e.detail;\n    console.log(e.detail);\n    if (field === 'date') {\n      return;\n    }\n    this.table_sorting.set(field, direction);\n  }\n  @Listen('skipSelectedTask')\n  handleSkipSelectedTask(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.modalCauses = { task: e.detail, cause: 'skip' };\n    this.modal?.openModal();\n  }\n\n  private async init() {\n    try {\n      this.isLoading = true;\n      setLoading(true);\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.houseKeepingService.getExposedHKSetup(this.property_id), this.roomService.fetchLanguage(this.language)];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n      const tasksResult = await this.houseKeepingService.getHkTasks({\n        property_id: this.property_id,\n        from_date: moment().format('YYYY-MM-DD'),\n        to_date: moment().format('YYYY-MM-DD'),\n        housekeepers: housekeeping_store.hk_criteria.housekeepers?.map(h => ({ id: h.id })),\n        cleaning_frequency: (calendar_data.cleaning_frequency ?? housekeeping_store?.hk_criteria?.cleaning_frequencies[0])?.code,\n        dusty_window: housekeeping_store?.hk_criteria?.dusty_periods[0]?.code,\n        highlight_window: housekeeping_store?.hk_criteria?.highlight_checkin_options[0]?.code,\n      });\n\n      // updateTaskList();\n      if (tasksResult?.tasks) {\n        this.updateTasks(tasksResult.tasks);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isLoading = false;\n      setLoading(false);\n    }\n  }\n\n  private buildHousekeeperNameCache() {\n    this.hkNameCache = {};\n    housekeeping_store.hk_criteria?.housekeepers?.forEach(hk => {\n      if (hk.id != null && hk.name != null) {\n        this.hkNameCache[hk.id] = hk.name;\n      }\n    });\n  }\n\n  private updateTasks(tasks: any[]) {\n    this.buildHousekeeperNameCache();\n    updateTasksStore(\n      tasks.map(t => ({\n        ...t,\n        id: v4(),\n        housekeeper: (() => {\n          const name = this.hkNameCache[t.hkm_id];\n          if (name) {\n            return name;\n          }\n          const hkName = housekeeping_store.hk_criteria?.housekeepers?.find(hk => hk.id === t.hkm_id)?.name;\n          this.hkNameCache[t.hkm_id] = hkName;\n          return hkName;\n        })(),\n      })),\n    );\n  }\n  @Listen('headerButtonPress')\n  async handleHeaderButtonPress(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    const { name } = e.detail;\n    switch (name) {\n      case 'cleaned':\n        this.modal?.openModal();\n        break;\n      case 'export':\n        const sortingArray: { key: string; value: string }[] = Array.from(this.table_sorting.entries()).map(([key, value]) => ({\n          key,\n          value,\n        }));\n        console.log(sortingArray);\n        const { url } = await this.fetchTasksWithFilters(true);\n        downloadFile(url);\n        break;\n      case 'archive':\n        this.isSidebarOpen = true;\n        break;\n    }\n  }\n  @Listen('cleanSelectedTask')\n  handleSelectedTaskCleaningEvent(e: CustomEvent<Task>) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.modalCauses = { task: e.detail, cause: 'clean' };\n    this.modal?.openModal();\n  }\n\n  private async handleModalConfirmation(e: CustomEvent) {\n    try {\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      if (hkTasksStore.selectedTasks.length === 0) {\n        return;\n      }\n      this.isCleaningLoading = true;\n      if (this.modalCauses?.cause === 'skip') {\n        const { booking_nbr, date, unit } = this.modalCauses.task;\n        await this.houseKeepingService.editHkSkip({\n          BOOK_NBR: booking_nbr,\n          DATE: date,\n          COMMENT: '',\n          HK_SKIP_ID: -1,\n          HK_SKIP_REASON_CODE: '001',\n          PR_ID: unit.id,\n        });\n      } else {\n        await this.houseKeepingService.executeHKAction({\n          actions: hkTasksStore.selectedTasks.map(t => ({ description: 'Cleaned', hkm_id: t.hkm_id === 0 ? null : t.hkm_id, unit_id: t.unit.id, booking_nbr: t.booking_nbr })),\n        });\n      }\n      await this.fetchTasksWithFilters();\n    } finally {\n      clearSelectedTasks();\n      if (this.modalCauses) {\n        this.modalCauses = null;\n      }\n      this.isCleaningLoading = false;\n      // this.clearSelectedTasks.emit();\n      this.modal.closeModal();\n    }\n  }\n\n  private async applyFilters(e: CustomEvent) {\n    try {\n      this.isApplyFiltersLoading = true;\n      e.stopImmediatePropagation();\n      e.stopPropagation();\n      this.filters = { ...e.detail };\n      await this.fetchTasksWithFilters();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isApplyFiltersLoading = false;\n    }\n  }\n\n  private async fetchTasksWithFilters(export_to_excel: boolean = false) {\n    const { cleaning_periods, housekeepers, cleaning_frequencies, dusty_units, highlight_check_ins } = this.filters ?? {};\n\n    const { tasks, url } = await this.houseKeepingService.getHkTasks({\n      housekeepers,\n      cleaning_frequency: cleaning_frequencies?.code,\n      dusty_window: dusty_units?.code,\n      highlight_window: highlight_check_ins?.code,\n      property_id: this.property_id,\n      from_date: moment().format('YYYY-MM-DD'),\n      to_date: cleaning_periods?.code || moment().format('YYYY-MM-DD'),\n      is_export_to_excel: export_to_excel,\n    });\n    console.log(tasks);\n    if (tasks) {\n      this.updateTasks(tasks);\n    }\n    return { tasks, url };\n  }\n\n  render() {\n    if (this.isLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host data-testid=\"hk_tasks_base\">\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-1 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <h3>Housekeeping Tasks</h3>\n          <div class=\"tasks-view \" style={{ gap: '1rem' }}>\n            <ir-tasks-filters\n              isLoading={this.isApplyFiltersLoading}\n              onApplyFilters={e => {\n                this.applyFilters(e);\n              }}\n            ></ir-tasks-filters>\n            <div class=\"d-flex w-100 flex-column\" style={{ gap: '1rem' }}>\n              <ir-tasks-table\n                onRowSelectChange={e => {\n                  e.stopImmediatePropagation();\n                  e.stopPropagation();\n                  updateSelectedTasks(e.detail);\n                }}\n                class=\"flex-grow-1 w-100\"\n              ></ir-tasks-table>\n              {/* <ir-tasks-table-pagination></ir-tasks-table-pagination> */}\n            </div>\n          </div>\n        </section>\n        <ir-modal\n          autoClose={false}\n          ref={el => (this.modal = el)}\n          isLoading={this.isCleaningLoading}\n          onConfirmModal={this.handleModalConfirmation.bind(this)}\n          onCancelModal={() => {\n            if (this.modalCauses) {\n              clearSelectedTasks();\n              this.modalCauses = null;\n            }\n          }}\n          iconAvailable={true}\n          icon=\"ft-alert-triangle danger h1\"\n          leftBtnText={locales.entries.Lcz_Cancel}\n          rightBtnText={locales.entries.Lcz_Confirm}\n          leftBtnColor=\"secondary\"\n          rightBtnColor={'primary'}\n          modalTitle={locales.entries.Lcz_Confirmation}\n          modalBody={\n            this.modalCauses\n              ? this.modalCauses?.cause === 'clean'\n                ? `Update ${this.modalCauses?.task?.unit?.name} to Clean`\n                : 'Skip cleaning and reschedule for tomorrow.'\n              : 'Update selected unit(s) to Clean'\n          }\n        ></ir-modal>\n        <ir-sidebar\n          open={this.isSidebarOpen}\n          id=\"editGuestInfo\"\n          onIrSidebarToggle={e => {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            this.isSidebarOpen = false;\n          }}\n          // sidebarStyles={{\n          //   width: '80vw',\n          // }}\n          showCloseButton={false}\n        >\n          {this.isSidebarOpen && <ir-hk-archive ticket={this.token.getToken()} propertyId={this.property_id} slot=\"sidebar-body\"></ir-hk-archive>}\n        </ir-sidebar>\n        {/* <ir-title class=\"d-none d-md-flex\" label={locales.entries.Lcz_HousekeepingTasks} justifyContent=\"space-between\">\n            <ir-button slot=\"title-body\" text={locales.entries.Lcz_Archive} size=\"sm\"></ir-button>\n          </ir-title> */}\n      </Host>\n    );\n  }\n}\n","import calendar_data from '@/stores/calendar-data';\nimport { downloadFile } from '@/utils/utils';\nimport axios from 'axios';\nexport type CountrySalesParams = {\n  AC_ID: number;\n  WINDOW: number;\n  FROM_DATE: string;\n  TO_DATE: string;\n  BOOK_CASE: string;\n  is_export_to_excel: boolean;\n};\nexport type MonthlyStatsParams = {\n  property_id: number;\n  from_date: string;\n  to_date: string;\n  is_export_to_excel?: boolean;\n};\nexport interface MonthlyStatsResults {\n  AverageOccupancy: number;\n  DailyStats: DailyStat[];\n  ExcelLink: null;\n  PeakDays: PeakDay[];\n  Occupancy_Difference_From_Previous_Month: number;\n  TotalUnitsBooked: number;\n}\n\nexport interface PeakDay {\n  Date: string;\n  OccupancyPercent: number;\n}\n\nexport interface DailyStat {\n  Date: string;\n  Occupancy: number;\n  Units_booked: number;\n  Rooms_Revenue: number;\n  ADR: number;\n  Total_Guests: number | undefined;\n}\nexport class PropertyService {\n  public async getExposedProperty(params: {\n    id: number | null;\n    language: string;\n    is_backend?: boolean;\n    aname?: string;\n    include_units_hk_status?: boolean;\n    include_sales_rate_plans?: boolean;\n  }) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Property`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = data.My_Result;\n      calendar_data.adultChildConstraints = results.adult_child_constraints;\n      calendar_data.allowedBookingSources = results.allowed_booking_sources;\n      calendar_data.allowed_payment_methods = results.allowed_payment_methods;\n      calendar_data.currency = results.currency;\n      calendar_data.is_vacation_rental = results.is_vacation_rental;\n      calendar_data.pickup_service = results.pickup_service;\n      calendar_data.max_nights = results.max_nights;\n      calendar_data.roomsInfo = results.roomtypes;\n      calendar_data.taxes = results.taxes;\n      calendar_data.id = results.id;\n      calendar_data.country = results.country;\n      calendar_data.name = results.name;\n      calendar_data.is_automatic_check_in_out = results.is_automatic_check_in_out;\n      calendar_data.tax_statement = results.tax_statement;\n      calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\n      calendar_data.is_pms_enabled = results.is_pms_enabled;\n      const spitTime = results?.time_constraints?.check_out_till?.split(':');\n      calendar_data.checkin_checkout_hours = {\n        offset: results.city.gmt_offset,\n        hour: Number(spitTime[0] || 0),\n        minute: Number(spitTime[1] || 0),\n      };\n      return data;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  public async getCountrySales(params: CountrySalesParams) {\n    const { data } = await axios.post('/Get_Country_Sales', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Country_Sales.Link_excel);\n    }\n    return data.My_Result;\n  }\n  public async setExposedCleaningFrequency(params: { property_id: number; code: string }) {\n    const { data } = await axios.post('/Set_Exposed_Cleaning_Frequency', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data.My_Result;\n  }\n  public async getMonthlyStats(params: MonthlyStatsParams): Promise<MonthlyStatsResults> {\n    const { data } = await axios.post('/Get_Monthly_Stats', params);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    if (params.is_export_to_excel) {\n      downloadFile(data.My_Params_Get_Monthly_Stats.Link_excel);\n    }\n    return data.My_Result;\n  }\n}\n",":host {\n  display: block;\n}\n","import Token from '@/models/Token';\nimport { HouseKeepingService } from '@/services/housekeeping.service';\nimport { RoomService } from '@/services/room.service';\nimport calendar_data from '@/stores/calendar-data';\nimport housekeeping_store, { updateHKStore } from '@/stores/housekeeping.store';\nimport { Component, Event, EventEmitter, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { IToast } from '@components/ui/ir-toast/toast';\nimport locales from '@/stores/locales.store';\nimport { PropertyService } from '@/services/property.service';\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\n@Component({\n  tag: 'ir-housekeeping',\n  styleUrl: 'ir-housekeeping.css',\n  scoped: true,\n})\nexport class IrHousekeeping {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n\n  @Prop() propertyid: number;\n  @Prop() p: string;\n  @Prop() baseUrl: string;\n\n  @State() isLoading = false;\n\n  @Event() toast: EventEmitter<IToast>;\n\n  private roomService = new RoomService();\n  private houseKeepingService = new HouseKeepingService();\n  private propertyService = new PropertyService();\n  private token = new Token();\n  modal: HTMLIrModalElement;\n  selectedCleaningFrequency: any;\n\n  componentWillLoad() {\n    if (this.baseUrl) {\n      this.token.setBaseUrl(this.baseUrl);\n    }\n    if (this.ticket !== '') {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n  @Listen('resetData')\n  async handleResetData(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    await this.houseKeepingService.getExposedHKSetup(this.propertyid);\n  }\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n\n  async initializeApp() {\n    try {\n      this.isLoading = true;\n      let propertyId = this.propertyid;\n      if (!propertyId) {\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_sales_rate_plans: true,\n        });\n        propertyId = propertyData.My_Result.id;\n      }\n      updateHKStore('default_properties', { token: this.ticket, property_id: propertyId, language: this.language });\n      const requests: Array<Promise<any>> = [];\n      if (calendar_data.housekeeping_enabled) {\n        requests.push(this.houseKeepingService.getExposedHKSetup(propertyId));\n      }\n      requests.push(this.roomService.fetchLanguage(this.language, ['_HK_FRONT', '_PMS_FRONT']));\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: propertyId,\n            language: this.language,\n            is_backend: true,\n            include_sales_rate_plans: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n      this.selectedCleaningFrequency = calendar_data.cleaning_frequency?.code;\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n  private async saveAutomaticCheckInCheckout(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    try {\n      await this.roomService.SetAutomaticCheckInOut({\n        property_id: housekeeping_store.default_properties.property_id,\n        flag: e.detail === 'auto',\n      });\n      this.toast.emit({\n        position: 'top-right',\n        title: 'Saved Successfully',\n        description: '',\n        type: 'success',\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  private async saveCleaningFrequency(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    try {\n      await this.propertyService.setExposedCleaningFrequency({\n        property_id: housekeeping_store.default_properties.property_id,\n        code: this.selectedCleaningFrequency,\n      });\n      calendar_data.cleaning_frequency = { code: this.selectedCleaningFrequency, description: '' };\n      this.toast.emit({\n        position: 'top-right',\n        title: 'Saved Successfully',\n        description: '',\n        type: 'success',\n      });\n      this.modal.closeModal();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  render() {\n    if (this.isLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    console.log(calendar_data.cleaning_frequency);\n    return (\n      <Host>\n        <ir-interceptor></ir-interceptor>\n        <ir-toast></ir-toast>\n        <section class=\"p-1\">\n          <h3 class=\"mb-2\">{locales.entries.Lcz_HouseKeepingAndCheckInSetup}</h3>\n          <div class=\"card p-1\">\n            <ir-title borderShown label=\"Operations Settings\"></ir-title>\n            <div class={'d-flex align-items-center mb-1'}>\n              <p class=\"my-0 py-0 mr-1\">{locales.entries.Lcz_CheckInOutGuestsAutomatically}</p>\n              <ir-select\n                LabelAvailable={false}\n                showFirstOption={false}\n                selectedValue={calendar_data.is_automatic_check_in_out ? 'auto' : 'manual'}\n                onSelectChange={e => this.saveAutomaticCheckInCheckout(e)}\n                data={[\n                  { text: locales.entries.Lcz_YesAsPerPropertyPolicy, value: 'auto' },\n                  { text: locales.entries.Lcz_NoIWillDoItManually, value: 'manual' },\n                ]}\n              ></ir-select>\n            </div>\n            <div class={'d-flex align-items-center'}>\n              <p class=\"my-0 py-0 mr-1\">{locales.entries.Lcz_CleaningFrequency}:</p>\n              <ir-select\n                LabelAvailable={false}\n                showFirstOption={false}\n                selectedValue={this.selectedCleaningFrequency}\n                onSelectChange={e => {\n                  e.stopImmediatePropagation();\n                  e.stopPropagation();\n                  this.selectedCleaningFrequency = e.detail;\n                  this.modal.openModal();\n                }}\n                data={housekeeping_store?.hk_criteria?.cleaning_frequencies.map(v => ({\n                  text: v.description,\n                  value: v.code,\n                }))}\n              ></ir-select>\n            </div>\n          </div>\n          {/*<ir-unit-status class=\"mb-1\"></ir-unit-status>*/}\n          {calendar_data.housekeeping_enabled && <ir-hk-team class=\"mb-1\"></ir-hk-team>}\n          <ir-modal\n            autoClose={false}\n            ref={el => (this.modal = el)}\n            isLoading={isRequestPending('/Set_Exposed_Cleaning_Frequency')}\n            onConfirmModal={this.saveCleaningFrequency.bind(this)}\n            iconAvailable={true}\n            onCancelModal={() => {\n              this.selectedCleaningFrequency = calendar_data.cleaning_frequency?.code;\n            }}\n            icon=\"ft-alert-triangle danger h1\"\n            leftBtnText={locales.entries.Lcz_Cancel}\n            rightBtnText={locales.entries.Lcz_Confirm}\n            leftBtnColor=\"secondary\"\n            rightBtnColor={'primary'}\n            modalTitle={locales.entries.Lcz_Confirmation}\n            modalBody={'This action will reschedule all cleaning tasks. Do you want to continue?'}\n          ></ir-modal>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import Token from '@/models/Token';\nimport { Component, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { DailyReport, DailyReportFilter } from './types';\nimport moment from 'moment';\nimport locales from '@/stores/locales.store';\nimport { RoomService } from '@/services/room.service';\nimport { DailyStat, MonthlyStatsResults, PropertyService } from '@/services/property.service';\n\n@Component({\n  tag: 'ir-monthly-bookings-report',\n  styleUrl: 'ir-monthly-bookings-report.css',\n  scoped: true,\n})\nexport class IrMonthlyBookingsReport {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: number;\n  @Prop() p: string;\n\n  @State() isPageLoading = true;\n  @State() isLoading: 'export' | 'filter' | null = null;\n\n  @State() reports: DailyReport[] = [];\n  @State() filters: DailyReportFilter;\n  @State() property_id: number;\n  @State() stats: Omit<MonthlyStatsResults, 'DailyStats'>;\n\n  private baseFilters: DailyReportFilter;\n\n  private tokenService = new Token();\n  private roomService = new RoomService();\n  private propertyService = new PropertyService();\n\n  componentWillLoad() {\n    this.baseFilters = {\n      date: {\n        description: moment().format('MMMM YYYY'),\n        firstOfMonth: moment().startOf('month').format('YYYY-MM-DD'),\n        lastOfMonth: moment().endOf('month').format('YYYY-MM-DD'),\n      },\n      include_previous_year: false,\n    };\n    this.filters = this.baseFilters;\n    if (this.ticket) {\n      this.tokenService.setToken(this.ticket);\n      this.init();\n    }\n  }\n  @Watch('ticket')\n  handleTicketChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.tokenService.setToken(this.ticket);\n      this.init();\n    }\n  }\n  @Listen('applyFilters')\n  handleApplyFiltersChange(e: CustomEvent<DailyReportFilter>) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    this.filters = e.detail;\n    this.getReports();\n  }\n\n  private async init() {\n    try {\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.roomService.fetchLanguage(this.language), this.getReports()];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isPageLoading = false;\n    }\n  }\n\n  private async getReports(isExportToExcel = false) {\n    try {\n      const getReportObj = (report: DailyStat): DailyReport => {\n        return {\n          day: report.Date,\n          units_booked: report.Units_booked,\n          occupancy_percent: report.Occupancy,\n          adr: report.ADR,\n          rooms_revenue: report.Rooms_Revenue,\n          total_guests: report?.Total_Guests,\n        };\n      };\n      this.isLoading = isExportToExcel ? 'export' : 'filter';\n      const { date, include_previous_year } = this.filters;\n\n      const requests = [\n        this.propertyService.getMonthlyStats({\n          from_date: date.firstOfMonth,\n          to_date: date.lastOfMonth,\n          property_id: this.property_id,\n          is_export_to_excel: isExportToExcel,\n        }),\n      ];\n\n      if (include_previous_year) {\n        requests.push(\n          this.propertyService.getMonthlyStats({\n            from_date: moment(date.firstOfMonth, 'YYYY-MM-DD').add(-1, 'year').format('YYYY-MM-DD'),\n            to_date: moment(date.lastOfMonth, 'YYYY-MM-DD').add(-1, 'years').format('YYYY-MM-DD'),\n            property_id: this.property_id,\n          }),\n        );\n      }\n\n      const results = await Promise.all(requests);\n      const currentReports = results[0];\n      let enrichedReports: DailyReport[] = [];\n      const { DailyStats, ...rest } = currentReports;\n\n      this.stats = { ...rest };\n\n      if (include_previous_year && results[isExportToExcel ? 0 : 1]) {\n        const previousYearReports = results[isExportToExcel ? 0 : 1];\n        let formattedReports = previousYearReports.DailyStats.map(getReportObj);\n        enrichedReports = DailyStats.map(getReportObj).map(current => {\n          const previous = formattedReports.find(prev => prev.day === moment(current.day, 'YYYY-MM-DD').add(-1, 'years').format('YYYY-MM-DD'));\n          return {\n            ...current,\n            last_year: previous ?? null,\n          };\n        });\n      } else {\n        enrichedReports = DailyStats.map(getReportObj);\n      }\n      this.reports = [...enrichedReports];\n    } catch (e) {\n      console.log(e);\n    } finally {\n      this.isLoading = null;\n    }\n  }\n  render() {\n    if (this.isPageLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">Daily Occupancy</h3>\n            <ir-button\n              size=\"sm\"\n              btn_color=\"outline\"\n              isLoading={this.isLoading === 'export'}\n              text={locales.entries?.Lcz_Export}\n              onClickHandler={async e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                await this.getReports(true);\n              }}\n              btnStyle={{ height: '100%' }}\n              iconPosition=\"right\"\n              icon_name=\"file\"\n              icon_style={{ '--icon-size': '14px' }}\n            ></ir-button>\n          </div>\n          <section>\n            <div class=\"d-flex flex-column flex-md-row w-100\" style={{ gap: '1rem', alignItems: 'stretch' }}>\n              <ir-report-stats-card\n                icon={this.stats?.Occupancy_Difference_From_Previous_Month < 0 ? 'arrow-trend-down' : 'arrow-trend-up'}\n                cardTitle=\"Average Occupancy\"\n                value={this.stats.AverageOccupancy ? this.stats?.AverageOccupancy.toFixed(2) + '%' : null}\n                subtitle={`${this.stats?.Occupancy_Difference_From_Previous_Month < 0 ? '' : '+'}${this.stats?.Occupancy_Difference_From_Previous_Month.toFixed(\n                  2,\n                )}% from last month`}\n              ></ir-report-stats-card>\n\n              <ir-report-stats-card\n                icon=\"hotel\"\n                cardTitle=\"Total Units\"\n                value={this.stats?.TotalUnitsBooked ? this.stats?.TotalUnitsBooked.toString() : null}\n                subtitle=\"Booked\"\n              ></ir-report-stats-card>\n\n              <ir-report-stats-card\n                icon=\"user_group\"\n                cardTitle=\"Total Guests\"\n                value={this.reports?.reduce((prev, curr) => prev + curr.total_guests, 0)?.toString()}\n                subtitle=\"Stayed\"\n              ></ir-report-stats-card>\n\n              <ir-report-stats-card\n                icon=\"calendar\"\n                cardTitle=\"Peak Days\"\n                value={this.stats?.PeakDays.length === 0 ? null : this.stats?.PeakDays?.map(pd => moment(pd.Date, 'YYYY-MM-DD').format('D').concat('th')).join(' - ')}\n                subtitle={`${Math.max(...(this.stats.PeakDays?.map(pd => pd.OccupancyPercent) || []))}% occupancy`}\n              ></ir-report-stats-card>\n            </div>\n            <div class=\"d-flex flex-column flex-lg-row mt-1 \" style={{ gap: '1rem' }}>\n              <ir-monthly-bookings-report-filter isLoading={this.isLoading === 'filter'} class=\"filters-card\" baseFilters={this.baseFilters}></ir-monthly-bookings-report-filter>\n              <ir-monthly-bookings-report-table reports={this.reports}></ir-monthly-bookings-report-table>\n            </div>\n          </section>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import Token from '@/models/Token';\nimport { PropertyService } from '@/services/property.service';\nimport { RoomService } from '@/services/room.service';\nimport locales from '@/stores/locales.store';\nimport { Component, Host, Prop, State, Watch, h } from '@stencil/core';\nimport { BaseSalesRecord, CountrySalesFilter, MappedCountries, SalesRecord } from './types';\nimport moment from 'moment';\nimport { v4 } from 'uuid';\nimport { BookingService } from '@/services/booking.service';\nimport { ICountry } from '@/models/IBooking';\n\n@Component({\n  tag: 'ir-sales-by-country',\n  styleUrl: 'ir-sales-by-country.css',\n  scoped: true,\n})\nexport class IrSalesByCountry {\n  @Prop() language: string = '';\n  @Prop() ticket: string = '';\n  @Prop() propertyid: number;\n  @Prop() p: string;\n\n  @State() isLoading: 'filter' | 'export' | null = null;\n  @State() isPageLoading = true;\n  @State() property_id: number;\n  @State() salesData: SalesRecord[];\n  @State() salesFilters: CountrySalesFilter;\n  @State() countries: MappedCountries = new Map();\n\n  private token = new Token();\n  private roomService = new RoomService();\n  private propertyService = new PropertyService();\n  private bookingService = new BookingService();\n\n  private baseFilters = {\n    FROM_DATE: moment().add(-7, 'days').format('YYYY-MM-DD'),\n    TO_DATE: moment().format('YYYY-MM-DD'),\n    BOOK_CASE: '001',\n    WINDOW: 7,\n    include_previous_year: false,\n  };\n\n  componentWillLoad() {\n    this.salesFilters = this.baseFilters;\n    if (this.ticket) {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n  private async initializeApp() {\n    try {\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.bookingService.getCountries(this.language), this.roomService.fetchLanguage(this.language), this.getCountrySales()];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      const [countries] = await Promise.all(requests);\n      const mappedCountries = new Map();\n      (countries as ICountry[]).map(country => {\n        mappedCountries.set(country.id, {\n          flag: country.flag,\n          name: country.name,\n        });\n      });\n      this.countries = mappedCountries;\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isPageLoading = false;\n    }\n  }\n\n  private async getCountrySales(isExportToExcel = false) {\n    const formatSalesData = (data): Omit<BaseSalesRecord, 'id'> => {\n      return {\n        country: data.COUNTRY,\n        country_id: data.COUNTRY_ID,\n        nights: data.NIGHTS,\n        percentage: data.PCT,\n        revenue: data.REVENUE,\n        number_of_guests: data.Total_Guests,\n      };\n    };\n    try {\n      const { include_previous_year, ...filterParams } = this.salesFilters;\n      this.isLoading = isExportToExcel ? 'export' : 'filter';\n\n      const currentSales = await this.propertyService.getCountrySales({\n        AC_ID: this.property_id,\n        is_export_to_excel: isExportToExcel,\n        ...filterParams,\n      });\n\n      const shouldFetchPreviousYear = !isExportToExcel && include_previous_year;\n\n      let enrichedSales: SalesRecord[] = [];\n\n      if (shouldFetchPreviousYear) {\n        const previousYearSales = await this.propertyService.getCountrySales({\n          AC_ID: this.property_id,\n          is_export_to_excel: false,\n          ...filterParams,\n          FROM_DATE: moment(filterParams.FROM_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n          TO_DATE: moment(filterParams.TO_DATE).subtract(1, 'year').format('YYYY-MM-DD'),\n        });\n\n        enrichedSales = currentSales.map(current => {\n          const previous = previousYearSales.find(prev => prev.COUNTRY.toLowerCase() === current.COUNTRY.toLowerCase());\n          return {\n            id: v4(),\n            ...formatSalesData(current),\n            last_year: previous ? formatSalesData(previous) : null,\n          };\n        });\n      } else {\n        enrichedSales = currentSales.map(record => ({\n          id: v4(),\n          ...formatSalesData(record),\n          last_year: null,\n        }));\n      }\n\n      // this.salesData = enrichedSales.sort((a, b) => {\n      //   if (a.country_id === 0) return -1;\n      //   if (b.country_id === 0) return 1;\n      //   return 0;\n      // });\n      this.salesData = [...enrichedSales];\n    } catch (error) {\n      console.error('Failed to fetch sales data:', error);\n    } finally {\n      this.isLoading = null;\n    }\n  }\n  render() {\n    if (this.isPageLoading) {\n      return <ir-loading-screen></ir-loading-screen>;\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">Sales by Country</h3>\n            <ir-button\n              size=\"sm\"\n              btn_color=\"outline\"\n              isLoading={this.isLoading === 'export'}\n              text={locales.entries.Lcz_Export}\n              onClickHandler={async e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                await this.getCountrySales(true);\n              }}\n              btnStyle={{ height: '100%' }}\n              iconPosition=\"right\"\n              icon_name=\"file\"\n              icon_style={{ '--icon-size': '14px' }}\n            ></ir-button>\n          </div>\n          <div class=\"d-flex flex-column flex-lg-row mt-1 \" style={{ gap: '1rem' }}>\n            <ir-sales-filters\n              isLoading={this.isLoading === 'filter'}\n              onApplyFilters={e => {\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n                this.salesFilters = e.detail;\n                this.getCountrySales();\n              }}\n              class=\"filters-card\"\n              baseFilters={this.baseFilters}\n            ></ir-sales-filters>\n            <ir-sales-table mappedCountries={this.countries} class=\"card mb-0\" records={this.salesData}></ir-sales-table>\n          </div>\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n  height: 100%;\n}\n","import Token from '@/models/Token';\nimport { User } from '@/models/Users';\nimport { BookingService } from '@/services/booking.service';\nimport { RoomService } from '@/services/room.service';\nimport { UserService } from '@/services/user.service';\nimport { Component, Host, Listen, Prop, State, Watch, h } from '@stencil/core';\nimport { AllowedUser } from './types';\nimport { bookingReasons } from '@/models/IBooking';\nimport { io, Socket } from 'socket.io-client';\nimport locales from '@/stores/locales.store';\n\n@Component({\n  tag: 'ir-user-management',\n  styleUrl: 'ir-user-management.css',\n  scoped: true,\n})\nexport class IrUserManagement {\n  @Prop() language: string = '';\n  @Prop() baseUrl: string;\n  @Prop() ticket: string;\n  @Prop() propertyid: number;\n  @Prop() p: string;\n  @Prop() isSuperAdmin: boolean = true;\n  @Prop() userTypeCode: string | number;\n  @Prop() baseUserTypeCode: string | number;\n  @Prop() userId: string | number;\n\n  @State() isLoading = true;\n  @State() users: User[] = [];\n  @State() property_id: number;\n  @State() allowedUsersTypes: AllowedUser[] = [];\n\n  private token = new Token();\n  private roomService = new RoomService();\n  private userService = new UserService();\n  private bookingService = new BookingService();\n\n  private userTypes: Map<number | string, string> = new Map();\n  private socket: Socket;\n\n  private superAdminId = '5';\n\n  componentWillLoad() {\n    if (this.baseUrl) {\n      this.token.setBaseUrl(this.baseUrl);\n    }\n    if (this.ticket) {\n      this.token.setToken(this.ticket);\n      this.initializeApp();\n    }\n  }\n\n  @Watch('ticket')\n  ticketChanged(newValue: string, oldValue: string) {\n    if (newValue === oldValue) {\n      return;\n    }\n    this.token.setToken(this.ticket);\n    this.initializeApp();\n  }\n\n  @Listen('resetData')\n  async handleResetData(e: CustomEvent) {\n    e.stopImmediatePropagation();\n    e.stopPropagation();\n    await this.fetchUsers();\n  }\n\n  private async initializeApp() {\n    try {\n      if (this.baseUrl) {\n        this.token.setBaseUrl(this.baseUrl);\n      }\n      this.isLoading = true;\n      let propertyId = this.propertyid;\n      if (!this.propertyid && !this.p) {\n        throw new Error('Property ID or username is required');\n      }\n      // let roomResp = null;\n      if (!propertyId) {\n        console.log(propertyId);\n        const propertyData = await this.roomService.getExposedProperty({\n          id: 0,\n          aname: this.p,\n          language: this.language,\n          is_backend: true,\n          include_units_hk_status: true,\n        });\n        // roomResp = propertyData;\n        propertyId = propertyData.My_Result.id;\n      }\n      this.property_id = propertyId;\n      const requests = [this.fetchUserTypes(), this.fetchUsers(), this.roomService.fetchLanguage(this.language, ['_USER_MGT'])];\n      if (this.propertyid) {\n        requests.push(\n          this.roomService.getExposedProperty({\n            id: this.propertyid,\n            language: this.language,\n            is_backend: true,\n            include_units_hk_status: true,\n          }),\n        );\n      }\n\n      await Promise.all(requests);\n      this.socket = io('https://realtime.igloorooms.com/');\n      this.socket.on('MSG', async msg => {\n        await this.handleSocketMessage(msg);\n      });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async handleSocketMessage(msg: string) {\n    const msgAsObject = JSON.parse(msg);\n    if (!msgAsObject) {\n      return;\n    }\n\n    const { REASON, KEY, PAYLOAD }: { REASON: bookingReasons; KEY: any; PAYLOAD: any } = msgAsObject;\n\n    if (KEY.toString() !== this.property_id.toString()) {\n      return;\n    }\n\n    let result = JSON.parse(PAYLOAD);\n    console.log(KEY, result);\n    // const reasonHandlers: Partial<Record<bookingReasons, Function>> = {\n    //   DORESERVATION: this.updateUserVerificationStatus,\n    // };\n    const reasonHandlers: Partial<Record<bookingReasons, Function>> = {\n      EMAIL_VERIFIED: this.updateUserVerificationStatus,\n    };\n    const handler = reasonHandlers[REASON];\n    if (handler) {\n      await handler.call(this, result);\n    } else {\n      console.warn(`Unhandled REASON: ${REASON}`);\n    }\n  }\n\n  public updateUserVerificationStatus(result: { id: string | number }) {\n    const users = [...this.users];\n    const idx = users.findIndex(u => u.id === result.id);\n    if (idx === -1) {\n      console.warn(`User ${result.id} not found`);\n      return;\n    }\n    users[idx] = {\n      ...users[idx],\n      is_email_verified: true,\n    };\n    this.users = users;\n  }\n\n  private async fetchUsers() {\n    const users = await this.userService.getExposedPropertyUsers({ property_id: this.propertyid });\n    this.users = [...users].sort((u1: User, u2: User) => {\n      const priority = (u: User) => {\n        const t = u.type.toString();\n        if (t === this.superAdminId) return 0;\n        if (t === '17') return 1;\n        return 2;\n      };\n      //sort by priority\n      const p1 = priority(u1),\n        p2 = priority(u2);\n      if (p1 !== p2) {\n        return p1 - p2;\n      }\n      // //sort by user id\n      // if (p1 === 1) {\n      //   const id1 = u1.id.toString(),\n      //     id2 = u2.id.toString(),\n      //     me = this.userId.toString();\n      //   if (id1 === me) return -1; // u1 is me → goes before u2\n      //   if (id2 === me) return 1; // u2 is me → u1 goes after\n      // }\n\n      // 3) sort by username\n      return u1.username.localeCompare(u2.username);\n    });\n  }\n  private async fetchUserTypes() {\n    const res = await Promise.all([this.bookingService.getSetupEntriesByTableName('_USER_TYPE'), this.bookingService.getLov()]);\n    const allowedUsers = res[1]?.My_Result?.allowed_user_types;\n    for (const e of res[0]) {\n      const value = e[`CODE_VALUE_${this.language?.toUpperCase() ?? 'EN'}`];\n      if (allowedUsers.find(f => f.code === e.CODE_NAME)) {\n        this.allowedUsersTypes.push({ code: e.CODE_NAME, value });\n      }\n      this.userTypes.set(e.CODE_NAME.toString(), value);\n    }\n  }\n  disconnectedCallback() {\n    this.socket.disconnect();\n  }\n  render() {\n    if (this.isLoading) {\n      return (\n        <Host>\n          <ir-toast></ir-toast>\n          <ir-interceptor></ir-interceptor>\n          <ir-loading-screen></ir-loading-screen>\n        </Host>\n      );\n    }\n    return (\n      <Host>\n        <ir-toast></ir-toast>\n        <ir-interceptor suppressToastEndpoints={['/Change_User_Pwd', '/Handle_Exposed_User']}></ir-interceptor>\n        <section class=\"p-2 d-flex flex-column\" style={{ gap: '1rem' }}>\n          <div class=\"d-flex  pb-2 align-items-center justify-content-between\">\n            <h3 class=\"mb-1 mb-md-0\">{locales.entries.Lcz_ExtranetUsers}</h3>\n          </div>\n\n          <div class=\"\" style={{ gap: '1rem' }}>\n            <ir-user-management-table\n              property_id={this.property_id}\n              baseUserTypeCode={this.baseUserTypeCode}\n              allowedUsersTypes={this.allowedUsersTypes}\n              userTypeCode={this.userTypeCode}\n              haveAdminPrivileges={[this.superAdminId, '17'].includes(this.userTypeCode?.toString())}\n              userTypes={this.userTypes}\n              class=\"card\"\n              isSuperAdmin={this.userTypeCode?.toString() === this.superAdminId}\n              users={this.users}\n            ></ir-user-management-table>\n          </div>\n        </section>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}