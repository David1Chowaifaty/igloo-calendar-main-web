{"version":3,"names":["irMComboboxCss","IrMComboboxStyle0","IrMCombobox","constructor","hostRef","this","dataMode","options","debounceDelay","loading","useSlot","isOpen","focusedIndex","filteredOptions","slotElements","id","v4","dropdownId","handleDocumentClick","event","el","contains","target","closeDropdown","handleKeyDown","maxIndex","length","key","preventDefault","openDropdown","Math","min","focusSlotElement","scrollToFocusedOption","max","selectSlotElement","selectOption","handleInput","value","emitSearchQuery","allOptions","filter","option","label","toLowerCase","includes","selectOptionFromSlot","watchOptionsChanged","newOptions","updateSlotElements","watchUseSlotChanged","setTimeout","componentWillLoad","initializeOptions","componentDidLoad","document","addEventListener","bind","disconnectedCallback","removeEventListener","debounceTimeout","clearTimeout","handleDocumentKeyDown","_a","inputRef","focus","selectedOption","findIndex","v","query","searchQuery","emit","removeSlotFocus","dropdownRef","slotElement","querySelector","assignedElements","Array","from","querySelectorAll","forEach","element","index","setAttribute","toString","classList","remove","removeAttribute","add","scrollIntoView","block","click","optionChange","focusedElement","render","h","Host","ref","type","class","role","placeholder","String","onKeyDown","onInput","name","map","onClick","onMouseEnter"],"sources":["src/components/ir-m-combobox/ir-m-combobox.css?tag=ir-m-combobox&encapsulation=scoped","src/components/ir-m-combobox/ir-m-combobox.tsx"],"sourcesContent":[":host {\n  position: relative;\n  display: block;\n}\n\n.dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  width: 100%;\n}\n\n.dropdown-menu {\n  max-height: var(--ir-combobox-height, 200px);\n  overflow-y: auto;\n  min-width: 100%;\n  width: var(--ir-combobox-width, 100%) !important;\n  scroll-behavior: smooth;\n}\n\n.dropdown-item.loading,\n.dropdown-item.no-results {\n  color: #6c757d;\n  cursor: default;\n  pointer-events: none;\n}\n.dropdown-item {\n  padding: 0.5rem 1rem !important;\n}\n\n.dropdown-item.active,\n.dropdown-item.focused {\n  background-color: var(--blue, #1e9ff2) !important;\n  color: white !important;\n}\n\n/* Slot content focus styles */\n[slot='dropdown-content'] .dropdown-item.focused,\n[slot='dropdown-content'] .dropdown-item.active {\n  background-color: #1e9ff2 !important;\n  color: white !important;\n}\n\n[slot='dropdown-content'] [data-option].focused,\n[slot='dropdown-content'] [data-option].active {\n  background-color: #1e9ff2 !important;\n  color: white !important;\n}\n","import { Component, Host, h, Element, State, Listen, Prop, Event, EventEmitter, Watch, Method } from '@stencil/core';\nimport { v4 } from 'uuid';\n\nexport interface ComboboxOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\nexport type ComboboxType = 'select' | 'editable' | 'multiselect';\nexport type DataMode = 'static' | 'external';\n\n@Component({\n  tag: 'ir-m-combobox',\n  styleUrl: 'ir-m-combobox.css',\n  scoped: true,\n})\nexport class IrMCombobox {\n  @Element() el: HTMLElement;\n\n  /**\n   * Placeholder text displayed in the input when no option is selected.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * Determines how the options are loaded into the component.\n   * - 'static': Uses the options passed through the `options` prop or the default internal list.\n   * - 'external': Emits search events for external handling, options updated via `options` prop.\n   *\n   * @default 'static'\n   */\n  @Prop() dataMode: DataMode = 'static';\n\n  /**\n   * List of available options for the combobox when using static data mode.\n   * If empty, falls back to a default internal option list.\n   */\n  @Prop() options: ComboboxOption[] = [];\n\n  /**\n   * Debounce delay in milliseconds for search events when using external data mode.\n   * @default 300\n   */\n  @Prop() debounceDelay: number = 300;\n\n  /**\n   * Whether to show loading state\n   */\n  @Prop() loading: boolean = false;\n\n  /**\n   * Whether to use slot content for custom dropdown rendering\n   */\n  @Prop() useSlot: boolean = false;\n\n  @State() isOpen: boolean = false;\n  @State() selectedOption: ComboboxOption;\n  @State() focusedIndex: number = -1;\n  @State() filteredOptions: ComboboxOption[] = [];\n  @State() slotElements: HTMLElement[] = [];\n\n  /**\n   * Emitted when a user selects an option from the combobox.\n   * The event payload contains the selected `ComboboxOption` object.\n   */\n  @Event() optionChange: EventEmitter<ComboboxOption>;\n\n  /**\n   * Emitted when the user types in the input field (debounced).\n   * Used for external data fetching in 'external' data mode.\n   */\n  @Event() searchQuery: EventEmitter<string>;\n\n  /**\n   * Public method to select an option from external slot content\n   */\n  @Method()\n  async selectOptionFromSlot(option: ComboboxOption) {\n    this.selectOption(option);\n  }\n\n  private inputRef: HTMLInputElement;\n  private dropdownRef: HTMLElement;\n  private id = v4();\n  private dropdownId = `dropdown-${this.id}`;\n  private debounceTimeout: NodeJS.Timeout;\n\n  @Watch('options')\n  watchOptionsChanged(newOptions: ComboboxOption[]) {\n    this.filteredOptions = newOptions || [];\n    if (this.useSlot) {\n      this.updateSlotElements();\n    }\n  }\n\n  @Watch('useSlot')\n  watchUseSlotChanged() {\n    if (this.useSlot) {\n      setTimeout(() => this.updateSlotElements(), 0);\n    }\n  }\n\n  componentWillLoad() {\n    this.initializeOptions();\n  }\n\n  componentDidLoad() {\n    document.addEventListener('click', this.handleDocumentClick.bind(this));\n    if (this.useSlot) {\n      setTimeout(() => this.updateSlotElements(), 0);\n    }\n  }\n\n  disconnectedCallback() {\n    document.removeEventListener('click', this.handleDocumentClick.bind(this));\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout);\n    }\n  }\n\n  @Listen('keydown', { target: 'document' })\n  handleDocumentKeyDown(event: KeyboardEvent) {\n    if (!this.isOpen) return;\n\n    if (event.key === 'Escape') {\n      this.closeDropdown();\n      this.inputRef?.focus();\n    }\n  }\n\n  private initializeOptions() {\n    this.filteredOptions = this.options.length > 0 ? this.options : [];\n  }\n\n  private handleDocumentClick = (event: Event) => {\n    if (!this.el.contains(event.target as Node)) {\n      this.closeDropdown();\n    }\n  };\n\n  private openDropdown() {\n    this.isOpen = true;\n    if (this.useSlot) {\n      this.focusedIndex = -1;\n      setTimeout(() => this.updateSlotElements(), 0);\n    } else {\n      this.focusedIndex = this.selectedOption ? this.filteredOptions.findIndex(v => v.value === this.selectedOption.value) : -1;\n    }\n  }\n\n  private emitSearchQuery(query: string) {\n    if (this.debounceTimeout) {\n      clearTimeout(this.debounceTimeout);\n    }\n\n    this.debounceTimeout = setTimeout(() => {\n      this.searchQuery.emit(query);\n    }, this.debounceDelay);\n  }\n\n  private closeDropdown() {\n    this.isOpen = false;\n    this.focusedIndex = -1;\n    this.removeSlotFocus();\n  }\n\n  private updateSlotElements() {\n    if (!this.useSlot || !this.dropdownRef) return;\n\n    const slotElement = this.dropdownRef.querySelector('slot[name=\"dropdown-content\"]');\n    if (slotElement) {\n      const assignedElements = (slotElement as any).assignedElements\n        ? (slotElement as any).assignedElements()\n        : Array.from(this.el.querySelectorAll('[slot=\"dropdown-content\"] [data-option]'));\n\n      this.slotElements = assignedElements.length > 0 ? assignedElements : Array.from(this.dropdownRef.querySelectorAll('[data-option], .dropdown-item[style*=\"cursor\"]'));\n\n      this.slotElements.forEach((element, index) => {\n        element.setAttribute('data-slot-index', index.toString());\n        element.setAttribute('role', 'option');\n        element.setAttribute('tabindex', '-1');\n      });\n    }\n  }\n\n  private removeSlotFocus() {\n    this.slotElements.forEach(element => {\n      element.classList.remove('focused', 'active');\n      element.removeAttribute('aria-selected');\n    });\n  }\n\n  private focusSlotElement(index: number) {\n    this.removeSlotFocus();\n    if (index >= 0 && index < this.slotElements.length) {\n      const element = this.slotElements[index];\n      element.classList.add('focused', 'active');\n      element.setAttribute('aria-selected', 'true');\n      element.scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  private selectSlotElement(index: number) {\n    if (index >= 0 && index < this.slotElements.length) {\n      const element = this.slotElements[index];\n      element.click();\n    }\n  }\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    const maxIndex = this.useSlot ? this.slotElements.length - 1 : this.filteredOptions.length - 1;\n\n    switch (event.key) {\n      case 'ArrowDown':\n        event.preventDefault();\n        if (!this.isOpen) {\n          this.openDropdown();\n        } else {\n          this.focusedIndex = Math.min(this.focusedIndex + 1, maxIndex);\n          if (this.useSlot) {\n            this.focusSlotElement(this.focusedIndex);\n          } else {\n            this.scrollToFocusedOption();\n          }\n        }\n        break;\n\n      case 'ArrowUp':\n        event.preventDefault();\n        if (this.isOpen) {\n          this.focusedIndex = Math.max(this.focusedIndex - 1, 0);\n          if (this.useSlot) {\n            this.focusSlotElement(this.focusedIndex);\n          } else {\n            this.scrollToFocusedOption();\n          }\n        }\n        break;\n\n      case 'Enter':\n        event.preventDefault();\n        if (this.isOpen && this.focusedIndex >= 0) {\n          if (this.useSlot) {\n            this.selectSlotElement(this.focusedIndex);\n          } else {\n            this.selectOption(this.filteredOptions[this.focusedIndex]);\n          }\n        } else if (!this.isOpen) {\n          this.openDropdown();\n        }\n        break;\n\n      case 'Escape':\n        event.preventDefault();\n        this.closeDropdown();\n        break;\n\n      case 'Tab':\n        if (this.isOpen) {\n          this.closeDropdown();\n        }\n        break;\n    }\n  };\n\n  private selectOption(option: ComboboxOption) {\n    this.selectedOption = option;\n    this.optionChange.emit(option);\n    this.closeDropdown();\n    this.inputRef.focus();\n  }\n\n  private scrollToFocusedOption() {\n    if (this.focusedIndex < 0 || !this.dropdownRef || this.useSlot) return;\n\n    const focusedElement = this.dropdownRef.querySelector(`#${this.dropdownId}-option-${this.focusedIndex}`) as HTMLElement;\n    if (focusedElement) {\n      focusedElement.scrollIntoView({ block: 'nearest' });\n    }\n  }\n\n  private handleInput = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const value = target.value;\n\n    if (this.dataMode === 'external') {\n      this.emitSearchQuery(value);\n    } else {\n      const allOptions = this.options.length > 0 ? this.options : [];\n      this.filteredOptions = value ? allOptions.filter(option => option.label.toLowerCase().includes(value.toLowerCase())) : allOptions;\n    }\n\n    this.focusedIndex = -1;\n    if (!this.isOpen) {\n      this.openDropdown();\n    }\n  };\n\n  render() {\n    return (\n      <Host>\n        <input\n          ref={el => (this.inputRef = el)}\n          type=\"text\"\n          class=\"form-control\"\n          role=\"combobox\"\n          id={this.id}\n          value={this.selectedOption?.label || ''}\n          placeholder={this.placeholder}\n          aria-expanded={String(this.isOpen)}\n          aria-autocomplete=\"list\"\n          aria-controls={this.dropdownId}\n          data-reference=\"parent\"\n          aria-haspopup=\"listbox\"\n          aria-activedescendant={this.focusedIndex >= 0 ? `${this.dropdownId}-option-${this.focusedIndex}` : null}\n          aria-label=\"Combobox\"\n          aria-required={true}\n          onKeyDown={this.handleKeyDown}\n          onInput={this.handleInput}\n        />\n        <div class={`dropdown ${this.isOpen ? 'show' : ''}`}>\n          <div ref={el => (this.dropdownRef = el)} class={`dropdown-menu ${this.isOpen ? 'show' : ''}`} id={this.dropdownId} role=\"listbox\" aria-expanded={String(this.isOpen)}>\n            {this.useSlot ? (\n              <slot name=\"dropdown-content\"></slot>\n            ) : (\n              [\n                this.loading && <div class=\"dropdown-item loading\">Loading...</div>,\n                !this.loading && this.filteredOptions.length === 0 && <div class=\"dropdown-item no-results\">No results found</div>,\n                !this.loading &&\n                  this.filteredOptions.map((option, index) => (\n                    <button\n                      id={`${this.dropdownId}-option-${index}`}\n                      class={`dropdown-item ${this.focusedIndex === index ? 'active' : ''}`}\n                      role=\"option\"\n                      aria-selected={this.selectedOption?.value === option.value ? 'true' : 'false'}\n                      onClick={() => this.selectOption(option)}\n                      onMouseEnter={() => (this.focusedIndex = index)}\n                    >\n                      {option.label}\n                    </button>\n                  )),\n              ]\n            )}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}