{"version":3,"names":["EventsService","Token","constructor","this","bookingService","BookingService","reallocateEvent","pool","destination_pr_id","from_date","to_date","console","log","data","axios","post","extras","ExceptionMsg","Error","error","deleteEvent","POOL","My_Result","updateBlockedEvent","bookingEvent","releaseData","getReleaseHoursString","RELEASE_AFTER_HOURS","result","blockUnit","Object","assign","formatDate","FROM_DATE","TO_DATE","pr_id","PR_ID","STAY_STATUS_CODE","OUT_OF_SERVICE","DESCRIPTION","NOTES","OPTIONAL_REASON","date","split","join"],"sources":["src/services/events.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { BookingService } from './booking.service';\r\nimport { extras, getReleaseHoursString } from '../utils/utils';\r\nimport Token from '@/models/Token';\r\n\r\nexport class EventsService extends Token {\r\n  private readonly bookingService: BookingService = new BookingService();\r\n  async reallocateEvent(pool: string, destination_pr_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      console.log(pool, destination_pr_id, from_date, to_date);\r\n      const { data } = await axios.post(`/ReAllocate_Exposed_Room`, { pool, destination_pr_id, from_date, to_date, extras });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      console.log(data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async deleteEvent(POOL: string) {\r\n    try {\r\n      const { data } = await axios.post(`/UnBlock_Exposed_Unit`, {\r\n        POOL,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async updateBlockedEvent(bookingEvent: any) {\r\n    try {\r\n      const releaseData = getReleaseHoursString(+bookingEvent.RELEASE_AFTER_HOURS);\r\n      await this.deleteEvent(bookingEvent.POOL);\r\n      const result = await this.bookingService.blockUnit({\r\n        from_date: this.formatDate(bookingEvent.FROM_DATE),\r\n        to_date: this.formatDate(bookingEvent.TO_DATE),\r\n        pr_id: bookingEvent.PR_ID,\r\n        STAY_STATUS_CODE: bookingEvent.OUT_OF_SERVICE ? '004' : bookingEvent.RELEASE_AFTER_HOURS === 0 ? '002' : '003',\r\n        DESCRIPTION: bookingEvent.RELEASE_AFTER_HOURS || '',\r\n        NOTES: bookingEvent.OPTIONAL_REASON || '',\r\n        ...releaseData,\r\n      });\r\n      return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private formatDate(date: string) {\r\n    return date.split('/').join('-');\r\n  }\r\n}\r\n"],"mappings":"6JAKaA,UAAsBC,EAAnC,WAAAC,G,oBACmBC,KAAAC,eAAiC,IAAIC,C,CACtD,qBAAMC,CAAgBC,EAAcC,EAA2BC,EAAmBC,GAChF,IACEC,QAAQC,IAAIL,EAAMC,EAAmBC,EAAWC,GAChD,MAAMG,KAAEA,SAAeC,EAAMC,KAAK,2BAA4B,CAAER,OAAMC,oBAAmBC,YAAWC,UAASM,WAC7G,GAAIH,EAAKI,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAML,EAAKI,a,CAEvBN,QAAQC,IAAIC,GACZ,OAAOA,C,CACP,MAAOM,GACPR,QAAQQ,MAAMA,GACd,MAAM,IAAID,MAAMC,E,EAGb,iBAAMC,CAAYC,GACvB,IACE,MAAMR,KAAEA,SAAeC,EAAMC,KAAK,wBAAyB,CACzDM,SAEF,GAAIR,EAAKI,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAML,EAAKI,a,CAEvB,OAAOJ,EAAKS,S,CACZ,MAAOH,GACPR,QAAQC,IAAIO,GACZ,MAAM,IAAID,MAAMC,E,EAIb,wBAAMI,CAAmBC,GAC9B,IACE,MAAMC,EAAcC,GAAuBF,EAAaG,2BAClDxB,KAAKiB,YAAYI,EAAaH,MACpC,MAAMO,QAAezB,KAAKC,eAAeyB,UAASC,OAAAC,OAAA,CAChDtB,UAAWN,KAAK6B,WAAWR,EAAaS,WACxCvB,QAASP,KAAK6B,WAAWR,EAAaU,SACtCC,MAAOX,EAAaY,MACpBC,iBAAkBb,EAAac,eAAiB,MAAQd,EAAaG,sBAAwB,EAAI,MAAQ,MACzGY,YAAaf,EAAaG,qBAAuB,GACjDa,MAAOhB,EAAaiB,iBAAmB,IACpChB,IAEL,OAAOG,C,CACP,MAAOT,GACPR,QAAQQ,MAAMA,GACd,MAAM,IAAID,MAAMC,E,EAGZ,UAAAa,CAAWU,GACjB,OAAOA,EAAKC,MAAM,KAAKC,KAAK,I","ignoreList":[]}