{"version":3,"names":["irInputTextCss","IrInputText","constructor","hostRef","this","inputStyles","readonly","type","submitted","inputStyle","textSize","labelPosition","labelBackground","labelColor","labelBorder","labelWidth","variant","disabled","error","autoValidate","inputFocused","componentWillLoad","el","id","v4","componentDidLoad","mask","initMask","handleMaskChange","handleMaskChange1","console","log","handleValueChange","newValue","oldValue","validateInput","value","maskInstance","IMask","inputRef","on","isEmpty","trim","unmaskedValue","textChange","emit","forceValidation","updateErrorState","zod","asyncParse","parse","wrapKey","parseAsync","handleInputChange","event","target","maskedValue","b","setAttribute","handleBlur","e","inputBlur","render","h","class","htmlFor","name","maxLength","testId","style","inputForcedStyle","undefined","ref","readOnly","onBlur","bind","onFocus","inputFocus","placeholder","onInput","required","label","clearBaseStyles","errorMessage"],"sources":["src/components/ui/ir-input-text/ir-input-text.css?tag=ir-input-text&encapsulation=scoped","src/components/ui/ir-input-text/ir-input-text.tsx"],"sourcesContent":[":host {\r\n  margin: 0;\r\n  padding: 0;\r\n  display: inline;\r\n}\r\n.border-theme {\r\n  border: 1px solid #cacfe7;\r\n}\r\n.icon-container {\r\n  color: #3b4781;\r\n  border: 1px solid #cacfe7;\r\n  font-size: 0.975rem;\r\n  height: 2rem;\r\n  background: rgb(255, 255, 255);\r\n  padding-right: 0 !important;\r\n  border-right: 0;\r\n  border-top-right-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\r\n}\r\ninput:focus {\r\n  border-color: #1e9ff2 !important;\r\n}\r\n.error-message {\r\n  font-size: 0.875rem;\r\n  padding: 0;\r\n  margin: 0.5rem 0 0;\r\n  color: var(--red, #ff4961);\r\n}\r\n.ir-input[data-state='empty'] {\r\n  color: #bbbfc6;\r\n}\r\n.input-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  box-sizing: border-box;\r\n  flex: 1;\r\n}\r\n.input-container input {\r\n  padding-left: 5px !important;\r\n  padding-right: 5px !important;\r\n  border-left: 0;\r\n  border-top-left-radius: 0 !important;\r\n  border-bottom-left-radius: 0 !important;\r\n}\r\n.icon-container[data-state='focus'] {\r\n  border-color: var(--blue);\r\n}\r\n.icon-container[data-disabled] {\r\n  background-color: #eceff1;\r\n  border-color: rgba(118, 118, 118, 0.3);\r\n}\r\n.danger-border {\r\n  border-color: var(--red, #ff4961);\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter, State, Watch, Element } from '@stencil/core';\r\nimport { v4 } from 'uuid';\r\nimport IMask, { FactoryArg, InputMask } from 'imask';\r\nimport { ZodType } from 'zod';\r\n\r\n@Component({\r\n  tag: 'ir-input-text',\r\n  styleUrl: 'ir-input-text.css',\r\n  scoped: true,\r\n})\r\nexport class IrInputText {\r\n  @Element() el: HTMLIrInputTextElement;\r\n  /** Name attribute for the input field */\r\n  @Prop() name: string;\r\n\r\n  /** Value of the input field */\r\n  @Prop() value: string;\r\n\r\n  /** Label text for the input */\r\n  @Prop() label: string;\r\n\r\n  /** Placeholder text for the input */\r\n  @Prop() placeholder: string;\r\n\r\n  /** Additional inline styles for the input */\r\n  @Prop() inputStyles = '';\r\n\r\n  /** Whether the input field is required */\r\n  @Prop() required: boolean;\r\n\r\n  /** Whether the input field is read-only */\r\n  @Prop() readonly: boolean = false;\r\n\r\n  /** Input type (e.g., text, password, email) */\r\n  @Prop() type:\r\n    | 'text'\r\n    | 'password'\r\n    | 'email'\r\n    | 'number'\r\n    | 'tel'\r\n    | 'url'\r\n    | 'search'\r\n    | 'date'\r\n    | 'datetime-local'\r\n    | 'month'\r\n    | 'week'\r\n    | 'time'\r\n    | 'color'\r\n    | 'file'\r\n    | 'hidden'\r\n    | 'checkbox'\r\n    | 'radio'\r\n    | 'range'\r\n    | 'button'\r\n    | 'reset'\r\n    | 'submit'\r\n    | 'image' = 'text';\r\n\r\n  /** Whether the form has been submitted */\r\n  @Prop() submitted: boolean = false;\r\n\r\n  /** Whether to apply default input styling */\r\n  @Prop() inputStyle: boolean = true;\r\n\r\n  /** Text size inside the input field */\r\n  @Prop() textSize: 'sm' | 'md' | 'lg' = 'md';\r\n\r\n  /** Position of the label: left, right, or center */\r\n  @Prop() labelPosition: 'left' | 'right' | 'center' = 'left';\r\n\r\n  /** Background color of the label */\r\n  @Prop() labelBackground: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null = null;\r\n\r\n  /** Text color of the label */\r\n  @Prop() labelColor: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' = 'dark';\r\n\r\n  /** Border color/style of the label */\r\n  @Prop() labelBorder: 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none' = 'theme';\r\n\r\n  /** Label width as a fraction of 12 columns (1-11) */\r\n  @Prop() labelWidth: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 = 3;\r\n\r\n  /** Variant of the input: default or icon */\r\n  @Prop() variant: 'default' | 'icon' = 'default';\r\n\r\n  /** Whether the input is disabled */\r\n  @Prop() disabled: boolean = false;\r\n\r\n  /** Whether the input has an error */\r\n  @Prop({ mutable: true }) error: boolean = false;\r\n\r\n  /** Mask for the input field (optional) */\r\n  @Prop() mask: FactoryArg;\r\n\r\n  /** Whether the input should auto-validate */\r\n  @Prop() autoValidate?: boolean = true;\r\n\r\n  /** A Zod schema for validating the input */\r\n  @Prop() zod?: ZodType<any, any>;\r\n\r\n  /** A Zod parse type for validating the input */\r\n  @Prop() asyncParse?: boolean;\r\n\r\n  /** Key to wrap the value (e.g., 'price' or 'cost') */\r\n  @Prop() wrapKey?: string;\r\n\r\n  /** Forcing css style to the input */\r\n  @Prop() inputForcedStyle?: { [key: string]: string };\r\n\r\n  /** Input id for testing purposes*/\r\n  @Prop() testId: string;\r\n\r\n  /** Input max character length*/\r\n  @Prop() maxLength: number;\r\n\r\n  /** To clear all the Input base styling*/\r\n  @Prop() clearBaseStyles: boolean;\r\n\r\n  /** To clear all the Input base styling*/\r\n  @Prop() errorMessage: string;\r\n\r\n  @State() inputFocused: boolean = false;\r\n\r\n  @Event({ bubbles: true, composed: true }) textChange: EventEmitter<any>;\r\n  @Event() inputBlur: EventEmitter<FocusEvent>;\r\n  @Event() inputFocus: EventEmitter<FocusEvent>;\r\n\r\n  private inputRef: HTMLInputElement;\r\n  private maskInstance: InputMask<FactoryArg>;\r\n\r\n  private id: string;\r\n\r\n  componentWillLoad() {\r\n    if (this.el.id) {\r\n      this.id = this.el.id;\r\n    } else {\r\n      this.id = v4();\r\n    }\r\n  }\r\n\r\n  componentDidLoad() {\r\n    if (this.mask) this.initMask();\r\n  }\r\n\r\n  @Watch('mask')\r\n  handleMaskChange() {\r\n    this.initMask();\r\n  }\r\n  @Watch('autoValidate')\r\n  handleMaskChange1() {\r\n    console.log(this.autoValidate);\r\n  }\r\n\r\n  // @Watch('error')\r\n  // handleErrorChange(newValue: boolean, oldValue: boolean) {\r\n  //   if (newValue !== oldValue) {\r\n  //     if (this.autoValidate) {\r\n  //       this.validateInput(this.value, true);\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  @Watch('value')\r\n  handleValueChange(newValue: string, oldValue: string) {\r\n    if (newValue !== oldValue) {\r\n      this.validateInput(this.value);\r\n    }\r\n  }\r\n\r\n  private initMask() {\r\n    if (!this.mask || this.maskInstance) {\r\n      return;\r\n    }\r\n\r\n    this.maskInstance = IMask(this.inputRef, this.mask);\r\n    this.maskInstance.on('accept', () => {\r\n      const isEmpty = this.inputRef.value.trim() === '' || this.maskInstance.unmaskedValue === '';\r\n      if (isEmpty) {\r\n        this.inputRef.value = '';\r\n        this.textChange.emit(null);\r\n      } else {\r\n        this.inputRef.value = this.maskInstance.value;\r\n        this.textChange.emit(this.maskInstance.value);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async validateInput(value: string, forceValidation: boolean = false) {\r\n    console.log('autoValidate=>', this.autoValidate);\r\n    if (!this.autoValidate && !forceValidation) {\r\n      console.log('here', 'error', this.error);\r\n      if (this.error) {\r\n        this.updateErrorState(false);\r\n      }\r\n      return;\r\n    }\r\n    console.log('first');\r\n    if (this.zod) {\r\n      try {\r\n        if (!this.asyncParse) {\r\n          this.zod.parse(this.wrapKey ? { [this.wrapKey]: value } : value);\r\n        } else {\r\n          await this.zod.parseAsync(this.wrapKey ? { [this.wrapKey]: value } : value);\r\n        }\r\n        if (this.error) {\r\n          this.updateErrorState(false);\r\n        }\r\n      } catch (error) {\r\n        this.updateErrorState(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  private handleInputChange(event: InputEvent) {\r\n    const value = (event.target as HTMLInputElement).value;\r\n    const isEmpty = value === '';\r\n    if (this.maskInstance) {\r\n      this.maskInstance.value = value;\r\n    }\r\n    const maskedValue = isEmpty ? null : this.maskInstance ? this.maskInstance.value : value;\r\n    this.textChange.emit(maskedValue);\r\n  }\r\n\r\n  private updateErrorState(b: boolean) {\r\n    this.error = b;\r\n    this.inputRef.setAttribute('aria-invalid', b ? 'true' : 'false');\r\n  }\r\n\r\n  private handleBlur(e: FocusEvent) {\r\n    this.validateInput(this.value, this.submitted);\r\n    this.inputFocused = false;\r\n    this.inputBlur.emit(e);\r\n  }\r\n\r\n  render() {\r\n    if (this.variant === 'icon') {\r\n      return (\r\n        <fieldset class=\"position-relative has-icon-left input-container\">\r\n          <label htmlFor={this.id} class=\"input-group-prepend bg-white m-0\">\r\n            <span\r\n              data-disabled={this.disabled}\r\n              data-state={this.inputFocused ? 'focus' : ''}\r\n              class={`input-group-text icon-container bg-white ${this.error ? 'danger-border' : ''}`}\r\n              id=\"basic-addon1\"\r\n            >\r\n              <slot name=\"icon\"></slot>\r\n            </span>\r\n          </label>\r\n          <input\r\n            maxLength={this.maxLength}\r\n            data-testid={this.testId}\r\n            style={this.inputForcedStyle}\r\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\r\n            id={this.id}\r\n            ref={el => (this.inputRef = el)}\r\n            readOnly={this.readonly}\r\n            type={this.type}\r\n            class={`ir-input form-control bg-white pl-0 input-sm rate-input py-0 m-0 rateInputBorder ${this.error ? 'danger-border' : ''}`}\r\n            onBlur={this.handleBlur.bind(this)}\r\n            onFocus={e => {\r\n              this.inputFocused = true;\r\n              this.inputFocus.emit(e);\r\n            }}\r\n            placeholder={this.placeholder}\r\n            value={this.value}\r\n            onInput={this.handleInputChange.bind(this)}\r\n            required={this.required}\r\n            disabled={this.disabled}\r\n          />\r\n        </fieldset>\r\n      );\r\n    }\r\n    return (\r\n      <div class={'form-group'}>\r\n        <div class=\"input-group row m-0\">\r\n          {this.label && (\r\n            <div class={`input-group-prepend col-${this.labelWidth} p-0 text-${this.labelColor}`}>\r\n              <label\r\n                htmlFor={this.id}\r\n                class={`input-group-text ${this.labelPosition === 'right' ? 'justify-content-end' : this.labelPosition === 'center' ? 'justify-content-center' : ''} ${\r\n                  this.labelBackground ? 'bg-' + this.labelBackground : ''\r\n                } flex-grow-1 text-${this.labelColor} border-${this.labelBorder === 'none' ? 0 : this.labelBorder} `}\r\n              >\r\n                {this.label}\r\n                {this.required ? '*' : ''}\r\n              </label>\r\n            </div>\r\n          )}\r\n          <input\r\n            maxLength={this.maxLength}\r\n            data-testid={this.testId}\r\n            style={this.inputForcedStyle}\r\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\r\n            id={this.id}\r\n            ref={el => (this.inputRef = el)}\r\n            readOnly={this.readonly}\r\n            type={this.type}\r\n            class={\r\n              this.clearBaseStyles\r\n                ? `${this.inputStyles}`\r\n                : `${this.error ? 'border-danger' : ''} form-control text-${this.textSize} col-${this.label ? 12 - this.labelWidth : 12} ${this.readonly ? 'bg-white' : ''} ${\r\n                    this.inputStyles\r\n                  }`\r\n            }\r\n            onBlur={this.handleBlur.bind(this)}\r\n            onFocus={e => {\r\n              this.inputFocused = true;\r\n              this.inputFocus.emit(e);\r\n            }}\r\n            placeholder={this.placeholder}\r\n            value={this.value}\r\n            onInput={this.handleInputChange.bind(this)}\r\n            required={this.required}\r\n            disabled={this.disabled}\r\n          />\r\n        </div>\r\n        {this.errorMessage && this.error && <p class=\"error-message\">{this.errorMessage}</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}