{"version":3,"names":["initialState","days","months","fromDate","toDate","state","calendar_dates","onChange","onCalendarDatesChange","createStore","async","getMyBookings","myBookings","stayStatus","getStayStatus","month","day","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","from_date","isAfter","DATE","blockedToDate","to_date","ID","POOL","NOTES","BALANCE","NAME","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","find","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","TO_DATE","NO_OF_DAYS","dateDifference","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","defaultDates","booking","booking_nbr","toString","bookingFromDate","bookingToDate","_a","guest","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","is_direct","remark","PRIVATE_NOTE","getPrivateNote","extras","_b","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","booked_on","PHONE_PREFIX","country_phone_prefix","IS_EDITABLE","is_editable","ARRIVAL","PHONE","_c","mobile","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","RATE_TYPE","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","origin","GUEST","ROOMS","rooms","cancelation","guarantee","TOTAL_PRICE","_d","gross_total","COUNTRY","country_id","adult_child_offering","selected_variation","SOURCE","source","tag","index","findIndex","newData","push","e","transformNewBooking","bookings","renderStatus","now","isSame","isBefore","filter","forEach","roomtype","unit","ota_notes","transformNewBLockedRooms","calculateDaysBetweenDates","startDate","endDate","daysDiff","diff","BookingService","getCalendarData","propertyid","ExceptionMsg","Error","customMonths","myBooking","daysCount","length","monthName","convertDateToCustomFormat","currentDate","convertDateToTime","dayDisplayName","rate","unassigned_units_nbr","flat","Promise","resolve","ExceptionCode","My_Params_Get_Rooming_Data","AC_ID","FROM","My_Params_Get_Exposed_Calendar","TO","defaultMonths","fetchGuest","email","fetchPMSLogs","editExposedGuest","book_nbr","Object","assign","getBookingAvailability","props","adultChildCount","currency","rest","__rest","adult","child_nbr","child","currency_ref","is_backend","getCountries","language","fetchSetupEntries","res","arrivalTime","TBL_NAME","ratePricingMode","bedPreferenceType","getBlockedInfo","getUserDefaultCountry","IP","blockUnit","params","getUserInfo","getExposedBooking","withExtras","generateDays","amount","toISOString","split","cost","setDate","getDate","calculateTotalRate","totalNights","isRateModified","preference","fetchExposedGuest","property_id","fetchExposedBookings","getPCICardInfoURL","BOOK_NBR","doReservation","body","bookUser","bookedByInfoData","check_in","guestData","pickup_info","bookingNumber","defaultGuest","fromDateStr","dateToFormattedString","toDateStr","countryId","city","contactNumber","phone_prefix","address","dob","subscribe_to_news_letter","emailGuest","cci","cardNumber","nbr","holder_name","cardHolderName","expiry_month","expiryMonth","expiry_year","expiryYear","assign_units","is_pms","is_in_loyalty_mode","promo_key","message","property","selectedArrivalTime","roomCategoryId","roomCategoryName","rateplans","availabilities","inventory","ratePlanId","ratePlanName","rate_restrictions","variations","roomId","adultCount","childrenCount","infant_nbr","bed_preference","notes","this","rateType","guestName","result"],"sources":["src/stores/calendar-dates.store.ts","src/utils/booking.ts","src/services/booking.service.ts"],"sourcesContent":["import { DayData } from '@/models/DayType';\r\nimport { createStore } from '@stencil/store';\r\nexport interface ICalendarDates {\r\n  days: DayData[];\r\n  months: { daysCount: number; monthName: string }[];\r\n  fromDate: string;\r\n  toDate: string;\r\n}\r\nconst initialState: ICalendarDates = {\r\n  days: [],\r\n  months: [],\r\n  fromDate: '',\r\n  toDate: '',\r\n};\r\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\r\n\r\nexport default calendar_dates;\r\n","import { Extras } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '23080178267') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: 1,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    const now = moment();\r\n    const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n    if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[data?.status.code || '001'];\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    console.log(\r\n      `\r\n  bookingFromDate:${bookingFromDate},\\n\r\n  roomFromDate:${room.from_date},\\n\r\n  bookingToDate:${bookingToDate},\\n\r\n  roomToDate:${bookingToDate}\\n\r\n      `,\r\n    );\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\n","import { DayData } from '../models/DayType';\r\nimport axios from 'axios';\r\nimport { BookingDetails, IBlockUnit, ICountry, IEntries, ISetupEntries, MonthType } from '../models/IBooking';\r\nimport { convertDateToCustomFormat, convertDateToTime, dateToFormattedString, extras } from '../utils/utils';\r\nimport { getMyBookings } from '../utils/booking';\r\nimport { Booking, Day, Guest, IBookingPickupInfo, IPmsLog } from '../models/booking.dto';\r\nexport interface IBookingParams {\r\n  bookedByInfoData: any;\r\n  check_in: boolean;\r\n  fromDate: Date;\r\n  toDate: Date;\r\n  guestData;\r\n  totalNights: number;\r\n  source: { code: string; description: string };\r\n  propertyid: number;\r\n  rooms: any[];\r\n  currency: { id: number; code: string };\r\n  pickup_info: IBookingPickupInfo | null;\r\n  bookingNumber?: string;\r\n  defaultGuest?: any;\r\n  arrivalTime?: any;\r\n  pr_id?: number;\r\n  identifier?: string;\r\n  extras: { key: string; value: string }[] | null;\r\n}\r\nexport class BookingService {\r\n  public async getCalendarData(propertyid: number, from_date: string, to_date: string): Promise<{ [key: string]: any }> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Calendar`, {\r\n        propertyid,\r\n        from_date,\r\n        to_date,\r\n        extras,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const months: MonthType[] = data.My_Result.months;\r\n      const customMonths: { daysCount: number; monthName: string }[] = [];\r\n      const myBooking = await getMyBookings(months);\r\n      const days: DayData[] = months\r\n        .map(month => {\r\n          customMonths.push({\r\n            daysCount: month.days.length,\r\n            monthName: month.description,\r\n          });\r\n          return month.days.map(day => ({\r\n            day: convertDateToCustomFormat(day.description, month.description),\r\n            currentDate: convertDateToTime(day.description, month.description),\r\n            dayDisplayName: day.description,\r\n            rate: day.room_types,\r\n            unassigned_units_nbr: day.unassigned_units_nbr,\r\n            occupancy: day.occupancy,\r\n          }));\r\n        })\r\n        .flat();\r\n\r\n      return Promise.resolve({\r\n        ExceptionCode: null,\r\n        ExceptionMsg: '',\r\n        My_Params_Get_Rooming_Data: {\r\n          AC_ID: propertyid,\r\n          FROM: data.My_Params_Get_Exposed_Calendar.from_date,\r\n          TO: data.My_Params_Get_Exposed_Calendar.to_date,\r\n        },\r\n        days,\r\n        months: customMonths,\r\n        myBookings: myBooking,\r\n        defaultMonths: months,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  public async fetchGuest(email: string): Promise<Guest> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Guest`, { email });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchPMSLogs(booking_nbr: string | number): Promise<IPmsLog> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_PMS_Logs`, { booking_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async editExposedGuest(guest: Guest, book_nbr: string): Promise<any> {\r\n    try {\r\n      const { data } = await axios.post(`/Edit_Exposed_Guest`, { ...guest, book_nbr });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBookingAvailability(props: {\r\n    from_date: string;\r\n    to_date: string;\r\n    propertyid: number;\r\n    adultChildCount: { adult: number; child: number };\r\n    language: string;\r\n    room_type_ids: number[];\r\n    currency: { id: number; code: string };\r\n    is_in_agent_mode?: boolean;\r\n    agent_id?: string | number;\r\n  }): Promise<BookingDetails> {\r\n    try {\r\n      const { adultChildCount, currency, ...rest } = props;\r\n      const { data } = await axios.post(`/Get_Exposed_Booking_Availability`, {\r\n        ...rest,\r\n        adult_nbr: adultChildCount.adult,\r\n        child_nbr: adultChildCount.child,\r\n        currency_ref: currency.code,\r\n        is_backend: true,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getCountries(language: string): Promise<ICountry[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Countries`, {\r\n        language,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async fetchSetupEntries(): Promise<ISetupEntries> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, {\r\n        TBL_NAMES: ['_ARRIVAL_TIME', '_RATE_PRICING_MODE', '_BED_PREFERENCE_TYPE'],\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      const res: any[] = data.My_Result;\r\n      return {\r\n        arrivalTime: res.filter(e => e.TBL_NAME === '_ARRIVAL_TIME'),\r\n\r\n        ratePricingMode: res.filter(e => e.TBL_NAME === '_RATE_PRICING_MODE'),\r\n        bedPreferenceType: res.filter(e => e.TBL_NAME === '_BED_PREFERENCE_TYPE'),\r\n      };\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getBlockedInfo(): Promise<IEntries[]> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_MULTI`, { TBL_NAMES: ['_CALENDAR_BLOCKED_TILL'] });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUserDefaultCountry() {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Country_By_IP`, {\r\n        IP: '',\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async blockUnit(params: IBlockUnit) {\r\n    try {\r\n      const { data } = await axios.post(`/Block_Exposed_Unit`, params);\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      console.log(data);\r\n      return data['My_Params_Block_Exposed_Unit'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n\r\n  public async getUserInfo(email: string) {\r\n    try {\r\n      const { data } = await axios.post(`/GET_EXPOSED_GUEST`, {\r\n        email,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getExposedBooking(booking_nbr: string, language: string, withExtras: boolean = true): Promise<Booking> {\r\n    try {\r\n      const { data } = await axios.post(`/Get_Exposed_Booking`, {\r\n        booking_nbr,\r\n        language,\r\n        extras: withExtras ? extras : null,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data.My_Result;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  private generateDays(from_date: string, to_date: string, amount: number): Day[] {\r\n    const startDate = new Date(from_date);\r\n    const endDate = new Date(to_date);\r\n    const days: Day[] = [];\r\n\r\n    while (startDate < endDate) {\r\n      days.push({\r\n        date: startDate.toISOString().split('T')[0],\r\n        amount: amount,\r\n        cost: null,\r\n      });\r\n      startDate.setDate(startDate.getDate() + 1);\r\n    }\r\n\r\n    return days;\r\n  }\r\n  private calculateTotalRate(rate: number, totalNights: number, isRateModified: boolean, preference: number) {\r\n    if (isRateModified && preference === 2) {\r\n      return +rate;\r\n    }\r\n    return +rate / +totalNights;\r\n  }\r\n  public async fetchExposedGuest(email: string, property_id: number) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Guests`, {\r\n        email,\r\n        property_id,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async fetchExposedBookings(booking_nbr: string, property_id: number, from_date: string, to_date: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Fetch_Exposed_Bookings`, {\r\n        booking_nbr,\r\n        property_id,\r\n        from_date,\r\n        to_date,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getPCICardInfoURL(BOOK_NBR: string) {\r\n    try {\r\n      const { data } = await axios.post(`/Get_PCI_Card_Info_URL`, {\r\n        BOOK_NBR,\r\n      });\r\n      if (data.ExceptionMsg !== '') {\r\n        throw new Error(data.ExceptionMsg);\r\n      }\r\n      return data['My_Result'];\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async doReservation(body: any) {\r\n    const { data } = await axios.post(`/DoReservation`, { ...body, extras: body.extras ? body.extras : extras });\r\n    if (data.ExceptionMsg !== '') {\r\n      throw new Error(data.ExceptionMsg);\r\n    }\r\n    console.log(data['My_Result']);\r\n    return data['My_Result'];\r\n  }\r\n\r\n  public async bookUser({\r\n    bookedByInfoData,\r\n    check_in,\r\n    currency,\r\n    extras = null,\r\n    fromDate,\r\n    guestData,\r\n    pickup_info,\r\n    propertyid,\r\n    rooms,\r\n    source,\r\n    toDate,\r\n    totalNights,\r\n    arrivalTime,\r\n    bookingNumber,\r\n    defaultGuest,\r\n    identifier,\r\n    pr_id,\r\n  }: IBookingParams) {\r\n    try {\r\n      const fromDateStr = dateToFormattedString(fromDate);\r\n      const toDateStr = dateToFormattedString(toDate);\r\n      let guest: any = {\r\n        email: bookedByInfoData.email === '' ? null : bookedByInfoData.email || null,\r\n        first_name: bookedByInfoData.firstName,\r\n        last_name: bookedByInfoData.lastName,\r\n        country_id: bookedByInfoData.countryId === '' ? null : bookedByInfoData.countryId,\r\n        city: null,\r\n        mobile: bookedByInfoData.contactNumber === null ? '' : bookedByInfoData.contactNumber,\r\n        phone_prefix: null,\r\n        address: '',\r\n        dob: null,\r\n        subscribe_to_news_letter: bookedByInfoData.emailGuest || false,\r\n        cci: bookedByInfoData.cardNumber\r\n          ? {\r\n              nbr: bookedByInfoData.cardNumber,\r\n              holder_name: bookedByInfoData.cardHolderName,\r\n              expiry_month: bookedByInfoData.expiryMonth,\r\n              expiry_year: bookedByInfoData.expiryYear,\r\n            }\r\n          : null,\r\n      };\r\n      if (defaultGuest) {\r\n        guest = { ...defaultGuest, email: defaultGuest.email === '' ? null : defaultGuest.email };\r\n      }\r\n      if (bookedByInfoData.id) {\r\n        guest = { ...guest, id: bookedByInfoData.id };\r\n      }\r\n      const body = {\r\n        assign_units: true,\r\n        check_in,\r\n        is_pms: true,\r\n        is_direct: true,\r\n        is_in_loyalty_mode: false,\r\n        promo_key: null,\r\n        extras,\r\n        booking: {\r\n          booking_nbr: bookingNumber || '',\r\n          from_date: fromDateStr,\r\n          to_date: toDateStr,\r\n          remark: bookedByInfoData.message || null,\r\n          property: {\r\n            id: propertyid,\r\n          },\r\n          source,\r\n          currency,\r\n          arrival: { code: arrivalTime ? arrivalTime : bookedByInfoData.selectedArrivalTime },\r\n\r\n          guest,\r\n          rooms: [\r\n            ...guestData.map(data => ({\r\n              identifier: identifier || null,\r\n              roomtype: {\r\n                id: data.roomCategoryId,\r\n                name: data.roomCategoryName,\r\n                physicalrooms: null,\r\n                rateplans: null,\r\n                availabilities: null,\r\n                inventory: data.inventory,\r\n                rate: data.rate / totalNights,\r\n              },\r\n              rateplan: {\r\n                id: data.ratePlanId,\r\n                name: data.ratePlanName,\r\n                rate_restrictions: null,\r\n                variations: null,\r\n                cancelation: data.cancelation,\r\n                guarantee: data.guarantee,\r\n              },\r\n              unit: typeof pr_id === 'undefined' && data.roomId === '' ? null : { id: +pr_id || +data.roomId },\r\n              occupancy: {\r\n                adult_nbr: data.adultCount,\r\n                children_nbr: data.childrenCount,\r\n                infant_nbr: null,\r\n              },\r\n              bed_preference: data.preference,\r\n              from_date: fromDateStr,\r\n              to_date: toDateStr,\r\n              notes: null,\r\n              days: this.generateDays(fromDateStr, toDateStr, this.calculateTotalRate(data.rate, totalNights, data.isRateModified, data.rateType)),\r\n              guest: {\r\n                email: null,\r\n                first_name: data.guestName,\r\n                last_name: null,\r\n                country_id: null,\r\n                city: null,\r\n                mobile: null,\r\n                address: null,\r\n                dob: null,\r\n                subscribe_to_news_letter: null,\r\n              },\r\n            })),\r\n            ...rooms,\r\n          ],\r\n        },\r\n        pickup_info,\r\n      };\r\n      console.log('book user payload', body);\r\n      const result = await this.doReservation(body);\r\n      return result;\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}