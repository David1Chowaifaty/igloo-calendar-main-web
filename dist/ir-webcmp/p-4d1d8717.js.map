{"version":3,"names":["VariationService","formatVariationBasedOnInfants","params","variation","this","getVariationBasedOnInfants","formatVariation","infants","calculateVariationAmount","_a","discounted_amount","variations","baseVariation","adult_nbr","child_nbr","find","v","Math","max","infant_nbr","adultNumber","Number","infantNumber","adultLabel","locales","entries","Lcz_Adults","toLowerCase","Lcz_Adult","childLabel","Lcz_Children","Lcz_Child","infantLabel","_b","_d","_c","parts","filter","Boolean","join"],"sources":["src/services/variation.service.ts"],"sourcesContent":["import { Variation } from '@/models/property';\r\nimport locales from '@/stores/locales.store';\r\n\r\nexport default class VariationService {\r\n  /**\r\n   * Formats a variation based on the number of infants and returns a formatted string.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to adjust the variation for.\r\n   * @returns {string} A formatted string describing the variation adjusted for infants.\r\n   */\r\n  public formatVariationBasedOnInfants(params: { baseVariation: Variation; variations: Variation[]; infants: number }): string {\r\n    const variation = this.getVariationBasedOnInfants(params);\r\n    return this.formatVariation(variation, params.infants);\r\n  }\r\n\r\n  /**\r\n   * Calculates the discounted amount for a variation adjusted for the number of infants.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to consider for adjustments.\r\n   * @returns {number} The discounted amount for the selected variation, or 0 if no discounted amount is available.\r\n   */\r\n  public calculateVariationAmount(params: { baseVariation: Variation; variations: Variation[]; infants: number }): number {\r\n    return this.getVariationBasedOnInfants(params)?.discounted_amount || 0;\r\n  }\r\n\r\n  /**\r\n   * Finds the appropriate variation from a list of variations based on the number of infants.\r\n   * @param {Object} params - The input parameters.\r\n   * @param {Variation} params.baseVariation - The base variation object.\r\n   * @param {Variation[]} params.variations - A list of available variations.\r\n   * @param {number} params.infants - The number of infants to adjust for.\r\n   * @returns {Variation} The matching variation or the base variation if no match is found.\r\n   */\r\n  public getVariationBasedOnInfants({ variations, baseVariation, infants }: { baseVariation: Variation; variations: Variation[]; infants: number }): Variation {\r\n    const { adult_nbr, child_nbr } = baseVariation;\r\n    return variations.find(v => v.adult_nbr === adult_nbr && v.child_nbr === Math.max(0, child_nbr - Math.max(0, infants))) || baseVariation;\r\n  }\r\n\r\n  /**\r\n   * Formats a variation object into a human-readable string, adjusted for the number of infants.\r\n   * @param {Variation} variation - The variation object to format.\r\n   * @param {number} infant_nbr - The number of infants to adjust for.\r\n   * @returns {string} A formatted string representing the variation.\r\n   * @private\r\n   */\r\n  private formatVariation({ child_nbr, adult_nbr }: Variation, infant_nbr: number): string {\r\n    const adultNumber = Number(adult_nbr) || 0;\r\n    const infantNumber = Math.max(Number(infant_nbr) || 0, 0);\r\n    const adultLabel = adultNumber > 1 ? locales.entries.Lcz_Adults.toLowerCase() : locales.entries.Lcz_Adult.toLowerCase();\r\n    const childLabel = child_nbr > 1 ? locales.entries.Lcz_Children.toLowerCase() : locales.entries.Lcz_Child.toLowerCase();\r\n    const infantLabel = infantNumber > 1 ? (locales.entries['Lcz_Infants'] ?? 'infants')?.toLowerCase() : (locales?.entries['Lcz_Infant'] ?? 'infant')?.toLowerCase();\r\n    const parts = [`${adultNumber} ${adultLabel}`, child_nbr ? `${child_nbr} ${childLabel}` : '', infantNumber ? `${infantNumber} ${infantLabel}` : ''];\r\n    return parts.filter(Boolean).join('&nbsp&nbsp&nbsp&nbsp');\r\n  }\r\n}\r\n"],"mappings":"0CAGqBA,EASZ,6BAAAC,CAA8BC,GACnC,MAAMC,EAAYC,KAAKC,2BAA2BH,GAClD,OAAOE,KAAKE,gBAAgBH,EAAWD,EAAOK,Q,CAWzC,wBAAAC,CAAyBN,G,MAC9B,QAAOO,EAAAL,KAAKC,2BAA2BH,MAAO,MAAAO,SAAA,SAAAA,EAAEC,oBAAqB,C,CAWhE,0BAAAL,EAA2BM,WAAEA,EAAUC,cAAEA,EAAaL,QAAEA,IAC7D,MAAMM,UAAEA,EAASC,UAAEA,GAAcF,EACjC,OAAOD,EAAWI,MAAKC,GAAKA,EAAEH,YAAcA,GAAaG,EAAEF,YAAcG,KAAKC,IAAI,EAAGJ,EAAYG,KAAKC,IAAI,EAAGX,OAAcK,C,CAUrH,eAAAN,EAAgBQ,UAAEA,EAASD,UAAEA,GAAwBM,G,YAC3D,MAAMC,EAAcC,OAAOR,IAAc,EACzC,MAAMS,EAAeL,KAAKC,IAAIG,OAAOF,IAAe,EAAG,GACvD,MAAMI,EAAaH,EAAc,EAAII,EAAQC,QAAQC,WAAWC,cAAgBH,EAAQC,QAAQG,UAAUD,cAC1G,MAAME,EAAaf,EAAY,EAAIU,EAAQC,QAAQK,aAAaH,cAAgBH,EAAQC,QAAQM,UAAUJ,cAC1G,MAAMK,EAAcV,EAAe,GAAIW,GAACxB,EAAAe,EAAQC,QAAQ,kBAAc,MAAAhB,SAAA,EAAAA,EAAI,aAAU,MAAAwB,SAAA,SAAAA,EAAEN,eAAgBO,GAACC,EAAAX,IAAO,MAAPA,SAAO,SAAPA,EAASC,QAAQ,iBAAa,MAAAU,SAAA,EAAAA,EAAI,YAAS,MAAAD,SAAA,SAAAA,EAAEP,cACpJ,MAAMS,EAAQ,CAAC,GAAGhB,KAAeG,IAAcT,EAAY,GAAGA,KAAae,IAAe,GAAIP,EAAe,GAAGA,KAAgBU,IAAgB,IAChJ,OAAOI,EAAMC,OAAOC,SAASC,KAAK,uB","ignoreList":[]}