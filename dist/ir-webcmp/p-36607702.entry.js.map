{"version":3,"names":["irHkArchiveCss","IrHkArchiveStyle0","IrHkArchive","constructor","hostRef","this","filters","from_date","moment","add","format","to_date","filtered_by_hkm","filtered_by_unit","data","isLoading","houseKeepingService","HouseKeepingService","units","componentWillLoad","initializeData","setUpUnits","calendar_data","roomsInfo","forEach","r","physicalrooms","room","push","id","name","getArchivedTasks","res","getArchivedHKTasks","Object","assign","property_id","Number","propertyId","_a","map","t","v4","handleDateRangeChange","e","stopImmediatePropagation","stopPropagation","start","end","detail","updateFilters","props","searchArchive","error","console","log","exportArchive","render","h","Host","key","class","label","displayContext","showFirstOption","LabelAvailable","text","value","v","toString","onSelectChange","selectedValue","_c","_b","length","housekeeping_store","hk_criteria","housekeepers","_e","_d","_f","dateLabel","locales","entries","Lcz_Dates","minDate","defaultData","fromDate","toDate","title","_g","Lcz_Search","variant","icon_name","onClickHandler","_h","Lcz_ExportToExcel","_j","isRequestPending","_k","d","date","house_keeper","unit","booking_nbr","btn_color","btnStyle","width","padding","margin","labelStyle","onClick","window","open","irTasksFiltersCss","IrTasksFiltersStyle0","IrTasksFilters","cleaning_periods","code","cleaning_frequencies","dusty_units","highlight_check_ins","collapsed","baseFilters","ids","dusty_periods","highlight_checkin_options","updateFilter","params","applyFiltersEvt","applyFilters","emit","resetFilters","style","gap","xmlns","viewBox","height","fill","testId","description","_m","_l","_p","_o","_r","_q","btn_type","size","irTasksHeaderCss","IrTasksHeaderStyle0","IrTasksHeader","isCleanedEnabled","handleCleanedButtonAnimation","btnRef","bounce","headerButtonPress","btn_disabled","ref","el","irTasksTableCss","IrTasksTableStyle0","IrTasksTable","tasks","selectedIds","showConfirmModal","sortKey","sortDirection","checkableTasks","sortTasks","assignCheckableTasks","handleSort","newDirection","handleClearSelectedHkTasks","handleTasksChange","newTasks","direction","sorted","sort","a","b","aPrimary","bPrimary","toggleSelection","includes","filter","item","animateCleanedButton","emitSelectedTasks","filteredTasks","rowSelectChange","allSelected","toggleSelectAll","task","isCheckable","hkm_id","isSameOrBefore","indeterminate","checked","onCheckChange","stroke","textAlign","colSpan","isSelected","housekeeper","cursor","selected","formatted_date","is_highlight","status","hint","adult","child","infant"],"sources":["src/components/ir-housekeeping/ir-hk-tasks/ir-hk-archive/ir-hk-archive.css?tag=ir-hk-archive&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-hk-archive/ir-hk-archive.tsx","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-filters/ir-tasks-filters.css?tag=ir-tasks-filters&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-filters/ir-tasks-filters.tsx","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-header/ir-tasks-header.css?tag=ir-tasks-header&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-header/ir-tasks-header.tsx","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-table/ir-tasks-table.css?tag=ir-tasks-table&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-tasks-table/ir-tasks-table.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n","// import { HouseKeepingService } from '@/services/housekeeping.service';\r\n// import housekeeping_store from '@/stores/housekeeping.store';\r\nimport { ArchivedTask } from '@/models/housekeeping';\r\nimport { HouseKeepingService } from '@/services/housekeeping.service';\r\nimport calendar_data from '@/stores/calendar-data';\r\nimport housekeeping_store from '@/stores/housekeeping.store';\r\nimport { isRequestPending } from '@/stores/ir-interceptor.store';\r\nimport locales from '@/stores/locales.store';\r\nimport { Component, Host, Listen, Prop, State, h } from '@stencil/core';\r\nimport moment from 'moment';\r\nimport { v4 } from 'uuid';\r\nexport type ArchivesFilters = {\r\n  from_date: string;\r\n  to_date: string;\r\n  filtered_by_hkm?: number[];\r\n  filtered_by_unit?: number[];\r\n};\r\n@Component({\r\n  tag: 'ir-hk-archive',\r\n  styleUrl: 'ir-hk-archive.css',\r\n  scoped: true,\r\n})\r\nexport class IrHkArchive {\r\n  @Prop() propertyId: string | number;\r\n\r\n  @State() filters: ArchivesFilters = {\r\n    from_date: moment().add(-90, 'days').format('YYYY-MM-DD'),\r\n    to_date: moment().format('YYYY-MM-DD'),\r\n    filtered_by_hkm: [],\r\n    filtered_by_unit: [],\r\n  };\r\n  @State() data: (ArchivedTask & { id: string })[] = [];\r\n  @State() isLoading: 'search' | 'excel' | null = null;\r\n\r\n  private houseKeepingService = new HouseKeepingService();\r\n  private units: { id: number; name: string }[] = [];\r\n\r\n  componentWillLoad() {\r\n    this.initializeData();\r\n    this.setUpUnits();\r\n  }\r\n  private setUpUnits() {\r\n    const units = [];\r\n    calendar_data.roomsInfo.forEach(r => {\r\n      r.physicalrooms.forEach(room => {\r\n        units.push({ id: room.id, name: room.name });\r\n      });\r\n    });\r\n    this.units = units;\r\n  }\r\n  private async initializeData() {\r\n    await this.getArchivedTasks();\r\n  }\r\n  private async getArchivedTasks() {\r\n    const res = await this.houseKeepingService.getArchivedHKTasks({ property_id: Number(this.propertyId), ...this.filters });\r\n    this.data = [...(res || [])]?.map(t => ({ ...t, id: v4() }));\r\n  }\r\n\r\n  @Listen('dateChanged')\r\n  handleDateRangeChange(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    const { start, end } = e.detail;\r\n    this.updateFilters({\r\n      from_date: start.format('YYYY-MM-DD'),\r\n      to_date: end.format('YYYY-MM-DD'),\r\n    });\r\n  }\r\n\r\n  private updateFilters(props: Partial<ArchivesFilters>) {\r\n    this.filters = { ...this.filters, ...props };\r\n  }\r\n  async searchArchive(e: CustomEvent) {\r\n    try {\r\n      e.stopImmediatePropagation();\r\n      e.stopPropagation();\r\n      this.isLoading = 'search';\r\n      await this.getArchivedTasks();\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      this.isLoading = null;\r\n    }\r\n  }\r\n\r\n  async exportArchive(e: CustomEvent) {\r\n    try {\r\n      e.stopImmediatePropagation();\r\n      e.stopPropagation();\r\n      this.isLoading = 'excel';\r\n      this.getArchivedTasks();\r\n    } catch (error) {\r\n      console.log(error);\r\n    } finally {\r\n      this.isLoading = null;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        <ir-title class=\"px-1\" label=\"Cleaning Archives (90 days)\" displayContext=\"sidebar\"></ir-title>\r\n        <section class=\"px-1\">\r\n          <div class=\"d-flex\">\r\n            <ir-select\r\n              class=\"w-100\"\r\n              showFirstOption={false}\r\n              LabelAvailable={false}\r\n              data={[\r\n                { text: 'All units', value: '000' },\r\n                ,\r\n                ...this.units?.map(v => ({\r\n                  text: v.name,\r\n                  value: v.id.toString(),\r\n                })),\r\n              ]}\r\n              onSelectChange={e => {\r\n                e.stopImmediatePropagation();\r\n                e.stopPropagation();\r\n                if (e.detail === '000') {\r\n                  this.updateFilters({ filtered_by_unit: [] });\r\n                } else {\r\n                  this.updateFilters({ filtered_by_unit: [e.detail] });\r\n                }\r\n              }}\r\n            ></ir-select>\r\n            <ir-select\r\n              class=\"ml-1 w-100\"\r\n              selectedValue={this.filters?.filtered_by_hkm?.length === housekeeping_store.hk_criteria.housekeepers.length ? '000' : this.filters?.filtered_by_hkm[0]?.toString()}\r\n              LabelAvailable={false}\r\n              showFirstOption={false}\r\n              data={[\r\n                { text: 'All housekeepers', value: '000' },\r\n                ...housekeeping_store?.hk_criteria?.housekeepers.map(v => ({\r\n                  text: v.name,\r\n                  value: v.id.toString(),\r\n                })),\r\n              ]}\r\n              onSelectChange={e => {\r\n                if (e.detail === '000') {\r\n                  this.updateFilters({ filtered_by_hkm: [] });\r\n                } else {\r\n                  this.updateFilters({ filtered_by_hkm: [e.detail] });\r\n                }\r\n              }}\r\n            ></ir-select>\r\n          </div>\r\n          <div class=\"d-flex mt-1 align-items-center\">\r\n            <igl-date-range\r\n              class=\"mr-1\"\r\n              dateLabel={locales.entries.Lcz_Dates}\r\n              minDate={moment().add(-90, 'days').format('YYYY-MM-DD')}\r\n              defaultData={{\r\n                fromDate: this.filters.from_date,\r\n                toDate: this.filters.to_date,\r\n              }}\r\n            ></igl-date-range>\r\n            <ir-button\r\n              title={locales.entries?.Lcz_Search}\r\n              variant=\"icon\"\r\n              icon_name=\"search\"\r\n              class=\"mr-1\"\r\n              isLoading={this.isLoading === 'search'}\r\n              onClickHandler={e => this.searchArchive(e)}\r\n            ></ir-button>\r\n            <ir-button\r\n              title={locales.entries?.Lcz_ExportToExcel}\r\n              variant=\"icon\"\r\n              icon_name=\"file\"\r\n              isLoading={this.isLoading === 'excel'}\r\n              onClickHandler={e => this.exportArchive(e)}\r\n            ></ir-button>\r\n          </div>\r\n          {/* route to booking details */}\r\n          {this.data?.length === 0 && !isRequestPending('/Get_Archived_HK_Tasks') ? (\r\n            <p class={'text-center mt-2'}>No Results Found</p>\r\n          ) : (\r\n            <table class=\"mt-2\">\r\n              <thead>\r\n                <th class=\"sr-only\">period</th>\r\n                <th class=\"sr-only\">housekeeper name</th>\r\n                <th class=\"sr-only\">unit</th>\r\n                <th class=\"sr-only\">booking number</th>\r\n              </thead>\r\n              <tbody>\r\n                {this.data?.map(d => (\r\n                  <tr key={d.id}>\r\n                    <td class=\"pr-2\">{d.date}</td>\r\n                    <td class=\"px-2\">{d.house_keeper}</td>\r\n                    <td class=\"px-2\">{d.unit}</td>\r\n                    <td class=\"px-2\">\r\n                      {d.booking_nbr ? (\r\n                        <ir-button\r\n                          btn_color=\"link\"\r\n                          btnStyle={{\r\n                            width: 'fit-content',\r\n                            padding: '0',\r\n                            margin: '0',\r\n                          }}\r\n                          labelStyle={{\r\n                            padding: '0',\r\n                          }}\r\n                          text={d.booking_nbr.toString()}\r\n                          onClick={() => {\r\n                            window.open(`https://x.igloorooms.com/manage/acbookingeditV2.aspx?BN=${d.booking_nbr}`, '_blank');\r\n                          }}\r\n                        ></ir-button>\r\n                      ) : (\r\n                        'N/A'\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </section>\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n  min-width: 20vw;\r\n  height: 100%;\r\n}\r\n@media (min-width: 768px) {\r\n  .collapse-btn {\r\n    display: none;\r\n  }\r\n  #hkTasksFiltersCollapse.collapse:not(.show) {\r\n    display: block;\r\n  }\r\n}\r\n","import { Component, Event, EventEmitter, h, Prop, State } from '@stencil/core';\r\nimport { TaskFilters } from '../types';\r\nimport housekeeping_store from '@/stores/housekeeping.store';\r\nexport type ModifiedTaskFilters = Omit<TaskFilters, 'housekeepers'> & { housekeepers: string };\r\n@Component({\r\n  tag: 'ir-tasks-filters',\r\n  styleUrl: 'ir-tasks-filters.css',\r\n  scoped: true,\r\n})\r\nexport class IrTasksFilters {\r\n  @Prop() isLoading: boolean;\r\n\r\n  @State() filters: ModifiedTaskFilters = {\r\n    cleaning_periods: {\r\n      code: '',\r\n    },\r\n    housekeepers: '000',\r\n    cleaning_frequencies: { code: '' },\r\n    dusty_units: { code: '' },\r\n    highlight_check_ins: { code: '' },\r\n  };\r\n\r\n  @State() collapsed: boolean = false;\r\n\r\n  @Event() applyFilters: EventEmitter<TaskFilters>;\r\n\r\n  private baseFilters: TaskFilters;\r\n\r\n  componentWillLoad() {\r\n    this.baseFilters = {\r\n      cleaning_periods: housekeeping_store?.hk_criteria?.cleaning_periods[0],\r\n      housekeepers: { ids: housekeeping_store.hk_criteria.housekeepers?.map(h => h.id) },\r\n      cleaning_frequencies: housekeeping_store?.hk_criteria?.cleaning_frequencies[0],\r\n      dusty_units: housekeeping_store?.hk_criteria?.dusty_periods[0],\r\n      highlight_check_ins: housekeeping_store?.hk_criteria?.highlight_checkin_options[0],\r\n    };\r\n    this.filters = { ...this.baseFilters, housekeepers: '000' };\r\n  }\r\n\r\n  private updateFilter(params: Partial<ModifiedTaskFilters>) {\r\n    this.filters = { ...this.filters, ...params };\r\n  }\r\n  private applyFiltersEvt(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.applyFilters.emit({\r\n      ...this.filters,\r\n      housekeepers: {\r\n        ids: this.filters.housekeepers === '000' ? this.baseFilters.housekeepers.ids : [Number(this.filters.housekeepers)],\r\n      },\r\n    });\r\n  }\r\n  private resetFilters(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.filters = { ...this.baseFilters, housekeepers: '000' };\r\n    this.applyFilters.emit({\r\n      ...this.filters,\r\n      housekeepers: {\r\n        ids: this.filters.housekeepers === '000' ? this.baseFilters.housekeepers.ids : [Number(this.filters.housekeepers)],\r\n      },\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"card mb-0 p-1 d-flex flex-column\">\r\n        <div class=\"d-flex align-items-center justify-content-between\">\r\n          <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" height={18} width={18}>\r\n              <path\r\n                fill=\"currentColor\"\r\n                d=\"M3.9 54.9C10.5 40.9 24.5 32 40 32l432 0c15.5 0 29.5 8.9 36.1 22.9s4.6 30.5-5.2 42.5L320 320.9 320 448c0 12.1-6.8 23.2-17.7 28.6s-23.8 4.3-33.5-3l-64-48c-8.1-6-12.8-15.5-12.8-25.6l0-79.1L9 97.3C-.7 85.4-2.8 68.8 3.9 54.9z\"\r\n              />\r\n            </svg>\r\n            <h4 class=\"m-0 p-0 flex-grow-1\">Filters</h4>\r\n          </div>\r\n          <ir-button\r\n            variant=\"icon\"\r\n            id=\"drawer-icon\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#hkTasksFiltersCollapse\"\r\n            aria-expanded={this.collapsed ? 'true' : 'false'}\r\n            aria-controls=\"hkTasksFiltersCollapse\"\r\n            class=\"mr-1 collapse-btn\"\r\n            icon_name={this.collapsed ? 'closed_eye' : 'open_eye'}\r\n            onClickHandler={() => {\r\n              this.collapsed = !this.collapsed;\r\n            }}\r\n            style={{ '--icon-size': '1.6rem' }}\r\n          ></ir-button>\r\n        </div>\r\n        <div class=\"m-0 p-0 collapse\" id=\"hkTasksFiltersCollapse\">\r\n          <div class=\"d-flex flex-column\" style={{ gap: '0.5rem' }}>\r\n            <fieldset class=\"pt-1\">\r\n              <p class=\"m-0 p-0\">Period</p>\r\n              <ir-select\r\n                testId=\"period\"\r\n                selectedValue={this.filters?.cleaning_periods?.code}\r\n                LabelAvailable={false}\r\n                showFirstOption={false}\r\n                data={housekeeping_store?.hk_criteria?.cleaning_periods.map(v => ({\r\n                  text: v.description,\r\n                  value: v.code,\r\n                }))}\r\n                onSelectChange={e => {\r\n                  this.updateFilter({ cleaning_periods: { code: e.detail } });\r\n                }}\r\n              ></ir-select>\r\n            </fieldset>\r\n            <fieldset>\r\n              <p class=\"m-0 p-0\">Housekeepers</p>\r\n              <ir-select\r\n                testId=\"housekeepers\"\r\n                selectedValue={this.filters?.housekeepers}\r\n                LabelAvailable={false}\r\n                showFirstOption={false}\r\n                data={[\r\n                  { text: 'All housekeepers', value: '000' },\r\n                  ...housekeeping_store?.hk_criteria?.housekeepers.map(v => ({\r\n                    text: v.name,\r\n                    value: v.id.toString(),\r\n                  })),\r\n                ]}\r\n                onSelectChange={e => {\r\n                  // if (e.detail === '000') {\r\n                  //   this.updateFilter({ housekeepers: { ids: this.baseFilters?.housekeepers?.ids } });\r\n                  // } else {\r\n                  //   this.updateFilter({ housekeepers: { ids: [e.detail] } });\r\n                  // }\r\n                  this.updateFilter({ housekeepers: e.detail });\r\n                }}\r\n              ></ir-select>\r\n            </fieldset>\r\n            <fieldset>\r\n              <p class=\"m-0 p-0\">Cleaning frequency</p>\r\n              <ir-select\r\n                testId=\"cleaning_frequency\"\r\n                selectedValue={this.filters?.cleaning_frequencies?.code}\r\n                LabelAvailable={false}\r\n                showFirstOption={false}\r\n                data={housekeeping_store?.hk_criteria?.cleaning_frequencies.map(v => ({\r\n                  text: v.description,\r\n                  value: v.code,\r\n                }))}\r\n                onSelectChange={e => {\r\n                  this.updateFilter({ cleaning_frequencies: { code: e.detail } });\r\n                }}\r\n              ></ir-select>\r\n            </fieldset>\r\n            <fieldset>\r\n              <p class=\"m-0 p-0\">Dusty units</p>\r\n              <ir-select\r\n                testId=\"dusty_units\"\r\n                showFirstOption={false}\r\n                LabelAvailable={false}\r\n                selectedValue={this.filters?.dusty_units?.code}\r\n                data={housekeeping_store.hk_criteria?.dusty_periods?.map(v => ({\r\n                  text: v.description,\r\n                  value: v.code,\r\n                }))}\r\n                onSelectChange={e => {\r\n                  e.stopImmediatePropagation();\r\n                  e.stopPropagation();\r\n                  this.updateFilter({ dusty_units: { code: e.detail } });\r\n                }}\r\n              ></ir-select>\r\n            </fieldset>\r\n            <fieldset class=\"mb-1\">\r\n              <p class=\"m-0 p-0\">Highlight check-ins</p>\r\n              <ir-select\r\n                testId=\"highlight_check_ins\"\r\n                selectedValue={this.filters?.highlight_check_ins?.code}\r\n                LabelAvailable={false}\r\n                showFirstOption={false}\r\n                onSelectChange={e => {\r\n                  this.updateFilter({ highlight_check_ins: { code: e.detail } });\r\n                }}\r\n                data={housekeeping_store.hk_criteria?.highlight_checkin_options?.map(v => ({\r\n                  text: v.description,\r\n                  value: v.code,\r\n                }))}\r\n              ></ir-select>\r\n            </fieldset>\r\n            <div class=\"d-flex align-items-center justify-content-end\" style={{ gap: '1rem' }}>\r\n              <ir-button btn_type=\"button\" data-testid=\"reset\" text=\"Reset\" size=\"sm\" btn_color=\"outline\" onClickHandler={e => this.resetFilters(e)}></ir-button>\r\n              <ir-button btn_type=\"button\" data-testid=\"apply\" isLoading={this.isLoading} text=\"Apply\" size=\"sm\" onClickHandler={e => this.applyFiltersEvt(e)}></ir-button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: block;\r\n}\r\n","import { Component, Event, EventEmitter, h, Listen, Prop } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-tasks-header',\r\n  styleUrl: 'ir-tasks-header.css',\r\n  scoped: true,\r\n})\r\nexport class IrTasksHeader {\r\n  @Prop() isCleanedEnabled: boolean = false;\r\n\r\n  private btnRef: HTMLIrButtonElement;\r\n\r\n  @Event() headerButtonPress: EventEmitter<{ name: 'cleaned' | 'export' | 'archive' }>;\r\n\r\n  @Listen('animateCleanedButton', { target: 'body' })\r\n  handleCleanedButtonAnimation(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.btnRef.bounce();\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"d-flex align-items-center justify-content-between\">\r\n        <h3>Housekeeping Tasks</h3>\r\n        <div class=\"d-flex align-items-center\" style={{ gap: '1rem' }}>\r\n          <ir-button\r\n            size=\"sm\"\r\n            btn_color=\"outline\"\r\n            text=\"Export\"\r\n            onClickHandler={e => {\r\n              e.stopImmediatePropagation();\r\n              e.stopPropagation();\r\n              this.headerButtonPress.emit({ name: 'export' });\r\n            }}\r\n          ></ir-button>\r\n          <ir-button\r\n            size=\"sm\"\r\n            btn_color=\"outline\"\r\n            text=\"Archive\"\r\n            onClickHandler={e => {\r\n              e.stopImmediatePropagation();\r\n              e.stopPropagation();\r\n              this.headerButtonPress.emit({ name: 'archive' });\r\n            }}\r\n          ></ir-button>\r\n          <ir-button\r\n            onClickHandler={e => {\r\n              e.stopImmediatePropagation();\r\n              e.stopPropagation();\r\n              this.headerButtonPress.emit({ name: 'cleaned' });\r\n            }}\r\n            size=\"sm\"\r\n            btn_disabled={!this.isCleanedEnabled}\r\n            text=\"Cleaned\"\r\n            ref={el => (this.btnRef = el)}\r\n          ></ir-button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",":host {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.selected-row {\r\n  background-color: rgba(0, 0, 255, 0.1);\r\n}\r\n.selected-row:hover {\r\n  background-color: rgba(0, 0, 255, 0.15);\r\n}\r\n.header-content {\r\n  height: 100%;\r\n}\r\n.sortable {\r\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n}\r\n.sortable svg {\r\n  color: var(--blue);\r\n}\r\n.task-row,\r\n.table th,\r\n.table td {\r\n  padding: 0.25rem 0.5rem !important;\r\n  white-space: nowrap;\r\n  max-width: max-content !important;\r\n  /* background: white; */\r\n  border: 0;\r\n}\r\n.highlighted-unit {\r\n  background: #000;\r\n  color: white;\r\n  padding: 0.2rem 0.3rem;\r\n  border-radius: 4px;\r\n}\r\n.table th,\r\n.table td {\r\n  text-align: start;\r\n}\r\n.table-container {\r\n  max-height: 80vh;\r\n}\r\n/* td,\r\nth {\r\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\r\n  max-width: max-content !important;\r\n \r\n  text-align: start;\r\n}\r\ntr {\r\n  border-bottom: 1px solid #e0e0e0;\r\n} */\r\n.task-table-row {\r\n  background: white !important;\r\n}\r\n.task-table-row:hover {\r\n  background: #e2e6ea3f !important;\r\n}\r\n.selected {\r\n  background: #e3f3fa !important;\r\n}\r\n.sortable:hover {\r\n  color: #212529;\r\n  background-color: #e2e6ea;\r\n  border-color: #dae0e5;\r\n  cursor: pointer;\r\n}\r\n.sortable:active {\r\n  color: #212529;\r\n  background-color: #dae0e5;\r\n  border-color: #d3d9df;\r\n}\r\n","import { Component, Event, EventEmitter, Listen, Prop, State, Watch, h } from '@stencil/core';\r\nimport { Task } from '@/models/housekeeping';\r\nimport moment from 'moment';\r\n\r\n@Component({\r\n  tag: 'ir-tasks-table',\r\n  styleUrl: 'ir-tasks-table.css',\r\n  scoped: true,\r\n})\r\nexport class IrTasksTable {\r\n  @Prop({ mutable: true }) tasks: Task[] = [];\r\n\r\n  /**\r\n   * Tracks which task IDs are currently selected via checkboxes.\r\n   */\r\n  @State() selectedIds: Task['id'][] = [];\r\n\r\n  /**\r\n   * Controls whether the \"Confirm Clean\" modal is shown.\r\n   */\r\n  @State() showConfirmModal: boolean = false;\r\n\r\n  /**\r\n   * The key we are sorting by (e.g., \"date\", \"unit\", \"status\", \"housekeeper\").\r\n   */\r\n  @State() sortKey: string = 'date';\r\n\r\n  /**\r\n   * The sort direction: ASC or DESC.\r\n   */\r\n  @State() sortDirection: 'ASC' | 'DESC' = 'ASC';\r\n  @State() checkableTasks: Task[] = [];\r\n\r\n  @Event({ bubbles: true, composed: true }) animateCleanedButton: EventEmitter<null>;\r\n  @Event({ bubbles: true, composed: true }) rowSelectChange: EventEmitter<Task[]>;\r\n\r\n  componentWillLoad() {\r\n    this.sortTasks('date', 'ASC');\r\n    if (this.tasks) {\r\n      this.assignCheckableTasks();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sorts the tasks by the given key. If no direction is provided,\r\n   * it toggles between ascending and descending.\r\n   */\r\n  private handleSort(key: string) {\r\n    let newDirection = this.sortDirection;\r\n    // If we're clicking the same column, flip the direction. If a new column, default to ASC.\r\n    if (this.sortKey === key) {\r\n      newDirection = this.sortDirection === 'ASC' ? 'DESC' : 'ASC';\r\n    } else {\r\n      newDirection = 'ASC';\r\n    }\r\n    this.sortTasks(key, newDirection);\r\n  }\r\n\r\n  @Listen('clearSelectedHkTasks', { target: 'body' })\r\n  handleClearSelectedHkTasks(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.selectedIds = [];\r\n  }\r\n\r\n  @Watch('tasks')\r\n  handleTasksChange(newTasks: Task[]) {\r\n    if (newTasks?.length) {\r\n      this.selectedIds = [];\r\n      this.assignCheckableTasks();\r\n    }\r\n  }\r\n  /**\r\n   * Helper to sort tasks array in state.\r\n   */\r\n  /**\r\n   * Sorts the tasks by the given key in ASC or DESC order.\r\n   * If values for `key` are duplicates, it sorts by `date` ascending.\r\n   * If `date` is also the same, it finally sorts by `unit.name` ascending.\r\n   */\r\n  private sortTasks(key: string, direction: 'ASC' | 'DESC') {\r\n    const sorted = [...this.tasks].sort((a, b) => {\r\n      // Primary comparison: a[key] vs b[key]\r\n      let aPrimary = a[key];\r\n      let bPrimary = b[key];\r\n      if (key === 'status') {\r\n        aPrimary = a[key].description;\r\n        bPrimary = b[key].description;\r\n      }\r\n\r\n      if (aPrimary < bPrimary) {\r\n        return direction === 'ASC' ? -1 : 1;\r\n      }\r\n      if (aPrimary > bPrimary) {\r\n        return direction === 'ASC' ? 1 : -1;\r\n      }\r\n\r\n      // First tiebreaker: compare by date (always ascending)\r\n      if (a.date < b.date) return -1;\r\n      if (a.date > b.date) return 1;\r\n\r\n      // Second tiebreaker: compare by unit.name (always ascending)\r\n      if (a.unit?.name < b.unit?.name) return -1;\r\n      if (a.unit?.name > b.unit?.name) return 1;\r\n\r\n      return 0;\r\n    });\r\n\r\n    // Update component state\r\n    this.tasks = sorted;\r\n    this.sortKey = key;\r\n    this.sortDirection = direction;\r\n  }\r\n\r\n  /**\r\n   * Helper to toggle selection for a single row.\r\n   */\r\n  private toggleSelection(id: Task['id']) {\r\n    if (this.selectedIds.includes(id)) {\r\n      this.selectedIds = this.selectedIds.filter(item => item !== id);\r\n    } else {\r\n      this.selectedIds = [...this.selectedIds, id];\r\n      this.animateCleanedButton.emit(null);\r\n    }\r\n    this.emitSelectedTasks();\r\n  }\r\n\r\n  private emitSelectedTasks() {\r\n    if (this.tasks.length === 0) {\r\n      return;\r\n    }\r\n    const filteredTasks = this.tasks.filter(t => this.selectedIds.includes(t.id));\r\n    this.rowSelectChange.emit(filteredTasks);\r\n  }\r\n\r\n  /**\r\n   * Checks if every row is selected.\r\n   */\r\n  private get allSelected(): boolean {\r\n    return this.checkableTasks.length > 0 && this.selectedIds.length === this.checkableTasks.length;\r\n  }\r\n\r\n  /**\r\n   * Toggles selection on all visible tasks at once.\r\n   */\r\n  private toggleSelectAll() {\r\n    if (this.allSelected) {\r\n      this.selectedIds = [];\r\n    } else {\r\n      this.selectedIds = this.checkableTasks.map(t => t.id);\r\n      this.animateCleanedButton.emit(null);\r\n    }\r\n    this.emitSelectedTasks();\r\n  }\r\n\r\n  /**\r\n   * Assigns checkable tasks based on predefined criteria.\r\n   *\r\n   * This method filters tasks and determines which ones are eligible\r\n   * to be selected using checkboxes. A task is considered \"checkable\"\r\n   * if its date is today or earlier.\r\n   *\r\n   * The filtered tasks are stored in `this.checkableTasks`, ensuring\r\n   * only relevant tasks can be interacted with by users.\r\n   */\r\n  private assignCheckableTasks() {\r\n    const tasks = [];\r\n    this.tasks.forEach(task => {\r\n      if (this.isCheckable(task)) {\r\n        tasks.push(task);\r\n      }\r\n    });\r\n    this.checkableTasks = [...tasks];\r\n  }\r\n\r\n  /**\r\n   * Determines if a task is checkable.\r\n   *\r\n   * A task is considered checkable if its date is today or any day before.\r\n   * This prevents users from selecting tasks with future dates.\r\n   *\r\n   * @param {string} date - The task's date in 'YYYY-MM-DD' format.\r\n   * @returns {boolean} - Returns `true` if the task's date is today or earlier, otherwise `false`.\r\n   */\r\n  private isCheckable(task: Task): boolean {\r\n    if (!task.hkm_id) {\r\n      return false;\r\n    }\r\n    return moment(task.date, 'YYYY-MM-DD').isSameOrBefore(moment(), 'days');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"card table-container h-100 p-1 m-0 table-responsive\">\r\n        <table class=\"table\" data-testid=\"hk_tasks_table\">\r\n          <thead class=\"table-header\">\r\n            <tr>\r\n              <th>\r\n                <ir-checkbox\r\n                  indeterminate={this.selectedIds.length > 0 && this.selectedIds.length < this.checkableTasks.length}\r\n                  checked={this.allSelected}\r\n                  onCheckChange={() => this.toggleSelectAll()}\r\n                ></ir-checkbox>\r\n              </th>\r\n              <th>Period</th>\r\n              <th>Unit</th>\r\n              <th class={'sortable'} onClick={() => this.handleSort('status')}>\r\n                <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\r\n                  <span>Status</span>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    class=\"lucide lucide-arrow-up-down\"\r\n                  >\r\n                    <path d=\"m21 16-4 4-4-4\" />\r\n                    <path d=\"M17 20V4\" />\r\n                    <path d=\"m3 8 4-4 4 4\" />\r\n                    <path d=\"M7 4v16\" />\r\n                  </svg>\r\n                </div>\r\n              </th>\r\n              <th>Hint</th>\r\n              <th>A</th>\r\n              <th>C</th>\r\n              <th>I</th>\r\n              <th style={{ textAlign: 'start' }} class={'sortable'} onClick={() => this.handleSort('housekeeper')}>\r\n                <div class={'d-flex align-items-center'} style={{ gap: '0.5rem' }}>\r\n                  <span>Housekeeper</span>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width=\"16\"\r\n                    height=\"16\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    fill=\"none\"\r\n                    stroke=\"currentColor\"\r\n                    stroke-width=\"2\"\r\n                    stroke-linecap=\"round\"\r\n                    stroke-linejoin=\"round\"\r\n                    class=\"lucide lucide-arrow-up-down\"\r\n                  >\r\n                    <path d=\"m21 16-4 4-4-4\" />\r\n                    <path d=\"M17 20V4\" />\r\n                    <path d=\"m3 8 4-4 4 4\" />\r\n                    <path d=\"M7 4v16\" />\r\n                  </svg>\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {this.tasks.length === 0 && (\r\n              <tr>\r\n                <td colSpan={9} class=\"text-center\">\r\n                  <div style={{ height: '300px' }} class=\"d-flex align-items-center justify-content-center\">\r\n                    <span> No Tasks Found</span>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n            {this.tasks.map(task => {\r\n              const isSelected = this.selectedIds.includes(task.id);\r\n              const isCheckable = this.isCheckable(task);\r\n              return (\r\n                <tr\r\n                  data-date={task.date}\r\n                  data-testid={`hk_task_row`}\r\n                  data-assigned={task.housekeeper ? 'true' : 'false'}\r\n                  style={isCheckable && { cursor: 'pointer' }}\r\n                  onClick={() => {\r\n                    if (!isCheckable) {\r\n                      return;\r\n                    }\r\n                    this.toggleSelection(task.id);\r\n                  }}\r\n                  class={{ 'selected': isSelected, 'task-table-row': true }}\r\n                  key={task.id}\r\n                >\r\n                  <td class=\"task-row\">{isCheckable && <ir-checkbox checked={isSelected}></ir-checkbox>}</td>\r\n                  <td class=\"task-row\">{task.formatted_date}</td>\r\n                  <td class=\"task-row\">\r\n                    <span class={{ 'highlighted-unit': task.is_highlight }}>{task.unit.name}</span>\r\n                  </td>\r\n                  <td class=\"task-row\">{task.status.description}</td>\r\n                  <td class=\"task-row\">{task.hint}</td>\r\n                  <td class=\"task-row\">{task.adult}</td>\r\n                  <td class=\"task-row\">{task.child}</td>\r\n                  <td class=\"task-row\">{task.infant}</td>\r\n                  <td class=\"w-50 task-row\" style={{ textAlign: 'start' }}>\r\n                    {task.housekeeper ?? 'Unassigned'}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}