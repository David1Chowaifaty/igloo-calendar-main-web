{"version":3,"names":["irTextareaCss","IrTextareaStyle0","IrTextArea","constructor","hostRef","this","rows","cols","text","label","placeholder","value","maxLength","variant","labelWidth","error","handleAriaInvalidChange","newValue","render","h","class","testId","style","Object","assign","height","styles","onChange","e","textChange","emit","target","textareaClassname","onInput"],"sources":["src/components/ui/ir-textarea/ir-textarea.css?tag=ir-textarea&encapsulation=scoped","src/components/ui/ir-textarea/ir-textarea.tsx"],"sourcesContent":[".prepend-textarea {\n  padding: 0 !important ;\n}\n.ta-prepend-text {\n  width: 100%;\n}\n","import { Component, Event, EventEmitter, Prop, State, Watch, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-textarea',\n  styleUrl: 'ir-textarea.css',\n  scoped: true,\n})\nexport class IrTextArea {\n  /**\n   * Number of visible text lines.\n   */\n  @Prop() rows = 3;\n\n  /**\n   * Number of visible character columns.\n   */\n  @Prop() cols = 5;\n\n  /**\n   * Unused property, intended to store textarea text.\n   */\n  @Prop() text = '';\n\n  /**\n   * Text label displayed above or beside the textarea.\n   */\n  @Prop() label = '<label>';\n\n  /**\n   * Placeholder text shown when input is empty.\n   */\n  @Prop() placeholder = '<placeholder>';\n\n  /**\n   * Current value of the textarea (supports two-way binding).\n   */\n  @Prop() value = '';\n\n  /**\n   * Maximum number of characters allowed.\n   */\n  @Prop() maxLength: number = 250;\n\n  /**\n   * Additional classes for the textarea element.\n   */\n  @Prop() textareaClassname: string;\n\n  /**\n   * Layout style of the textarea:\n   * `'default'` shows label above, `'prepend'` shows label on the left.\n   */\n  @Prop() variant: 'default' | 'prepend' = 'default';\n\n  /**\n   * Width of the label in grid columns (for `variant=\"prepend\"`).\n   */\n  @Prop() labelWidth: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 = 3;\n\n  /**\n   * Inline styles applied directly to the textarea.\n   */\n  @Prop() styles: { [key: string]: string };\n\n  /**\n   * `data-testid` for targeting in tests.\n   */\n  @Prop() testId: string;\n\n  /**\n   * Indicates if the field is in an error state.\n   */\n  @State() error = false;\n\n  /**\n   * Emits when the textarea content changes.\n   *\n   * Example:\n   * ```tsx\n   * <ir-textarea onTextChange={(e) => console.log(e.detail)} />\n   * ```\n   */\n  @Event() textChange: EventEmitter<string>;\n\n  @Watch('aria-invalid')\n  handleAriaInvalidChange(newValue) {\n    this.error = newValue === 'true';\n  }\n  render() {\n    if (this.variant === 'prepend') {\n      return (\n        <fieldset class=\"input-group\">\n          <div class={`input-group-prepend col-${this.labelWidth} prepend-textarea`}>\n            <span class=\"input-group-text ta-prepend-text\">{this.label}</span>\n          </div>\n          <textarea\n            data-testid={this.testId}\n            value={this.value}\n            class={`form-control`}\n            style={{ height: '7rem', ...this.styles }}\n            maxLength={this.maxLength}\n            onChange={e => this.textChange.emit((e.target as HTMLTextAreaElement).value)}\n            aria-label={this.label}\n          ></textarea>\n        </fieldset>\n      );\n    }\n    return (\n      <div class={'form-group'}>\n        <label>{this.label}</label>\n        <textarea\n          data-testid={this.testId}\n          style={this.styles}\n          maxLength={this.maxLength}\n          rows={this.rows}\n          value={this.value}\n          class={`form-control ${this.textareaClassname} ${this.error ? 'border-danger' : ''}`}\n          placeholder={this.placeholder}\n          onInput={e => this.textChange.emit((e.target as HTMLTextAreaElement).value)}\n        ></textarea>\n      </div>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAgB,oGACtB,MAAAC,EAAeD,E,MCMFE,EAAU,MALvB,WAAAC,CAAAC,G,iDASUC,KAAAC,KAAO,EAKPD,KAAAE,KAAO,EAKPF,KAAAG,KAAO,GAKPH,KAAAI,MAAQ,UAKRJ,KAAAK,YAAc,gBAKdL,KAAAM,MAAQ,GAKRN,KAAAO,UAAoB,IAWpBP,KAAAQ,QAAiC,UAKjCR,KAAAS,WAA0D,EAezDT,KAAAU,MAAQ,K,CAajB,uBAAAC,CAAwBC,GACtBZ,KAAKU,MAAQE,IAAa,M,CAE5B,MAAAC,GACE,GAAIb,KAAKQ,UAAY,UAAW,CAC9B,OACEM,EAAA,YAAUC,MAAM,eACdD,EAAA,OAAKC,MAAO,2BAA2Bf,KAAKS,+BAC1CK,EAAA,QAAMC,MAAM,oCAAoCf,KAAKI,QAEvDU,EAAA,0BACed,KAAKgB,OAClBV,MAAON,KAAKM,MACZS,MAAO,eACPE,MAAKC,OAAAC,OAAA,CAAIC,OAAQ,QAAWpB,KAAKqB,QACjCd,UAAWP,KAAKO,UAChBe,SAAUC,GAAKvB,KAAKwB,WAAWC,KAAMF,EAAEG,OAA+BpB,OAAM,aAChEN,KAAKI,Q,CAKzB,OACEU,EAAA,OAAKC,MAAO,cACVD,EAAA,aAAQd,KAAKI,OACbU,EAAA,0BACed,KAAKgB,OAClBC,MAAOjB,KAAKqB,OACZd,UAAWP,KAAKO,UAChBN,KAAMD,KAAKC,KACXK,MAAON,KAAKM,MACZS,MAAO,gBAAgBf,KAAK2B,qBAAqB3B,KAAKU,MAAQ,gBAAkB,KAChFL,YAAaL,KAAKK,YAClBuB,QAASL,GAAKvB,KAAKwB,WAAWC,KAAMF,EAAEG,OAA+BpB,S","ignoreList":[]}