{"version":3,"names":["irHkTasksCss","IrHkTasksStyle0","IrHkTasks","constructor","hostRef","this","language","ticket","isLoading","selectedDuration","selectedHouseKeeper","selectedRoom","archiveOpened","roomService","RoomService","houseKeepingService","HouseKeepingService","token","Token","componentWillLoad","setToken","initializeApp","handleResetData","e","stopImmediatePropagation","stopPropagation","arrival","arrival_time","housekeeper","unit","status","executeHKAction","property_id","propertyid","id","code","getExposedHKSetup","ticketChanged","newValue","oldValue","handleCheckChange","action","detail","modalOpenTimeOut","setTimeout","modal","el","querySelector","openModal","handleCloseSidebar","disconnectedCallback","clearTimeout","getPendingActions","getHKPendingActions","bracket","propertyId","propertyData","getExposedProperty","aname","p","is_backend","My_Result","updateHKStore","requests","getExposedHKStatusCriteria","fetchLanguage","unshift","Promise","all","housekeeping_store","hk_tasks","brackets","error","console","handleConfirm","preventDefault","render","h","Host","class","label","locales","entries","Lcz_HousekeepingTasks","justifyContent","slot","text","Lcz_Archive","size","onClickHandler","selectedValue","onSelectChange","data","map","description","value","showFirstOption","LabelAvailable","housekeepers","name","toString","Lcz_Unit","Lcz_Status","Lcz_Arrivaldate","Lcz_ArrivalTime","Lcz_Housekeeper","Lcz_Done","_a","pending_housekeepers","key","onCheckChange","checked","leftBtnText","Lcz_No","rightBtnText","Lcz_Yes","onConfirmModal","bind","onCancelModal","modalBody"],"sources":["src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.css?tag=ir-hk-tasks&encapsulation=scoped","src/components/ir-housekeeping/ir-hk-tasks/ir-hk-tasks.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n}\r\n.checkbox-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.table-container {\r\n  overflow-x: auto;\r\n  max-width: 100%;\r\n  width: max-content;\r\n}\r\n.table,\r\nth,\r\ntd {\r\n  border-color: white !important;\r\n}\r\n\r\n.select-container {\r\n  max-width: 500px;\r\n}\r\n\r\n@media only screen and (min-width: 900px) {\r\n  td {\r\n    min-width: 140px !important;\r\n    width: max-content !important;\r\n  }\r\n}\r\n@media only screen and (max-width: 900px) {\r\n  td {\r\n    min-width: 100px !important;\r\n  }\r\n  .table-container {\r\n    width: max-content !important;\r\n  }\r\n}\r\n","import { IPendingActions } from '@/models/housekeeping';\r\nimport Token from '@/models/Token';\r\nimport { HouseKeepingService } from '@/services/housekeeping.service';\r\nimport { RoomService } from '@/services/room.service';\r\nimport housekeeping_store, { updateHKStore } from '@/stores/housekeeping.store';\r\nimport locales from '@/stores/locales.store';\r\nimport { Component, Host, Listen, Prop, State, Watch, h, Element } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-hk-tasks',\r\n  styleUrl: 'ir-hk-tasks.css',\r\n  scoped: true,\r\n})\r\nexport class IrHkTasks {\r\n  @Element() el: HTMLElement;\r\n\r\n  @Prop() language: string = '';\r\n  @Prop() ticket: string = '';\r\n  @Prop() propertyid: number;\r\n  @Prop() p: string;\r\n\r\n  @State() isLoading = false;\r\n  @State() selectedDuration = '';\r\n  @State() selectedHouseKeeper = '0';\r\n  @State() selectedRoom: IPendingActions | null = null;\r\n  @State() archiveOpened = false;\r\n  @State() property_id: number;\r\n\r\n  private modalOpenTimeOut: NodeJS.Timeout;\r\n  private roomService = new RoomService();\r\n  private houseKeepingService = new HouseKeepingService();\r\n  private token = new Token();\r\n\r\n  componentWillLoad() {\r\n    if (this.ticket !== '') {\r\n      this.token.setToken(this.ticket);\r\n      this.initializeApp();\r\n    }\r\n  }\r\n\r\n  @Listen('resetData')\r\n  async handleResetData(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    const { arrival, arrival_time, housekeeper, unit, status } = this.selectedRoom;\r\n    this.houseKeepingService.executeHKAction({\r\n      property_id: this.propertyid,\r\n      arrival,\r\n      arrival_time,\r\n      housekeeper: {\r\n        id: housekeeper.id,\r\n      },\r\n      status: {\r\n        code: status.code,\r\n      },\r\n      unit: {\r\n        id: unit.id,\r\n      },\r\n    });\r\n    await this.houseKeepingService.getExposedHKSetup(this.property_id);\r\n  }\r\n\r\n  @Watch('ticket')\r\n  ticketChanged(newValue: string, oldValue: string) {\r\n    if (newValue === oldValue) {\r\n      return;\r\n    }\r\n    this.token.setToken(this.ticket);\r\n    this.initializeApp();\r\n  }\r\n  handleCheckChange(e: CustomEvent, action: IPendingActions) {\r\n    if (e.detail) {\r\n      this.selectedRoom = action;\r\n      this.modalOpenTimeOut = setTimeout(() => {\r\n        const modal = this.el.querySelector('ir-modal');\r\n        if (modal) {\r\n          (modal as HTMLIrModalElement).openModal();\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n  @Listen('closeSideBar')\r\n  handleCloseSidebar(e: CustomEvent) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    this.archiveOpened = false;\r\n  }\r\n  disconnectedCallback() {\r\n    if (this.modalOpenTimeOut) {\r\n      clearTimeout(this.modalOpenTimeOut);\r\n    }\r\n  }\r\n  async getPendingActions() {\r\n    await this.houseKeepingService.getHKPendingActions({\r\n      property_id: this.property_id,\r\n      bracket: {\r\n        code: this.selectedDuration,\r\n      },\r\n      housekeeper: {\r\n        id: +this.selectedHouseKeeper,\r\n      },\r\n    });\r\n  }\r\n  async initializeApp() {\r\n    try {\r\n      this.isLoading = true;\r\n      let propertyId = this.propertyid;\r\n      if (!propertyId) {\r\n        const propertyData = await this.roomService.getExposedProperty({\r\n          id: 0,\r\n          aname: this.p,\r\n          language: this.language,\r\n          is_backend: true,\r\n        });\r\n        propertyId = propertyData.My_Result.id;\r\n      }\r\n      this.property_id = propertyId;\r\n      updateHKStore('default_properties', { token: this.ticket, property_id: propertyId, language: this.language });\r\n      const requests = [this.houseKeepingService.getExposedHKStatusCriteria(propertyId), this.roomService.fetchLanguage(this.language, ['_HK_FRONT'])];\r\n\r\n      if (this.propertyid) {\r\n        requests.unshift(\r\n          this.roomService.getExposedProperty({\r\n            id: propertyId,\r\n            language: this.language,\r\n            is_backend: true,\r\n          }),\r\n        );\r\n      }\r\n      await Promise.all(requests);\r\n      this.selectedDuration = housekeeping_store.hk_tasks.brackets[0].code;\r\n      await this.getPendingActions();\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n  async handleConfirm(e: CustomEvent) {\r\n    e.preventDefault();\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    try {\r\n      await this.getPendingActions();\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      this.selectedRoom = null;\r\n    }\r\n  }\r\n  render() {\r\n    if (this.isLoading) {\r\n      return <ir-loading-screen></ir-loading-screen>;\r\n    }\r\n    return (\r\n      <Host>\r\n        <ir-toast></ir-toast>\r\n        <ir-interceptor></ir-interceptor>\r\n        <section class=\"p-2\">\r\n          <ir-title class=\"d-none d-md-flex\" label={locales.entries.Lcz_HousekeepingTasks} justifyContent=\"space-between\">\r\n            <ir-button slot=\"title-body\" text={locales.entries.Lcz_Archive} size=\"sm\"></ir-button>\r\n          </ir-title>\r\n          <div class=\"d-flex align-items-center mb-2 justify-content-between d-md-none\">\r\n            <ir-title class=\"mb-0\" label={locales.entries.Lcz_HousekeepingTasks} justifyContent=\"space-between\"></ir-title>\r\n            <ir-button slot=\"title-body\" text={locales.entries.Lcz_Archive} size=\"sm\" onClickHandler={() => (this.archiveOpened = true)}></ir-button>\r\n          </div>\r\n          <div class=\"d-flex flex-column flex-sm-row align-items-center mb-1  select-container\">\r\n            <ir-select\r\n              selectedValue={this.selectedDuration}\r\n              onSelectChange={e => {\r\n                this.selectedDuration = e.detail;\r\n                this.getPendingActions();\r\n              }}\r\n              data={housekeeping_store.hk_tasks.brackets.map(bracket => ({\r\n                text: bracket.description,\r\n                value: bracket.code,\r\n              }))}\r\n              class=\"mb-1 w-100 mb-sm-0\"\r\n              showFirstOption={false}\r\n              LabelAvailable={false}\r\n            ></ir-select>\r\n            <ir-select\r\n              onSelectChange={e => {\r\n                this.selectedHouseKeeper = e.detail;\r\n                this.getPendingActions();\r\n              }}\r\n              selectedValue={this.selectedHouseKeeper}\r\n              data={[\r\n                { text: 'All housekeepers', value: '0' },\r\n                ...housekeeping_store.hk_tasks.housekeepers.map(bracket => ({\r\n                  text: bracket.name,\r\n                  value: bracket.id.toString(),\r\n                })),\r\n              ]}\r\n              showFirstOption={false}\r\n              LabelAvailable={false}\r\n              class=\"ml-sm-2 w-100\"\r\n            ></ir-select>\r\n          </div>\r\n          <div class=\"card p-1\">\r\n            <div class=\"table-container\">\r\n              <table class=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th class=\"text-left\">{locales.entries.Lcz_Unit}</th>\r\n                    <th class=\"text-left\">{locales.entries.Lcz_Status}</th>\r\n                    <th class=\"text-left\">{locales.entries.Lcz_Arrivaldate}</th>\r\n                    <th class=\"text-left\">{locales.entries.Lcz_ArrivalTime}</th>\r\n                    <th class=\"text-left\">{locales.entries.Lcz_Housekeeper}</th>\r\n                    <th class=\"text-center\">{locales.entries.Lcz_Done}</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {housekeeping_store.pending_housekeepers?.map(action => (\r\n                    <tr key={action.housekeeper.id}>\r\n                      <td class=\"text-left\">{action.unit.name}</td>\r\n                      <td class=\"text-left\">{action.status.description}</td>\r\n                      <td class=\"text-left\">{action.arrival}</td>\r\n                      <td class=\"text-left\">{action.arrival_time}</td>\r\n                      <td class=\"text-left\">{action.housekeeper.name}</td>\r\n                      <td>\r\n                        <div class=\"checkbox-container\">\r\n                          <ir-checkbox onCheckChange={e => this.handleCheckChange(e, action)} checked={this.selectedRoom?.unit.id === action.unit.id}></ir-checkbox>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        {this.selectedRoom && (\r\n          <ir-modal\r\n            leftBtnText={locales.entries.Lcz_No}\r\n            rightBtnText={locales.entries.Lcz_Yes}\r\n            onConfirmModal={this.handleConfirm.bind(this)}\r\n            onCancelModal={() => (this.selectedRoom = null)}\r\n            modalBody={`Is ${this.selectedRoom.unit.name} cleaned?`}\r\n          ></ir-modal>\r\n        )}\r\n        {/* <ir-sidebar open={this.archiveOpened} showCloseButton={false} onIrSidebarToggle={() => (this.archiveOpened = false)}>\r\n          {this.archiveOpened && <ir-hk-archive slot=\"sidebar-body\"></ir-hk-archive>}\r\n        </ir-sidebar> */}\r\n      </Host>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}