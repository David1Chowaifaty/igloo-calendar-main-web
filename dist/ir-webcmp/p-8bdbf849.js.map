{"version":3,"names":["initialState","days","months","fromDate","toDate","state","calendar_dates","onChange","onCalendarDatesChange","createStore","async","getMyBookings","myBookings","stayStatus","getStayStatus","month","day","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","from_date","isAfter","DATE","blockedToDate","to_date","ID","POOL","NOTES","BALANCE","NAME","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","find","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","TO_DATE","NO_OF_DAYS","dateDifference","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","defaultDates","booking","booking_nbr","toString","bookingFromDate","bookingToDate","mainGuest","_a","sharing_persons","p","is_main","_b","first_name","last_name","IDENTIFIER","identifier","BOOKING_NUMBER","is_direct","remark","PRIVATE_NOTE","getPrivateNote","extras","_c","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","booked_on","PHONE_PREFIX","guest","country_phone_prefix","IS_EDITABLE","is_editable","ARRIVAL","PHONE","_d","mobile_without_prefix","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","RATE_TYPE","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","origin","GUEST","ROOMS","rooms","cancelation","guarantee","TOTAL_PRICE","_e","gross_total","COUNTRY","country_id","adult_child_offering","selected_variation","SOURCE","source","tag","CHECKIN","_f","in_out","CHECKOUT","_g","ROOM_INFO","unit","BASE_STATUS_CODE","_h","getRoomStatus","params","status_code","calendar_data","checkin_enabled","is_automatic_check_in_out","now","isNowAfterOrSameAsHotelHour","compareTime","createDateWithOffsetAndHour","checkin_checkout_hours","offset","isSame","isBefore","index","findIndex","newData","push","e","transformNewBooking","bookings","filter","forEach","roomtype","ota_notes","transformNewBLockedRooms","calculateDaysBetweenDates","startDate","endDate","daysDiff","diff","date1","date2","getHours","getMinutes","offsetMs","targetTzDate","getTime","year","getUTCFullYear","getUTCMonth","getUTCDate","utcHour","UTC"],"sources":["src/stores/calendar-dates.store.ts","src/utils/booking.ts"],"sourcesContent":["import { DayData } from '@/models/DayType';\r\nimport { createStore } from '@stencil/store';\r\nexport interface ICalendarDates {\r\n  days: DayData[];\r\n  months: { daysCount: number; monthName: string }[];\r\n  fromDate: string;\r\n  toDate: string;\r\n}\r\nconst initialState: ICalendarDates = {\r\n  days: [],\r\n  months: [],\r\n  fromDate: '',\r\n  toDate: '',\r\n};\r\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\r\n\r\nexport default calendar_dates;\r\n","import { Extras, Room } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: 1,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n    ROOM_INFO: {\r\n      occupancy: cell.room.occupancy,\r\n      sharing_persons: cell.room.sharing_persons,\r\n      unit: cell.room.unit,\r\n      in_out: cell.room.in_out,\r\n    },\r\n    BASE_STATUS_CODE: cell.booking.status?.code,\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\r\n  const { in_out, status_code, from_date, to_date } = params;\r\n  if (calendar_data.checkin_enabled) {\r\n    if (in_out?.code === '001') {\r\n      return bookingStatus['000'];\r\n    } else if (in_out?.code === '002') {\r\n      if (!calendar_data.is_automatic_check_in_out) {\r\n        const now = moment();\r\n        const toDate = moment(to_date, 'YYYY-MM-DD');\r\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n        const isNowAfterOrSameAsHotelHour = compareTime(\r\n          now.toDate(),\r\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n        );\r\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\r\n          return bookingStatus['003'];\r\n        } else {\r\n          return bookingStatus['002'];\r\n        }\r\n      }\r\n    }\r\n    return bookingStatus[status_code || '001'];\r\n  } else {\r\n    const now = moment();\r\n    const toDate = moment(to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n    const isNowAfterOrSameAsHotelHour = compareTime(\r\n      now.toDate(),\r\n      createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n    );\r\n    if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[status_code || '001'];\r\n    }\r\n  }\r\n}\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: getRoomStatus({\r\n        in_out: room.in_out,\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n        status_code: data.status?.code,\r\n      }),\r\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n      PHONE: data.guest.mobile_without_prefix ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n      ROOM_INFO: {\r\n        occupancy: room.occupancy,\r\n        sharing_persons: room.sharing_persons,\r\n        unit: room.unit,\r\n        in_out: room.in_out,\r\n      },\r\n      BASE_STATUS_CODE: data.status?.code,\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\nexport function compareTime(date1: Date, date2: Date) {\r\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\r\n}\r\n/**\r\n * Creates a Date object for today at the specified hour in a given time zone.\r\n * The offset is the number of hours that the target time zone is ahead of UTC.\r\n *\r\n * For example, if offset = 3 and hour = 9, then the function returns a Date\r\n * which, when converted to the target time zone, represents 9:00.\r\n *\r\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\r\n * @param hour - The desired hour in the target time zone (0-23)\r\n * @returns Date object representing the target time (in UTC)\r\n */\r\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\r\n  const now = new Date();\r\n  const offsetMs = offset * 60 * 60 * 1000;\r\n  const targetTzDate = new Date(now.getTime() + offsetMs);\r\n  const year = targetTzDate.getUTCFullYear();\r\n  const month = targetTzDate.getUTCMonth();\r\n  const day = targetTzDate.getUTCDate();\r\n  const utcHour = hour - offset;\r\n  return new Date(Date.UTC(year, month, day, utcHour));\r\n}\r\n"],"mappings":"+NAQA,MAAMA,EAA+B,CACnCC,KAAM,GACNC,OAAQ,GACRC,SAAU,GACVC,OAAQ,I,MAEKC,MAAOC,EAAgBC,SAAUC,GAA0BC,EAA4BT,GCL/FU,eAAeC,EAAcT,GAClC,MAAMU,EAAoB,GAC1B,MAAMC,QAAmBC,IACzB,IAAK,MAAMC,KAASb,EAAQ,CAC1B,IAAK,MAAMc,KAAOD,EAAMd,KAAM,CAC5B,IAAK,MAAMgB,KAAQD,EAAIE,WAAY,CACjCC,EAAcF,EAAKG,cAAeR,EAAYC,E,GAKpD,OAAOD,CACT,CAEA,SAASO,EAAcE,EAAkCT,EAAmBC,GAC1E,IAAK,MAAMI,KAAQI,EAAc,CAC/B,IAAK,MAAMC,KAAOL,EAAKM,cAAe,CACpC,GAAIN,EAAKM,cAAcD,GAAKE,eAAiB,MAAO,CAClDC,EAAmBR,EAAKM,cAAcD,GAAMV,EAAYC,E,GAIhE,CACA,MAAMa,EAAiC,CACrC,MAAO,UACP,MAAO,qBACP,MAAO,W,MAEIC,EAAwC,CACnD,MAAO,WACP,MAAO,uBACP,MAAO,YACP,MAAO,e,SAGOC,EAAWC,EAA0BC,GACnD,GAAID,IAAc,MAAQC,IAAa,KAAM,MAAO,GACpD,GAAIA,IAAa,MAAQA,IAAa,GAAI,CACxC,MAAO,GAAGD,IAAS,MAATA,SAAS,EAATA,EAAa,QAAQC,IAAQ,MAARA,SAAQ,EAARA,EAAY,I,CAE7C,OAAOD,CACT,CACAnB,eAAeI,IACb,IACE,MAAMiB,KAAEA,SAAeC,EAAMC,KAAK,uCAAwC,CACxEC,UAAW,CAAC,kBAEd,OAAOH,EAAKI,UAAUC,KAAIC,IAAC,CACzBC,KAAMD,EAAEE,UACRC,MAAOH,EAAEI,iB,CAEX,MAAOC,GACPC,QAAQC,IAAIF,E,CAEhB,CACA,SAASG,EAAmBC,EAAMC,EAAMC,GACtC,MAAMC,EAAK,IAAIC,KAAKJ,GACpBG,EAAGE,SAASJ,GACZE,EAAGG,WAAWJ,GACd,MAAO,GAAGK,EAAQC,QAAQC,mBAAmBC,EAAOP,GAAIQ,OAAO,kBACjE,CACA,SAASC,EAAeC,EAAgB9C,G,oBACtC,GAAI+C,EAAYD,EAAKE,kBAAmB,CACtC,MAAMC,EAAkBN,EAAOG,EAAKI,cAAcC,UAAW,cAAcC,QAAQN,EAAKO,MAAQP,EAAKI,cAAcC,UAAYL,EAAKO,KACpI,MAAMC,EAAgBX,EAAOG,EAAKI,cAAcK,QAAS,cAAcH,QAAQN,EAAKO,MAAQP,EAAKI,cAAcK,QAAUT,EAAKO,KAC9H,MAAO,CACLG,GAAIV,EAAKW,KACTC,MAAO,GACPC,QAAS,GACTC,KACEd,EAAKI,cAAcQ,QAAU,GACzBZ,EAAKI,cAAcQ,MACnBZ,EAAKE,mBAAqB,MAC1BhB,EAAmBc,EAAKI,cAAcW,kBAAmBf,EAAKI,cAAcY,kBAAmBhB,EAAKI,cAAca,qBAClH/D,EAAWgE,MAAKC,GAAMA,EAAGxC,OAASqB,EAAKE,mBAAkBrB,OAAS,GACxEuC,oBAAqBpB,EAAKI,cAAciB,YACxCC,MAAOtB,EAAKI,cAAcmB,MAC1BC,WAAYxB,EAAKI,cAAcW,kBAC/BU,WAAYzB,EAAKI,cAAcY,kBAC/BU,aAAc1B,EAAKI,cAAca,oBACjCU,gBAAiB3B,EAAKI,cAAcQ,MACpCgB,UAAWzB,EACX0B,QAASrB,EACTsB,WAAYC,EAAe5B,EAAiBK,GAC5CwB,OAAQjE,EAAOiC,EAAKE,kBACpBS,KAAMX,EAAKW,KACXsB,YAAajC,EAAKE,iBAClBgC,eAAgBlC,EAAKE,mBAAqB,MAC1CiC,cAAenC,EAAKI,cAAcN,OAAOO,UACzC+B,YAAapC,EAAKI,cAAcN,OAAOW,QACvC4B,aAAc,CACZhC,UAAWL,EAAKI,cAAcC,UAC9BI,QAAST,EAAKI,cAAcK,S,CAIlC,GAAIT,EAAKsC,QAAQC,YAAYC,aAAe,cAAe,CACzDxD,QAAQC,IAAI,UAAWe,E,CAQzB,MAAMyC,EAAkB5C,EAAOG,EAAK1C,KAAK+C,UAAW,cAAcC,QAAQN,EAAKO,MAAQP,EAAK1C,KAAK+C,UAAYL,EAAKO,KAClH,MAAMmC,EAAgB7C,EAAOG,EAAK1C,KAAKmD,QAAS,cAAcH,QAAQN,EAAKO,MAAQP,EAAK1C,KAAKmD,QAAUT,EAAKO,KAC5G,MAAMoC,GAAYC,EAAA5C,EAAK1C,KAAKuF,mBAAe,MAAAD,SAAA,SAAAA,EAAE1B,MAAK4B,GAAKA,EAAEC,UACzD,MAAO,CACLrC,GAAIV,EAAKW,KACTiB,UAAWa,EACXZ,QAASa,EACTZ,WAAYC,EAAeU,EAAiBC,GAC5CV,OAAQhE,GAAcgF,EAAAhD,EAAKsC,WAAO,MAAAU,SAAA,SAAAA,EAAEjF,OAAOY,MAC3CmC,KAAM7C,EAAW0E,IAAS,MAATA,SAAS,SAATA,EAAWM,WAAYN,EAAUO,WAClDC,WAAYnD,EAAK1C,KAAK8F,WACtB9B,MAAOtB,EAAKuB,MACZZ,KAAMX,EAAKW,KACX0C,eAAgBrD,EAAKsC,QAAQC,YAC7B3B,MAAOZ,EAAKsC,QAAQgB,UAAYtD,EAAKsC,QAAQiB,OAAS,KACtDC,aAAcC,EAAezD,EAAKsC,QAAQoB,QAC1CJ,UAAWtD,EAAKsC,QAAQgB,UACxBzC,SAAS8C,EAAA3D,EAAKsC,QAAQsB,aAAS,MAAAD,SAAA,SAAAA,EAAEE,WACjCC,oBAAqB9D,EAAKsC,QAAQwB,oBAClCC,aAAc/D,EAAKsC,QAAQ0B,QAAQC,YACnC5B,aAAc,CACZhC,UAAWL,EAAK1C,KAAK+C,UACrBI,QAAST,EAAK1C,KAAKmD,SAGrBe,WAAYxB,EAAKsC,QAAQ4B,UAAU/E,KACnCgF,aAAcnE,EAAKsC,QAAQ8B,MAAMC,qBACjCC,YAAatE,EAAKsC,QAAQiC,YAC1BC,QAASxE,EAAKsC,QAAQ0B,QACtBS,OAAOC,EAAA1E,EAAKsC,QAAQ8B,MAAMO,yBAAqB,MAAAD,SAAA,EAAAA,EAAI,GACnDE,KAAM5E,EAAK1C,KAAKuH,MAChBC,UAAW9E,EAAK1C,KAAKyH,SAASC,KAC9BC,cAAe,MACfC,aAAclF,EAAK1C,KAAKyH,SAASI,GACjCC,UAAW,EACXC,aAAcrF,EAAK1C,KAAKgI,UAAUC,UAClCC,eAAgBxF,EAAK1C,KAAKgI,UAAUG,aACpCC,OAAQ1F,EAAKsC,QAAQoD,OACrBC,MAAO3F,EAAKsC,QAAQ8B,MACpBwB,MAAO5F,EAAKsC,QAAQuD,MACpBC,YAAa9F,EAAK1C,KAAKyH,SAASe,YAChCC,UAAW/F,EAAK1C,KAAKyH,SAASgB,UAC9BC,aAAaC,EAAAjG,EAAKsC,QAAQsB,aAAS,MAAAqC,SAAA,SAAAA,EAAEC,YACrCC,QAASnG,EAAKsC,QAAQ8B,MAAMgC,WAC5BjE,cAAenC,EAAKsC,QAAQxC,OAAOO,UACnC+B,YAAapC,EAAKsC,QAAQxC,OAAOW,QACjC4F,qBAAsBrG,EAAK1C,KAAKyH,SAASuB,mBAAmBD,qBAC5DE,OAAQ,CAAE5H,KAAMqB,EAAKsC,QAAQkE,OAAO7H,KAAMsF,YAAajE,EAAKsC,QAAQkE,OAAOvC,YAAawC,IAAKzG,EAAKsC,QAAQkE,OAAOC,KAEjHC,UAASC,EAAA3G,EAAK1C,KAAKsJ,UAAM,MAAAD,SAAA,SAAAA,EAAEhI,QAAS,MACpCkI,WAAUC,EAAA9G,EAAK1C,KAAKsJ,UAAM,MAAAE,SAAA,SAAAA,EAAEnI,QAAS,MACrCoI,UAAW,CACTzB,UAAWtF,EAAK1C,KAAKgI,UACrBzC,gBAAiB7C,EAAK1C,KAAKuF,gBAC3BmE,KAAMhH,EAAK1C,KAAK0J,KAChBJ,OAAQ5G,EAAK1C,KAAKsJ,QAEpBK,kBAAkBC,EAAAlH,EAAKsC,QAAQvE,UAAM,MAAAmJ,SAAA,SAAAA,EAAEvI,KAE3C,C,SAgBgBwI,EAAcC,G,YAC5B,MAAMR,OAAEA,EAAMS,YAAEA,EAAWhH,UAAEA,EAASI,QAAEA,GAAY2G,EACpD,GAAIE,EAAcC,gBAAiB,CACjC,IAAIX,IAAM,MAANA,SAAM,SAANA,EAAQjI,QAAS,MAAO,CAC1B,OAAOX,EAAc,M,MAChB,IAAI4I,IAAM,MAANA,SAAM,SAANA,EAAQjI,QAAS,MAAO,CACjC,IAAK2I,EAAcE,0BAA2B,CAC5C,MAAMC,EAAM5H,IACZ,MAAMpD,EAASoD,EAAOY,EAAS,cAC/B,MAAMjE,EAAWqD,EAAOQ,EAAW,cACnC,MAAMqH,EAA8BC,EAClCF,EAAIhL,SACJmL,GAA4BhF,EAAA0E,EAAcO,0BAAsB,MAAAjF,SAAA,SAAAA,EAAEkF,QAAQ9E,EAAAsE,EAAcO,0BAAsB,MAAA7E,SAAA,SAAAA,EAAE5D,OAElH,GAAKqI,EAAIM,OAAOtL,EAAQ,SAAWgL,EAAInH,QAAQ9D,EAAU,SAAWkL,GAAgCD,EAAInH,QAAQ7D,EAAQ,QAAS,CAC/H,OAAOuB,EAAc,M,KAChB,CACL,OAAOA,EAAc,M,GAI3B,OAAOA,EAAcqJ,GAAe,M,KAC/B,CACL,MAAMI,EAAM5H,IACZ,MAAMpD,EAASoD,EAAOY,EAAS,cAC/B,MAAMjE,EAAWqD,EAAOQ,EAAW,cACnC,MAAMqH,EAA8BC,EAClCF,EAAIhL,SACJmL,GAA4BjE,EAAA2D,EAAcO,0BAAsB,MAAAlE,SAAA,SAAAA,EAAEmE,QAAQpD,EAAA4C,EAAcO,0BAAsB,MAAAnD,SAAA,SAAAA,EAAEtF,OAElH,GAAI5C,EAASuL,OAAON,EAAK,QAAUC,EAA6B,CAC9D,OAAO1J,EAAc,M,MAChB,GAAIyJ,EAAInH,QAAQ9D,EAAU,QAAUiL,EAAIO,SAASvL,EAAQ,OAAQ,CACtE,OAAOuB,EAAc,M,MAChB,GAAIvB,EAAOsL,OAAON,EAAK,QAAUC,EAA6B,CACnE,OAAO1J,EAAc,M,MAChB,GAAKvB,EAAOsL,OAAON,EAAK,QAAUC,GAAgCjL,EAAOuL,SAASP,EAAK,OAAQ,CACpG,OAAOzJ,EAAc,M,KAChB,CACL,OAAOA,EAAcqJ,GAAe,M,EAG1C,CACA,SAASvJ,EAAmBkC,EAAgB/C,EAAmBC,GAC7D,MAAM+K,EAAQhL,EAAWiL,WAAU5F,GAAWA,EAAQ3B,OAASX,EAAKW,OACpE,GAAIsH,KAAW,EAAG,CAChB,MAAME,EAAUpI,EAAeC,EAAM9C,GACrCD,EAAWmL,KAAKD,E,CAMpB,C,SACgB1E,EAAeC,G,MAC7B,IAAKA,EAAQ,CACX,OAAO,I,CAET,QAAOd,EAAAc,EAAOxC,MAAKmH,GAAKA,EAAE1K,MAAQ,oBAAe,MAAAiF,SAAA,SAAAA,EAAE/D,QAAS,IAC9D,C,SACgByJ,EAAoBlK,GAClC,IAAImK,EAAiC,GACrC,MAAM1C,EAAQzH,EAAKyH,MAAM2C,QAAOlL,KAAUA,EAAK,yBAC/CuI,EAAM4C,SAAQnL,I,gBACZ,MAAMmF,EAAkB5C,EAAOvC,EAAK+C,UAAW,cAAcC,QAAQT,EAAOlD,EAAeH,SAAU,eAAiBc,EAAK+C,UAAY1D,EAAeH,SACtJ,MAAMkG,EAAgBpF,EAAKmD,QAC3B,GAAIZ,EAAOvC,EAAKmD,QAAS,cAAcuH,SAASnI,EAAOlD,EAAeH,SAAU,eAAgB,CAC9F,M,CAEF,MAAMmG,GAAYC,EAAAtF,EAAKuF,mBAAe,MAAAD,SAAA,SAAAA,EAAE1B,MAAK4B,GAAKA,EAAEC,UAEpDwF,EAASH,KAAK,CACZ1B,QAAS,MACTG,SAAU,MACVnG,GAAIpD,EAAK,uBACTuE,QAASa,EACTd,UAAWa,EACXe,aAAcC,EAAerF,EAAKsF,QAClC5B,WAAYC,EAAeU,EAAiBC,GAC5C8B,QAASpG,EAAK4F,QACdM,YAAa,KACbzD,SAASmC,EAAA5E,EAAKwF,aAAS,MAAAZ,SAAA,SAAAA,EAAEa,WACzB7B,OAAQmF,EAAc,CACpBP,OAAQtJ,EAAKsJ,OACbvG,UAAW/C,EAAK+C,UAChBI,QAASnD,EAAKmD,QACd4G,aAAa1D,EAAAvF,EAAKL,UAAM,MAAA4F,SAAA,SAAAA,EAAEhF,OAE5BmC,KAAM7C,EAAW0E,IAAS,MAATA,SAAS,SAATA,EAAWM,WAAYN,EAAUO,WAClDuB,OAAOC,EAAAtG,EAAKgG,MAAMO,yBAAqB,MAAAD,SAAA,EAAAA,EAAI,GAC3ClD,WAAY,aACZ2C,aAAc/F,EAAKgG,MAAMC,qBACzBO,KAAMtH,EAAKuH,MACXC,UAAWxH,EAAKyH,SAASC,KACzBC,cAAe,MACfC,aAAc5H,EAAKyH,SAASI,GAC5BhC,WAAY7F,EAAK8F,WACjBgC,UAAW9H,EAAKoL,SAASvD,GACzBE,aAAc/H,EAAKgI,UAAUC,UAC7BC,eAAgBlI,EAAKgI,UAAUG,aAC/BnE,OAAQhE,EAAK0J,KAAK7B,GAClBxE,KAAMrD,EAAK,uBACXqI,MAAOvH,EAAKgG,MACZwB,MAAOxH,EAAKyH,MACZxC,eAAgBjF,EAAKmE,YACrBuD,YAAaxI,EAAKyH,SAASe,YAC3BC,UAAWzI,EAAKyH,SAASgB,UACzBC,aAAaC,EAAA7H,EAAKwF,aAAS,MAAAqC,SAAA,SAAAA,EAAEC,YAC7BC,QAAS/H,EAAKgG,MAAMgC,WACpBjE,cAAe/D,EAAK0B,OAAOO,UAC3B+B,YAAahE,EAAK0B,OAAOW,QACzB4F,qBAAsB/I,EAAKyH,SAASuB,mBAAmBD,qBACvDtC,aAAc3F,EAAK4F,QAAQC,YAC3ByB,OAAQtH,EAAKsH,OACb5B,oBAAqB1F,EAAK0F,oBAC1BR,UAAWlF,EAAKkF,UAChB1C,MAAOxC,EAAKkF,UAAYlF,EAAKmF,OAAS,KACtCgD,OAAQ,CAAE5H,KAAMP,EAAKoI,OAAO7H,KAAMsF,YAAa7F,EAAKoI,OAAOvC,YAAawC,IAAKrI,EAAKoI,OAAOC,KACzFkC,UAAWvK,EAAKuK,UAChBtG,aAAc,CACZhC,UAAW/C,EAAK+C,UAChBI,QAASnD,EAAKmD,SAEhBsG,UAAW,CACTzB,UAAWhI,EAAKgI,UAChBzC,gBAAiBvF,EAAKuF,gBACtBmE,KAAM1J,EAAK0J,KACXJ,OAAQtJ,EAAKsJ,QAEfK,kBAAkBN,EAAAvI,EAAKL,UAAM,MAAA4I,SAAA,SAAAA,EAAEhI,MAC/B,IAEJ,OAAO4J,CACT,CACOxL,eAAe6L,EAAyBxK,GAC7C,MAAMlB,QAAmBC,IACzB,MAAO,CACLuD,GAAItC,EAAKuC,KACTC,MAAO,GACPC,QAAS,GACTC,KACE1C,EAAKwC,QAAU,GACXxC,EAAKwC,MACLxC,EAAK8B,mBAAqB,MAC1BhB,EAAmBd,EAAK2C,kBAAmB3C,EAAK4C,kBAAmB5C,EAAK6C,qBACxE/D,EAAWgE,MAAKC,GAAMA,EAAGxC,OAASP,EAAK8B,mBAAkBrB,OAAS,GACxEuC,oBAAqBhD,EAAKiD,YAC1BC,MAAOlD,EAAKmD,MACZC,WAAYpD,EAAK2C,kBACjBU,WAAYrD,EAAK4C,kBACjBU,aAActD,EAAK6C,oBACnBU,gBAAiBvD,EAAKwC,MACtBgB,UAAWxD,EAAKiC,UAChBwB,QAASzD,EAAKqC,QACdqB,WAAY+G,EAA0BzK,EAAKiC,UAAWjC,EAAKqC,SAC3DuB,OAAQjE,EAAOK,EAAK8B,kBACpBS,KAAMvC,EAAKuC,KACXsB,YAAa7D,EAAK8B,iBAClBgC,eAAgB9D,EAAK8B,mBAAqB,MAC1CiC,cAAe/D,EAAK0B,OAAOO,UAC3B+B,YAAahE,EAAK0B,OAAOW,QACzB4B,aAAc,CACZhC,UAAWjC,EAAKiC,UAChBI,QAASrC,EAAKqC,SAGpB,C,SACgBoI,EAA0BxI,EAAmBI,GAC3D,MAAMqI,EAAYjJ,EAAOQ,EAAW,cACpC,MAAM0I,EAAUlJ,EAAOY,EAAS,cAChC,MAAMuI,EAAWD,EAAQE,KAAKH,EAAW,QACzC,OAAOE,GAAY,CACrB,C,SACgBrB,EAAYuB,EAAaC,GACvC,OAAOD,EAAME,YAAcD,EAAMC,YAAcF,EAAMG,cAAgBF,EAAME,YAC7E,C,SAYgBzB,EAA4BE,EAAgB1I,GAC1D,MAAMqI,EAAM,IAAIlI,KAChB,MAAM+J,EAAWxB,EAAS,GAAK,GAAK,IACpC,MAAMyB,EAAe,IAAIhK,KAAKkI,EAAI+B,UAAYF,GAC9C,MAAMG,EAAOF,EAAaG,iBAC1B,MAAMtM,EAAQmM,EAAaI,cAC3B,MAAMtM,EAAMkM,EAAaK,aACzB,MAAMC,EAAUzK,EAAO0I,EACvB,OAAO,IAAIvI,KAAKA,KAAKuK,IAAIL,EAAMrM,EAAOC,EAAKwM,GAC7C,Q","ignoreList":[]}