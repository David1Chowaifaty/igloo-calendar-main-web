{"version":3,"names":["ToBeAssignedService","Token","getUnassignedDates","propertyid","from_date","to_date","token","this","getToken","data","axios","post","ExceptionMsg","Error","convertUnassignedDates","My_Result","error","console","getUnassignedRooms","calendarFromDates","specific_date","roomInfo","formattedLegendData","transformToAssignable","assignUnit","booking_nbr","identifier","pr_id","extras","log","cleanSpacesAndSpecialChars","str","regex","replace","result","forEach","customer","unassigned_rooms","room","roomCategory","roomTypeName","room_type_name","ID","NAME","guest_name","FROM_DATE","unassigned_date","TO_DATE","BOOKING_NUMBER","book_nbr","STATUS","defaultDateRange","fromDate","undefined","toDate","fromDateTimeStamp","toDateTimeStamp","fromDateStr","toDateStr","dateDifference","NO_OF_DAYS","roomsInfo","legendData","availableRooms","RT_ID","getRoomTypeId","updateAvailableRooms","addDefaultDateRange","push","Date","dateToFormattedString","getTime","roomName","find","name","id","rooms","assignable_units","unit","Is_Fully_Available","Is_Not_Available","days","moment","isAfter","isBefore","PR_ID","NOTES","BALANCE","INTERNAL_NOTE","hideBubble","dates","convertedDates","date","newDate","setHours","categories","dateStr","description"],"sources":["src/services/toBeAssigned.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { IAvailableRoom, IRoomCategory, IUnassignedDates, InnerRecord } from '../models/tobeassigned';\r\nimport { dateDifference, dateToFormattedString, extras } from '../utils/utils';\r\nimport { Token } from '@/models/Token';\r\nimport moment from 'moment';\r\n\r\nexport class ToBeAssignedService extends Token {\r\n  public async getUnassignedDates(propertyid: number, from_date: string, to_date: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_UnAssigned_Dates?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return this.convertUnassignedDates(data.My_Result);\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUnassignedRooms(calendarFromDates: { from_date: string; to_date: string }, propertyid: number, specific_date: string, roomInfo: any, formattedLegendData: any) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Aggregated_UnAssigned_Rooms?Ticket=${token}`, {\r\n          propertyid,\r\n          specific_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return this.transformToAssignable(calendarFromDates, data, roomInfo, formattedLegendData);\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async assignUnit(booking_nbr: string, identifier: string, pr_id: number) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Assign_Exposed_Room?Ticket=${token}`, {\r\n          booking_nbr,\r\n          identifier,\r\n          pr_id,\r\n          extras,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error('Invalid token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private cleanSpacesAndSpecialChars(str: string) {\r\n    const regex = /[^a-zA-Z0-9]+/g;\r\n    return str.replace(regex, '');\r\n  }\r\n\r\n  private transformToAssignable(calendarFromDates: { from_date: string; to_date: string }, data: any, roomInfo, formattedLegendData): IRoomCategory[] {\r\n    const result: IRoomCategory[] = [];\r\n    data.My_Result.forEach((customer: any) => {\r\n      customer.unassigned_rooms.forEach((room: any) => {\r\n        let roomCategory: IRoomCategory = {\r\n          roomTypeName: room.room_type_name,\r\n          ID: room.identifier,\r\n          NAME: room.guest_name,\r\n          identifier: room.identifier,\r\n          FROM_DATE: room.unassigned_date,\r\n          TO_DATE: room.unassigned_date,\r\n          BOOKING_NUMBER: room.book_nbr,\r\n          STATUS: 'IN-HOUSE',\r\n          defaultDateRange: {\r\n            fromDate: undefined,\r\n            toDate: undefined,\r\n            fromDateTimeStamp: 0,\r\n            toDateTimeStamp: 0,\r\n            fromDateStr: '',\r\n            toDateStr: '',\r\n            dateDifference: 0,\r\n          },\r\n          NO_OF_DAYS: 1,\r\n          roomsInfo: roomInfo,\r\n          legendData: formattedLegendData,\r\n          availableRooms: [],\r\n          RT_ID: this.getRoomTypeId(room.room_type_name, roomInfo),\r\n        };\r\n        this.updateAvailableRooms(calendarFromDates, room, roomCategory, formattedLegendData, roomInfo);\r\n        this.addDefaultDateRange(roomCategory);\r\n        result.push(roomCategory);\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  addDefaultDateRange(roomCategory: IRoomCategory) {\r\n    roomCategory.defaultDateRange.fromDate = new Date(roomCategory.FROM_DATE + 'T00:00:00');\r\n    roomCategory.defaultDateRange.fromDateStr = dateToFormattedString(roomCategory.defaultDateRange.fromDate);\r\n    roomCategory.defaultDateRange.fromDateTimeStamp = roomCategory.defaultDateRange.fromDate.getTime();\r\n\r\n    roomCategory.defaultDateRange.toDate = new Date(roomCategory.TO_DATE + 'T00:00:00');\r\n    roomCategory.defaultDateRange.toDateStr = dateToFormattedString(roomCategory.defaultDateRange.toDate);\r\n    roomCategory.defaultDateRange.toDateTimeStamp = roomCategory.defaultDateRange.toDate.getTime();\r\n\r\n    roomCategory.defaultDateRange.dateDifference = roomCategory.NO_OF_DAYS;\r\n  }\r\n  private getRoomTypeId(roomName: string, roomInfo: any) {\r\n    return roomInfo.find(room => this.cleanSpacesAndSpecialChars(room.name) === this.cleanSpacesAndSpecialChars(roomName)).id || null;\r\n  }\r\n  private updateAvailableRooms(calendarFromDates: { from_date: string; to_date: string }, room: any, roomCategory: IRoomCategory, formattedLegendData, roomsInfo): void {\r\n    const rooms: IAvailableRoom[] = [];\r\n    room.assignable_units.forEach((unit: any) => {\r\n      if (unit.Is_Fully_Available && !unit.Is_Not_Available) {\r\n        const days = dateDifference(unit.from_date, unit.to_date);\r\n        const fromDate = moment(new Date(calendarFromDates.from_date)).isAfter(moment(new Date(unit.from_date))) ? calendarFromDates.from_date : unit.from_date;\r\n        const toDate =\r\n          moment(new Date(calendarFromDates.to_date)).isBefore(moment(new Date(unit.to_date))) &&\r\n          moment(new Date(calendarFromDates.to_date)).isAfter(moment(new Date(unit.from_date)))\r\n            ? calendarFromDates.to_date\r\n            : unit.to_date;\r\n        rooms.push({\r\n          RT_ID: roomCategory.RT_ID,\r\n          STATUS: 'PENDING-CONFIRMATION',\r\n          FROM_DATE: fromDate,\r\n          roomName: unit.name,\r\n          PR_ID: unit.pr_id,\r\n          TO_DATE: toDate,\r\n          NO_OF_DAYS: days,\r\n          ID: 'NEW_TEMP_EVENT',\r\n          NAME: '',\r\n          NOTES: '',\r\n          BALANCE: '',\r\n          INTERNAL_NOTE: '',\r\n          hideBubble: true,\r\n          legendData: formattedLegendData,\r\n          roomsInfo,\r\n        });\r\n        roomCategory.TO_DATE = unit.to_date;\r\n        roomCategory.NO_OF_DAYS = days;\r\n      }\r\n    });\r\n    roomCategory.availableRooms = rooms;\r\n  }\r\n\r\n  private convertUnassignedDates(dates: IUnassignedDates[]): Record<number, InnerRecord> {\r\n    let convertedDates: Record<number, InnerRecord> = {};\r\n    dates.forEach(date => {\r\n      let newDate = new Date(date.date);\r\n      newDate.setHours(0, 0, 0, 0);\r\n      convertedDates[newDate.getTime()] = {\r\n        categories: {},\r\n        dateStr: date.description,\r\n      };\r\n    });\r\n    return convertedDates;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}