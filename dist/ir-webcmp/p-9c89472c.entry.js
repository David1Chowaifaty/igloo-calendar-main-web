import{r as t,h as s,H as i}from"./p-a62d0400.js";import{B as e}from"./p-b8012398.js";import{R as o}from"./p-87e56763.js";import{l as r}from"./p-389c26bd.js";import"./p-1296c4bd.js";import"./p-6c4ba7c0.js";import"./p-bb593e1b.js";import"./p-7dbe3a8e.js";import"./p-80497476.js";const a=":host{display:block}";const h=a;const c=class{constructor(s){t(this,s);this.bookingService=new e;this.roomService=new o;this.language="";this.ticket="";this.bookingNumber="";this.baseurl="";this.propertyid=undefined;this.mode="default";this.booking=undefined}async ticketChanged(){this.bookingService.setToken(this.ticket);this.roomService.setToken(this.ticket);this.initializeApp()}async initializeApp(){try{const[t,s]=await Promise.all([this.roomService.fetchLanguage(this.language),this.bookingService.getExposedBooking(this.bookingNumber,this.language)]);if(!r.entries){r.entries=t.entries;r.direction=t.direction}this.booking=s}catch(t){console.error(t)}}render(){return s(i,{key:"925533f9eefc38779831717476df8f4f33757c9e"},s("slot",{key:"d736cd7e0d6fea75ba302b0af280da1b2af33442"}))}static get watchers(){return{ticket:["ticketChanged"]}}};c.style=h;export{c as ir_booking_printing};
//# sourceMappingURL=p-9c89472c.entry.js.map