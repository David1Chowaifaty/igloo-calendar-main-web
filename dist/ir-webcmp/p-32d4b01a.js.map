{"version":3,"names":["initialState","days","months","fromDate","toDate","disabled_cells","Map","state","calendar_dates","onChange","onCalendarDatesChange","createStore","async","getMyBookings","myBookings","stayStatus","getStayStatus","month","day","room","room_types","assignBooking","physicalrooms","physicalRoom","key","calendar_cell","Is_Available","addOrUpdateBooking","status","bookingStatus","formatName","firstName","lastName","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getDefaultData","cell","isBlockUnit","STAY_STATUS_CODE","blockedFromDate","My_Block_Info","from_date","isAfter","DATE","blockedToDate","to_date","ID","POOL","NOTES","BALANCE","NAME","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","find","st","RELEASE_AFTER_HOURS","DESCRIPTION","PR_ID","pr_id","ENTRY_DATE","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","FROM_DATE","TO_DATE","NO_OF_DAYS","dateDifference","STATUS","STATUS_CODE","OUT_OF_SERVICE","FROM_DATE_STR","TO_DATE_STR","defaultDates","bookingFromDate","bookingToDate","mainGuest","_a","sharing_persons","p","is_main","_b","booking","first_name","last_name","_c","guest","_e","_d","IDENTIFIER","identifier","BOOKING_NUMBER","booking_nbr","is_direct","remark","PRIVATE_NOTE","getPrivateNote","extras","_f","financial","due_amount","channel_booking_nbr","ARRIVAL_TIME","arrival","description","booked_on","PHONE_PREFIX","country_phone_prefix","IS_EDITABLE","is_editable","ARRIVAL","PHONE","_g","mobile_without_prefix","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","RATE_TYPE","_j","_h","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","origin","GUEST","ROOMS","rooms","cancelation","guarantee","TOTAL_PRICE","_k","gross_total","COUNTRY","country_id","adult_child_offering","selected_variation","SOURCE","source","tag","CHECKIN","_l","in_out","CHECKOUT","_m","ROOM_INFO","unit","BASE_STATUS_CODE","_o","getRoomStatus","params","status_code","calendar_data","checkin_enabled","is_automatic_check_in_out","now","isNowAfterOrSameAsHotelHour","compareTime","createDateWithOffsetAndHour","checkin_checkout_hours","offset","isSame","isBefore","index","findIndex","newData","push","e","transformNewBooking","bookings","filter","forEach","ota_notes","transformNewBLockedRooms","calculateDaysBetweenDates","startDate","startOf","endDate","endOf","daysDiff","diff","date1","date2","getHours","getMinutes","offsetMs","targetTzDate","getTime","year","getUTCFullYear","getUTCMonth","getUTCDate","utcHour","UTC","convertDateToCustomFormat","dayWithWeekday","monthWithYear","dateStr","split","isValid","Error","convertDateToTime","Math","ceil","dateToFormattedString","getFullYear","getMonth","toString","padStart","getDate","formatLegendColors","legendData","formattedLegendData","statusId","clsName","CONFIRMED","BLOCKED","legend","includes","findCountry","countries","country","getReleaseHoursString","releaseDate","releaseAfterHours","computeEndDate","numberOfDays","dateObj","add","convertDMYToISO","addTwoMonthToDate","formatDate","dateString","option","formattedDate","getNextDay","convertDatePrice","getDaysArray","dates","start","min","end","max","clone","renderTime","time","validateEmail","email","parsedEmailResults","z","string","safeParse","success","formatAmount","currency","amount","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","manageAnchorSession","mode","anchor","JSON","parse","sessionStorage","getItem","setItem","stringify","Object","assign","keys","checkUserAuthState","login","canCheckIn","isCheckedIn","calendarData","isSameOrAfter","downloadFile","url","filename","a","document","createElement","href","download","body","appendChild","click","removeChild","toFloat","decimalPlaces","factor","pow","sleep","Promise","r","setTimeout","handleBodyOverflow","open","attr","counter","getAttribute","getElementById","style","innerHTML","head","setAttribute","newCount","Number","removeAttribute"],"sources":["src/stores/calendar-dates.store.ts","src/utils/booking.ts","src/utils/utils.ts"],"sourcesContent":["import { DayData } from '@/models/DayType';\nimport { createStore } from '@stencil/store';\nexport interface ICalendarDates {\n  days: DayData[];\n  disabled_cells: Map<\n    string,\n    {\n      disabled: boolean;\n      reason: 'inventory' | 'stop_sale';\n    }\n  >;\n  months: { daysCount: number; monthName: string }[];\n  fromDate: string;\n  toDate: string;\n}\nconst initialState: ICalendarDates = {\n  days: [],\n  months: [],\n  fromDate: '',\n  toDate: '',\n  disabled_cells: new Map(),\n};\nexport const { state: calendar_dates, onChange: onCalendarDatesChange } = createStore<ICalendarDates>(initialState);\n\nexport default calendar_dates;\n","import { Extras, Room } from './../models/booking.dto';\nimport moment from 'moment';\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\nimport { dateDifference, isBlockUnit } from './utils';\nimport axios from 'axios';\nimport locales from '@/stores/locales.store';\nimport calendar_dates from '@/stores/calendar-dates.store';\nimport calendar_data from '@/stores/calendar-data';\n\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\n  const myBookings: any[] = [];\n  const stayStatus = await getStayStatus();\n  for (const month of months) {\n    for (const day of month.days) {\n      for (const room of day.room_types) {\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\n      }\n    }\n  }\n\n  return myBookings;\n}\n\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\n  for (const room of physicalRoom) {\n    for (const key in room.calendar_cell) {\n      if (room.calendar_cell[key].Is_Available === false) {\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\n      }\n    }\n  }\n}\nconst status: Record<string, STATUS> = {\n  '004': 'BLOCKED',\n  '003': 'BLOCKED-WITH-DATES',\n  '002': 'BLOCKED',\n};\nexport const bookingStatus: Record<string, STATUS> = {\n  '000': 'IN-HOUSE',\n  '001': 'PENDING-CONFIRMATION',\n  '002': 'CONFIRMED',\n  '003': 'CHECKED-OUT',\n};\n\nexport function formatName(firstName: string | null, lastName: string | null) {\n  if ((firstName === null && lastName === null) || !firstName) return '';\n  if (!!lastName) {\n    return `${firstName ?? ''} ${lastName ?? ''}`;\n  }\n  return firstName;\n}\nasync function getStayStatus() {\n  try {\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\n      TBL_NAMES: ['_STAY_STATUS'],\n    });\n    return data.My_Result.map(d => ({\n      code: d.CODE_NAME,\n      value: d.CODE_VALUE_EN,\n    }));\n  } catch (error) {\n    console.log(error);\n  }\n}\nfunction renderBlock003Date(date, hour, minute) {\n  const dt = new Date(date);\n  dt.setHours(hour);\n  dt.setMinutes(minute);\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\n}\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\n    return {\n      ID: cell.POOL,\n      NOTES: '',\n      BALANCE: '',\n      NAME:\n        cell.My_Block_Info.NOTES !== ''\n          ? cell.My_Block_Info.NOTES\n          : cell.STAY_STATUS_CODE === '003'\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\n      PR_ID: cell.My_Block_Info.pr_id,\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\n      FROM_DATE: blockedFromDate,\n      TO_DATE: blockedToDate,\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\n      STATUS: status[cell.STAY_STATUS_CODE],\n      POOL: cell.POOL,\n      STATUS_CODE: cell.STAY_STATUS_CODE,\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\n      defaultDates: {\n        from_date: cell.My_Block_Info.from_date,\n        to_date: cell.My_Block_Info.to_date,\n      },\n    };\n  }\n  // if (cell.booking.booking_nbr === '61249849') {\n  //   console.log('cell');\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\n  //   console.log(cell);\n  // }\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\n  return {\n    ID: cell.POOL,\n    FROM_DATE: bookingFromDate,\n    TO_DATE: bookingToDate,\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\n    STATUS: bookingStatus[cell.booking?.status.code],\n    // NAME: formatName(mainGuest?.first_name, mainGuest?.last_name),\n    NAME: formatName(mainGuest?.first_name, mainGuest?.last_name) || formatName(cell?.booking.guest?.first_name, cell?.booking?.guest?.last_name),\n    IDENTIFIER: cell.room.identifier,\n    PR_ID: cell.pr_id,\n    POOL: cell.POOL,\n    BOOKING_NUMBER: cell.booking.booking_nbr,\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\n    is_direct: cell.booking.is_direct,\n    BALANCE: cell.booking.financial?.due_amount,\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\n    ARRIVAL_TIME: cell.booking.arrival.description,\n    defaultDates: {\n      from_date: cell.room.from_date,\n      to_date: cell.room.to_date,\n    },\n    ///from here\n    ENTRY_DATE: cell.booking.booked_on.date,\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\n    IS_EDITABLE: cell.booking.is_editable,\n    ARRIVAL: cell.booking.arrival,\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\n    RATE: cell.room.total,\n    RATE_PLAN: cell.room.rateplan.name,\n    SPLIT_BOOKING: false,\n    RATE_PLAN_ID: cell.room.rateplan.id,\n    RATE_TYPE: cell.room?.roomtype?.id,\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\n    origin: cell.booking.origin,\n    GUEST: cell.booking.guest,\n    ROOMS: cell.booking.rooms,\n    cancelation: cell.room.rateplan.cancelation,\n    guarantee: cell.room.rateplan.guarantee,\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\n    COUNTRY: cell.booking.guest.country_id,\n    FROM_DATE_STR: cell.booking.format.from_date,\n    TO_DATE_STR: cell.booking.format.to_date,\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\n    //TODO:Implement checkin-checkout\n    CHECKIN: cell.room.in_out?.code === '001',\n    CHECKOUT: cell.room.in_out?.code === '002',\n    ROOM_INFO: {\n      occupancy: cell.room.occupancy,\n      sharing_persons: cell.room.sharing_persons,\n      unit: cell.room.unit,\n      in_out: cell.room.in_out,\n    },\n    BASE_STATUS_CODE: cell.booking.status?.code,\n  };\n}\n\n// function updateBookingWithStayData(data: any, cell: CellType): any {\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\n//   data.TO_DATE = cell.DATE;\n//   if (cell.booking) {\n//     const { arrival } = cell.booking;\n//     if (cell.booking.booking_nbr === '88231897') {\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\n//     }\n//     Object.assign(data, {\n//       ARRIVAL_TIME: arrival.description,\n//     });\n//   }\n//   return data;\n// }\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\n  const { in_out, status_code, from_date, to_date } = params;\n  if (calendar_data.checkin_enabled) {\n    if (in_out?.code === '001') {\n      return bookingStatus['000'];\n    } else if (in_out?.code === '002') {\n      if (!calendar_data.is_automatic_check_in_out) {\n        const now = moment();\n        const toDate = moment(to_date, 'YYYY-MM-DD');\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\n        const isNowAfterOrSameAsHotelHour = compareTime(\n          now.toDate(),\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\n        );\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\n          return bookingStatus['003'];\n        } else {\n          return bookingStatus['002'];\n        }\n      }\n    }\n    return bookingStatus[status_code || '001'];\n  } else {\n    const now = moment();\n    // const toDate = moment(to_date, 'YYYY-MM-DD');\n    // const fromDate = moment(from_date, 'YYYY-MM-DD');\n    // const isNowAfterOrSameAsHotelHour = compareTime(\n    //   now.toDate(),\n    //   createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\n    // );\n    // if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\n    //   return bookingStatus['000'];\n    // } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\n    //   return bookingStatus['000'];\n    // } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\n    //   return bookingStatus['000'];\n    // } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\n    //   return bookingStatus['003'];\n    // } else {\n    //   return bookingStatus[status_code || '001'];\n    // }\n    const toDate = moment(to_date, 'YYYY-MM-DD');\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\n    if (status_code !== 'PENDING') {\n      if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\n        return bookingStatus['000'];\n      } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\n        return bookingStatus['000'];\n      } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\n        return bookingStatus['000'];\n      } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\n        return bookingStatus['003'];\n      } else {\n        return bookingStatus[status_code || '001'];\n      }\n    }\n  }\n}\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\n  if (index === -1) {\n    const newData = getDefaultData(cell, stayStatus);\n    myBookings.push(newData);\n  }\n  //else {\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\n  //   myBookings[index] = updatedData;\n  // }\n}\nexport function getPrivateNote(extras: Extras[] | null) {\n  if (!extras) {\n    return null;\n  }\n  return extras.find(e => e.key === 'private_note')?.value || null;\n}\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\n  let bookings: RoomBookingDetails[] = [];\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\n  rooms.forEach(room => {\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\n    const bookingToDate = room.to_date;\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\n      return;\n    }\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\n    bookings.push({\n      CHECKIN: false,\n      CHECKOUT: false,\n      ID: room['assigned_units_pool'],\n      TO_DATE: bookingToDate,\n      FROM_DATE: bookingFromDate,\n      PRIVATE_NOTE: getPrivateNote(data.extras),\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\n      ARRIVAL: data.arrival,\n      IS_EDITABLE: true,\n      BALANCE: data.financial?.due_amount,\n      STATUS: getRoomStatus({\n        in_out: room.in_out,\n        from_date: room.from_date,\n        to_date: room.to_date,\n        status_code: data.status?.code,\n      }),\n      // NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name) || formatName(room.guest.first_name, room.guest.last_name),\n      PHONE: data.guest.mobile_without_prefix ?? '',\n      ENTRY_DATE: '12-12-2023',\n      PHONE_PREFIX: data.guest.country_phone_prefix,\n      RATE: room.total,\n      RATE_PLAN: room.rateplan.name,\n      SPLIT_BOOKING: false,\n      RATE_PLAN_ID: room.rateplan.id,\n      IDENTIFIER: room.identifier,\n      RATE_TYPE: room.roomtype.id,\n      ADULTS_COUNT: room.occupancy.adult_nbr,\n      CHILDREN_COUNT: room.occupancy.children_nbr,\n      PR_ID: +room.unit.id,\n      POOL: room['assigned_units_pool'],\n      GUEST: data.guest,\n      ROOMS: data.rooms,\n      BOOKING_NUMBER: data.booking_nbr,\n      cancelation: room.rateplan.cancelation,\n      guarantee: room.rateplan.guarantee,\n      TOTAL_PRICE: data.financial?.gross_total,\n      COUNTRY: data.guest.country_id,\n      FROM_DATE_STR: data.format.from_date,\n      TO_DATE_STR: data.format.to_date,\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\n      ARRIVAL_TIME: data.arrival.description,\n      origin: data.origin,\n      channel_booking_nbr: data.channel_booking_nbr,\n      is_direct: data.is_direct,\n      NOTES: data.is_direct ? data.remark : null,\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\n      ota_notes: data.ota_notes,\n      defaultDates: {\n        from_date: room.from_date,\n        to_date: room.to_date,\n      },\n      ROOM_INFO: {\n        occupancy: room.occupancy,\n        sharing_persons: room.sharing_persons,\n        unit: room.unit,\n        in_out: room.in_out,\n      },\n      BASE_STATUS_CODE: data.status?.code,\n    });\n  });\n  return bookings;\n}\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\n  const stayStatus = await getStayStatus();\n  return {\n    ID: data.POOL,\n    NOTES: '',\n    BALANCE: '',\n    NAME:\n      data.NOTES !== ''\n        ? data.NOTES\n        : data.STAY_STATUS_CODE === '003'\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\n    PR_ID: data.pr_id,\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\n    OPTIONAL_REASON: data.NOTES,\n    FROM_DATE: data.from_date,\n    TO_DATE: data.to_date,\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\n    STATUS: status[data.STAY_STATUS_CODE],\n    POOL: data.POOL,\n    STATUS_CODE: data.STAY_STATUS_CODE,\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\n    FROM_DATE_STR: data.format.from_date,\n    TO_DATE_STR: data.format.to_date,\n    defaultDates: {\n      from_date: data.from_date,\n      to_date: data.to_date,\n    },\n  };\n}\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\n  const startDate = moment(from_date, 'YYYY-MM-DD').startOf('day');\n  const endDate = moment(to_date, 'YYYY-MM-DD').endOf('day');\n  const daysDiff = endDate.diff(startDate, 'days');\n  return daysDiff || 1;\n}\nexport function compareTime(date1: Date, date2: Date) {\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\n}\n/**\n * Creates a Date object for today at the specified hour in a given time zone.\n * The offset is the number of hours that the target time zone is ahead of UTC.\n *\n * For example, if offset = 3 and hour = 9, then the function returns a Date\n * which, when converted to the target time zone, represents 9:00.\n *\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\n * @param hour - The desired hour in the target time zone (0-23)\n * @returns Date object representing the target time (in UTC)\n */\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\n  const now = new Date();\n  const offsetMs = offset * 60 * 60 * 1000;\n  const targetTzDate = new Date(now.getTime() + offsetMs);\n  const year = targetTzDate.getUTCFullYear();\n  const month = targetTzDate.getUTCMonth();\n  const day = targetTzDate.getUTCDate();\n  const utcHour = hour - offset;\n  return new Date(Date.UTC(year, month, day, utcHour));\n}\n","import moment from 'moment';\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\nimport { z } from 'zod';\nimport { compareTime, createDateWithOffsetAndHour } from '@/utils/booking';\nimport calendarData from '@/stores/calendar-data';\n\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string, format: string = 'D_M_YYYY'): string {\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\n  const date = moment(dateStr, 'DD MMM YYYY');\n  if (!date.isValid()) {\n    throw new Error('Invalid Date');\n  }\n  return date.format(format);\n}\n\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\n  date.setHours(0, 0, 0, 0);\n  return date.getTime();\n}\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\n  const startDate = new Date(FROM_DATE);\n  const endDate = new Date(TO_DATE);\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n}\nexport const getBrowserLanguage = (): string => {\n  const defaultLang = 'en';\n  const lang = navigator.language || defaultLang;\n  return lang.toUpperCase().split('-')[0];\n};\n\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\n  const myBookings: IBooking[] = [];\n  physicalRoom.forEach(room => {\n    Object.keys(room.calendar_cell).forEach(key => {\n      if (room.calendar_cell[key].Is_Available === false) {\n        if (myBookings.find(b => b.ID === room.id.toString())) {\n        } else {\n          //myBookings.push({})\n        }\n      }\n    });\n  });\n  return myBookings;\n};\n\nexport function dateToFormattedString(date: Date): string {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\nexport function formatLegendColors(legendData) {\n  let formattedLegendData: any = {};\n\n  const statusId = {\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\n    'NOTES': { id: 8, clsName: 'NOTES' },\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\n  };\n  legendData.forEach(legend => {\n    formattedLegendData[legend.id] = legend;\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\n  });\n\n  return formattedLegendData;\n}\nexport function isBlockUnit(status_code: any) {\n  return ['003', '002', '004'].includes(status_code);\n}\nexport function getCurrencySymbol(currencyCode) {\n  const formatter = new Intl.NumberFormat(undefined, {\n    style: 'currency',\n    currency: currencyCode,\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\n}\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\n\nexport function getReleaseHoursString(releaseDate: number) {\n  const dt = new Date();\n  const releaseAfterHours = releaseDate;\n\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\n\n  return {\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\n  };\n}\n\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\n  const dateObj = moment(startDate, 'D_M_YYYY');\n  dateObj.add(numberOfDays, 'days');\n  return dateObj.format('YYYY-MM-DD');\n}\n\nexport function convertDMYToISO(date: string) {\n  const dateObj = moment(date, 'D_M_YYYY');\n  return dateObj.format('YYYY-MM-DD');\n}\nexport function addTwoMonthToDate(date: Date) {\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\n}\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\n  return formattedDate;\n}\nexport function getNextDay(date: Date) {\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\n}\n\nexport function convertDatePrice(date: string) {\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\n}\nexport function getDaysArray(date1: string, date2: string) {\n  let dates = [];\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\n  let end = moment.max(moment(date1), moment(date2));\n  while (start < end) {\n    dates.push(start.format('YYYY-MM-DD'));\n    start = start.clone().add(1, 'days');\n  }\n\n  return dates;\n}\nexport function renderTime(time: number) {\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\n}\nexport function validateEmail(email: string) {\n  if (email === '') {\n    return true;\n  }\n  const parsedEmailResults = z.string().email().safeParse(email);\n  return !parsedEmailResults.success;\n}\nexport function formatAmount(currency: string, amount: number) {\n  return currency + ' ' + amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n}\n\nexport const extras = [\n  {\n    key: 'private_note',\n    value: '',\n  },\n  {\n    key: 'is_backend',\n    value: true,\n  },\n  {\n    key: 'ERROR_EMAIL',\n    value: '',\n  },\n  {\n    key: 'agent_payment_mode',\n    value: '',\n  },\n  { key: 'payment_code', value: '' },\n];\n\nexport function manageAnchorSession(data: Record<string, unknown>, mode: 'add' | 'remove' = 'add') {\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\n  if (anchor) {\n    if (mode === 'add') {\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...anchor, ...data }));\n    } else if (mode === 'remove') {\n      const keys = Object.keys(data);\n      keys.forEach(key => {\n        if (key in anchor) {\n          delete anchor[key];\n        }\n      });\n      return sessionStorage.setItem('backend_anchor', JSON.stringify(anchor));\n    }\n  } else {\n    if (mode === 'add') {\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...data }));\n    }\n  }\n}\nexport function checkUserAuthState() {\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\n  if (anchor) {\n    return anchor.login || null;\n  }\n  return null;\n}\n\nexport interface CheckInParams {\n  from_date: string;\n  to_date: string;\n  isCheckedIn?: boolean;\n}\n\n/**\n * Determines whether a booking is eligible for check-in.\n *\n * @param params - An object containing the booking event, calendar data, current check-in status, and a flag indicating if check-in or checkout is allowed.\n * @returns True if check-in is allowed; otherwise, false.\n */\nexport function canCheckIn({ from_date, to_date, isCheckedIn }: CheckInParams): boolean {\n  if (!calendarData.checkin_enabled || calendarData.is_automatic_check_in_out) {\n    return false;\n  }\n  if (isCheckedIn) {\n    return false;\n  }\n  const now = moment();\n  if (\n    (moment().isSameOrAfter(new Date(from_date), 'days') && moment().isBefore(new Date(to_date), 'days')) ||\n    (moment().isSame(new Date(to_date), 'days') &&\n      !compareTime(now.toDate(), createDateWithOffsetAndHour(calendarData.checkin_checkout_hours?.offset, calendarData.checkin_checkout_hours?.hour)))\n  ) {\n    return true;\n  }\n  return false;\n}\n/**\n * Downloads a file from a given URL.\n *\n * @param url - The URL of the file to download.\n * @param filename - The name of the file to save. If not provided, the URL will be used as the filename.\n */\nexport function downloadFile(url: string, filename?: string) {\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename || url;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\n/**\n * Converts an integer value into a float by shifting the decimal point.\n *\n * @param value - The integer value to convert (e.g. 29016).\n * @param decimalPlaces - The number of decimal places to shift (e.g. 2 results in 290.16).\n * @returns The converted floating point number.\n */\nexport function toFloat(value: number, decimalPlaces: number): number {\n  const factor = Math.pow(10, decimalPlaces);\n  return value / factor;\n}\n\nexport async function sleep(time: number = 200) {\n  return new Promise(r => setTimeout(() => r(null), time));\n}\nexport function handleBodyOverflow(open: boolean) {\n  const attr = 'data-ir-scroll-locked';\n  let counter = document.body.getAttribute(attr);\n  if (!document.getElementById('scroll-lock-style')) {\n    const style = document.createElement('style');\n    style.id = 'scroll-lock-style';\n    style.innerHTML = `\n      body:dir(ltr)[data-ir-scroll-locked] {\n        overflow: hidden !important;\n        overscroll-behavior: contain;\n        position: relative !important;\n        padding-left: 0px;\n        padding-top: 0px;\n        padding-right: 0px;\n        margin-left: 0;\n        margin-top: 0;\n        margin-right: 15px !important;\n      }\n      body:dir(rtl)[data-ir-scroll-locked] {\n        overflow: hidden !important;\n        overscroll-behavior: contain;\n        position: relative !important;\n        padding-left: 0px;\n        padding-top: 0px;\n        padding-right: 0px;\n        margin-right: 0;\n        margin-top: 0;\n        margin-left: 15px !important;\n      }\n    `;\n    document.head.appendChild(style);\n  }\n  if (!counter) {\n    document.body.setAttribute(attr, '1');\n  } else {\n    const newCount = open ? Number(counter) + 1 : Number(counter) - 1;\n    document.body.setAttribute(attr, newCount.toString());\n    if (newCount <= 0) {\n      document.body.removeAttribute(attr);\n    }\n  }\n}\nexport function generatePassword(length = 16): string {\n  const CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789' + '!@#$%^&*()-_=+[]{}|;:,.<>?';\n\n  const cryptoObj = (window.crypto || (window as any).msCrypto) as Crypto & { getRandomValues?: Function };\n  if (cryptoObj && typeof cryptoObj.getRandomValues === 'function') {\n    const randomValues = new Uint32Array(length);\n    cryptoObj.getRandomValues(randomValues);\n    return Array.from(randomValues, rv => CHARSET[rv % CHARSET.length]).join('');\n  } else {\n    console.warn('Secure crypto RNG not available—falling back to Math.random()');\n    let password = '';\n    for (let i = 0; i < length; i++) {\n      const idx = Math.floor(Math.random() * CHARSET.length);\n      password += CHARSET.charAt(idx);\n    }\n    return password;\n  }\n}\n"],"mappings":"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","ignoreList":[]}