{"version":3,"names":["irOtpCss","IrOtpStyle0","IrOtp","constructor","hostRef","this","length","disabled","placeholder","type","autoFocus","secure","numbersOnly","otpValues","inputRefs","handleInput","event","index","input","target","value","replace","slice","emitChanges","focus","handleKeyDown","key","preventDefault","handlePaste","pastedData","_a","clipboardData","getData","filteredData","i","Math","min","forEach","idx","nextEmptyIndex","findIndex","val","handleFocus","setTimeout","select","componentWillLoad","Array","fill","defaultValue","setValue","componentDidLoad","handleLengthChange","newLength","oldLength","otpValue","join","otpChange","emit","every","otpComplete","clear","valueArray","split","render","h","Host","class","map","_","ref","el","inputmode","maxlength","autocomplete","onInput","e","onKeyDown","onPaste","onFocus","irOtpModalCss","IrOtpModalStyle0","IrOtpModal","language","resendTimer","showResend","otpLength","otp","error","isLoading","timer","systemService","SystemService","roomService","RoomService","tokenService","Token","otpVerificationSchema","z","object","email","string","nonempty","requestUrl","handleOtpComplete","detail","ticket","setToken","fetchLocale","handleTicketChange","newValue","oldValue","handleKeyDownChange","dialogRef","open","openModal","resetState","showModal","setAttribute","startTimer","focusFirstInput","closeModal","close","removeAttribute","clearTimer","getToken","isInitializing","fetchLanguage","timerInterval","window","setInterval","clearInterval","Promise","r","first","querySelector","verifyOtp","parse","validateOTP","METHOD_NAME","OTP","otpFinished","err","resendOtp","resendOTP","console","log","handleCancelClicked","baseOTPUrl","location","reload","disconnectedCallback","method","locales","entries","Fragment","Lcz_VerifyYourIdentity","Lcz_WeSentYuoVerificationCode","onOtpComplete","Lcz_ResendCode","String","padStart","btn_color","onClickHandler","stopImmediatePropagation","stopPropagation","size","text","btn_styles","Lcz_Cancel","onClick","bind","Lcz_VerifyNow","btn_disabled","irSpinnerCss","IrSpinnerStyle0","IrSpinner","unit","initStyles","handleSpinnerSizeChange","handleSpinnerBorderWidthChange","handleSpinnerUnitChange","handleSpinnerColorChange","applyCssElement","borderWidth","color","style","setProperty"],"sources":["src/components/ir-otp-modal/ir-otp/ir-otp.css?tag=ir-otp&encapsulation=scoped","src/components/ir-otp-modal/ir-otp/ir-otp.tsx","src/components/ir-otp-modal/ir-otp-modal.css?tag=ir-otp-modal","src/components/ir-otp-modal/ir-otp-modal.tsx","src/components/ui/ir-spinner/ir-spinner.css?tag=ir-spinner&encapsulation=shadow","src/components/ui/ir-spinner/ir-spinner.tsx"],"sourcesContent":[".otp-input-wrapper {\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-evenly;\n}\n\n.otp-digit {\n  --otp-size: 3rem;\n  width: var(--otp-size) !important;\n  height: var(--otp-size) !important;\n  padding: 0;\n  font-size: 24px;\n  font-weight: 500;\n  text-align: center;\n  background-color: #fff;\n  padding: 0 !important;\n}\n\n.otp-digit:disabled {\n  background-color: #e9ecef;\n  cursor: not-allowed;\n}\n\n/* Remove up/down arrows from number inputs */\ninput[type='number']::-webkit-inner-spin-button,\ninput[type='number']::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\ninput[type='number'] {\n  -moz-appearance: textfield;\n}\n\n/* Make inputs responsive */\n@media (max-width: 480px) {\n  .otp-digit {\n    width: 35px;\n    height: 45px;\n    font-size: 20px;\n  }\n\n  .otp-input-wrapper {\n    gap: 6px;\n  }\n}\n\n@media (max-width: 360px) {\n  .otp-digit {\n    width: 30px;\n    height: 40px;\n    font-size: 18px;\n  }\n\n  .otp-input-wrapper {\n    gap: 4px;\n  }\n}\n","import { Component, Event, EventEmitter, h, Host, Prop, State, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'ir-otp',\n  styleUrl: 'ir-otp.css',\n  scoped: true,\n})\nexport class IrOtp {\n  /**\n   * The length of the OTP code\n   */\n  @Prop() length: number = 6;\n  /**\n   * The default OTP code\n   */\n  @Prop() defaultValue: string;\n\n  /**\n   * Whether the input is disabled\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Placeholder character to display\n   */\n  @Prop() placeholder: string = '';\n\n  /**\n   * Input type - can be 'text', 'password', 'number', or 'tel'\n   */\n  @Prop() type: 'text' | 'password' | 'number' | 'tel' = 'number';\n\n  /**\n   * Auto focus on the first input when component loads\n   */\n  @Prop() autoFocus: boolean = true;\n\n  /**\n   * Whether to mask the input (show dots instead of text)\n   */\n  @Prop() secure: boolean = false;\n\n  /**\n   * Allow only numbers (0-9) as input\n   */\n  @Prop() numbersOnly: boolean = false;\n\n  /**\n   * Event emitted when the OTP value changes\n   */\n  @Event() otpChange: EventEmitter<string>;\n\n  /**\n   * Event emitted when the OTP is complete\n   */\n  @Event() otpComplete: EventEmitter<string>;\n\n  /**\n   * Current OTP value as an array of characters\n   */\n  @State() otpValues: string[] = [];\n\n  /**\n   * Reference to input elements\n   */\n  private inputRefs: HTMLInputElement[] = [];\n\n  /**\n   * Initialize the component\n   */\n  componentWillLoad() {\n    this.otpValues = Array(this.length).fill('');\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  /**\n   * Focus the first input after component renders\n   */\n  componentDidLoad() {\n    if (this.autoFocus && this.inputRefs[0]) {\n      setTimeout(() => {\n        this.inputRefs[0].focus();\n      }, 0);\n    }\n  }\n\n  /**\n   * Watch for length changes and update the OTP values array\n   */\n  @Watch('length')\n  handleLengthChange(newLength: number) {\n    if (newLength < 1) return;\n\n    const oldLength = this.otpValues.length;\n\n    if (newLength > oldLength) {\n      // Add empty slots\n      this.otpValues = [...this.otpValues, ...Array(newLength - oldLength).fill('')];\n    } else if (newLength < oldLength) {\n      // Remove extra slots\n      this.otpValues = this.otpValues.slice(0, newLength);\n    }\n\n    this.emitChanges();\n  }\n\n  /**\n   * Update the current OTP value at the specified index\n   */\n  handleInput = (event: Event, index: number) => {\n    const input = event.target as HTMLInputElement;\n    let value = input.value;\n\n    // For number input type, restrict to digits only\n    if (this.numbersOnly) {\n      value = value.replace(/[^0-9]/g, '');\n    }\n\n    // Take only the last character if someone enters multiple\n    if (value.length > 1) {\n      value = value.slice(-1);\n      input.value = value;\n    }\n\n    this.otpValues[index] = value;\n    this.emitChanges();\n\n    // Move to next input if this one is filled\n    if (value && index < this.length - 1) {\n      this.inputRefs[index + 1].focus();\n    }\n  };\n\n  /**\n   * Handle keyboard navigation\n   */\n  handleKeyDown = (event: KeyboardEvent, index: number) => {\n    switch (event.key) {\n      case 'Backspace':\n        if (!this.otpValues[index] && index > 0) {\n          // If current field is empty and backspace is pressed, go to previous field\n          this.inputRefs[index - 1].focus();\n          // Prevent default to avoid browser navigation\n          event.preventDefault();\n        }\n        break;\n      case 'Delete':\n        // Clear current input on delete\n        this.otpValues[index] = '';\n        this.emitChanges();\n        break;\n      case 'ArrowLeft':\n        // Move to previous input on left arrow\n        if (index > 0) {\n          this.inputRefs[index - 1].focus();\n          event.preventDefault();\n        }\n        break;\n      case 'ArrowRight':\n        // Move to next input on right arrow\n        if (index < this.length - 1) {\n          this.inputRefs[index + 1].focus();\n          event.preventDefault();\n        }\n        break;\n      case 'Home':\n        // Move to first input\n        this.inputRefs[0].focus();\n        event.preventDefault();\n        break;\n      case 'End':\n        // Move to last input\n        this.inputRefs[this.length - 1].focus();\n        event.preventDefault();\n        break;\n    }\n  };\n\n  /**\n   * Handle paste event to populate the OTP fields\n   */\n  handlePaste = (event: ClipboardEvent, index: number) => {\n    event.preventDefault();\n    const pastedData = event.clipboardData?.getData('text') || '';\n\n    // If numbersOnly is enabled, filter non-number characters\n    const filteredData = this.numbersOnly ? pastedData.replace(/[^0-9]/g, '') : pastedData;\n\n    // Fill OTP values with pasted data\n    for (let i = 0; i < Math.min(filteredData.length, this.length - index); i++) {\n      this.otpValues[index + i] = filteredData[i];\n    }\n\n    // Update inputs with new values\n    this.inputRefs.forEach((input, idx) => {\n      input.value = this.otpValues[idx] || '';\n    });\n\n    // Focus on the next empty input or the last one\n    const nextEmptyIndex = this.otpValues.findIndex(val => !val);\n    if (nextEmptyIndex !== -1 && nextEmptyIndex < this.length) {\n      this.inputRefs[nextEmptyIndex].focus();\n    } else {\n      this.inputRefs[this.length - 1].focus();\n    }\n\n    this.emitChanges();\n  };\n\n  /**\n   * Focus handler to select all text when focused\n   */\n  handleFocus = (event: FocusEvent) => {\n    const input = event.target as HTMLInputElement;\n    if (input.value) {\n      setTimeout(() => input.select(), 0);\n    }\n  };\n\n  /**\n   * Helper method to emit change events\n   */\n  private emitChanges() {\n    const otpValue = this.otpValues.join('');\n    this.otpChange.emit(otpValue);\n\n    // If all fields are filled, trigger the complete event\n    if (this.otpValues.every(val => val !== '') && this.otpValues.length === this.length) {\n      this.otpComplete.emit(otpValue);\n    }\n  }\n\n  /**\n   * Manually clear all inputs\n   */\n  public clear() {\n    this.otpValues = Array(this.length).fill('');\n    this.inputRefs.forEach(input => {\n      input.value = '';\n    });\n    this.emitChanges();\n\n    // Focus the first input after clearing\n    if (this.inputRefs[0]) {\n      this.inputRefs[0].focus();\n    }\n  }\n\n  /**\n   * Set OTP values programmatically\n   */\n  public setValue(value: string) {\n    const valueArray = value.split('');\n\n    for (let i = 0; i < this.length; i++) {\n      this.otpValues[i] = i < valueArray.length ? valueArray[i] : '';\n    }\n\n    // Update the actual input elements\n    this.inputRefs.forEach((input, idx) => {\n      input.value = this.otpValues[idx] || '';\n    });\n\n    this.emitChanges();\n  }\n\n  render() {\n    return (\n      <Host class=\"otp-input-container\">\n        <div class=\"otp-input-wrapper\">\n          {Array(this.length)\n            .fill(null)\n            .map((_, index) => (\n              <input\n                ref={el => (this.inputRefs[index] = el as HTMLInputElement)}\n                type={this.type}\n                inputmode={this.numbersOnly ? 'numeric' : 'text'}\n                class=\"otp-digit form-control input-sm\"\n                maxlength=\"1\"\n                placeholder={this.placeholder}\n                disabled={this.disabled}\n                autocomplete=\"one-time-code\"\n                value={this.otpValues[index]}\n                onInput={e => this.handleInput(e, index)}\n                onKeyDown={e => this.handleKeyDown(e, index)}\n                onPaste={e => this.handlePaste(e, index)}\n                onFocus={this.handleFocus}\n                aria-label={`Digit ${index + 1} of ${this.length}`}\n              />\n            ))}\n        </div>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n:root {\n  --otp-modal-padding: 1.5rem;\n}\n.modal-backdrop {\n  background-color: rgba(0, 0, 0, 0.5) !important;\n}\n.otp-modal-header {\n  border-bottom: 0px !important;\n}\n.otp-modal {\n  z-index: 9999999 !important;\n  border: none;\n  padding: 0 !important;\n  box-sizing: border-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.35rem;\n  outline: 0;\n}\n.otp-modal-content {\n  background-color: white;\n  border: none;\n  border-radius: 0.35rem;\n  outline: 0;\n}\n.otp-modal-title {\n  margin-bottom: 0;\n  line-height: 1.45;\n}\n.otp-modal-body {\n  max-height: 100% !important;\n  padding: 0 var(--otp-modal-padding);\n}\n.otp-modal-header {\n  display: flex;\n  justify-content: space-between;\n  padding: var(--otp-modal-padding);\n  padding-bottom: 1rem;\n  border-top-left-radius: 0.35rem;\n  border-top-right-radius: 0.35rem;\n}\n.otp-modal-dialog {\n  z-index: 9999999 !important;\n}\n.otp-modal-footer {\n  border-top: 0 !important;\n  display: flex;\n  gap: 0.5rem;\n  flex-direction: column;\n  padding: var(--otp-modal-padding);\n  padding-top: 0.5rem !important;\n}\n.verification-message {\n  max-width: 90%;\n}\n.modal-loading-container {\n  height: 250px;\n  width: 80vw;\n}\n@media (min-width: 768px) {\n  .otp-modal-dialog,\n  .otp-modal-content {\n    width: fit-content !important;\n  }\n  .otp-modal-footer {\n    flex-direction: row;\n    align-items: center;\n  }\n  .modal-loading-container {\n    width: 380px !important;\n  }\n  .verification-message {\n    max-width: 350px !important;\n  }\n}\n","import Token from '@/models/Token';\nimport { RoomService } from '@/services/room.service';\nimport { SystemService } from '@/services/system.service';\nimport locales from '@/stores/locales.store';\nimport { Component, Event, EventEmitter, Fragment, Host, Listen, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { z } from 'zod';\n\n@Component({\n  tag: 'ir-otp-modal',\n  styleUrl: 'ir-otp-modal.css',\n  scoped: false,\n})\nexport class IrOtpModal {\n  @Prop() language: string = 'en';\n  /** Number of seconds to wait before allowing OTP resend */\n  @Prop() resendTimer = 60;\n\n  /** URL or endpoint used to validate the OTP */\n  @Prop() requestUrl: string;\n  /** URL or endpoint used to validate the OTP */\n  @Prop() baseOTPUrl: string;\n\n  /** Whether the resend option should be visible */\n  @Prop() showResend: boolean = true;\n\n  /** User's email address to display in the modal and send the OTP to */\n  @Prop() email: string;\n\n  /** Number of digits the OTP should have */\n  @Prop() otpLength: number = 6;\n\n  /** ticket for verifying and resending the verification code */\n  @Prop() ticket: string;\n\n  @State() otp = '';\n  @State() error = '';\n  @State() isLoading = false;\n  @State() timer = 60;\n\n  private dialogRef: HTMLDialogElement;\n\n  private timerInterval: number;\n  private systemService = new SystemService();\n  private roomService = new RoomService();\n  private tokenService = new Token();\n\n  private otpVerificationSchema = z.object({ email: z.string().nonempty(), requestUrl: z.string().nonempty(), otp: z.string().length(this.otpLength) });\n\n  /** Emits the final OTP (or empty on cancel) */\n  @Event({ bubbles: true, composed: true }) otpFinished: EventEmitter<{\n    otp: string;\n    type: 'success' | 'cancelled';\n  }>;\n  @State() isInitializing: boolean;\n\n  componentWillLoad() {\n    if (this.ticket) {\n      this.tokenService.setToken(this.ticket);\n    }\n    this.fetchLocale();\n  }\n\n  @Watch('ticket')\n  handleTicketChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.tokenService.setToken(newValue);\n      this.fetchLocale();\n    }\n  }\n\n  @Listen('keydown', { target: 'document' })\n  handleKeyDownChange(e: KeyboardEvent) {\n    if (e.key === 'Escape' && this.dialogRef?.open) {\n      e.preventDefault();\n    }\n  }\n  /** Open & reset everything */\n  @Method()\n  async openModal() {\n    this.resetState();\n    // $(this.modalRef).modal({ backdrop: 'static', keyboard: false });\n    // $(this.modalRef).modal('show');\n    if (typeof this.dialogRef.showModal === 'function') {\n      this.dialogRef.showModal();\n    } else {\n      // fallback for browsers without dialog support\n      this.dialogRef.setAttribute('open', '');\n    }\n    if (this.showResend) this.startTimer();\n    await this.focusFirstInput();\n  }\n\n  /** Hide & clear timer */\n  @Method()\n  async closeModal() {\n    // $(this.modalRef).modal('hide');\n    if (typeof this.dialogRef.close === 'function') {\n      this.dialogRef.close();\n    } else {\n      this.dialogRef.removeAttribute('open');\n    }\n    this.otp = null;\n    this.clearTimer();\n  }\n  private async fetchLocale() {\n    if (!this.tokenService.getToken()) {\n      return;\n    }\n    this.isInitializing = true;\n    await this.roomService.fetchLanguage(this.language, ['_USER_MGT']);\n    this.isInitializing = false;\n  }\n\n  private resetState() {\n    this.otp = '';\n    this.error = '';\n    this.isLoading = false;\n    this.timer = 60;\n    this.clearTimer();\n  }\n\n  private startTimer() {\n    this.clearTimer();\n    this.timerInterval = window.setInterval(() => {\n      if (this.timer > 0) {\n        this.timer--;\n      } else {\n        this.clearTimer();\n      }\n    }, 1000);\n  }\n\n  private clearTimer() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n      this.timerInterval = null;\n    }\n  }\n\n  private async focusFirstInput() {\n    await new Promise(r => setTimeout(r, 50));\n    const first = this.dialogRef.querySelector('input');\n    first && (first as HTMLInputElement).focus();\n  }\n\n  private handleOtpComplete = (e: CustomEvent<string>) => {\n    this.error = '';\n    this.otp = e.detail;\n  };\n\n  private async verifyOtp() {\n    if (this.otp.length < this.otpLength) return;\n    this.isLoading = true;\n    this.otpVerificationSchema.parse({\n      otp: this.otp,\n      requestUrl: this.requestUrl,\n      email: this.email,\n    });\n    try {\n      await this.systemService.validateOTP({ METHOD_NAME: this.requestUrl, OTP: this.otp });\n      this.otpFinished.emit({ otp: this.otp, type: 'success' });\n      this.closeModal();\n    } catch (err) {\n      this.error = 'Verification failed. Please try again.';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async resendOtp() {\n    if (this.timer > 0) return;\n    // Resend otp\n    try {\n      await this.systemService.resendOTP({ METHOD_NAME: this.requestUrl });\n      this.timer = 60;\n      this.startTimer();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  private handleCancelClicked() {\n    if (this.baseOTPUrl === 'Check_OTP_Necessity') {\n      this.closeModal();\n      this.otpFinished.emit({\n        otp: null,\n        type: 'cancelled',\n      });\n      return;\n    }\n    window.location.reload();\n  }\n  disconnectedCallback() {\n    this.clearTimer();\n  }\n  render() {\n    return (\n      <Host>\n        <dialog ref={el => (this.dialogRef = el)} class=\"otp-modal\" aria-modal=\"true\">\n          <form method=\"dialog\" class=\"otp-modal-content\">\n            {this.isInitializing || !locales.entries ? (\n              <div class={'d-flex align-items-center justify-content-center modal-loading-container'}>\n                <ir-spinner></ir-spinner>\n              </div>\n            ) : (\n              <Fragment>\n                <header class=\"otp-modal-header\">\n                  <h5 class=\"otp-modal-title\">{locales.entries.Lcz_VerifyYourIdentity}</h5>\n                </header>\n\n                <section class=\"otp-modal-body d-flex align-items-center flex-column\">\n                  <p class=\"verification-message text-truncate\">\n                    {locales.entries.Lcz_WeSentYuoVerificationCode} {this.email}\n                  </p>\n                  <ir-otp autoFocus length={this.otpLength} defaultValue={this.otp} onOtpComplete={this.handleOtpComplete}></ir-otp>\n\n                  {this.error && <p class=\"text-danger small mt-1 p-0 mb-0\">{this.error}</p>}\n\n                  {this.showResend && (\n                    <Fragment>\n                      {this.timer > 0 ? (\n                        <p class=\"small mt-1\">\n                          {locales.entries.Lcz_ResendCode} 00:{String(this.timer).padStart(2, '0')}\n                        </p>\n                      ) : (\n                        <ir-button\n                          class=\"mt-1\"\n                          btn_color=\"link\"\n                          onClickHandler={e => {\n                            e.stopImmediatePropagation();\n                            e.stopPropagation();\n                            this.resendOtp();\n                          }}\n                          size=\"sm\"\n                          text={'Didn’t receive code? Resend'}\n                        ></ir-button>\n                      )}\n                    </Fragment>\n                  )}\n                </section>\n\n                <footer class=\"otp-modal-footer justify-content-auto\">\n                  <ir-button class=\"w-100\" btn_styles=\"flex-fill\" text={locales.entries.Lcz_Cancel} btn_color=\"secondary\" onClick={this.handleCancelClicked.bind(this)}></ir-button>\n                  <ir-button\n                    class=\"w-100\"\n                    btn_styles=\"flex-fill\"\n                    text={locales.entries.Lcz_VerifyNow}\n                    isLoading={this.isLoading}\n                    btn_disabled={this.otp?.length < this.otpLength || this.isLoading}\n                    onClick={() => this.verifyOtp()}\n                  ></ir-button>\n                </footer>\n              </Fragment>\n            )}\n          </form>\n        </dialog>\n      </Host>\n    );\n  }\n}\n",":host {\n  width: var(--ir-spinner-size, 1.25rem);\n  height: var(--ir-spinner-size, 1.25rem);\n  border: var(--ir-spinner-border-width, 2.5px) solid var(--ir-spinner-color, #3f3f3f);\n  border-bottom-color: transparent;\n  border-radius: 50%;\n  display: inline-block;\n  box-sizing: border-box;\n  animation: rotation 1s linear infinite;\n}\n\n@keyframes rotation {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n","import { Component, Element, Host, Prop, Watch, h } from '@stencil/core';\n\n@Component({\n  tag: 'ir-spinner',\n  styleUrl: 'ir-spinner.css',\n  shadow: true,\n})\nexport class IrSpinner {\n  @Element() el: HTMLIrSpinnerElement;\n  /**\n   * Size of the spinner (diameter).\n   * Example: `size={2}` with `unit=\"rem\"` sets spinner to `2rem`.\n   */\n  @Prop() size: number;\n\n  /**\n   * Thickness of the spinner's border.\n   * Example: `borderWidth={4}` renders a `4px` or `4rem` thick border.\n   */\n  @Prop() borderWidth: number;\n\n  /**\n   * CSS unit used for `size` and `borderWidth`.\n   * Can be `'px'` or `'rem'`.\n   */\n  @Prop() unit: 'px' | 'rem' = 'rem';\n\n  /**\n   * Color of the spinner.\n   * Accepts any valid CSS color string.\n   */\n  @Prop() color: string;\n\n  componentWillLoad() {\n    this.initStyles();\n  }\n  @Watch('size')\n  handleSpinnerSizeChange() {\n    this.initStyles();\n  }\n  @Watch('borderWidth')\n  handleSpinnerBorderWidthChange() {\n    this.initStyles();\n  }\n  @Watch('unit')\n  handleSpinnerUnitChange() {\n    this.initStyles();\n  }\n  @Watch('color')\n  handleSpinnerColorChange() {\n    this.initStyles();\n  }\n  /**\n   * Applies CSS custom properties based on current prop values.\n   */\n  private initStyles() {\n    if (this.size) {\n      this.applyCssElement(`${this.size}${this.unit}`, '--ir-spinner-size');\n    }\n    if (this.borderWidth) {\n      this.applyCssElement(`${this.borderWidth}${this.unit}`, '--ir-spinner-size');\n    }\n    if (this.color) {\n      this.applyCssElement(`${this.color}`, '--ir-spinner-color');\n    }\n  }\n  /**\n   * Helper function to set CSS custom properties on the host element.\n   *\n   * @param value - The CSS value to apply\n   * @param key - The CSS custom property name (e.g., `--ir-spinner-size`)\n   */\n  private applyCssElement(value: string, key: '--ir-spinner-color' | '--ir-spinner-border-width' | '--ir-spinner-size' | (string & {})) {\n    this.el.style.setProperty(key, value);\n  }\n  render() {\n    return <Host></Host>;\n  }\n}\n"],"mappings":"mUAAA,MAAMA,EAAW,izBACjB,MAAAC,EAAeD,E,MCMFE,EAAK,MALlB,WAAAC,CAAAC,G,wFASUC,KAAAC,OAAiB,EASjBD,KAAAE,SAAoB,MAKpBF,KAAAG,YAAsB,GAKtBH,KAAAI,KAA+C,SAK/CJ,KAAAK,UAAqB,KAKrBL,KAAAM,OAAkB,MAKlBN,KAAAO,YAAuB,MAetBP,KAAAQ,UAAsB,GAKvBR,KAAAS,UAAgC,GA8CxCT,KAAAU,YAAc,CAACC,EAAcC,KAC3B,MAAMC,EAAQF,EAAMG,OACpB,IAAIC,EAAQF,EAAME,MAGlB,GAAIf,KAAKO,YAAa,CACpBQ,EAAQA,EAAMC,QAAQ,UAAW,G,CAInC,GAAID,EAAMd,OAAS,EAAG,CACpBc,EAAQA,EAAME,OAAO,GACrBJ,EAAME,MAAQA,C,CAGhBf,KAAKQ,UAAUI,GAASG,EACxBf,KAAKkB,cAGL,GAAIH,GAASH,EAAQZ,KAAKC,OAAS,EAAG,CACpCD,KAAKS,UAAUG,EAAQ,GAAGO,O,GAO9BnB,KAAAoB,cAAgB,CAACT,EAAsBC,KACrC,OAAQD,EAAMU,KACZ,IAAK,YACH,IAAKrB,KAAKQ,UAAUI,IAAUA,EAAQ,EAAG,CAEvCZ,KAAKS,UAAUG,EAAQ,GAAGO,QAE1BR,EAAMW,gB,CAER,MACF,IAAK,SAEHtB,KAAKQ,UAAUI,GAAS,GACxBZ,KAAKkB,cACL,MACF,IAAK,YAEH,GAAIN,EAAQ,EAAG,CACbZ,KAAKS,UAAUG,EAAQ,GAAGO,QAC1BR,EAAMW,gB,CAER,MACF,IAAK,aAEH,GAAIV,EAAQZ,KAAKC,OAAS,EAAG,CAC3BD,KAAKS,UAAUG,EAAQ,GAAGO,QAC1BR,EAAMW,gB,CAER,MACF,IAAK,OAEHtB,KAAKS,UAAU,GAAGU,QAClBR,EAAMW,iBACN,MACF,IAAK,MAEHtB,KAAKS,UAAUT,KAAKC,OAAS,GAAGkB,QAChCR,EAAMW,iBACN,M,EAONtB,KAAAuB,YAAc,CAACZ,EAAuBC,K,MACpCD,EAAMW,iBACN,MAAME,IAAaC,EAAAd,EAAMe,iBAAa,MAAAD,SAAA,SAAAA,EAAEE,QAAQ,UAAW,GAG3D,MAAMC,EAAe5B,KAAKO,YAAciB,EAAWR,QAAQ,UAAW,IAAMQ,EAG5E,IAAK,IAAIK,EAAI,EAAGA,EAAIC,KAAKC,IAAIH,EAAa3B,OAAQD,KAAKC,OAASW,GAAQiB,IAAK,CAC3E7B,KAAKQ,UAAUI,EAAQiB,GAAKD,EAAaC,E,CAI3C7B,KAAKS,UAAUuB,SAAQ,CAACnB,EAAOoB,KAC7BpB,EAAME,MAAQf,KAAKQ,UAAUyB,IAAQ,EAAE,IAIzC,MAAMC,EAAiBlC,KAAKQ,UAAU2B,WAAUC,IAAQA,IACxD,GAAIF,KAAoB,GAAKA,EAAiBlC,KAAKC,OAAQ,CACzDD,KAAKS,UAAUyB,GAAgBf,O,KAC1B,CACLnB,KAAKS,UAAUT,KAAKC,OAAS,GAAGkB,O,CAGlCnB,KAAKkB,aAAa,EAMpBlB,KAAAqC,YAAe1B,IACb,MAAME,EAAQF,EAAMG,OACpB,GAAID,EAAME,MAAO,CACfuB,YAAW,IAAMzB,EAAM0B,UAAU,E,GAnJrC,iBAAAC,GACExC,KAAKQ,UAAYiC,MAAMzC,KAAKC,QAAQyC,KAAK,IACzC,GAAI1C,KAAK2C,aAAc,CACrB3C,KAAK4C,SAAS5C,KAAK2C,a,EAOvB,gBAAAE,GACE,GAAI7C,KAAKK,WAAaL,KAAKS,UAAU,GAAI,CACvC6B,YAAW,KACTtC,KAAKS,UAAU,GAAGU,OAAO,GACxB,E,EAQP,kBAAA2B,CAAmBC,GACjB,GAAIA,EAAY,EAAG,OAEnB,MAAMC,EAAYhD,KAAKQ,UAAUP,OAEjC,GAAI8C,EAAYC,EAAW,CAEzBhD,KAAKQ,UAAY,IAAIR,KAAKQ,aAAciC,MAAMM,EAAYC,GAAWN,KAAK,I,MACrE,GAAIK,EAAYC,EAAW,CAEhChD,KAAKQ,UAAYR,KAAKQ,UAAUS,MAAM,EAAG8B,E,CAG3C/C,KAAKkB,a,CAuHC,WAAAA,GACN,MAAM+B,EAAWjD,KAAKQ,UAAU0C,KAAK,IACrClD,KAAKmD,UAAUC,KAAKH,GAGpB,GAAIjD,KAAKQ,UAAU6C,OAAMjB,GAAOA,IAAQ,MAAOpC,KAAKQ,UAAUP,SAAWD,KAAKC,OAAQ,CACpFD,KAAKsD,YAAYF,KAAKH,E,EAOnB,KAAAM,GACLvD,KAAKQ,UAAYiC,MAAMzC,KAAKC,QAAQyC,KAAK,IACzC1C,KAAKS,UAAUuB,SAAQnB,IACrBA,EAAME,MAAQ,EAAE,IAElBf,KAAKkB,cAGL,GAAIlB,KAAKS,UAAU,GAAI,CACrBT,KAAKS,UAAU,GAAGU,O,EAOf,QAAAyB,CAAS7B,GACd,MAAMyC,EAAazC,EAAM0C,MAAM,IAE/B,IAAK,IAAI5B,EAAI,EAAGA,EAAI7B,KAAKC,OAAQ4B,IAAK,CACpC7B,KAAKQ,UAAUqB,GAAKA,EAAI2B,EAAWvD,OAASuD,EAAW3B,GAAK,E,CAI9D7B,KAAKS,UAAUuB,SAAQ,CAACnB,EAAOoB,KAC7BpB,EAAME,MAAQf,KAAKQ,UAAUyB,IAAQ,EAAE,IAGzCjC,KAAKkB,a,CAGP,MAAAwC,GACE,OACEC,EAACC,EAAI,CAAAvC,IAAA,2CAACwC,MAAM,uBACVF,EAAA,OAAAtC,IAAA,2CAAKwC,MAAM,qBACRpB,MAAMzC,KAAKC,QACTyC,KAAK,MACLoB,KAAI,CAACC,EAAGnD,IACP+C,EAAA,SACEK,IAAKC,GAAOjE,KAAKS,UAAUG,GAASqD,EACpC7D,KAAMJ,KAAKI,KACX8D,UAAWlE,KAAKO,YAAc,UAAY,OAC1CsD,MAAM,kCACNM,UAAU,IACVhE,YAAaH,KAAKG,YAClBD,SAAUF,KAAKE,SACfkE,aAAa,gBACbrD,MAAOf,KAAKQ,UAAUI,GACtByD,QAASC,GAAKtE,KAAKU,YAAY4D,EAAG1D,GAClC2D,UAAWD,GAAKtE,KAAKoB,cAAckD,EAAG1D,GACtC4D,QAASF,GAAKtE,KAAKuB,YAAY+C,EAAG1D,GAClC6D,QAASzE,KAAKqC,YAAW,aACb,SAASzB,EAAQ,QAAQZ,KAAKC,c,yECjS1D,MAAMyE,EAAgB,6tCACtB,MAAAC,EAAeD,E,MCWFE,EAAU,MALvB,WAAA9E,CAAAC,G,mDAMUC,KAAA6E,SAAmB,KAEnB7E,KAAA8E,YAAc,GAQd9E,KAAA+E,WAAsB,KAMtB/E,KAAAgF,UAAoB,EAKnBhF,KAAAiF,IAAM,GACNjF,KAAAkF,MAAQ,GACRlF,KAAAmF,UAAY,MACZnF,KAAAoF,MAAQ,GAKTpF,KAAAqF,cAAgB,IAAIC,EACpBtF,KAAAuF,YAAc,IAAIC,EAClBxF,KAAAyF,aAAe,IAAIC,EAEnB1F,KAAA2F,sBAAwBC,EAAEC,OAAO,CAAEC,MAAOF,EAAEG,SAASC,WAAYC,WAAYL,EAAEG,SAASC,WAAYf,IAAKW,EAAEG,SAAS9F,OAAOD,KAAKgF,aAmGhIhF,KAAAkG,kBAAqB5B,IAC3BtE,KAAKkF,MAAQ,GACblF,KAAKiF,IAAMX,EAAE6B,MAAM,C,CA5FrB,iBAAA3D,GACE,GAAIxC,KAAKoG,OAAQ,CACfpG,KAAKyF,aAAaY,SAASrG,KAAKoG,O,CAElCpG,KAAKsG,a,CAIP,kBAAAC,CAAmBC,EAAkBC,GACnC,GAAID,IAAaC,EAAU,CACzBzG,KAAKyF,aAAaY,SAASG,GAC3BxG,KAAKsG,a,EAKT,mBAAAI,CAAoBpC,G,MAClB,GAAIA,EAAEjD,MAAQ,YAAYI,EAAAzB,KAAK2G,aAAS,MAAAlF,SAAA,SAAAA,EAAEmF,MAAM,CAC9CtC,EAAEhD,gB,EAKN,eAAMuF,GACJ7G,KAAK8G,aAGL,UAAW9G,KAAK2G,UAAUI,YAAc,WAAY,CAClD/G,KAAK2G,UAAUI,W,KACV,CAEL/G,KAAK2G,UAAUK,aAAa,OAAQ,G,CAEtC,GAAIhH,KAAK+E,WAAY/E,KAAKiH,mBACpBjH,KAAKkH,iB,CAKb,gBAAMC,GAEJ,UAAWnH,KAAK2G,UAAUS,QAAU,WAAY,CAC9CpH,KAAK2G,UAAUS,O,KACV,CACLpH,KAAK2G,UAAUU,gBAAgB,O,CAEjCrH,KAAKiF,IAAM,KACXjF,KAAKsH,Y,CAEC,iBAAMhB,GACZ,IAAKtG,KAAKyF,aAAa8B,WAAY,CACjC,M,CAEFvH,KAAKwH,eAAiB,WAChBxH,KAAKuF,YAAYkC,cAAczH,KAAK6E,SAAU,CAAC,cACrD7E,KAAKwH,eAAiB,K,CAGhB,UAAAV,GACN9G,KAAKiF,IAAM,GACXjF,KAAKkF,MAAQ,GACblF,KAAKmF,UAAY,MACjBnF,KAAKoF,MAAQ,GACbpF,KAAKsH,Y,CAGC,UAAAL,GACNjH,KAAKsH,aACLtH,KAAK0H,cAAgBC,OAAOC,aAAY,KACtC,GAAI5H,KAAKoF,MAAQ,EAAG,CAClBpF,KAAKoF,O,KACA,CACLpF,KAAKsH,Y,IAEN,I,CAGG,UAAAA,GACN,GAAItH,KAAK0H,cAAe,CACtBG,cAAc7H,KAAK0H,eACnB1H,KAAK0H,cAAgB,I,EAIjB,qBAAMR,SACN,IAAIY,SAAQC,GAAKzF,WAAWyF,EAAG,MACrC,MAAMC,EAAQhI,KAAK2G,UAAUsB,cAAc,SAC3CD,GAAUA,EAA2B7G,O,CAQ/B,eAAM+G,GACZ,GAAIlI,KAAKiF,IAAIhF,OAASD,KAAKgF,UAAW,OACtChF,KAAKmF,UAAY,KACjBnF,KAAK2F,sBAAsBwC,MAAM,CAC/BlD,IAAKjF,KAAKiF,IACVgB,WAAYjG,KAAKiG,WACjBH,MAAO9F,KAAK8F,QAEd,UACQ9F,KAAKqF,cAAc+C,YAAY,CAAEC,YAAarI,KAAKiG,WAAYqC,IAAKtI,KAAKiF,MAC/EjF,KAAKuI,YAAYnF,KAAK,CAAE6B,IAAKjF,KAAKiF,IAAK7E,KAAM,YAC7CJ,KAAKmH,Y,CACL,MAAOqB,GACPxI,KAAKkF,MAAQ,wC,SAEblF,KAAKmF,UAAY,K,EAIb,eAAMsD,GACZ,GAAIzI,KAAKoF,MAAQ,EAAG,OAEpB,UACQpF,KAAKqF,cAAcqD,UAAU,CAAEL,YAAarI,KAAKiG,aACvDjG,KAAKoF,MAAQ,GACbpF,KAAKiH,Y,CACL,MAAO/B,GACPyD,QAAQC,IAAI1D,E,EAGR,mBAAA2D,GACN,GAAI7I,KAAK8I,aAAe,sBAAuB,CAC7C9I,KAAKmH,aACLnH,KAAKuI,YAAYnF,KAAK,CACpB6B,IAAK,KACL7E,KAAM,cAER,M,CAEFuH,OAAOoB,SAASC,Q,CAElB,oBAAAC,GACEjJ,KAAKsH,Y,CAEP,MAAA5D,G,MACE,OACEC,EAACC,EAAI,CAAAvC,IAAA,4CACHsC,EAAA,UAAAtC,IAAA,2CAAQ2C,IAAKC,GAAOjE,KAAK2G,UAAY1C,EAAKJ,MAAM,YAAW,aAAY,QACrEF,EAAA,QAAAtC,IAAA,2CAAM6H,OAAO,SAASrF,MAAM,qBACzB7D,KAAKwH,iBAAmB2B,EAAQC,QAC/BzF,EAAA,OAAKE,MAAO,4EACVF,EAAA,oBAGFA,EAAC0F,EAAQ,KACP1F,EAAA,UAAQE,MAAM,oBACZF,EAAA,MAAIE,MAAM,mBAAmBsF,EAAQC,QAAQE,yBAG/C3F,EAAA,WAASE,MAAM,wDACbF,EAAA,KAAGE,MAAM,sCACNsF,EAAQC,QAAQG,8BAA6B,IAAGvJ,KAAK8F,OAExDnC,EAAA,UAAQtD,UAAS,KAACJ,OAAQD,KAAKgF,UAAWrC,aAAc3C,KAAKiF,IAAKuE,cAAexJ,KAAKkG,oBAErFlG,KAAKkF,OAASvB,EAAA,KAAGE,MAAM,mCAAmC7D,KAAKkF,OAE/DlF,KAAK+E,YACJpB,EAAC0F,EAAQ,KACNrJ,KAAKoF,MAAQ,EACZzB,EAAA,KAAGE,MAAM,cACNsF,EAAQC,QAAQK,eAAc,OAAMC,OAAO1J,KAAKoF,OAAOuE,SAAS,EAAG,MAGtEhG,EAAA,aACEE,MAAM,OACN+F,UAAU,OACVC,eAAgBvF,IACdA,EAAEwF,2BACFxF,EAAEyF,kBACF/J,KAAKyI,WAAW,EAElBuB,KAAK,KACLC,KAAM,kCAOhBtG,EAAA,UAAQE,MAAM,yCACZF,EAAA,aAAWE,MAAM,QAAQqG,WAAW,YAAYD,KAAMd,EAAQC,QAAQe,WAAYP,UAAU,YAAYQ,QAASpK,KAAK6I,oBAAoBwB,KAAKrK,QAC/I2D,EAAA,aACEE,MAAM,QACNqG,WAAW,YACXD,KAAMd,EAAQC,QAAQkB,cACtBnF,UAAWnF,KAAKmF,UAChBoF,eAAc9I,EAAAzB,KAAKiF,OAAG,MAAAxD,SAAA,SAAAA,EAAExB,QAASD,KAAKgF,WAAahF,KAAKmF,UACxDiF,QAAS,IAAMpK,KAAKkI,kB,yECxPxC,MAAMsC,EAAe,0XACrB,MAAAC,EAAeD,E,MCMFE,EAAS,MALtB,WAAA5K,CAAAC,G,UAuBUC,KAAA2K,KAAqB,K,CAQ7B,iBAAAnI,GACExC,KAAK4K,Y,CAGP,uBAAAC,GACE7K,KAAK4K,Y,CAGP,8BAAAE,GACE9K,KAAK4K,Y,CAGP,uBAAAG,GACE/K,KAAK4K,Y,CAGP,wBAAAI,GACEhL,KAAK4K,Y,CAKC,UAAAA,GACN,GAAI5K,KAAKgK,KAAM,CACbhK,KAAKiL,gBAAgB,GAAGjL,KAAKgK,OAAOhK,KAAK2K,OAAQ,oB,CAEnD,GAAI3K,KAAKkL,YAAa,CACpBlL,KAAKiL,gBAAgB,GAAGjL,KAAKkL,cAAclL,KAAK2K,OAAQ,oB,CAE1D,GAAI3K,KAAKmL,MAAO,CACdnL,KAAKiL,gBAAgB,GAAGjL,KAAKmL,QAAS,qB,EASlC,eAAAF,CAAgBlK,EAAeM,GACrCrB,KAAKiE,GAAGmH,MAAMC,YAAYhK,EAAKN,E,CAEjC,MAAA2C,GACE,OAAOC,EAACC,EAAI,CAAAvC,IAAA,4C","ignoreList":[]}