{"version":3,"names":["irInputTextCss","IrInputTextStyle0","IrInputText","constructor","hostRef","this","inputStyles","readonly","type","submitted","inputStyle","textSize","labelPosition","labelBackground","labelColor","labelBorder","labelWidth","variant","disabled","error","autoValidate","inputFocused","componentWillLoad","el","id","v4","componentDidLoad","mask","initMask","handleMaskChange","handleValueChange","newValue","oldValue","validateInput","value","maskInstance","IMask","inputRef","on","isEmpty","trim","unmaskedValue","textChange","emit","forceValidation","updateErrorState","zod","asyncParse","parse","wrapKey","parseAsync","console","log","handleInputChange","event","target","maskedValue","b","setAttribute","handleBlur","e","inputBlur","render","h","class","htmlFor","name","maxLength","testId","style","inputForcedStyle","undefined","ref","readOnly","onBlur","bind","onFocus","inputFocus","placeholder","onInput","required","autoComplete","label","clearBaseStyles","errorMessage"],"sources":["src/components/ui/ir-input-text/ir-input-text.css?tag=ir-input-text&encapsulation=scoped","src/components/ui/ir-input-text/ir-input-text.tsx"],"sourcesContent":[":host {\n  margin: 0;\n  padding: 0;\n  display: inline;\n}\n.border-theme {\n  border: 1px solid #cacfe7;\n}\n.icon-container {\n  color: #3b4781;\n  border: 1px solid #cacfe7;\n  font-size: 0.975rem;\n  height: 2rem;\n  background: rgb(255, 255, 255);\n  padding-right: 0 !important;\n  border-right: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n}\ninput:focus {\n  border-color: #1e9ff2 !important;\n}\n.error-message {\n  font-size: 0.875rem;\n  padding: 0;\n  margin: 0.5rem 0 0;\n  color: var(--red, #ff4961);\n}\n.ir-input[data-state='empty'] {\n  color: #bbbfc6;\n}\n.input-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  box-sizing: border-box;\n  flex: 1;\n}\n.input-container input {\n  padding-left: 5px !important;\n  padding-right: 5px !important;\n  border-left: 0;\n  border-top-left-radius: 0 !important;\n  border-bottom-left-radius: 0 !important;\n}\n.icon-container[data-state='focus'] {\n  border-color: var(--blue);\n}\n.icon-container[data-disabled] {\n  background-color: #eceff1;\n  border-color: rgba(118, 118, 118, 0.3);\n}\n.danger-border {\n  border-color: var(--red, #ff4961);\n}\n","import { Component, Prop, h, Event, EventEmitter, State, Watch, Element } from '@stencil/core';\nimport { v4 } from 'uuid';\nimport IMask, { FactoryArg, InputMask } from 'imask';\nimport { ZodType } from 'zod';\n\n@Component({\n  tag: 'ir-input-text',\n  styleUrl: 'ir-input-text.css',\n  scoped: true,\n})\nexport class IrInputText {\n  @Element() el: HTMLIrInputTextElement;\n  /** Name attribute for the input field */\n  @Prop() name: string;\n\n  /** Value of the input field */\n  @Prop() value: string;\n\n  /** Label text for the input */\n  @Prop() label: string;\n\n  /** Placeholder text for the input */\n  @Prop() placeholder: string;\n\n  /** Additional inline styles for the input */\n  @Prop() inputStyles = '';\n\n  /** Whether the input field is required */\n  @Prop() required: boolean;\n\n  /** Whether the input field is read-only */\n  @Prop() readonly: boolean = false;\n\n  /** Input type (e.g., text, password, email) */\n  @Prop() type:\n    | 'text'\n    | 'password'\n    | 'email'\n    | 'number'\n    | 'tel'\n    | 'url'\n    | 'search'\n    | 'date'\n    | 'datetime-local'\n    | 'month'\n    | 'week'\n    | 'time'\n    | 'color'\n    | 'file'\n    | 'hidden'\n    | 'checkbox'\n    | 'radio'\n    | 'range'\n    | 'button'\n    | 'reset'\n    | 'submit'\n    | 'image' = 'text';\n\n  /** Whether the form has been submitted */\n  @Prop() submitted: boolean = false;\n\n  /** Whether to apply default input styling */\n  @Prop() inputStyle: boolean = true;\n\n  /** Text size inside the input field */\n  @Prop() textSize: 'sm' | 'md' | 'lg' = 'md';\n\n  /** Position of the label: left, right, or center */\n  @Prop() labelPosition: 'left' | 'right' | 'center' = 'left';\n\n  /** Background color of the label */\n  @Prop() labelBackground: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null = null;\n\n  /** Text color of the label */\n  @Prop() labelColor: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' = 'dark';\n\n  /** Border color/style of the label */\n  @Prop() labelBorder: 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none' = 'theme';\n\n  /** Label width as a fraction of 12 columns (1-11) */\n  @Prop() labelWidth: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 = 3;\n\n  /** Variant of the input: default or icon */\n  @Prop() variant: 'default' | 'icon' = 'default';\n\n  /** Whether the input is disabled */\n  @Prop() disabled: boolean = false;\n\n  /** Whether the input has an error */\n  @Prop({ mutable: true }) error: boolean = false;\n\n  /** Mask for the input field (optional) */\n  @Prop() mask: FactoryArg;\n\n  /** Whether the input should auto-validate */\n  @Prop() autoValidate?: boolean = true;\n\n  /** A Zod schema for validating the input */\n  @Prop() zod?: ZodType<any, any>;\n\n  /** A Zod parse type for validating the input */\n  @Prop() asyncParse?: boolean;\n\n  /** Key to wrap the value (e.g., 'price' or 'cost') */\n  @Prop() wrapKey?: string;\n\n  /** Forcing css style to the input */\n  @Prop() inputForcedStyle?: { [key: string]: string };\n\n  /** Input id for testing purposes*/\n  @Prop() testId: string;\n\n  /** Input max character length*/\n  @Prop() maxLength: number;\n\n  /** To clear all the Input base styling*/\n  @Prop() clearBaseStyles: boolean;\n\n  /** To clear all the Input base styling*/\n  @Prop() errorMessage: string;\n\n  /** Autocomplete behavior for the input (e.g., 'on', 'off', 'email', etc.) */\n  @Prop() autoComplete: string;\n\n  @State() inputFocused: boolean = false;\n\n  @Event({ bubbles: true, composed: true }) textChange: EventEmitter<any>;\n  @Event() inputBlur: EventEmitter<FocusEvent>;\n  @Event() inputFocus: EventEmitter<FocusEvent>;\n\n  private inputRef: HTMLInputElement;\n  private maskInstance: InputMask<FactoryArg>;\n\n  private id: string;\n\n  componentWillLoad() {\n    if (this.el.id) {\n      this.id = this.el.id;\n    } else {\n      this.id = v4();\n    }\n  }\n\n  componentDidLoad() {\n    if (this.mask) this.initMask();\n  }\n\n  @Watch('mask')\n  handleMaskChange() {\n    this.initMask();\n  }\n  // @Watch('autoValidate')\n  // handleMaskChange1() {\n  //   console.log(this.autoValidate);\n  // }\n\n  // @Watch('error')\n  // handleErrorChange(newValue: boolean, oldValue: boolean) {\n  //   if (newValue !== oldValue) {\n  //     if (this.autoValidate) {\n  //       this.validateInput(this.value, true);\n  //     }\n  //   }\n  // }\n\n  @Watch('value')\n  handleValueChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.validateInput(this.value);\n    }\n  }\n\n  private initMask() {\n    if (!this.mask || this.maskInstance) {\n      return;\n    }\n\n    this.maskInstance = IMask(this.inputRef, this.mask);\n    this.maskInstance.on('accept', () => {\n      const isEmpty = this.inputRef.value.trim() === '' || this.maskInstance.unmaskedValue === '';\n      if (isEmpty) {\n        this.inputRef.value = '';\n        this.textChange.emit(null);\n      } else {\n        this.inputRef.value = this.maskInstance.value;\n        this.textChange.emit(this.maskInstance.value);\n      }\n    });\n  }\n\n  private async validateInput(value: string, forceValidation: boolean = false) {\n    if (!this.autoValidate && !forceValidation) {\n      if (this.error) {\n        this.updateErrorState(false);\n      }\n      return;\n    }\n    if (this.zod) {\n      try {\n        if (!this.asyncParse) {\n          this.zod.parse(this.wrapKey ? { [this.wrapKey]: value } : value);\n        } else {\n          await this.zod.parseAsync(this.wrapKey ? { [this.wrapKey]: value } : value);\n        }\n        if (this.error) {\n          this.updateErrorState(false);\n        }\n      } catch (error) {\n        console.log(error);\n        this.updateErrorState(true);\n      }\n    }\n  }\n\n  private handleInputChange(event: InputEvent) {\n    const value = (event.target as HTMLInputElement).value;\n    const isEmpty = value === '';\n    if (this.maskInstance) {\n      this.maskInstance.value = value;\n    }\n    const maskedValue = isEmpty ? null : this.maskInstance ? this.maskInstance.value : value;\n    this.textChange.emit(maskedValue);\n  }\n\n  private updateErrorState(b: boolean) {\n    this.error = b;\n    this.inputRef.setAttribute('aria-invalid', b ? 'true' : 'false');\n  }\n\n  private handleBlur(e: FocusEvent) {\n    this.validateInput(this.value, this.submitted);\n    this.inputFocused = false;\n    this.inputBlur.emit(e);\n  }\n\n  render() {\n    if (this.variant === 'icon') {\n      return (\n        <fieldset class=\"position-relative has-icon-left input-container\">\n          <label htmlFor={this.id} class=\"input-group-prepend bg-white m-0\">\n            <span\n              data-disabled={this.disabled}\n              data-state={this.inputFocused ? 'focus' : ''}\n              class={`input-group-text icon-container bg-white ${this.error ? 'danger-border' : ''}`}\n              id=\"basic-addon1\"\n            >\n              <slot name=\"icon\"></slot>\n            </span>\n          </label>\n          <input\n            maxLength={this.maxLength}\n            data-testid={this.testId}\n            style={this.inputForcedStyle}\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\n            id={this.id}\n            ref={el => (this.inputRef = el)}\n            readOnly={this.readonly}\n            type={this.type}\n            class={`ir-input form-control bg-white pl-0 input-sm rate-input py-0 m-0 rateInputBorder ${this.error ? 'danger-border' : ''}`}\n            onBlur={this.handleBlur.bind(this)}\n            onFocus={e => {\n              this.inputFocused = true;\n              this.inputFocus.emit(e);\n            }}\n            placeholder={this.placeholder}\n            value={this.value}\n            onInput={this.handleInputChange.bind(this)}\n            required={this.required}\n            disabled={this.disabled}\n            autoComplete={this.autoComplete}\n          />\n        </fieldset>\n      );\n    }\n    return (\n      <div class={'form-group'}>\n        <div class=\"input-group row m-0\">\n          {this.label && (\n            <div class={`input-group-prepend col-${this.labelWidth} p-0 text-${this.labelColor}`}>\n              <label\n                htmlFor={this.id}\n                class={`input-group-text ${this.labelPosition === 'right' ? 'justify-content-end' : this.labelPosition === 'center' ? 'justify-content-center' : ''} ${\n                  this.labelBackground ? 'bg-' + this.labelBackground : ''\n                } flex-grow-1 text-${this.labelColor} border-${this.labelBorder === 'none' ? 0 : this.labelBorder} `}\n              >\n                {this.label}\n                {this.required ? '*' : ''}\n              </label>\n            </div>\n          )}\n          <input\n            maxLength={this.maxLength}\n            data-testid={this.testId}\n            style={this.inputForcedStyle}\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\n            id={this.id}\n            ref={el => (this.inputRef = el)}\n            readOnly={this.readonly}\n            type={this.type}\n            class={\n              this.clearBaseStyles\n                ? `${this.inputStyles}`\n                : `${this.error ? 'border-danger' : ''} form-control text-${this.textSize} col-${this.label ? 12 - this.labelWidth : 12} ${this.readonly ? 'bg-white' : ''} ${\n                    this.inputStyles\n                  }`\n            }\n            onBlur={this.handleBlur.bind(this)}\n            onFocus={e => {\n              this.inputFocused = true;\n              this.inputFocus.emit(e);\n            }}\n            placeholder={this.placeholder}\n            autoComplete={this.autoComplete}\n            value={this.value}\n            onInput={this.handleInputChange.bind(this)}\n            required={this.required}\n            disabled={this.disabled}\n          />\n        </div>\n        {this.errorMessage && this.error && <p class=\"error-message\">{this.errorMessage}</p>}\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}