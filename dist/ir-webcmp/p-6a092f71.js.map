{"version":3,"names":["status","bookingStatus","formatName","firstName","lastName","async","getStayStatus","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getRoomStatus","params","in_out","status_code","from_date","to_date","calendar_data","checkin_enabled","is_automatic_check_in_out","now","toDate","fromDate","isNowAfterOrSameAsHotelHour","compareTime","createDateWithOffsetAndHour","_a","checkin_checkout_hours","offset","_b","isSame","isAfter","_c","_d","isBefore","getPrivateNote","extras","find","e","key","transformNewBooking","bookings","rooms","filter","room","forEach","bookingFromDate","calendar_dates","bookingToDate","mainGuest","sharing_persons","p","is_main","push","CHECKIN","CHECKOUT","ID","TO_DATE","FROM_DATE","PRIVATE_NOTE","NO_OF_DAYS","dateDifference","ARRIVAL","arrival","IS_EDITABLE","BALANCE","financial","due_amount","STATUS","NAME","first_name","last_name","PHONE","guest","mobile_without_prefix","ENTRY_DATE","PHONE_PREFIX","country_phone_prefix","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","IDENTIFIER","identifier","RATE_TYPE","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","PR_ID","unit","POOL","GUEST","ROOMS","BOOKING_NUMBER","booking_nbr","cancelation","guarantee","TOTAL_PRICE","_e","gross_total","COUNTRY","country_id","FROM_DATE_STR","TO_DATE_STR","adult_child_offering","selected_variation","ARRIVAL_TIME","description","origin","channel_booking_nbr","is_direct","NOTES","remark","SOURCE","source","tag","ota_notes","defaultDates","ROOM_INFO","BASE_STATUS_CODE","_f","transformNewBLockedRooms","stayStatus","STAY_STATUS_CODE","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","st","RELEASE_AFTER_HOURS","DESCRIPTION","pr_id","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","calculateDaysBetweenDates","STATUS_CODE","OUT_OF_SERVICE","startDate","endDate","daysDiff","diff","date1","date2","getHours","getMinutes","offsetMs","targetTzDate","getTime","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","utcHour","UTC"],"sources":["src/utils/booking.ts"],"sourcesContent":["import { Extras, Room } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: cell.room?.roomtype?.id,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n    ROOM_INFO: {\r\n      occupancy: cell.room.occupancy,\r\n      sharing_persons: cell.room.sharing_persons,\r\n      unit: cell.room.unit,\r\n      in_out: cell.room.in_out,\r\n    },\r\n    BASE_STATUS_CODE: cell.booking.status?.code,\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\r\n  const { in_out, status_code, from_date, to_date } = params;\r\n  if (calendar_data.checkin_enabled) {\r\n    if (in_out?.code === '001') {\r\n      return bookingStatus['000'];\r\n    } else if (in_out?.code === '002') {\r\n      if (!calendar_data.is_automatic_check_in_out) {\r\n        const now = moment();\r\n        const toDate = moment(to_date, 'YYYY-MM-DD');\r\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n        const isNowAfterOrSameAsHotelHour = compareTime(\r\n          now.toDate(),\r\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n        );\r\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\r\n          return bookingStatus['003'];\r\n        } else {\r\n          return bookingStatus['002'];\r\n        }\r\n      }\r\n    }\r\n    return bookingStatus[status_code || '001'];\r\n  } else {\r\n    const now = moment();\r\n    const toDate = moment(to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n    const isNowAfterOrSameAsHotelHour = compareTime(\r\n      now.toDate(),\r\n      createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n    );\r\n    if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[status_code || '001'];\r\n    }\r\n  }\r\n}\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: getRoomStatus({\r\n        in_out: room.in_out,\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n        status_code: data.status?.code,\r\n      }),\r\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n      PHONE: data.guest.mobile_without_prefix ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n      ROOM_INFO: {\r\n        occupancy: room.occupancy,\r\n        sharing_persons: room.sharing_persons,\r\n        unit: room.unit,\r\n        in_out: room.in_out,\r\n      },\r\n      BASE_STATUS_CODE: data.status?.code,\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\nexport function compareTime(date1: Date, date2: Date) {\r\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\r\n}\r\n/**\r\n * Creates a Date object for today at the specified hour in a given time zone.\r\n * The offset is the number of hours that the target time zone is ahead of UTC.\r\n *\r\n * For example, if offset = 3 and hour = 9, then the function returns a Date\r\n * which, when converted to the target time zone, represents 9:00.\r\n *\r\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\r\n * @param hour - The desired hour in the target time zone (0-23)\r\n * @returns Date object representing the target time (in UTC)\r\n */\r\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\r\n  const now = new Date();\r\n  const offsetMs = offset * 60 * 60 * 1000;\r\n  const targetTzDate = new Date(now.getTime() + offsetMs);\r\n  const year = targetTzDate.getUTCFullYear();\r\n  const month = targetTzDate.getUTCMonth();\r\n  const day = targetTzDate.getUTCDate();\r\n  const utcHour = hour - offset;\r\n  return new Date(Date.UTC(year, month, day, utcHour));\r\n}\r\n"],"mappings":"wNAgCA,MAAMA,EAAiC,CACrC,MAAO,UACP,MAAO,qBACP,MAAO,W,MAEIC,EAAwC,CACnD,MAAO,WACP,MAAO,uBACP,MAAO,YACP,MAAO,e,SAGOC,EAAWC,EAA0BC,GACnD,GAAID,IAAc,MAAQC,IAAa,KAAM,MAAO,GACpD,GAAIA,IAAa,MAAQA,IAAa,GAAI,CACxC,MAAO,GAAGD,IAAS,MAATA,SAAS,EAATA,EAAa,QAAQC,IAAQ,MAARA,SAAQ,EAARA,EAAY,I,CAE7C,OAAOD,CACT,CACAE,eAAeC,IACb,IACE,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,uCAAwC,CACxEC,UAAW,CAAC,kBAEd,OAAOH,EAAKI,UAAUC,KAAIC,IAAC,CACzBC,KAAMD,EAAEE,UACRC,MAAOH,EAAEI,iB,CAEX,MAAOC,GACPC,QAAQC,IAAIF,E,CAEhB,CACA,SAASG,EAAmBC,EAAMC,EAAMC,GACtC,MAAMC,EAAK,IAAIC,KAAKJ,GACpBG,EAAGE,SAASJ,GACZE,EAAGG,WAAWJ,GACd,MAAO,GAAGK,EAAQC,QAAQC,mBAAmBC,EAAOP,GAAIQ,OAAO,kBACjE,C,SAwHgBC,EAAcC,G,YAC5B,MAAMC,OAAEA,EAAMC,YAAEA,EAAWC,UAAEA,EAASC,QAAEA,GAAYJ,EACpD,GAAIK,EAAcC,gBAAiB,CACjC,IAAIL,IAAM,MAANA,SAAM,SAANA,EAAQtB,QAAS,MAAO,CAC1B,OAAOb,EAAc,M,MAChB,IAAImC,IAAM,MAANA,SAAM,SAANA,EAAQtB,QAAS,MAAO,CACjC,IAAK0B,EAAcE,0BAA2B,CAC5C,MAAMC,EAAMX,IACZ,MAAMY,EAASZ,EAAOO,EAAS,cAC/B,MAAMM,EAAWb,EAAOM,EAAW,cACnC,MAAMQ,EAA8BC,EAClCJ,EAAIC,SACJI,GAA4BC,EAAAT,EAAcU,0BAAsB,MAAAD,SAAA,SAAAA,EAAEE,QAAQC,EAAAZ,EAAcU,0BAAsB,MAAAE,SAAA,SAAAA,EAAE7B,OAElH,GAAKoB,EAAIU,OAAOT,EAAQ,SAAWD,EAAIW,QAAQT,EAAU,SAAWC,GAAgCH,EAAIW,QAAQV,EAAQ,QAAS,CAC/H,OAAO3C,EAAc,M,KAChB,CACL,OAAOA,EAAc,M,GAI3B,OAAOA,EAAcoC,GAAe,M,KAC/B,CACL,MAAMM,EAAMX,IACZ,MAAMY,EAASZ,EAAOO,EAAS,cAC/B,MAAMM,EAAWb,EAAOM,EAAW,cACnC,MAAMQ,EAA8BC,EAClCJ,EAAIC,SACJI,GAA4BO,EAAAf,EAAcU,0BAAsB,MAAAK,SAAA,SAAAA,EAAEJ,QAAQK,EAAAhB,EAAcU,0BAAsB,MAAAM,SAAA,SAAAA,EAAEjC,OAElH,GAAIsB,EAASQ,OAAOV,EAAK,QAAUG,EAA6B,CAC9D,OAAO7C,EAAc,M,MAChB,GAAI0C,EAAIW,QAAQT,EAAU,QAAUF,EAAIc,SAASb,EAAQ,OAAQ,CACtE,OAAO3C,EAAc,M,MAChB,GAAI2C,EAAOS,OAAOV,EAAK,QAAUG,EAA6B,CACnE,OAAO7C,EAAc,M,MAChB,GAAK2C,EAAOS,OAAOV,EAAK,QAAUG,GAAgCF,EAAOa,SAASd,EAAK,OAAQ,CACpG,OAAO1C,EAAc,M,KAChB,CACL,OAAOA,EAAcoC,GAAe,M,EAG1C,C,SAYgBqB,EAAeC,G,MAC7B,IAAKA,EAAQ,CACX,OAAO,I,CAET,QAAOV,EAAAU,EAAOC,MAAKC,GAAKA,EAAEC,MAAQ,oBAAe,MAAAb,SAAA,SAAAA,EAAEjC,QAAS,IAC9D,C,SACgB+C,EAAoBxD,GAClC,IAAIyD,EAAiC,GACrC,MAAMC,EAAQ1D,EAAK0D,MAAMC,QAAOC,KAAUA,EAAK,yBAC/CF,EAAMG,SAAQD,I,gBACZ,MAAME,EAAkBrC,EAAOmC,EAAK7B,UAAW,cAAcgB,QAAQtB,EAAOsC,EAAezB,SAAU,eAAiBsB,EAAK7B,UAAYgC,EAAezB,SACtJ,MAAM0B,EAAgBJ,EAAK5B,QAC3B,GAAIP,EAAOmC,EAAK5B,QAAS,cAAckB,SAASzB,EAAOsC,EAAezB,SAAU,eAAgB,CAC9F,M,CAEF,MAAM2B,GAAYvB,EAAAkB,EAAKM,mBAAe,MAAAxB,SAAA,SAAAA,EAAEW,MAAKc,GAAKA,EAAEC,UAEpDX,EAASY,KAAK,CACZC,QAAS,MACTC,SAAU,MACVC,GAAIZ,EAAK,uBACTa,QAAST,EACTU,UAAWZ,EACXa,aAAcxB,EAAenD,EAAKoD,QAClCwB,WAAYC,EAAef,EAAiBE,GAC5Cc,QAAS9E,EAAK+E,QACdC,YAAa,KACbC,SAASpC,EAAA7C,EAAKkF,aAAS,MAAArC,SAAA,SAAAA,EAAEsC,WACzBC,OAAQzD,EAAc,CACpBE,OAAQ+B,EAAK/B,OACbE,UAAW6B,EAAK7B,UAChBC,QAAS4B,EAAK5B,QACdF,aAAakB,EAAAhD,EAAKP,UAAM,MAAAuD,SAAA,SAAAA,EAAEzC,OAE5B8E,KAAM1F,EAAWsE,IAAS,MAATA,SAAS,SAATA,EAAWqB,WAAYrB,EAAUsB,WAClDC,OAAOvC,EAAAjD,EAAKyF,MAAMC,yBAAqB,MAAAzC,SAAA,EAAAA,EAAI,GAC3C0C,WAAY,aACZC,aAAc5F,EAAKyF,MAAMI,qBACzBC,KAAMlC,EAAKmC,MACXC,UAAWpC,EAAKqC,SAASC,KACzBC,cAAe,MACfC,aAAcxC,EAAKqC,SAASI,GAC5BC,WAAY1C,EAAK2C,WACjBC,UAAW5C,EAAK6C,SAASJ,GACzBK,aAAc9C,EAAK+C,UAAUC,UAC7BC,eAAgBjD,EAAK+C,UAAUG,aAC/BC,OAAQnD,EAAKoD,KAAKX,GAClBY,KAAMrD,EAAK,uBACXsD,MAAOlH,EAAKyF,MACZ0B,MAAOnH,EAAK0D,MACZ0D,eAAgBpH,EAAKqH,YACrBC,YAAa1D,EAAKqC,SAASqB,YAC3BC,UAAW3D,EAAKqC,SAASsB,UACzBC,aAAaC,EAAAzH,EAAKkF,aAAS,MAAAuC,SAAA,SAAAA,EAAEC,YAC7BC,QAAS3H,EAAKyF,MAAMmC,WACpBC,cAAe7H,EAAK0B,OAAOK,UAC3B+F,YAAa9H,EAAK0B,OAAOM,QACzB+F,qBAAsBnE,EAAKqC,SAAS+B,mBAAmBD,qBACvDE,aAAcjI,EAAK+E,QAAQmD,YAC3BC,OAAQnI,EAAKmI,OACbC,oBAAqBpI,EAAKoI,oBAC1BC,UAAWrI,EAAKqI,UAChBC,MAAOtI,EAAKqI,UAAYrI,EAAKuI,OAAS,KACtCC,OAAQ,CAAEjI,KAAMP,EAAKyI,OAAOlI,KAAM2H,YAAalI,EAAKyI,OAAOP,YAAaQ,IAAK1I,EAAKyI,OAAOC,KACzFC,UAAW3I,EAAK2I,UAChBC,aAAc,CACZ7G,UAAW6B,EAAK7B,UAChBC,QAAS4B,EAAK5B,SAEhB6G,UAAW,CACTlC,UAAW/C,EAAK+C,UAChBzC,gBAAiBN,EAAKM,gBACtB8C,KAAMpD,EAAKoD,KACXnF,OAAQ+B,EAAK/B,QAEfiH,kBAAkBC,EAAA/I,EAAKP,UAAM,MAAAsJ,SAAA,SAAAA,EAAExI,MAC/B,IAEJ,OAAOkD,CACT,CACO3D,eAAekJ,EAAyBhJ,GAC7C,MAAMiJ,QAAmBlJ,IACzB,MAAO,CACLyE,GAAIxE,EAAKiH,KACTqB,MAAO,GACPrD,QAAS,GACTI,KACErF,EAAKsI,QAAU,GACXtI,EAAKsI,MACLtI,EAAKkJ,mBAAqB,MAC1BpI,EAAmBd,EAAKmJ,kBAAmBnJ,EAAKoJ,kBAAmBpJ,EAAKqJ,qBACxEJ,EAAW5F,MAAKiG,GAAMA,EAAG/I,OAASP,EAAKkJ,mBAAkBzI,OAAS,GACxE8I,oBAAqBvJ,EAAKwJ,YAC1BzC,MAAO/G,EAAKyJ,MACZ9D,WAAY3F,EAAKmJ,kBACjBO,WAAY1J,EAAKoJ,kBACjBO,aAAc3J,EAAKqJ,oBACnBO,gBAAiB5J,EAAKsI,MACtB5D,UAAW1E,EAAK+B,UAChB0C,QAASzE,EAAKgC,QACd4C,WAAYiF,EAA0B7J,EAAK+B,UAAW/B,EAAKgC,SAC3DoD,OAAQ3F,EAAOO,EAAKkJ,kBACpBjC,KAAMjH,EAAKiH,KACX6C,YAAa9J,EAAKkJ,iBAClBa,eAAgB/J,EAAKkJ,mBAAqB,MAC1CrB,cAAe7H,EAAK0B,OAAOK,UAC3B+F,YAAa9H,EAAK0B,OAAOM,QACzB4G,aAAc,CACZ7G,UAAW/B,EAAK+B,UAChBC,QAAShC,EAAKgC,SAGpB,C,SACgB6H,EAA0B9H,EAAmBC,GAC3D,MAAMgI,EAAYvI,EAAOM,EAAW,cACpC,MAAMkI,EAAUxI,EAAOO,EAAS,cAChC,MAAMkI,EAAWD,EAAQE,KAAKH,EAAW,QACzC,OAAOE,GAAY,CACrB,C,SACgB1H,EAAY4H,EAAaC,GACvC,OAAOD,EAAME,YAAcD,EAAMC,YAAcF,EAAMG,cAAgBF,EAAME,YAC7E,C,SAYgB9H,EAA4BG,EAAgB5B,GAC1D,MAAMoB,EAAM,IAAIjB,KAChB,MAAMqJ,EAAW5H,EAAS,GAAK,GAAK,IACpC,MAAM6H,EAAe,IAAItJ,KAAKiB,EAAIsI,UAAYF,GAC9C,MAAMG,EAAOF,EAAaG,iBAC1B,MAAMC,EAAQJ,EAAaK,cAC3B,MAAMC,EAAMN,EAAaO,aACzB,MAAMC,EAAUjK,EAAO4B,EACvB,OAAO,IAAIzB,KAAKA,KAAK+J,IAAIP,EAAME,EAAOE,EAAKE,GAC7C,Q","ignoreList":[]}