{"version":3,"names":["irInputTextCss","IrInputTextStyle0","IrInputText","constructor","hostRef","this","inputStyles","readonly","type","submitted","inputStyle","textSize","labelPosition","labelBackground","labelColor","labelBorder","labelWidth","variant","disabled","error","autoValidate","inputFocused","componentWillLoad","el","id","v4","hasPrefixSlot","haveSlotPresent","hasSuffixSlot","componentDidLoad","mask","initMask","handleMaskChange","handleValueChange","newValue","oldValue","validateInput","value","maskInstance","IMask","inputRef","on","isEmpty","trim","unmaskedValue","textChange","emit","name","slot","querySelector","forceValidation","updateErrorState","zod","asyncParse","parse","wrapKey","parseAsync","console","log","handleInputChange","event","target","maskedValue","b","setAttribute","handleBlur","e","inputBlur","renderFloatingLabel","labelText","label","placeholder","hasValue","String","length","h","class","style","inputContainerStyle","part","undefined","maxLength","testId","inputForcedStyle","ref","readOnly","onBlur","bind","onFocus","inputFocus","autoComplete","autocomplete","onInput","required","htmlFor","errorMessage","render","labelContainerClassname","clearBaseStyles"],"sources":["src/components/ui/ir-input-text/ir-input-text.css?tag=ir-input-text&encapsulation=scoped","src/components/ui/ir-input-text/ir-input-text.tsx"],"sourcesContent":[":host {\n  /* ========= Theme / palette ========= */\n  /** @prop --ir-bg: Base background of the control. */\n  --ir-bg: #fff;\n\n  /** @prop --ir-primary: Accent color used for focus outline and active label. */\n  --ir-primary: #1e9ff2;\n\n  /** @prop --ir-danger: Error color for borders and text. */\n  --ir-danger: #ff4961;\n\n  /** @prop --ir-border: Generic border color used across the component. */\n  --ir-border: #cacfe7;\n\n  /** @prop --ir-disabled-fg: Text/icon color when disabled. */\n  --ir-disabled-fg: #9aa1ac;\n\n  /** @prop --ir-readonly-bg: Background for readonly fields. */\n  --ir-readonly-bg: #f8f9fa;\n\n  /** @prop --ir-input-color: Text color inside the input. */\n  --ir-input-color: #3b4781;\n\n  /** @prop --ir-placeholder-color: Placeholder color for empty state (when not using floating). */\n  --ir-placeholder-color: #bbbfc6;\n\n  /* ========= Floating outline + input box ========= */\n  /** @prop --ir-floating-input-border: Outline/border color of the floating group. */\n  --ir-floating-input-border: var(--ir-border);\n\n  /** @prop --ir-floating-input-border-radius: Corner radius for the outlined group and input. */\n  --ir-floating-input-border-radius: 0.21rem;\n\n  /** @prop --ir-floating-input-height: Fixed height for the input element. */\n  --ir-floating-input-height: 2rem;\n\n  /** @prop --ir-focus-ring: Box-shadow used on focus (set to `none` to disable). */\n  --ir-focus-ring: none;\n\n  /** @prop --ir-focus-border-color: Border color applied on focus. */\n  --ir-focus-border-color: var(--ir-primary);\n\n  /** @prop --ir-floating-input-font-size: Font size of the input text. */\n  --ir-floating-input-font-size: 0.975rem;\n\n  /** @prop --ir-floating-input-line-height: Line-height of the input text. */\n  --ir-floating-input-line-height: 1.45;\n\n  /** @prop --ir-floating-input-padding-y: Vertical padding inside the input. */\n  --ir-floating-input-padding-y: 0.75rem;\n\n  /** @prop --ir-floating-input-padding-x: Horizontal padding inside the input. */\n  --ir-floating-input-padding-x: 1rem;\n\n  /** @prop --ir-floating-input-padding-x-with-affix: Horizontal padding when a prefix/suffix is present. */\n  --ir-floating-input-padding-x-with-affix: 2rem;\n\n  /* ========= Floating label ========= */\n  /** @prop --ir-floating-label-fg: Resting label color. */\n  --ir-floating-label-fg: #6c757d;\n\n  /** @prop --ir-floating-label-fg-focus: Floated/active label color. */\n  --ir-floating-label-fg-focus: #495057;\n\n  /** @prop --ir-floating-label-bg: Background behind the floated label “chip”. */\n  --ir-floating-label-bg: #fff;\n\n  /** @prop --ir-floating-label-scale: Scale applied to the label when floated. */\n  --ir-floating-label-scale: 0.88;\n\n  /** @prop --ir-floating-label-float-translateY: translateY used when label floats (relative to its top=0). */\n  --ir-floating-label-float-translateY: -70%;\n\n  /** @prop --ir-floating-label-resting-offset-inline: Inline offset for the resting label (LTR=left, RTL=right). */\n  --ir-floating-label-resting-offset-inline: 0.9rem;\n\n  /** @prop --ir-floating-label-resting-offset-inline-with-prefix: Inline offset for the label when a prefix exists. */\n  --ir-floating-label-resting-offset-inline-with-prefix: 1.8rem;\n\n  /* ========= Prefix/Suffix (affixes) ========= */\n  /** @prop --ir-floating-input-affix-size: Size for prefix/suffix slotted icons/elements. */\n  --ir-floating-input-affix-size: 1rem;\n\n  /** @prop --ir-floating-input-affix-color: Color for prefix/suffix icons/text. */\n  --ir-floating-input-affix-color: #6c757d;\n\n  margin: 0;\n  padding: 0;\n  display: inline;\n}\n\n/* Legacy aliases (kept for backward compat if consumer themes use them) */\n:host {\n  /** @prop --blue: Legacy alias for --ir-primary. */\n  --blue: var(--ir-primary);\n  /** @prop --red: Legacy alias for --ir-danger. */\n  --red: var(--ir-danger);\n}\n\n/* ==== existing styles, now variable-driven ==== */\n.border-theme {\n  border: 1px solid var(--ir-border);\n}\n\n.icon-container {\n  color: #3b4781;\n  border: 1px solid var(--ir-border);\n  font-size: var(--ir-floating-input-font-size);\n  height: var(--ir-floating-input-height);\n  background: var(--ir-bg);\n  padding-right: 0 !important;\n  border-right: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  transition: border-color 0.15s ease-in-out, -webkit-box-shadow 0.15s ease-in-out;\n}\n\ninput:focus {\n  border-color: var(--ir-primary) !important;\n}\n\n.error-message {\n  font-size: 0.875rem;\n  padding: 0;\n  margin: 0.5rem 0 0;\n  color: var(--ir-danger);\n}\n\n.ir-input[data-state='empty'] {\n  color: var(--ir-placeholder-color);\n}\n\n.input-container {\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  box-sizing: border-box;\n  flex: 1;\n}\n\n.input-container input {\n  padding-left: 5px !important;\n  padding-right: 5px !important;\n  border-left: 0;\n  border-top-left-radius: 0 !important;\n  border-bottom-left-radius: 0 !important;\n}\n\n.icon-container[data-state='focus'] {\n  border-color: var(--ir-primary);\n}\n\n.icon-container[data-disabled] {\n  background-color: #eceff1;\n  border-color: rgba(118, 118, 118, 0.3);\n}\n\n.danger-border {\n  border-color: var(--ir-danger);\n}\n\n/* ===== Floating outlined group ===== */\n.ir-floating-group {\n  position: relative;\n  display: block;\n  border: 1px solid var(--ir-floating-input-border);\n  border-radius: var(--ir-floating-input-border-radius);\n  background: var(--ir-bg);\n  transition: border-color 120ms ease, box-shadow 120ms ease;\n  padding: 0;\n}\n\n.ir-floating-group:focus-within {\n  border-color: var(--ir-focus-border-color);\n  box-shadow: var(--ir-focus-ring);\n}\n\n.ir-floating-group.has-error,\n.has-error .ir-floating-group {\n  border-color: var(--ir-danger);\n}\n\n.ir-floating-group.is-disabled {\n  background-color: #f1f3f5;\n}\n\n.ir-floating-group.is-readonly {\n  background-color: var(--ir-readonly-bg);\n}\n\n/* ===== Input (borderless inside the outlined group) ===== */\n.ir-floating-input {\n  width: 100%;\n  display: block;\n  border: 0;\n  outline: 0;\n  background: transparent;\n  color: var(--ir-input-color);\n  font-size: var(--ir-floating-input-font-size);\n  line-height: var(--ir-floating-input-line-height);\n  border-radius: var(--ir-floating-input-border-radius);\n  box-shadow: none;\n\n  padding: var(--ir-floating-input-padding-y) var(--ir-floating-input-padding-x);\n  height: var(--ir-floating-input-height);\n}\n\n.ir-floating-input.danger-border {\n  box-shadow: none;\n}\n\n/* ===== Floating label ===== */\n.ir-floating-label {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  pointer-events: none;\n  padding: 0 0.4rem;\n  color: var(--ir-floating-label-fg);\n  background: transparent;\n  transition: transform 120ms ease, color 120ms ease, top 120ms ease, background-color 120ms ease, opacity 120ms ease;\n  opacity: 0.95;\n  line-height: 1;\n}\n\n/* logical inline offsets */\n.ir-floating-label:dir(rtl) {\n  right: var(--ir-floating-label-resting-offset-inline);\n}\n.ir-floating-label:dir(ltr) {\n  left: var(--ir-floating-label-resting-offset-inline);\n}\n\n/* Float up when focused OR has value */\n.ir-floating-group:focus-within .ir-floating-label,\n.ir-floating-input:not(:placeholder-shown) + .ir-floating-label,\n.ir-floating-group[data-has-value='true'] .ir-floating-label {\n  top: 0;\n  transform: translateY(var(--ir-floating-label-float-translateY)) scale(var(--ir-floating-label-scale));\n  background: var(--ir-floating-label-bg);\n  color: var(--ir-floating-label-fg-focus);\n  font-size: 12px;\n  padding: 0;\n}\n\n/* Error coloring for the floated label */\n.ir-floating-group.has-error .ir-floating-label,\n.has-error .ir-floating-group .ir-floating-label {\n  color: var(--ir-danger);\n}\n\n/* Disabled/read-only label color tweaks */\n.ir-floating-group.is-disabled .ir-floating-label {\n  color: var(--ir-disabled-fg);\n}\n\n/* iOS clip quirk */\n@supports (-webkit-touch-callout: none) {\n  .ir-floating-input {\n    border-radius: var(--ir-floating-input-border-radius);\n  }\n}\n\n/* ===== Prefix/Suffix containers ===== */\n.prefix-container,\n.suffix-container {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: inline-flex;\n  align-items: center;\n  color: var(--ir-floating-input-affix-color);\n  pointer-events: none;\n}\n.prefix-container:dir(ltr) {\n  left: 0.5rem;\n}\n.suffix-container:dir(ltr) {\n  right: 0.5rem;\n}\n.prefix-container:dir(rtl) {\n  right: 0.5rem;\n}\n.suffix-container:dir(rtl) {\n  left: 0.5rem;\n}\n\n/* Default sizing for slotted icons/elements */\n::slotted([slot='prefix']),\n::slotted([slot='suffix']) {\n  display: inline-flex;\n  width: var(--ir-floating-input-affix-size);\n  height: var(--ir-floating-input-affix-size);\n}\n\n/* When prefix exists, increase input padding and shift label start */\n.ir-floating-group[data-have-prefix='true'] .ir-floating-input {\n  padding: var(--ir-floating-input-padding-y) var(--ir-floating-input-padding-x-with-affix);\n}\n\n.ir-floating-group[data-have-prefix='true'] .ir-floating-label:dir(ltr) {\n  left: var(--ir-floating-label-resting-offset-inline-with-prefix);\n}\n\n.ir-floating-group[data-have-prefix='true'] .ir-floating-label:dir(rtl) {\n  right: var(--ir-floating-label-resting-offset-inline-with-prefix);\n}\n\n.no-slot {\n  display: none;\n}\n","import { Component, Prop, h, Event, EventEmitter, State, Watch, Element } from '@stencil/core';\nimport { v4 } from 'uuid';\nimport IMask, { FactoryArg, InputMask } from 'imask';\nimport { ZodType } from 'zod';\n\n@Component({\n  tag: 'ir-input-text',\n  styleUrl: 'ir-input-text.css',\n  scoped: true,\n})\nexport class IrInputText {\n  @Element() el: HTMLIrInputTextElement;\n  /** Name attribute for the input field */\n  @Prop() name: string;\n\n  /** Value of the input field */\n  @Prop() value: string;\n\n  /** Label text for the input */\n  @Prop() label: string;\n\n  /** Placeholder text for the input */\n  @Prop() placeholder: string;\n\n  /** Additional inline styles for the input */\n  @Prop() inputStyles = '';\n\n  /** Whether the input field is required */\n  @Prop() required: boolean;\n\n  /** Whether the input field is read-only */\n  @Prop() readonly: boolean = false;\n\n  /** Input type (e.g., text, password, email) */\n  @Prop() type:\n    | 'text'\n    | 'password'\n    | 'email'\n    | 'number'\n    | 'tel'\n    | 'url'\n    | 'search'\n    | 'date'\n    | 'datetime-local'\n    | 'month'\n    | 'week'\n    | 'time'\n    | 'color'\n    | 'file'\n    | 'hidden'\n    | 'checkbox'\n    | 'radio'\n    | 'range'\n    | 'button'\n    | 'reset'\n    | 'submit'\n    | 'image' = 'text';\n\n  /** Whether the form has been submitted */\n  @Prop() submitted: boolean = false;\n\n  /** Whether to apply default input styling */\n  @Prop() inputStyle: boolean = true;\n\n  /** Text size inside the input field */\n  @Prop() textSize: 'sm' | 'md' | 'lg' = 'md';\n\n  /** Position of the label: left, right, or center */\n  @Prop() labelPosition: 'left' | 'right' | 'center' | 'top' = 'left';\n\n  /** Background color of the label */\n  @Prop() labelBackground: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | null = null;\n\n  /** Text color of the label */\n  @Prop() labelColor: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' = 'dark';\n\n  /** Border color/style of the label */\n  @Prop() labelBorder: 'theme' | 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'light' | 'dark' | 'none' = 'theme';\n\n  /** Label width as a fraction of 12 columns (1-11) */\n  @Prop() labelWidth: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 = 3;\n\n  /** Variant of the input: default or icon or floating-label */\n  @Prop() variant: 'default' | 'icon' | 'floating-label' = 'default';\n\n  /** Whether the input is disabled */\n  @Prop() disabled: boolean = false;\n\n  /** Whether the input has an error */\n  @Prop({ mutable: true }) error: boolean = false;\n\n  /** Mask for the input field (optional) */\n  @Prop() mask: FactoryArg;\n\n  /** Whether the input should auto-validate */\n  @Prop() autoValidate?: boolean = true;\n\n  /** A Zod schema for validating the input */\n  @Prop() zod?: ZodType<any, any>;\n\n  /** A Zod parse type for validating the input */\n  @Prop() asyncParse?: boolean;\n\n  /** Key to wrap the value (e.g., 'price' or 'cost') */\n  @Prop() wrapKey?: string;\n\n  /** Forcing css style to the input */\n  @Prop() inputForcedStyle?: { [key: string]: string };\n\n  /** Input id for testing purposes*/\n  @Prop() testId: string;\n\n  /** Input max character length*/\n  @Prop() maxLength: number;\n\n  /** To clear all the Input base styling*/\n  @Prop() clearBaseStyles: boolean;\n\n  /** To clear all the Input base styling*/\n  @Prop() errorMessage: string;\n\n  /** Autocomplete behavior for the input (e.g., 'on', 'off', 'email', etc.) */\n  @Prop() autoComplete: string;\n\n  /** Forcing css style to the input container */\n  @Prop() inputContainerStyle: { [key: string]: string };\n  /**\n   * Extra class names applied to the label container (<div class=\"input-group-prepend\">)\n   * that wraps the <label>. Use this to control label width, alignment,\n   * spacing, or visibility at different breakpoints.\n   * Example: \"min-w-120 text-nowrap pe-2\"\n   */\n  @Prop() labelContainerClassname: string;\n\n  @State() inputFocused: boolean = false;\n\n  @Event({ bubbles: true, composed: true }) textChange: EventEmitter<any>;\n  @Event() inputBlur: EventEmitter<FocusEvent>;\n  @Event() inputFocus: EventEmitter<FocusEvent>;\n\n  private inputRef: HTMLInputElement;\n  private maskInstance: InputMask<FactoryArg>;\n\n  private id: string;\n  private hasPrefixSlot: boolean;\n  private hasSuffixSlot: boolean;\n\n  componentWillLoad() {\n    if (this.el.id) {\n      this.id = this.el.id;\n    } else {\n      this.id = v4();\n    }\n    this.hasPrefixSlot = this.haveSlotPresent('prefix');\n    this.hasSuffixSlot = this.haveSlotPresent('suffix');\n  }\n\n  componentDidLoad() {\n    if (this.mask) this.initMask();\n  }\n\n  @Watch('mask')\n  handleMaskChange() {\n    this.initMask();\n  }\n  // @Watch('autoValidate')\n  // handleMaskChange1() {\n  //   console.log(this.autoValidate);\n  // }\n\n  // @Watch('error')\n  // handleErrorChange(newValue: boolean, oldValue: boolean) {\n  //   if (newValue !== oldValue) {\n  //     if (this.autoValidate) {\n  //       this.validateInput(this.value, true);\n  //     }\n  //   }\n  // }\n\n  @Watch('value')\n  handleValueChange(newValue: string, oldValue: string) {\n    if (newValue !== oldValue) {\n      this.validateInput(this.value);\n    }\n  }\n\n  private initMask() {\n    if (!this.mask || this.maskInstance) {\n      return;\n    }\n\n    this.maskInstance = IMask(this.inputRef, this.mask);\n    this.maskInstance.on('accept', () => {\n      const isEmpty = this.inputRef.value.trim() === '' || this.maskInstance.unmaskedValue === '';\n      if (isEmpty) {\n        this.inputRef.value = '';\n        this.textChange.emit(null);\n      } else {\n        this.inputRef.value = this.maskInstance.value;\n        this.textChange.emit(this.maskInstance.value);\n      }\n    });\n  }\n\n  private haveSlotPresent(name: string) {\n    const slot = this.el.querySelector(`[slot=\"${name}\"]`);\n    return slot !== null;\n  }\n\n  private async validateInput(value: string, forceValidation: boolean = false) {\n    if (!this.autoValidate && !forceValidation) {\n      if (this.error) {\n        this.updateErrorState(false);\n      }\n      return;\n    }\n    if (this.zod) {\n      try {\n        if (!this.asyncParse) {\n          this.zod.parse(this.wrapKey ? { [this.wrapKey]: value } : value);\n        } else {\n          await this.zod.parseAsync(this.wrapKey ? { [this.wrapKey]: value } : value);\n        }\n        if (this.error) {\n          this.updateErrorState(false);\n        }\n      } catch (error) {\n        console.log(error);\n        this.updateErrorState(true);\n      }\n    }\n  }\n\n  private handleInputChange(event: InputEvent) {\n    const value = (event.target as HTMLInputElement).value;\n    const isEmpty = value === '';\n    if (this.maskInstance) {\n      this.maskInstance.value = value;\n    }\n    const maskedValue = isEmpty ? null : this.maskInstance ? this.maskInstance.value : value;\n    this.textChange.emit(maskedValue);\n  }\n\n  private updateErrorState(b: boolean) {\n    this.error = b;\n    this.inputRef.setAttribute('aria-invalid', b ? 'true' : 'false');\n  }\n\n  private handleBlur(e: FocusEvent) {\n    this.validateInput(this.value, this.submitted);\n    this.inputFocused = false;\n    this.inputBlur.emit(e);\n  }\n  private renderFloatingLabel() {\n    const labelText = this.label || this.placeholder || '';\n    const hasValue = !!(this.value && String(this.value).length > 0);\n\n    return (\n      <div class=\"form-group\" style={this.inputContainerStyle}>\n        <div\n          class={`ir-floating-group ${this.error ? 'has-error' : ''} ${this.disabled ? 'is-disabled' : ''} ${this.readonly ? 'is-readonly' : ''}`}\n          data-has-value={String(hasValue)}\n          data-focused={String(this.inputFocused)}\n          data-have-prefix={String(this.hasPrefixSlot)}\n          data-have-suffix={String(this.hasSuffixSlot)}\n          part=\"form-group\"\n        >\n          <span part=\"prefix-container\" class={{ 'prefix-container': true, 'no-slot': !this.hasPrefixSlot }}>\n            <slot name=\"prefix\"></slot>\n          </span>\n          <input\n            part=\"input\"\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\n            maxLength={this.maxLength}\n            data-testid={this.testId}\n            style={this.inputForcedStyle}\n            id={this.id}\n            name={this.name}\n            ref={el => (this.inputRef = el)}\n            readOnly={this.readonly}\n            type={this.type}\n            class={`ir-input ir-floating-input ${this.inputStyles || ''} ${this.error ? 'danger-border' : ''} text-${this.textSize}`}\n            onBlur={this.handleBlur.bind(this)}\n            onFocus={e => {\n              this.inputFocused = true;\n              this.inputFocus.emit(e);\n            }}\n            placeholder=\" \"\n            autoComplete={this.autoComplete}\n            autocomplete={this.autoComplete}\n            value={this.value}\n            onInput={this.handleInputChange.bind(this)}\n            required={this.required}\n            disabled={this.disabled}\n            aria-invalid={String(this.error)}\n            aria-required={String(this.required)}\n          />\n          <label part=\"label\" htmlFor={this.id} class=\"ir-floating-label\">\n            {labelText}\n            {this.required ? ' *' : ''}\n          </label>\n\n          <span part=\"suffix-container\" class={{ 'suffix-container': true, 'no-slot': !this.hasSuffixSlot }}>\n            <slot name=\"suffix\"></slot>\n          </span>\n        </div>\n\n        {this.errorMessage && this.error && (\n          <p part=\"error-message\" class=\"error-message\">\n            {this.errorMessage}\n          </p>\n        )}\n      </div>\n    );\n  }\n  render() {\n    if (this.variant === 'floating-label') {\n      return this.renderFloatingLabel();\n    }\n    if (this.variant === 'icon') {\n      return (\n        <fieldset class=\"position-relative has-icon-left input-container\">\n          <label htmlFor={this.id} class=\"input-group-prepend bg-white m-0\">\n            <span\n              data-disabled={this.disabled}\n              data-state={this.inputFocused ? 'focus' : ''}\n              class={`input-group-text icon-container bg-white ${this.error ? 'danger-border' : ''}`}\n              id=\"basic-addon1\"\n            >\n              <slot name=\"icon\"></slot>\n            </span>\n          </label>\n          <input\n            maxLength={this.maxLength}\n            data-testid={this.testId}\n            style={this.inputForcedStyle}\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\n            id={this.id}\n            ref={el => (this.inputRef = el)}\n            readOnly={this.readonly}\n            type={this.type}\n            class={`ir-input form-control bg-white pl-0 input-sm rate-input py-0 m-0 rateInputBorder ${this.error ? 'danger-border' : ''}`}\n            onBlur={this.handleBlur.bind(this)}\n            onFocus={e => {\n              this.inputFocused = true;\n              this.inputFocus.emit(e);\n            }}\n            placeholder={this.placeholder}\n            value={this.value}\n            onInput={this.handleInputChange.bind(this)}\n            required={this.required}\n            disabled={this.disabled}\n            autoComplete={this.autoComplete}\n          />\n        </fieldset>\n      );\n    }\n    return (\n      <div class={'form-group'} style={this.inputContainerStyle}>\n        <div class=\"input-group row m-0\">\n          {this.label && (\n            <div class={`input-group-prepend col-${this.labelWidth} ${this.labelContainerClassname} p-0 text-${this.labelColor}`}>\n              <label\n                htmlFor={this.id}\n                class={`input-group-text ${this.labelPosition === 'right' ? 'justify-content-end' : this.labelPosition === 'center' ? 'justify-content-center' : ''} ${\n                  this.labelBackground ? 'bg-' + this.labelBackground : ''\n                } flex-grow-1 text-${this.labelColor} border-${this.labelBorder === 'none' ? 0 : this.labelBorder} `}\n              >\n                {this.label}\n                {this.required ? '*' : ''}\n              </label>\n            </div>\n          )}\n          <input\n            maxLength={this.maxLength}\n            data-testid={this.testId}\n            style={this.inputForcedStyle}\n            data-state={!!this.value ? undefined : this.mask ? 'empty' : undefined}\n            id={this.id}\n            ref={el => (this.inputRef = el)}\n            readOnly={this.readonly}\n            type={this.type}\n            class={\n              this.clearBaseStyles\n                ? `${this.inputStyles}`\n                : `${this.error ? 'border-danger' : ''} form-control text-${this.textSize} col-${this.label ? 12 - this.labelWidth : 12} ${this.readonly ? 'bg-white' : ''} ${\n                    this.inputStyles\n                  }`\n            }\n            onBlur={this.handleBlur.bind(this)}\n            onFocus={e => {\n              this.inputFocused = true;\n              this.inputFocus.emit(e);\n            }}\n            placeholder={this.placeholder}\n            autoComplete={this.autoComplete}\n            autocomplete={this.autoComplete}\n            value={this.value}\n            onInput={this.handleInputChange.bind(this)}\n            required={this.required}\n            disabled={this.disabled}\n          />\n        </div>\n        {this.errorMessage && this.error && <p class=\"error-message\">{this.errorMessage}</p>}\n      </div>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}