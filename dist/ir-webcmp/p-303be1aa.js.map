{"version":3,"names":["RoomService","SetAutomaticCheckInOut","props","data","axios","post","ExceptionMsg","Error","getExposedProperty","params","results","My_Result","calendar_data","adultChildConstraints","adult_child_constraints","allowedBookingSources","allowed_booking_sources","allowed_payment_methods","currency","is_vacation_rental","pickup_service","max_nights","roomsInfo","roomtypes","taxes","id","country","name","is_automatic_check_in_out","tax_statement","is_frontdesk_enabled","is_pms_enabled","spitTime","_b","_a","time_constraints","check_out_till","split","checkin_checkout_hours","offset","gmt_offset","hour","Number","minute","error","console","log","fetchLanguage","code","sections","entries","this","transformArrayToObject","locales","Object","assign","direction","object","d","description"],"sources":["src/services/room.service.ts"],"sourcesContent":["import calendar_data from '@/stores/calendar-data';\nimport { locales } from '@/stores/locales.store';\nimport axios from 'axios';\n\nexport class RoomService {\n  public async SetAutomaticCheckInOut(props: { property_id: number; flag: boolean }) {\n    const { data } = await axios.post(`/Set_Automatic_Check_In_Out`, props);\n    if (data.ExceptionMsg !== '') {\n      throw new Error(data.ExceptionMsg);\n    }\n    return data;\n  }\n\n  public async getExposedProperty(params: {\n    id: number | null;\n    language: string;\n    is_backend?: boolean;\n    aname?: string;\n    include_units_hk_status?: boolean;\n    include_sales_rate_plans?: boolean;\n  }) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Property`, params);\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      const results = data.My_Result;\n      calendar_data.adultChildConstraints = results.adult_child_constraints;\n      calendar_data.allowedBookingSources = results.allowed_booking_sources;\n      calendar_data.allowed_payment_methods = results.allowed_payment_methods;\n      calendar_data.currency = results.currency;\n      calendar_data.is_vacation_rental = results.is_vacation_rental;\n      calendar_data.pickup_service = results.pickup_service;\n      calendar_data.max_nights = results.max_nights;\n      calendar_data.roomsInfo = results.roomtypes;\n      calendar_data.taxes = results.taxes;\n      calendar_data.id = results.id;\n      calendar_data.country = results.country;\n      calendar_data.name = results.name;\n      calendar_data.is_automatic_check_in_out = results.is_automatic_check_in_out;\n      calendar_data.tax_statement = results.tax_statement;\n      calendar_data.is_frontdesk_enabled = results.is_frontdesk_enabled;\n      calendar_data.is_pms_enabled = results.is_pms_enabled;\n      const spitTime = results?.time_constraints?.check_out_till?.split(':');\n      calendar_data.checkin_checkout_hours = {\n        offset: results.country.gmt_offset,\n        hour: Number(spitTime[0] || 0),\n        minute: Number(spitTime[1] || 0),\n      };\n      return data;\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n\n  public async fetchLanguage(code: string, sections: string[] = ['_PMS_FRONT']) {\n    try {\n      const { data } = await axios.post(`/Get_Exposed_Language`, { code, sections });\n      if (data.ExceptionMsg !== '') {\n        throw new Error(data.ExceptionMsg);\n      }\n      let entries = this.transformArrayToObject(data.My_Result.entries);\n      locales.entries = { ...locales.entries, ...entries };\n      locales.direction = data.My_Result.direction;\n      //copy entries\n      // this.copyEntries(entries);\n      return { entries, direction: data.My_Result.direction };\n    } catch (error) {\n      console.log(error);\n      throw new Error(error);\n    }\n  }\n  // private copyEntries(data: Record<string, string>) {\n  //   const typedObject: Record<string, string> = {};\n  //   Object.keys(data).forEach(key => {\n  //     typedObject[key] = 'string' as unknown as string;\n  //   });\n  //   const output = Object.keys(typedObject).reduce((acc, key) => {\n  //     acc[key] = 'string';\n  //     return acc;\n  //   }, {} as Record<string, string>);\n  //   navigator.clipboard.writeText(JSON.stringify(output, null, 2).replace(/\"string\"/g, 'string'));\n  // }\n\n  private transformArrayToObject(data: any) {\n    let object: any = {};\n    for (const d of data) {\n      object[d.code] = d.description;\n    }\n    return object;\n  }\n}\n"],"mappings":"kHAIaA,EACJ,4BAAMC,CAAuBC,GAClC,MAAMC,KAAEA,SAAeC,EAAMC,KAAK,8BAA+BH,GACjE,GAAIC,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,OAAOH,C,CAGF,wBAAMK,CAAmBC,G,QAQ9B,IACE,MAAMN,KAAEA,SAAeC,EAAMC,KAAK,wBAAyBI,GAC3D,GAAIN,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,MAAMI,EAAUP,EAAKQ,UACrBC,EAAcC,sBAAwBH,EAAQI,wBAC9CF,EAAcG,sBAAwBL,EAAQM,wBAC9CJ,EAAcK,wBAA0BP,EAAQO,wBAChDL,EAAcM,SAAWR,EAAQQ,SACjCN,EAAcO,mBAAqBT,EAAQS,mBAC3CP,EAAcQ,eAAiBV,EAAQU,eACvCR,EAAcS,WAAaX,EAAQW,WACnCT,EAAcU,UAAYZ,EAAQa,UAClCX,EAAcY,MAAQd,EAAQc,MAC9BZ,EAAca,GAAKf,EAAQe,GAC3Bb,EAAcc,QAAUhB,EAAQgB,QAChCd,EAAce,KAAOjB,EAAQiB,KAC7Bf,EAAcgB,0BAA4BlB,EAAQkB,0BAClDhB,EAAciB,cAAgBnB,EAAQmB,cACtCjB,EAAckB,qBAAuBpB,EAAQoB,qBAC7ClB,EAAcmB,eAAiBrB,EAAQqB,eACvC,MAAMC,GAAWC,GAAAC,EAAAxB,IAAO,MAAPA,SAAO,SAAPA,EAASyB,oBAAgB,MAAAD,SAAA,SAAAA,EAAEE,kBAAc,MAAAH,SAAA,SAAAA,EAAEI,MAAM,KAClEzB,EAAc0B,uBAAyB,CACrCC,OAAQ7B,EAAQgB,QAAQc,WACxBC,KAAMC,OAAOV,EAAS,IAAM,GAC5BW,OAAQD,OAAOV,EAAS,IAAM,IAEhC,OAAO7B,C,CACP,MAAOyC,GACPC,QAAQC,IAAIF,GACZ,MAAM,IAAIrC,MAAMqC,E,EAIb,mBAAMG,CAAcC,EAAcC,EAAqB,CAAC,eAC7D,IACE,MAAM9C,KAAEA,SAAeC,EAAMC,KAAK,wBAAyB,CAAE2C,OAAMC,aACnE,GAAI9C,EAAKG,eAAiB,GAAI,CAC5B,MAAM,IAAIC,MAAMJ,EAAKG,a,CAEvB,IAAI4C,EAAUC,KAAKC,uBAAuBjD,EAAKQ,UAAUuC,SACzDG,EAAQH,QAAOI,OAAAC,OAAAD,OAAAC,OAAA,GAAQF,EAAQH,SAAYA,GAC3CG,EAAQG,UAAYrD,EAAKQ,UAAU6C,UAGnC,MAAO,CAAEN,UAASM,UAAWrD,EAAKQ,UAAU6C,U,CAC5C,MAAOZ,GACPC,QAAQC,IAAIF,GACZ,MAAM,IAAIrC,MAAMqC,E,EAeZ,sBAAAQ,CAAuBjD,GAC7B,IAAIsD,EAAc,GAClB,IAAK,MAAMC,KAAKvD,EAAM,CACpBsD,EAAOC,EAAEV,MAAQU,EAAEC,W,CAErB,OAAOF,C","ignoreList":[]}