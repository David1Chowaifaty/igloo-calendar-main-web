{"version":3,"names":["status","bookingStatus","formatName","firstName","lastName","async","getStayStatus","data","axios","post","TBL_NAMES","My_Result","map","d","code","CODE_NAME","value","CODE_VALUE_EN","error","console","log","renderBlock003Date","date","hour","minute","dt","Date","setHours","setMinutes","locales","entries","Lcz_BlockedTill","moment","format","getRoomStatus","params","in_out","status_code","from_date","to_date","calendar_data","checkin_enabled","is_automatic_check_in_out","now","toDate","fromDate","isNowAfterOrSameAsHotelHour","compareTime","createDateWithOffsetAndHour","_a","checkin_checkout_hours","offset","_b","isSame","isAfter","_c","_d","isBefore","getPrivateNote","extras","find","e","key","transformNewBooking","bookings","rooms","filter","room","forEach","bookingFromDate","calendar_dates","bookingToDate","mainGuest","sharing_persons","p","is_main","push","CHECKIN","CHECKOUT","ID","TO_DATE","FROM_DATE","PRIVATE_NOTE","NO_OF_DAYS","dateDifference","ARRIVAL","arrival","IS_EDITABLE","BALANCE","financial","due_amount","STATUS","NAME","first_name","last_name","PHONE","guest","mobile_without_prefix","ENTRY_DATE","PHONE_PREFIX","country_phone_prefix","RATE","total","RATE_PLAN","rateplan","name","SPLIT_BOOKING","RATE_PLAN_ID","id","IDENTIFIER","identifier","RATE_TYPE","roomtype","ADULTS_COUNT","occupancy","adult_nbr","CHILDREN_COUNT","children_nbr","PR_ID","unit","POOL","GUEST","ROOMS","BOOKING_NUMBER","booking_nbr","cancelation","guarantee","TOTAL_PRICE","_e","gross_total","COUNTRY","country_id","FROM_DATE_STR","TO_DATE_STR","adult_child_offering","selected_variation","ARRIVAL_TIME","description","origin","channel_booking_nbr","is_direct","NOTES","remark","SOURCE","source","tag","ota_notes","defaultDates","ROOM_INFO","BASE_STATUS_CODE","_f","transformNewBLockedRooms","stayStatus","STAY_STATUS_CODE","BLOCKED_TILL_DATE","BLOCKED_TILL_HOUR","BLOCKED_TILL_MINUTE","st","RELEASE_AFTER_HOURS","DESCRIPTION","pr_id","ENTRY_HOUR","ENTRY_MINUTE","OPTIONAL_REASON","calculateDaysBetweenDates","STATUS_CODE","OUT_OF_SERVICE","startDate","startOf","endDate","endOf","daysDiff","diff","date1","date2","getHours","getMinutes","offsetMs","targetTzDate","getTime","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","utcHour","UTC","dateToFormattedString","getFullYear","getMonth","toString","padStart","getDate","formatLegendColors","legendData","formattedLegendData","statusId","clsName","CONFIRMED","BLOCKED","legend","isBlockUnit","includes","findCountry","countries","country","getReleaseHoursString","releaseDate","releaseAfterHours","computeEndDate","numberOfDays","dateObj","add","convertDMYToISO","addTwoMonthToDate","formatDate","dateString","option","formattedDate","getNextDay","convertDatePrice","getDaysArray","dates","start","min","end","max","clone","renderTime","time","validateEmail","email","parsedEmailResults","z","string","safeParse","success","formatAmount","currency","amount","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","manageAnchorSession","mode","anchor","JSON","parse","sessionStorage","getItem","setItem","stringify","Object","assign","keys","checkUserAuthState","login","canCheckIn","isCheckedIn","calendarData","isSameOrAfter"],"sources":["src/utils/booking.ts","src/utils/utils.ts"],"sourcesContent":["import { Extras, Room } from './../models/booking.dto';\r\nimport moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_dates from '@/stores/calendar-dates.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi`, {\r\n      TBL_NAMES: ['_STAY_STATUS'],\r\n    });\r\n    return data.My_Result.map(d => ({\r\n      code: d.CODE_NAME,\r\n      value: d.CODE_VALUE_EN,\r\n    }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    const blockedFromDate = moment(cell.My_Block_Info.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.from_date : cell.DATE;\r\n    const blockedToDate = moment(cell.My_Block_Info.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.My_Block_Info.to_date : cell.DATE;\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: blockedFromDate,\r\n      TO_DATE: blockedToDate,\r\n      NO_OF_DAYS: dateDifference(blockedFromDate, blockedToDate),\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n      defaultDates: {\r\n        from_date: cell.My_Block_Info.from_date,\r\n        to_date: cell.My_Block_Info.to_date,\r\n      },\r\n    };\r\n  }\r\n  if (cell.booking.booking_nbr.toString() === '77054273380') {\r\n    console.log('booking', cell);\r\n  }\r\n\r\n  // if (cell.booking.booking_nbr === '61249849') {\r\n  //   console.log('cell');\r\n  //   console.log(moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE);\r\n  //   console.log(cell);\r\n  // }\r\n  const bookingFromDate = moment(cell.room.from_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.from_date : cell.DATE;\r\n  const bookingToDate = moment(cell.room.to_date, 'YYYY-MM-DD').isAfter(cell.DATE) ? cell.room.to_date : cell.DATE;\r\n  const mainGuest = cell.room.sharing_persons?.find(p => p.is_main);\r\n  return {\r\n    ID: cell.POOL,\r\n    FROM_DATE: bookingFromDate,\r\n    TO_DATE: bookingToDate,\r\n    NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    PRIVATE_NOTE: getPrivateNote(cell.booking.extras),\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ARRIVAL_TIME: cell.booking.arrival.description,\r\n    defaultDates: {\r\n      from_date: cell.room.from_date,\r\n      to_date: cell.room.to_date,\r\n    },\r\n    ///from here\r\n    ENTRY_DATE: cell.booking.booked_on.date,\r\n    PHONE_PREFIX: cell.booking.guest.country_phone_prefix,\r\n    IS_EDITABLE: cell.booking.is_editable,\r\n    ARRIVAL: cell.booking.arrival,\r\n    PHONE: cell.booking.guest.mobile_without_prefix ?? '',\r\n    RATE: cell.room.total,\r\n    RATE_PLAN: cell.room.rateplan.name,\r\n    SPLIT_BOOKING: false,\r\n    RATE_PLAN_ID: cell.room.rateplan.id,\r\n    RATE_TYPE: cell.room?.roomtype?.id,\r\n    ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    origin: cell.booking.origin,\r\n    GUEST: cell.booking.guest,\r\n    ROOMS: cell.booking.rooms,\r\n    cancelation: cell.room.rateplan.cancelation,\r\n    guarantee: cell.room.rateplan.guarantee,\r\n    TOTAL_PRICE: cell.booking.financial?.gross_total,\r\n    COUNTRY: cell.booking.guest.country_id,\r\n    FROM_DATE_STR: cell.booking.format.from_date,\r\n    TO_DATE_STR: cell.booking.format.to_date,\r\n    adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n    //TODO:Implement checkin-checkout\r\n    CHECKIN: cell.room.in_out?.code === '001',\r\n    CHECKOUT: cell.room.in_out?.code === '002',\r\n    ROOM_INFO: {\r\n      occupancy: cell.room.occupancy,\r\n      sharing_persons: cell.room.sharing_persons,\r\n      unit: cell.room.unit,\r\n      in_out: cell.room.in_out,\r\n    },\r\n    BASE_STATUS_CODE: cell.booking.status?.code,\r\n  };\r\n}\r\n\r\n// function updateBookingWithStayData(data: any, cell: CellType): any {\r\n//   data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n//   data.TO_DATE = cell.DATE;\r\n//   if (cell.booking) {\r\n//     const { arrival } = cell.booking;\r\n//     if (cell.booking.booking_nbr === '88231897') {\r\n//       console.log(data.NO_OF_DAYS, data.TO_DATE);\r\n//     }\r\n//     Object.assign(data, {\r\n//       ARRIVAL_TIME: arrival.description,\r\n//     });\r\n//   }\r\n//   return data;\r\n// }\r\nexport function getRoomStatus(params: Pick<Room, 'in_out' | 'from_date' | 'to_date'> & { status_code: string }) {\r\n  const { in_out, status_code, from_date, to_date } = params;\r\n  if (calendar_data.checkin_enabled) {\r\n    if (in_out?.code === '001') {\r\n      return bookingStatus['000'];\r\n    } else if (in_out?.code === '002') {\r\n      if (!calendar_data.is_automatic_check_in_out) {\r\n        const now = moment();\r\n        const toDate = moment(to_date, 'YYYY-MM-DD');\r\n        const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n        const isNowAfterOrSameAsHotelHour = compareTime(\r\n          now.toDate(),\r\n          createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n        );\r\n        if ((now.isSame(toDate, 'days') && now.isAfter(fromDate, 'days') && isNowAfterOrSameAsHotelHour) || now.isAfter(toDate, 'days')) {\r\n          return bookingStatus['003'];\r\n        } else {\r\n          return bookingStatus['002'];\r\n        }\r\n      }\r\n    }\r\n    return bookingStatus[status_code || '001'];\r\n  } else {\r\n    const now = moment();\r\n    const toDate = moment(to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(from_date, 'YYYY-MM-DD');\r\n    const isNowAfterOrSameAsHotelHour = compareTime(\r\n      now.toDate(),\r\n      createDateWithOffsetAndHour(calendar_data.checkin_checkout_hours?.offset, calendar_data.checkin_checkout_hours?.hour),\r\n    );\r\n    if (fromDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && isNowAfterOrSameAsHotelHour) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[status_code || '001'];\r\n    }\r\n  }\r\n}\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  }\r\n  //else {\r\n  //   const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n  //   myBookings[index] = updatedData;\r\n  // }\r\n}\r\nexport function getPrivateNote(extras: Extras[] | null) {\r\n  if (!extras) {\r\n    return null;\r\n  }\r\n  return extras.find(e => e.key === 'private_note')?.value || null;\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    const bookingFromDate = moment(room.from_date, 'YYYY-MM-DD').isAfter(moment(calendar_dates.fromDate, 'YYYY-MM-DD')) ? room.from_date : calendar_dates.fromDate;\r\n    const bookingToDate = room.to_date;\r\n    if (moment(room.to_date, 'YYYY-MM-DD').isBefore(moment(calendar_dates.fromDate, 'YYYY-MM-DD'))) {\r\n      return;\r\n    }\r\n    const mainGuest = room.sharing_persons?.find(p => p.is_main);\r\n    // console.log('bookingToDate:', bookingToDate, 'bookingFromDate:', bookingFromDate, 'room from date:', room.from_date, 'room to date', room.to_date);\r\n    bookings.push({\r\n      CHECKIN: false,\r\n      CHECKOUT: false,\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: bookingToDate,\r\n      FROM_DATE: bookingFromDate,\r\n      PRIVATE_NOTE: getPrivateNote(data.extras),\r\n      NO_OF_DAYS: dateDifference(bookingFromDate, bookingToDate),\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: getRoomStatus({\r\n        in_out: room.in_out,\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n        status_code: data.status?.code,\r\n      }),\r\n      NAME: formatName(mainGuest?.first_name, mainGuest.last_name),\r\n      PHONE: data.guest.mobile_without_prefix ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      PHONE_PREFIX: data.guest.country_phone_prefix,\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: data.financial?.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n      defaultDates: {\r\n        from_date: room.from_date,\r\n        to_date: room.to_date,\r\n      },\r\n      ROOM_INFO: {\r\n        occupancy: room.occupancy,\r\n        sharing_persons: room.sharing_persons,\r\n        unit: room.unit,\r\n        in_out: room.in_out,\r\n      },\r\n      BASE_STATUS_CODE: data.status?.code,\r\n    });\r\n  });\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n    defaultDates: {\r\n      from_date: data.from_date,\r\n      to_date: data.to_date,\r\n    },\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD').startOf('day');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD').endOf('day');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\nexport function compareTime(date1: Date, date2: Date) {\r\n  return date1.getHours() >= date2.getHours() && date1.getMinutes() >= date2.getMinutes();\r\n}\r\n/**\r\n * Creates a Date object for today at the specified hour in a given time zone.\r\n * The offset is the number of hours that the target time zone is ahead of UTC.\r\n *\r\n * For example, if offset = 3 and hour = 9, then the function returns a Date\r\n * which, when converted to the target time zone, represents 9:00.\r\n *\r\n * @param offset - The timezone offset in hours (e.g., 2, 3, etc.)\r\n * @param hour - The desired hour in the target time zone (0-23)\r\n * @returns Date object representing the target time (in UTC)\r\n */\r\nexport function createDateWithOffsetAndHour(offset: number, hour: number): Date {\r\n  const now = new Date();\r\n  const offsetMs = offset * 60 * 60 * 1000;\r\n  const targetTzDate = new Date(now.getTime() + offsetMs);\r\n  const year = targetTzDate.getUTCFullYear();\r\n  const month = targetTzDate.getUTCMonth();\r\n  const day = targetTzDate.getUTCDate();\r\n  const utcHour = hour - offset;\r\n  return new Date(Date.UTC(year, month, day, utcHour));\r\n}\r\n","import moment from 'moment';\r\nimport IBooking, { ICountry, PhysicalRoomType } from '../models/IBooking';\r\nimport { z } from 'zod';\r\nimport { compareTime, createDateWithOffsetAndHour } from '@/utils/booking';\r\nimport calendarData from '@/stores/calendar-data';\r\n\r\nexport function convertDateToCustomFormat(dayWithWeekday: string, monthWithYear: string): string {\r\n  const dateStr = `${dayWithWeekday.split(' ')[1]} ${monthWithYear}`;\r\n  const date = moment(dateStr, 'DD MMM YYYY');\r\n  if (!date.isValid()) {\r\n    throw new Error('Invalid Date');\r\n  }\r\n  return date.format('D_M_YYYY');\r\n}\r\n\r\nexport function convertDateToTime(dayWithWeekday: string, monthWithYear: string): number {\r\n  const date = moment(dayWithWeekday + ' ' + monthWithYear, 'ddd DD MMM YYYY').toDate();\r\n  date.setHours(0, 0, 0, 0);\r\n  return date.getTime();\r\n}\r\nexport function dateDifference(FROM_DATE: string, TO_DATE: string): number {\r\n  const startDate = new Date(FROM_DATE);\r\n  const endDate = new Date(TO_DATE);\r\n  return Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\r\n}\r\nexport const getBrowserLanguage = (): string => {\r\n  const defaultLang = 'en';\r\n  const lang = navigator.language || defaultLang;\r\n  return lang.toUpperCase().split('-')[0];\r\n};\r\n\r\nexport const transformBooking = (physicalRoom: PhysicalRoomType[]): IBooking[] => {\r\n  const myBookings: IBooking[] = [];\r\n  physicalRoom.forEach(room => {\r\n    Object.keys(room.calendar_cell).forEach(key => {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        if (myBookings.find(b => b.ID === room.id.toString())) {\r\n        } else {\r\n          //myBookings.push({})\r\n        }\r\n      }\r\n    });\r\n  });\r\n  return myBookings;\r\n};\r\n\r\nexport function dateToFormattedString(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0'); // +1 because months are 0-based in JS\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function formatLegendColors(legendData) {\r\n  let formattedLegendData: any = {};\r\n\r\n  const statusId = {\r\n    'IN-HOUSE': { id: 1, clsName: 'IN_HOUSE' },\r\n    'CONFIRMED': { id: 2, clsName: 'CONFIRMED' },\r\n    'PENDING-CONFIRMATION': { id: 3, clsName: 'PENDING_CONFIRMATION' },\r\n    'SPLIT-UNIT': { id: 4, clsName: 'SPLIT_UNIT' },\r\n    'CHECKED-IN': { id: 5, clsName: 'CHECKED_IN' },\r\n    'CHECKED-OUT': { id: 5, clsName: 'CHECKED_OUT' },\r\n    'BLOCKED': { id: 6, clsName: 'BLOCKED' },\r\n    'BLOCKED-WITH-DATES': { id: 7, clsName: 'BLOCKED_WITH_DATES' },\r\n    'NOTES': { id: 8, clsName: 'NOTES' },\r\n    'OUTSTANDING-BALANCE': { id: 9, clsName: 'OUTSTANDING_BALANCE' },\r\n    'TEMP-EVENT': { id: 10, clsName: 'PENDING_CONFIRMATION' },\r\n  };\r\n  legendData.forEach(legend => {\r\n    formattedLegendData[legend.id] = legend;\r\n    formattedLegendData.statusId = statusId; // NOTE: This will overwrite the 'statusId' property with every iteration.\r\n  });\r\n\r\n  return formattedLegendData;\r\n}\r\nexport function isBlockUnit(status_code: any) {\r\n  return ['003', '002', '004'].includes(status_code);\r\n}\r\nexport function getCurrencySymbol(currencyCode) {\r\n  const formatter = new Intl.NumberFormat(undefined, {\r\n    style: 'currency',\r\n    currency: currencyCode,\r\n    minimumFractionDigits: 0,\r\n    maximumFractionDigits: 0,\r\n  });\r\n  return formatter.format(0).replace(/[0-9]/g, '').trim();\r\n}\r\nexport const findCountry = (id: number, countries: ICountry[]): ICountry => countries.find(country => country.id === id);\r\n\r\nexport function getReleaseHoursString(releaseDate: number) {\r\n  const dt = new Date();\r\n  const releaseAfterHours = releaseDate;\r\n\r\n  dt.setHours(dt.getHours() + releaseAfterHours, dt.getMinutes(), 0, 0);\r\n\r\n  return {\r\n    BLOCKED_TILL_DATE: dateToFormattedString(dt),\r\n    BLOCKED_TILL_HOUR: dt.getHours().toString(),\r\n    BLOCKED_TILL_MINUTE: dt.getMinutes().toString(),\r\n  };\r\n}\r\n\r\nexport function computeEndDate(startDate: string, numberOfDays: number): string {\r\n  const dateObj = moment(startDate, 'D_M_YYYY');\r\n  dateObj.add(numberOfDays, 'days');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDMYToISO(date: string) {\r\n  const dateObj = moment(date, 'D_M_YYYY');\r\n  return dateObj.format('YYYY-MM-DD');\r\n}\r\nexport function addTwoMonthToDate(date: Date) {\r\n  return moment(date).add(2, 'months').format('YYYY-MM-DD');\r\n}\r\nexport function formatDate(dateString, option = 'DD MMM YYYY') {\r\n  const formattedDate = moment(dateString, option).format('ddd, DD MMM YYYY');\r\n  return formattedDate;\r\n}\r\nexport function getNextDay(date: Date) {\r\n  return moment(date).add(1, 'days').format('YYYY-MM-DD');\r\n}\r\n\r\nexport function convertDatePrice(date: string) {\r\n  return moment(date, 'YYYY-MM-DD').format('DD/MM ddd');\r\n}\r\nexport function getDaysArray(date1: string, date2: string) {\r\n  let dates = [];\r\n  let start = moment.min(moment(date1).add(1, 'days'), moment(date2));\r\n  let end = moment.max(moment(date1), moment(date2));\r\n  while (start < end) {\r\n    dates.push(start.format('YYYY-MM-DD'));\r\n    start = start.clone().add(1, 'days');\r\n  }\r\n\r\n  return dates;\r\n}\r\nexport function renderTime(time: number) {\r\n  return time < 10 ? time.toString().padStart(2, '0') : time.toString();\r\n}\r\nexport function validateEmail(email: string) {\r\n  if (email === '') {\r\n    return true;\r\n  }\r\n  const parsedEmailResults = z.string().email().safeParse(email);\r\n  return !parsedEmailResults.success;\r\n}\r\nexport function formatAmount(currency: string, amount: number) {\r\n  return currency + ' ' + amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });\r\n}\r\n\r\nexport const extras = [\r\n  {\r\n    key: 'private_note',\r\n    value: '',\r\n  },\r\n  {\r\n    key: 'is_backend',\r\n    value: true,\r\n  },\r\n  {\r\n    key: 'ERROR_EMAIL',\r\n    value: '',\r\n  },\r\n  {\r\n    key: 'agent_payment_mode',\r\n    value: '',\r\n  },\r\n  { key: 'payment_code', value: '' },\r\n];\r\n\r\nexport function manageAnchorSession(data: Record<string, unknown>, mode: 'add' | 'remove' = 'add') {\r\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\r\n  if (anchor) {\r\n    if (mode === 'add') {\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...anchor, ...data }));\r\n    } else if (mode === 'remove') {\r\n      const keys = Object.keys(data);\r\n      keys.forEach(key => {\r\n        if (key in anchor) {\r\n          delete anchor[key];\r\n        }\r\n      });\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify(anchor));\r\n    }\r\n  } else {\r\n    if (mode === 'add') {\r\n      return sessionStorage.setItem('backend_anchor', JSON.stringify({ ...data }));\r\n    }\r\n  }\r\n}\r\nexport function checkUserAuthState() {\r\n  const anchor = JSON.parse(sessionStorage.getItem('backend_anchor'));\r\n  if (anchor) {\r\n    return anchor.login || null;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport interface CheckInParams {\r\n  from_date: string;\r\n  to_date: string;\r\n  isCheckedIn?: boolean;\r\n}\r\n\r\n/**\r\n * Determines whether a booking is eligible for check-in.\r\n *\r\n * @param params - An object containing the booking event, calendar data, current check-in status, and a flag indicating if check-in or checkout is allowed.\r\n * @returns True if check-in is allowed; otherwise, false.\r\n */\r\nexport function canCheckIn({ from_date, to_date, isCheckedIn }: CheckInParams): boolean {\r\n  if (!calendarData.checkin_enabled || calendarData.is_automatic_check_in_out) {\r\n    return false;\r\n  }\r\n  if (isCheckedIn) {\r\n    return false;\r\n  }\r\n  const now = moment();\r\n  if (\r\n    (moment().isSameOrAfter(new Date(from_date), 'days') && moment().isBefore(new Date(to_date), 'days')) ||\r\n    (moment().isSame(new Date(to_date), 'days') &&\r\n      !compareTime(now.toDate(), createDateWithOffsetAndHour(calendarData.checkin_checkout_hours?.offset, calendarData.checkin_checkout_hours?.hour)))\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n"],"mappings":"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","ignoreList":[]}