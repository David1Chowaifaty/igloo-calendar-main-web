{"version":3,"names":["Auth","constructor","this","baseUrl","isAuthUsed","init","axios","defaults","withCredentials","baseURL","data","post","setIsAuthenticated","My_Result","subscribe","callback","subscribers","push","unsubscribe","filter","sub","value","_isAuthenticated","notifySubscribers","isAuthenticated","forEach","Token","super","setToken","token","getToken","MissingTokenError","Error","message","name"],"sources":["src/models/Auth.ts","src/models/Token.ts"],"sourcesContent":["import axios from 'axios';\n\nclass Auth {\n  private static isAuthUsed = false;\n  private static _isAuthenticated = false;\n  private baseUrl = 'https://gateway.igloorooms.com/IR';\n  private static subscribers: Array<(isAuthenticated: boolean) => void> = [];\n\n  constructor() {\n    if (!Auth.isAuthUsed) {\n      this.init();\n    }\n  }\n  public async init() {\n    axios.defaults.withCredentials = true;\n    axios.defaults.baseURL = this.baseUrl;\n    Auth.isAuthUsed = true;\n    const { data } = await axios.post('/Is_Already_Athenticated');\n    this.setIsAuthenticated(data.My_Result);\n  }\n  public subscribe(callback: (isAuthenticated: boolean) => void) {\n    Auth.subscribers.push(callback);\n  }\n  public unsubscribe(callback: (isAuthenticated: boolean) => void) {\n    Auth.subscribers = Auth.subscribers.filter(sub => sub !== callback);\n  }\n  public setIsAuthenticated(value: boolean) {\n    Auth._isAuthenticated = value;\n    Auth.notifySubscribers(value);\n  }\n\n  private static notifySubscribers(isAuthenticated: boolean) {\n    Auth.subscribers.forEach(callback => callback(isAuthenticated));\n  }\n  public isAuthenticated() {\n    return Auth._isAuthenticated;\n  }\n}\n\nexport default Auth;\n","// import axios from 'axios';\r\nimport Auth from './Auth';\r\n\r\nclass Token extends Auth {\r\n  private static token: string | null = '';\r\n\r\n  // private static isInterceptorAdded = false;\r\n\r\n  constructor() {\r\n    super();\r\n    // if (!Token.isInterceptorAdded) {\r\n    //   // axios.defaults.withCredentials = true;\r\n    //   axios.interceptors.request.use(config => {\r\n    //     if (Token.token) {\r\n    //       config.params = config.params || {};\r\n    //       config.params.Ticket = Token.token;\r\n    //     }\r\n    //     return config;\r\n    //   });\r\n    //   Token.isInterceptorAdded = true;\r\n    // }\r\n  }\r\n\r\n  public setToken(token: string) {\r\n    Token.token = token;\r\n  }\r\n  public isAuthenticated() {\r\n    return super.isAuthenticated();\r\n  }\r\n  public getToken() {\r\n    if (!Token.token) {\r\n      throw new MissingTokenError();\r\n    }\r\n    return Token.token;\r\n  }\r\n}\r\nexport default Token;\r\nexport class MissingTokenError extends Error {\r\n  constructor(message = 'Missing token!!') {\r\n    super(message);\r\n    this.name = 'MissingTokenError';\r\n  }\r\n}\r\n"],"mappings":"oCAEA,MAAMA,EAMJ,WAAAC,GAHQC,KAAAC,QAAU,oCAIhB,IAAKH,EAAKI,WAAY,CACpBF,KAAKG,M,EAGF,UAAMA,GACXC,EAAMC,SAASC,gBAAkB,KACjCF,EAAMC,SAASE,QAAUP,KAAKC,QAC9BH,EAAKI,WAAa,KAClB,MAAMM,KAAEA,SAAeJ,EAAMK,KAAK,4BAClCT,KAAKU,mBAAmBF,EAAKG,U,CAExB,SAAAC,CAAUC,GACff,EAAKgB,YAAYC,KAAKF,E,CAEjB,WAAAG,CAAYH,GACjBf,EAAKgB,YAAchB,EAAKgB,YAAYG,QAAOC,GAAOA,IAAQL,G,CAErD,kBAAAH,CAAmBS,GACxBrB,EAAKsB,iBAAmBD,EACxBrB,EAAKuB,kBAAkBF,E,CAGjB,wBAAOE,CAAkBC,GAC/BxB,EAAKgB,YAAYS,SAAQV,GAAYA,EAASS,I,CAEzC,eAAAA,GACL,OAAOxB,EAAKsB,gB,EAhCCtB,EAAAI,WAAa,MACbJ,EAAAsB,iBAAmB,MAEnBtB,EAAAgB,YAAyD,GCH1E,MAAMU,UAAc1B,EAKlB,WAAAC,GACE0B,O,CAcK,QAAAC,CAASC,GACdH,EAAMG,MAAQA,C,CAET,eAAAL,GACL,OAAOG,MAAMH,iB,CAER,QAAAM,GACL,IAAKJ,EAAMG,MAAO,CAChB,MAAM,IAAIE,C,CAEZ,OAAOL,EAAMG,K,EA7BAH,EAAAG,MAAuB,G,MAiC3BE,UAA0BC,MACrC,WAAA/B,CAAYgC,EAAU,mBACpBN,MAAMM,GACN/B,KAAKgC,KAAO,mB","ignoreList":[]}